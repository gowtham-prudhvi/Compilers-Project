Includes
Most operations
function declarations
fucnction calls
arrays
loops+case
string


*PROGRAM		: COMPSTMT

*COMPSTMT	: STMT (TERM EXPR)* [TERM]

*STMT		: EXPR

*EXPR		: MLHS `=` MRHS
		| return CALL_ARGS
		| EXPR and EXPR
		| EXPR or EXPR
		| not EXPR
		| COMMAND
		| `!` COMMAND
		| ARG

*CALL		: FUNCTION
                | COMMAND

*FUNCTION        : OPERATION [OPEN_BRACKET [CALL_ARGS] CLOSE_BRACKET]
		| PRIMARY `.` OPERATION OPEN_BRACKET [CALL_ARGS] CLOSE_BRACKET
		| PRIMARY `::` OPERATION OPEN_BRACKET [CALL_ARGS] CLOSE_BRACKET
		| PRIMARY `.` OPERATION
		| PRIMARY `::` OPERATION
		| super OPEN_BRACKET [CALL_ARGS] CLOSE_BRACKET
		| super

ARG		: LHS `=` ARG
		| LHS OP_ASGN ARG
		| ARG `..` ARG
		| ARG `...` ARG
		| ARG `+` ARG
		| ARG `-` ARG
		| ARG MULTIPLY ARG
		| ARG `/` ARG
		| ARG `%` ARG
		| ARG `**` ARG
		| `+` ARG
		| `-` ARG
		| ARG `|` ARG
		| ARG `^` ARG
		| ARG `&` ARG
		| ARG `<=>` ARG
		| ARG `>` ARG
		| ARG `>=` ARG
		| ARG `<` ARG
		| ARG `<=` ARG
		| ARG `==` ARG
		| ARG `===` ARG
		| ARG `!=` ARG
		| ARG `=~` ARG
		| ARG `!~` ARG
		| `!` ARG
		| `~` ARG
		| ARG `<<` ARG
		| ARG `>>` ARG
		| ARG `&&` ARG
		| ARG `||` ARG
		| PRIMARY

*PRIMARY		*: OPEN_BRACKET COMPSTMT CLOSE_BRACKET
		*| LITERAL
		*| VARIABLE
		*| PRIMARY `::` IDENTIFIER
		*| `::` IDENTIFIER
		*| PRIMARY `[` [ARGS] `]`
		*| `[` [ARGS [COMMA]] `]`
		*| return [OPEN_BRACKET [CALL_ARGS] CLOSE_BRACKET]
		*| FUNCTION `{` [`|` [BLOCK_VAR] `|`] COMPSTMT `}`
		*| if EXPR THEN
		  COMPSTMT
		  (elsif EXPR THEN COMPSTMT)*
		  [else COMPSTMT]
		  end
		*| while EXPR DO COMPSTMT end
		| case COMPSTMT
		  (when WHEN_ARGS THEN COMPSTMT)+
		  [else COMPSTMT]
		  end
		*| for BLOCK_VAR in EXPR DO
		  COMPSTMT
		  end
		*| def FNAME ARGDECL
		  COMPSTMT
		  end
		*| def SINGLETON (`.`|`::`) FNAME ARGDECL
		  COMPSTMT
		  end

*WHEN_ARGS	: ARGS [COMMA MULTIPLY ARG]
		| MULTIPLY ARG

*THEN		: TERM
		| then
		| TERM then

*DO		: TERM
		| do
		| TERM do

*BLOCK_VAR	: LHS
		| MLHS

*MLHS		: MLHS_ITEM COMMA [MLHS_ITEM (COMMA MLHS_ITEM)*] [MULTIPLY [LHS]]
                | MULTIPLY LHS

*MLHS_ITEM	: LHS
		| OPEN_BRACKET MLHS CLOSE_BRACKET

*LHS		: VARIABLE
		| PRIMARY `[` [ARGS] `]`
		| PRIMARY `.` IDENTIFIER

*MRHS		: ARGS [COMMA MULTIPLY ARG]
		| MULTIPLY ARG

*CALL_ARGS	: ARGS
		| ARGS [COMMA ASSOCS] [COMMA MULTIPLY ARG] [COMMA `&` ARG]
		| ASSOCS [COMMA MULTIPLY ARG] [COMMA `&` ARG]
		| MULTIPLY ARG [COMMA `&` ARG]
		| `&` ARG
		not done| COMMAND

*ARGS 		: ARG (COMMA ARG)*

*ARGDECL		: OPEN_BRACKET ARGLIST CLOSE_BRACKET
		| ARGLIST TERM

*ARGLIST		: IDENTIFIER(COMMAIDENTIFIER)*[COMMAMULTIPLY[IDENTIFIER]][COMMA`&`IDENTIFIER]
		| MULTIPLYIDENTIFIER[COMMA`&`IDENTIFIER]
		| [`&`IDENTIFIER]

*SINGLETON	: VARIABLE
		| OPEN_BRACKET EXPR CLOSE_BRACKET

*ASSOCS		: ASSOC (`,' ASSOC)*

*ASSOC		: ARG `=>' ARG

*VARIABLE	: VARNAME
		| nil
		| self

*LITERAL		: numeric
		| SYMBOL
		| STRING

*TERM		: `;`
		| `\n`

The followings are recognized by lexical analizer.


*OP_ASGN		: `+=` | `-=` | `*=` | `/=` | `%=` | `**=`
		| `&=` | `|=` | `^=` | `<<=` | `>>=`
		| `&&=` | `||=`

*SYMBOL		: `:`FNAME
		| `:`VARNAME

*FNAME		: IDENTIFIER | `..` | `|` | `^` | `&`
		| `<=>` | `==` | `===` | `=~`
                | `>` | `>=` | `<` | `<=`
		| `+` | `-` | MULTIPLY | `/` | `%` | `**`
		| `<<` | `>>` | `~`
                | `+@` | `-@` | `[]` | `[]=`

*OPERATION       : IDENTIFIER
                | IDENTIFIER`!`
                | IDENTIFIER`?`

*VARNAME		: GLOBAL
		| `@`IDENTIFIER
		| IDENTIFIER

*GLOBAL		: `$`IDENTIFIER
		| `$`any_char
		| `$``-`any_char

*STRING		: `"` any_char* `"`
		| ``` any_char* ```
		| ``` any_char* ```

IDENTIFIER is the sqeunce of characters in the pattern of /[a-zA-Z_][a-zA-Z0-9_]*/.

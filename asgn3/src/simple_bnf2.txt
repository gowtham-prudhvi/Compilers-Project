Includes
SOME operations
loops
strings


PROGRAM		: COMPSTMT

*COMPSTMT	: STMT (NEWLINE EXPR)* [NEWLINE]

*STMT		: EXPR

*EXPR		: ARG

*ARG	8N	: LHS `=` ARG
	7N	| ARG `..` ARG
	7N	| ARG `...` ARG
	4L	| ARG `+` ARG
	4L	| ARG `-` ARG
	3L	| ARG `*` ARG
	3L	| ARG `/` ARG
	3L	| ARG `%` ARG
	1R	| `+` ARG
	2R	| `-` ARG 
	5L	| ARG `>` ARG
	5L	| ARG `>=` ARG
	5L	| ARG `<` ARG
	5L	| ARG `<=` ARG
	6N	| ARG `==` ARG
		| PRIMARY

*PRIMARY		: `(` COMPSTMT `)`
		| LITERAL
		| VARIABLE
		| if EXPR THEN
		  COMPSTMT
		  (elsif EXPR THEN COMPSTMT)*
		  [else COMPSTMT]
		  end
		| while EXPR DO COMPSTMT end
		| for BLOCK_VAR in EXPR DO
		  COMPSTMT
		  end

*THEN		: NEWLINE
		| then
		| NEWLINE then

*DO		: NEWLINE
		| do
		| NEWLINE do

*BLOCK_VAR	: LHS



*LHS		: VARIABLE
		| PRIMARY `.` IDENTIFIER




*VARIABLE	: VARNAME
		| nil
		| self

*LITERAL		: numeric
		| SYMBOL
		| STRING

*NEWLINE		: `;`
		| `\n`




*SYMBOL		: `:`FNAME
		| `:`VARNAME

*FNAME		: IDENTIFIER | `..`  `==` | `>` | `>=` | `<` | `<=`
		| `+` | `-` | `*` | `/` | `%` 


*VARNAME		:`@`IDENTIFIER
		| IDENTIFIER

*STRING		: `"` any_char* `"`
		| ``` any_char* ```
		| ``` any_char* ```

IDENTIFIER is the sqeunce of characters in the pattern of /[a-zA-Z_][a-zA-Z0-9_]*/.

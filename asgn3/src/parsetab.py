
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BEGIN class ensure nil self when END def false not super while alias defined for or then yield and do if redo true begin else in rescue undef break elsif module retry unless case end next return until CONSTANT_RESOLUTION ELEMENT_REFERENCE ELEMENT_SET POWER SYMBOL_NOT COMPLEMENT MULTIPLY DIVIDE MODULO PLUS MINUS LEFT_SHIFT RIGHT_SHIFT BIT_AND BIT_OR BIT_XOR GREATER GREATER_EQUALS LESS LESS_EQUALS COMPARISON DOUBLE_EQUALS TRIPLE_EQUALS NOT_EQUALS EQUAL_TILDE BANG_TILDE LOGICAL_AND LOGICAL_OR INCL_RANGE EXCL_RANGE EQUALS MODULO_EQUALS DIVIDE_EQUALS MINUS_EQUALS PLUS_EQUALS OR_EQUALS AND_EQUALS XOR_EQUALS RIGHT_SHIFT_EQUALS LEFT_SHIFT_EQUALS MULTIPLY_EQUALS LOGICAL_AND_EQUALS LOGICAL_OR_EQUALS POWER_EQUALS WORD_NOT WORD_AND WORD_OR MAP PLUS_AT MINUS_AT IDENTIFIER FLOAT NUMBER GLOBAL STRING STRING2 HEREDOC REGEXP DOUBLE_QUOTE DOLLAR COLON QUESTION_MARK OPEN_BRACKET CLOSE_BRACKET OPEN_FLOWER CLOSE_FLOWER OPEN_SQUARE CLOSE_SQUARE COMMA DOT SEMI_COLON AT_THE_RATE NEWLINEcompstmt : stmt\n                | newline stmt \n                | stmt newline\n                | stmt newline expr\n                | stmt newline expr newline\n    stmt : exprexpr : argarg : lhs EQUALS arg\n            | arg\n    arg : term1 INCL_RANGE term1\n            | term1 EXCL_RANGE term1\n            | term1\n    term1 : term2 DOUBLE_EQUALS term2\n            | term2\n    term2 : term2 LESS term3\n            | term2 LESS_EQUALS term3\n            | term2 GREATER term3\n            | term2 GREATER_EQUALS term3\n            | term3\n    term3 : term3 PLUS term4\n            | term3 MINUS term4\n            | term4\n    term4 : term4 MULTIPLY term5\n            | term4 DIVIDE term5\n            | term4 MODULO term5\n            | term5\n    term5 : MINUS term5\n            | term6\n    term6 : PLUS term6\n            | primary\n    primary : OPEN_BRACKET compstmt CLOSE_BRACKET\n        | literal\n        | variable\n        | if expr pthen compstmt multelsif else compstmt end\n        | if expr pthen compstmt end\n        | while expr pdo compstmt end\n        | for blockvar in expr pdo compstmt end \n    multelsif : elsif expr pthen compstmt multelsif\n                 | empty\n    literal : NUMBER\n               | symbol\n               | STRING\n    singleton : variable\n               | OPEN_BRACKET expr CLOSE_BRACKET\n    variable : varname\n                | nil\n                | self\n    pthen : newline\n             | then\n             | newline then\n    pdo : newline\n           | do\n           | newline do\n    blockvar : lhs\n    opasgn : MODULO_EQUALS\n              | DIVIDE_EQUALS\n              | MINUS_EQUALS\n              | PLUS_EQUALS\n              | OR_EQUALS\n              | AND_EQUALS\n              | XOR_EQUALS\n              | RIGHT_SHIFT_EQUALS\n              | LEFT_SHIFT_EQUALS\n              | MULTIPLY_EQUALS\n              | LOGICAL_AND_EQUALS\n              | LOGICAL_OR_EQUALS\n              | POWER_EQUALS\n    symbol : COLON fname\n              | COLON varname\n    fname : IDENTIFIER\n             | INCL_RANGE\n             | BIT_OR\n             | BIT_XOR\n             | BIT_AND\n             | COMPARISON\n             | DOUBLE_EQUALS\n             | TRIPLE_EQUALS\n             | EQUAL_TILDE\n             | GREATER\n             | GREATER_EQUALS\n             | LESS\n             | LESS_EQUALS\n             | PLUS\n             | MINUS\n             | MULTIPLY\n             | DIVIDE\n             | MODULO\n             | POWER\n             | LEFT_SHIFT\n             | RIGHT_SHIFT\n             | COMPLEMENT\n             | PLUS_AT\n             | MINUS_AT\n             | ELEMENT_REFERENCE\n             | ELEMENT_SET\n    operation  : IDENTIFIER\n                | IDENTIFIER SYMBOL_NOT\n                | IDENTIFIER QUESTION_MARK\n    varname : GLOBAL \n              | AT_THE_RATE IDENTIFIER\n              | IDENTIFIER\n    lhs : variable\n           | primary DOT IDENTIFIER \n    newline : SEMI_COLON\n               | NEWLINE \n    empty :'
    
_lr_action_items = {'in':([4,9,20,27,29,32,39,79,80,104,],[-101,-102,-99,-47,-46,-45,-100,-54,100,-103,]),'GREATER':([2,3,4,5,9,11,13,14,16,17,19,20,22,27,29,32,33,34,35,36,39,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,89,90,91,92,93,94,95,96,97,98,99,119,120,127,130,],[-19,-28,-101,-42,-33,43,-41,-22,50,-40,-26,-99,-30,-47,-46,-45,-32,-27,-30,-33,-100,-79,-90,-87,-83,-74,-70,-78,-81,-93,-77,-71,-94,-75,-76,-82,-69,-89,-95,-91,-85,-72,-84,-80,-73,-68,-86,-88,-92,-29,-21,-20,-16,-15,-17,-18,43,-24,-23,-25,-31,-36,-35,-37,-34,]),'RIGHT_SHIFT':([16,],[51,]),'end':([2,3,4,5,7,9,10,11,13,14,17,19,20,22,24,25,27,29,30,31,32,33,34,35,36,39,40,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,86,89,90,91,92,93,94,95,96,97,98,99,108,109,110,111,113,115,117,119,120,124,127,128,130,],[-19,-28,-101,-42,-104,-33,-7,-14,-41,-22,-40,-26,-99,-30,-6,-105,-47,-46,-1,-12,-45,-32,-27,-30,-33,-100,-2,-79,-90,-87,-83,-74,-70,-78,-81,-93,-77,-71,-94,-75,-76,-82,-69,-89,-95,-91,-85,-72,-84,-80,-73,-68,-86,-88,-92,-29,-3,-21,-20,-16,-15,-17,-18,-13,-24,-23,-25,-31,-8,-4,-10,-11,119,120,-5,-36,-35,127,-37,130,-34,]),'IDENTIFIER':([0,1,6,7,8,15,16,18,21,23,25,26,37,38,41,42,43,44,45,46,47,48,82,85,86,87,88,100,101,102,103,105,106,107,114,116,118,123,125,129,],[4,4,39,-104,4,4,55,4,4,4,-105,4,4,4,4,4,4,4,4,4,4,4,104,4,4,4,4,4,-52,4,-51,4,-49,-48,-53,-50,4,4,4,4,]),'STRING':([0,1,7,8,15,18,21,23,25,26,37,38,41,42,43,44,45,46,47,48,85,86,87,88,100,101,102,103,105,106,107,114,116,118,123,125,129,],[5,5,-104,5,5,5,5,5,-105,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,-52,5,-51,5,-49,-48,-53,-50,5,5,5,5,]),'AT_THE_RATE':([0,1,7,8,15,16,18,21,23,25,26,37,38,41,42,43,44,45,46,47,48,85,86,87,88,100,101,102,103,105,106,107,114,116,118,123,125,129,],[6,6,-104,6,6,6,6,6,6,-105,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,-52,6,-51,6,-49,-48,-53,-50,6,6,6,6,]),'MINUS_AT':([16,],[58,]),'SEMI_COLON':([0,2,3,4,5,7,9,10,11,13,14,15,17,19,20,22,24,25,27,29,30,31,32,33,34,35,36,39,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,83,84,89,90,91,92,93,94,95,96,97,98,99,101,102,103,105,106,107,108,109,110,111,112,114,116,118,119,120,125,126,127,129,130,],[7,-19,-28,-101,-42,-104,-33,-7,-14,-41,-22,7,-40,-26,-99,-30,-6,-105,-47,-46,7,-12,-45,-32,-27,-30,-33,-100,-79,-90,-87,-83,-74,-70,-78,-81,-93,-77,-71,-94,-75,-76,-82,-69,-89,-95,-91,-85,-72,-84,-80,-73,-68,-86,-88,-92,7,-29,7,-21,-20,-16,-15,-17,-18,-13,-24,-23,-25,-31,-52,7,-51,7,-49,-48,-8,7,-10,-11,7,-53,-50,7,-36,-35,7,7,-37,7,-34,]),'TRIPLE_EQUALS':([16,],[59,]),'nil':([0,1,7,8,15,18,21,23,25,26,37,38,41,42,43,44,45,46,47,48,85,86,87,88,100,101,102,103,105,106,107,114,116,118,123,125,129,],[29,29,-104,29,29,29,29,29,-105,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-52,29,-51,29,-49,-48,-53,-50,29,29,29,29,]),'INCL_RANGE':([2,3,4,5,9,11,13,14,16,17,19,20,22,27,29,31,32,33,34,35,36,39,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,89,90,91,92,93,94,95,96,97,98,99,119,120,127,130,],[-19,-28,-101,-42,-33,-14,-41,-22,60,-40,-26,-99,-30,-47,-46,87,-45,-32,-27,-30,-33,-100,-79,-90,-87,-83,-74,-70,-78,-81,-93,-77,-71,-94,-75,-76,-82,-69,-89,-95,-91,-85,-72,-84,-80,-73,-68,-86,-88,-92,-29,-21,-20,-16,-15,-17,-18,-13,-24,-23,-25,-31,-36,-35,-37,-34,]),'elsif':([2,3,4,5,7,9,10,11,13,14,17,19,20,22,24,25,27,29,30,31,32,33,34,35,36,39,40,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,86,89,90,91,92,93,94,95,96,97,98,99,108,109,110,111,115,117,119,120,127,130,131,],[-19,-28,-101,-42,-104,-33,-7,-14,-41,-22,-40,-26,-99,-30,-6,-105,-47,-46,-1,-12,-45,-32,-27,-30,-33,-100,-2,-79,-90,-87,-83,-74,-70,-78,-81,-93,-77,-71,-94,-75,-76,-82,-69,-89,-95,-91,-85,-72,-84,-80,-73,-68,-86,-88,-92,-29,-3,-21,-20,-16,-15,-17,-18,-13,-24,-23,-25,-31,-8,-4,-10,-11,123,-5,-36,-35,-37,-34,123,]),'ELEMENT_REFERENCE':([16,],[61,]),'do':([2,3,4,5,7,9,10,11,13,14,17,19,20,22,25,27,29,31,32,33,34,35,36,39,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,83,89,90,91,92,93,94,95,96,97,98,99,103,108,110,111,112,119,120,127,130,],[-19,-28,-101,-42,-104,-33,-7,-14,-41,-22,-40,-26,-99,-30,-105,-47,-46,-12,-45,-32,-27,-30,-33,-100,-79,-90,-87,-83,-74,-70,-78,-81,-93,-77,-71,-94,-75,-76,-82,-69,-89,-95,-91,-85,-72,-84,-80,-73,-68,-86,-88,-92,101,-29,-21,-20,-16,-15,-17,-18,-13,-24,-23,-25,-31,114,-8,-10,-11,101,-36,-35,-37,-34,]),'EQUALS':([4,9,20,27,28,29,32,39,104,],[-101,-102,-99,-47,85,-46,-45,-100,-103,]),'else':([2,3,4,5,7,9,10,11,13,14,17,19,20,22,24,25,27,29,30,31,32,33,34,35,36,39,40,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,86,89,90,91,92,93,94,95,96,97,98,99,108,109,110,111,115,117,119,120,121,122,127,130,131,132,],[-19,-28,-101,-42,-104,-33,-7,-14,-41,-22,-40,-26,-99,-30,-6,-105,-47,-46,-1,-12,-45,-32,-27,-30,-33,-100,-2,-79,-90,-87,-83,-74,-70,-78,-81,-93,-77,-71,-94,-75,-76,-82,-69,-89,-95,-91,-85,-72,-84,-80,-73,-68,-86,-88,-92,-29,-3,-21,-20,-16,-15,-17,-18,-13,-24,-23,-25,-31,-8,-4,-10,-11,-106,-5,-36,-35,125,-39,-37,-34,-106,-38,]),'COMPLEMENT':([16,],[68,]),'COLON':([0,1,7,8,15,18,21,23,25,26,37,38,41,42,43,44,45,46,47,48,85,86,87,88,100,101,102,103,105,106,107,114,116,118,123,125,129,],[16,16,-104,16,16,16,16,16,-105,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-52,16,-51,16,-49,-48,-53,-50,16,16,16,16,]),'ELEMENT_SET':([16,],[67,]),'BIT_AND':([16,],[54,]),'OPEN_BRACKET':([0,1,7,8,15,18,21,23,25,26,37,38,41,42,43,44,45,46,47,48,85,86,87,88,100,101,102,103,105,106,107,114,116,118,123,125,129,],[15,15,-104,15,15,15,15,15,-105,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-52,15,-51,15,-49,-48,-53,-50,15,15,15,15,]),'BIT_XOR':([16,],[73,]),'NUMBER':([0,1,7,8,15,18,21,23,25,26,37,38,41,42,43,44,45,46,47,48,85,86,87,88,100,101,102,103,105,106,107,114,116,118,123,125,129,],[17,17,-104,17,17,17,17,17,-105,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-52,17,-51,17,-49,-48,-53,-50,17,17,17,17,]),'DIVIDE':([3,4,5,9,13,14,16,17,19,20,22,27,29,32,33,34,35,36,39,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,89,90,96,97,98,99,119,120,127,130,],[-28,-101,-42,-33,-41,46,75,-40,-26,-99,-30,-47,-46,-45,-32,-27,-30,-33,-100,-79,-90,-87,-83,-74,-70,-78,-81,-93,-77,-71,-94,-75,-76,-82,-69,-89,-95,-91,-85,-72,-84,-80,-73,-68,-86,-88,-92,-29,46,46,-24,-23,-25,-31,-36,-35,-37,-34,]),'DOUBLE_EQUALS':([2,3,4,5,9,11,13,14,16,17,19,20,22,27,29,32,33,34,35,36,39,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,89,90,91,92,93,94,96,97,98,99,119,120,127,130,],[-19,-28,-101,-42,-33,45,-41,-22,63,-40,-26,-99,-30,-47,-46,-45,-32,-27,-30,-33,-100,-79,-90,-87,-83,-74,-70,-78,-81,-93,-77,-71,-94,-75,-76,-82,-69,-89,-95,-91,-85,-72,-84,-80,-73,-68,-86,-88,-92,-29,-21,-20,-16,-15,-17,-18,-24,-23,-25,-31,-36,-35,-37,-34,]),'GLOBAL':([0,1,7,8,15,16,18,21,23,25,26,37,38,41,42,43,44,45,46,47,48,85,86,87,88,100,101,102,103,105,106,107,114,116,118,123,125,129,],[20,20,-104,20,20,20,20,20,20,-105,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-52,20,-51,20,-49,-48,-53,-50,20,20,20,20,]),'while':([0,1,7,8,15,18,21,23,25,26,37,38,41,42,43,44,45,46,47,48,85,86,87,88,100,101,102,103,105,106,107,114,116,118,123,125,129,],[21,21,-104,21,21,21,21,21,-105,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-52,21,-51,21,-49,-48,-53,-50,21,21,21,21,]),'MODULO':([3,4,5,9,13,14,16,17,19,20,22,27,29,32,33,34,35,36,39,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,89,90,96,97,98,99,119,120,127,130,],[-28,-101,-42,-33,-41,48,52,-40,-26,-99,-30,-47,-46,-45,-32,-27,-30,-33,-100,-79,-90,-87,-83,-74,-70,-78,-81,-93,-77,-71,-94,-75,-76,-82,-69,-89,-95,-91,-85,-72,-84,-80,-73,-68,-86,-88,-92,-29,48,48,-24,-23,-25,-31,-36,-35,-37,-34,]),'PLUS':([0,1,2,3,4,5,7,8,9,13,14,15,16,17,19,20,21,22,23,25,26,27,29,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,102,103,105,106,107,114,116,118,119,120,123,125,127,129,130,],[23,23,38,-28,-101,-42,-104,23,-33,-41,-22,23,53,-40,-26,-99,23,-30,23,-105,23,-47,-46,-45,-32,-27,-30,-33,23,23,-100,23,23,23,23,23,23,23,23,-79,-90,-87,-83,-74,-70,-78,-81,-93,-77,-71,-94,-75,-76,-82,-69,-89,-95,-91,-85,-72,-84,-80,-73,-68,-86,-88,-92,-29,23,23,23,23,-21,-20,38,38,38,38,-24,-23,-25,-31,23,-52,23,-51,23,-49,-48,-53,-50,23,-36,-35,23,23,-37,23,-34,]),'then':([2,3,4,5,7,9,10,11,13,14,17,19,20,22,25,27,29,31,32,33,34,35,36,39,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,84,89,90,91,92,93,94,95,96,97,98,99,107,108,110,111,119,120,126,127,130,],[-19,-28,-101,-42,-104,-33,-7,-14,-41,-22,-40,-26,-99,-30,-105,-47,-46,-12,-45,-32,-27,-30,-33,-100,-79,-90,-87,-83,-74,-70,-78,-81,-93,-77,-71,-94,-75,-76,-82,-69,-89,-95,-91,-85,-72,-84,-80,-73,-68,-86,-88,-92,-29,106,-21,-20,-16,-15,-17,-18,-13,-24,-23,-25,-31,116,-8,-10,-11,-36,-35,106,-37,-34,]),'$end':([2,3,4,5,7,9,10,11,12,13,14,17,19,20,22,24,25,27,29,30,31,32,33,34,35,36,39,40,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,86,89,90,91,92,93,94,95,96,97,98,99,108,109,110,111,117,119,120,127,130,],[-19,-28,-101,-42,-104,-33,-7,-14,0,-41,-22,-40,-26,-99,-30,-6,-105,-47,-46,-1,-12,-45,-32,-27,-30,-33,-100,-2,-79,-90,-87,-83,-74,-70,-78,-81,-93,-77,-71,-94,-75,-76,-82,-69,-89,-95,-91,-85,-72,-84,-80,-73,-68,-86,-88,-92,-29,-3,-21,-20,-16,-15,-17,-18,-13,-24,-23,-25,-31,-8,-4,-10,-11,-5,-36,-35,-37,-34,]),'NEWLINE':([0,2,3,4,5,7,9,10,11,13,14,15,17,19,20,22,24,25,27,29,30,31,32,33,34,35,36,39,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,83,84,89,90,91,92,93,94,95,96,97,98,99,101,102,103,105,106,107,108,109,110,111,112,114,116,118,119,120,125,126,127,129,130,],[25,-19,-28,-101,-42,-104,-33,-7,-14,-41,-22,25,-40,-26,-99,-30,-6,-105,-47,-46,25,-12,-45,-32,-27,-30,-33,-100,-79,-90,-87,-83,-74,-70,-78,-81,-93,-77,-71,-94,-75,-76,-82,-69,-89,-95,-91,-85,-72,-84,-80,-73,-68,-86,-88,-92,25,-29,25,-21,-20,-16,-15,-17,-18,-13,-24,-23,-25,-31,-52,25,-51,25,-49,-48,-8,25,-10,-11,25,-53,-50,25,-36,-35,25,25,-37,25,-34,]),'if':([0,1,7,8,15,18,21,23,25,26,37,38,41,42,43,44,45,46,47,48,85,86,87,88,100,101,102,103,105,106,107,114,116,118,123,125,129,],[26,26,-104,26,26,26,26,26,-105,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-52,26,-51,26,-49,-48,-53,-50,26,26,26,26,]),'self':([0,1,7,8,15,18,21,23,25,26,37,38,41,42,43,44,45,46,47,48,85,86,87,88,100,101,102,103,105,106,107,114,116,118,123,125,129,],[27,27,-104,27,27,27,27,27,-105,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-52,27,-51,27,-49,-48,-53,-50,27,27,27,27,]),'EQUAL_TILDE':([16,],[56,]),'EXCL_RANGE':([2,3,4,5,9,11,13,14,17,19,20,22,27,29,31,32,33,34,35,36,39,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,89,90,91,92,93,94,95,96,97,98,99,119,120,127,130,],[-19,-28,-101,-42,-33,-14,-41,-22,-40,-26,-99,-30,-47,-46,88,-45,-32,-27,-30,-33,-100,-79,-90,-87,-83,-74,-70,-78,-81,-93,-77,-71,-94,-75,-76,-82,-69,-89,-95,-91,-85,-72,-84,-80,-73,-68,-86,-88,-92,-29,-21,-20,-16,-15,-17,-18,-13,-24,-23,-25,-31,-36,-35,-37,-34,]),'LESS':([2,3,4,5,9,11,13,14,16,17,19,20,22,27,29,32,33,34,35,36,39,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,89,90,91,92,93,94,95,96,97,98,99,119,120,127,130,],[-19,-28,-101,-42,-33,42,-41,-22,57,-40,-26,-99,-30,-47,-46,-45,-32,-27,-30,-33,-100,-79,-90,-87,-83,-74,-70,-78,-81,-93,-77,-71,-94,-75,-76,-82,-69,-89,-95,-91,-85,-72,-84,-80,-73,-68,-86,-88,-92,-29,-21,-20,-16,-15,-17,-18,42,-24,-23,-25,-31,-36,-35,-37,-34,]),'CLOSE_BRACKET':([2,3,4,5,7,9,10,11,13,14,17,19,20,22,24,25,27,29,30,31,32,33,34,35,36,39,40,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,86,89,90,91,92,93,94,95,96,97,98,99,108,109,110,111,117,119,120,127,130,],[-19,-28,-101,-42,-104,-33,-7,-14,-41,-22,-40,-26,-99,-30,-6,-105,-47,-46,-1,-12,-45,-32,-27,-30,-33,-100,-2,99,-79,-90,-87,-83,-74,-70,-78,-81,-93,-77,-71,-94,-75,-76,-82,-69,-89,-95,-91,-85,-72,-84,-80,-73,-68,-86,-88,-92,-29,-3,-21,-20,-16,-15,-17,-18,-13,-24,-23,-25,-31,-8,-4,-10,-11,-5,-36,-35,-37,-34,]),'POWER':([16,],[76,]),'LESS_EQUALS':([2,3,4,5,9,11,13,14,16,17,19,20,22,27,29,32,33,34,35,36,39,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,89,90,91,92,93,94,95,96,97,98,99,119,120,127,130,],[-19,-28,-101,-42,-33,41,-41,-22,64,-40,-26,-99,-30,-47,-46,-45,-32,-27,-30,-33,-100,-79,-90,-87,-83,-74,-70,-78,-81,-93,-77,-71,-94,-75,-76,-82,-69,-89,-95,-91,-85,-72,-84,-80,-73,-68,-86,-88,-92,-29,-21,-20,-16,-15,-17,-18,41,-24,-23,-25,-31,-36,-35,-37,-34,]),'for':([0,1,7,8,15,18,21,23,25,26,37,38,41,42,43,44,45,46,47,48,85,86,87,88,100,101,102,103,105,106,107,114,116,118,123,125,129,],[18,18,-104,18,18,18,18,18,-105,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-52,18,-51,18,-49,-48,-53,-50,18,18,18,18,]),'LEFT_SHIFT':([16,],[66,]),'MULTIPLY':([3,4,5,9,13,14,16,17,19,20,22,27,29,32,33,34,35,36,39,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,89,90,96,97,98,99,119,120,127,130,],[-28,-101,-42,-33,-41,47,69,-40,-26,-99,-30,-47,-46,-45,-32,-27,-30,-33,-100,-79,-90,-87,-83,-74,-70,-78,-81,-93,-77,-71,-94,-75,-76,-82,-69,-89,-95,-91,-85,-72,-84,-80,-73,-68,-86,-88,-92,-29,47,47,-24,-23,-25,-31,-36,-35,-37,-34,]),'BIT_OR':([16,],[70,]),'MINUS':([0,1,2,3,4,5,7,8,9,13,14,15,16,17,19,20,21,22,25,26,27,29,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,102,103,105,106,107,114,116,118,119,120,123,125,127,129,130,],[1,1,37,-28,-101,-42,-104,1,-33,-41,-22,1,71,-40,-26,-99,1,-30,-105,1,-47,-46,-45,-32,-27,-30,-33,1,1,-100,1,1,1,1,1,1,1,1,-79,-90,-87,-83,-74,-70,-78,-81,-93,-77,-71,-94,-75,-76,-82,-69,-89,-95,-91,-85,-72,-84,-80,-73,-68,-86,-88,-92,-29,1,1,1,1,-21,-20,37,37,37,37,-24,-23,-25,-31,1,-52,1,-51,1,-49,-48,-53,-50,1,-36,-35,1,1,-37,1,-34,]),'GREATER_EQUALS':([2,3,4,5,9,11,13,14,16,17,19,20,22,27,29,32,33,34,35,36,39,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,89,90,91,92,93,94,95,96,97,98,99,119,120,127,130,],[-19,-28,-101,-42,-33,44,-41,-22,72,-40,-26,-99,-30,-47,-46,-45,-32,-27,-30,-33,-100,-79,-90,-87,-83,-74,-70,-78,-81,-93,-77,-71,-94,-75,-76,-82,-69,-89,-95,-91,-85,-72,-84,-80,-73,-68,-86,-88,-92,-29,-21,-20,-16,-15,-17,-18,44,-24,-23,-25,-31,-36,-35,-37,-34,]),'COMPARISON':([16,],[62,]),'PLUS_AT':([16,],[77,]),'DOT':([4,5,9,13,17,20,22,27,29,32,33,39,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,99,119,120,127,130,],[-101,-42,-33,-41,-40,-99,82,-47,-46,-45,-32,-100,-79,-90,-87,-83,-74,-70,-78,-81,-93,-77,-71,-94,-75,-76,-82,-69,-89,-95,-91,-85,-72,-84,-80,-73,-68,-86,-88,-92,82,-31,-36,-35,-37,-34,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'term5':([0,1,8,15,21,26,37,38,41,42,43,44,45,46,47,48,85,86,87,88,100,102,105,118,123,125,129,],[19,34,19,19,19,19,19,19,19,19,19,19,19,96,97,98,19,19,19,19,19,19,19,19,19,19,19,]),'term3':([0,8,15,21,26,41,42,43,44,45,85,86,87,88,100,102,105,118,123,125,129,],[2,2,2,2,2,91,92,93,94,2,2,2,2,2,2,2,2,2,2,2,2,]),'term6':([0,1,8,15,21,23,26,37,38,41,42,43,44,45,46,47,48,85,86,87,88,100,102,105,118,123,125,129,],[3,3,3,3,3,83,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'expr':([0,8,15,21,26,86,100,102,105,118,123,125,129,],[24,24,24,81,84,109,112,24,24,24,126,24,24,]),'pthen':([84,126,],[105,129,]),'lhs':([0,8,15,18,21,26,85,86,100,102,105,118,123,125,129,],[28,28,28,79,28,28,28,28,28,28,28,28,28,28,28,]),'multelsif':([115,131,],[121,132,]),'term1':([0,8,15,21,26,85,86,87,88,100,102,105,118,123,125,129,],[31,31,31,31,31,31,31,110,111,31,31,31,31,31,31,31,]),'newline':([0,15,30,81,84,102,105,109,112,118,125,126,129,],[8,8,86,103,107,8,8,117,103,8,8,107,8,]),'blockvar':([18,],[80,]),'variable':([0,1,8,15,18,21,23,26,37,38,41,42,43,44,45,46,47,48,85,86,87,88,100,102,105,118,123,125,129,],[9,36,9,9,9,9,36,9,36,36,36,36,36,36,36,36,36,36,9,9,36,36,9,9,9,9,9,9,9,]),'arg':([0,8,15,21,26,85,86,100,102,105,118,123,125,129,],[10,10,10,10,10,108,10,10,10,10,10,10,10,10,]),'primary':([0,1,8,15,18,21,23,26,37,38,41,42,43,44,45,46,47,48,85,86,87,88,100,102,105,118,123,125,129,],[22,35,22,22,78,22,35,22,35,35,35,35,35,35,35,35,35,35,22,22,35,35,22,22,22,22,22,22,22,]),'empty':([115,131,],[122,122,]),'stmt':([0,8,15,102,105,118,125,129,],[30,40,30,30,30,30,30,30,]),'symbol':([0,1,8,15,18,21,23,26,37,38,41,42,43,44,45,46,47,48,85,86,87,88,100,102,105,118,123,125,129,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'term4':([0,8,15,21,26,37,38,41,42,43,44,45,85,86,87,88,100,102,105,118,123,125,129,],[14,14,14,14,14,89,90,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'varname':([0,1,8,15,16,18,21,23,26,37,38,41,42,43,44,45,46,47,48,85,86,87,88,100,102,105,118,123,125,129,],[32,32,32,32,65,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'term2':([0,8,15,21,26,45,85,86,87,88,100,102,105,118,123,125,129,],[11,11,11,11,11,95,11,11,11,11,11,11,11,11,11,11,11,]),'compstmt':([0,15,102,105,118,125,129,],[12,49,113,115,124,128,131,]),'literal':([0,1,8,15,18,21,23,26,37,38,41,42,43,44,45,46,47,48,85,86,87,88,100,102,105,118,123,125,129,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'fname':([16,],[74,]),'pdo':([81,112,],[102,118,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> compstmt","S'",1,None,None,None),
  ('compstmt -> stmt','compstmt',1,'p_compstmt','parser.py',20),
  ('compstmt -> newline stmt','compstmt',2,'p_compstmt','parser.py',21),
  ('compstmt -> stmt newline','compstmt',2,'p_compstmt','parser.py',22),
  ('compstmt -> stmt newline expr','compstmt',3,'p_compstmt','parser.py',23),
  ('compstmt -> stmt newline expr newline','compstmt',4,'p_compstmt','parser.py',24),
  ('stmt -> expr','stmt',1,'p_stmt','parser.py',32),
  ('expr -> arg','expr',1,'p_expr','parser.py',36),
  ('arg -> lhs EQUALS arg','arg',3,'p_arg_equals','parser.py',40),
  ('arg -> arg','arg',1,'p_arg_equals','parser.py',41),
  ('arg -> term1 INCL_RANGE term1','arg',3,'p_arg_range','parser.py',49),
  ('arg -> term1 EXCL_RANGE term1','arg',3,'p_arg_range','parser.py',50),
  ('arg -> term1','arg',1,'p_arg_range','parser.py',51),
  ('term1 -> term2 DOUBLE_EQUALS term2','term1',3,'p_term1','parser.py',59),
  ('term1 -> term2','term1',1,'p_term1','parser.py',60),
  ('term2 -> term2 LESS term3','term2',3,'p_term2','parser.py',68),
  ('term2 -> term2 LESS_EQUALS term3','term2',3,'p_term2','parser.py',69),
  ('term2 -> term2 GREATER term3','term2',3,'p_term2','parser.py',70),
  ('term2 -> term2 GREATER_EQUALS term3','term2',3,'p_term2','parser.py',71),
  ('term2 -> term3','term2',1,'p_term2','parser.py',72),
  ('term3 -> term3 PLUS term4','term3',3,'p_term3','parser.py',80),
  ('term3 -> term3 MINUS term4','term3',3,'p_term3','parser.py',81),
  ('term3 -> term4','term3',1,'p_term3','parser.py',82),
  ('term4 -> term4 MULTIPLY term5','term4',3,'p_term4','parser.py',90),
  ('term4 -> term4 DIVIDE term5','term4',3,'p_term4','parser.py',91),
  ('term4 -> term4 MODULO term5','term4',3,'p_term4','parser.py',92),
  ('term4 -> term5','term4',1,'p_term4','parser.py',93),
  ('term5 -> MINUS term5','term5',2,'p_term5','parser.py',101),
  ('term5 -> term6','term5',1,'p_term5','parser.py',102),
  ('term6 -> PLUS term6','term6',2,'p_term6','parser.py',110),
  ('term6 -> primary','term6',1,'p_term6','parser.py',111),
  ('primary -> OPEN_BRACKET compstmt CLOSE_BRACKET','primary',3,'p_primary','parser.py',119),
  ('primary -> literal','primary',1,'p_primary','parser.py',120),
  ('primary -> variable','primary',1,'p_primary','parser.py',121),
  ('primary -> if expr pthen compstmt multelsif else compstmt end','primary',8,'p_primary','parser.py',122),
  ('primary -> if expr pthen compstmt end','primary',5,'p_primary','parser.py',123),
  ('primary -> while expr pdo compstmt end','primary',5,'p_primary','parser.py',124),
  ('primary -> for blockvar in expr pdo compstmt end','primary',7,'p_primary','parser.py',125),
  ('multelsif -> elsif expr pthen compstmt multelsif','multelsif',5,'p_multelsif','parser.py',133),
  ('multelsif -> empty','multelsif',1,'p_multelsif','parser.py',134),
  ('literal -> NUMBER','literal',1,'p_literal','parser.py',142),
  ('literal -> symbol','literal',1,'p_literal','parser.py',143),
  ('literal -> STRING','literal',1,'p_literal','parser.py',144),
  ('singleton -> variable','singleton',1,'p_singleton','parser.py',151),
  ('singleton -> OPEN_BRACKET expr CLOSE_BRACKET','singleton',3,'p_singleton','parser.py',152),
  ('variable -> varname','variable',1,'p_variable','parser.py',160),
  ('variable -> nil','variable',1,'p_variable','parser.py',161),
  ('variable -> self','variable',1,'p_variable','parser.py',162),
  ('pthen -> newline','pthen',1,'p_pthen','parser.py',170),
  ('pthen -> then','pthen',1,'p_pthen','parser.py',171),
  ('pthen -> newline then','pthen',2,'p_pthen','parser.py',172),
  ('pdo -> newline','pdo',1,'p_pdo','parser.py',180),
  ('pdo -> do','pdo',1,'p_pdo','parser.py',181),
  ('pdo -> newline do','pdo',2,'p_pdo','parser.py',182),
  ('blockvar -> lhs','blockvar',1,'p_blockvar','parser.py',190),
  ('opasgn -> MODULO_EQUALS','opasgn',1,'p_opasgn','parser.py',198),
  ('opasgn -> DIVIDE_EQUALS','opasgn',1,'p_opasgn','parser.py',199),
  ('opasgn -> MINUS_EQUALS','opasgn',1,'p_opasgn','parser.py',200),
  ('opasgn -> PLUS_EQUALS','opasgn',1,'p_opasgn','parser.py',201),
  ('opasgn -> OR_EQUALS','opasgn',1,'p_opasgn','parser.py',202),
  ('opasgn -> AND_EQUALS','opasgn',1,'p_opasgn','parser.py',203),
  ('opasgn -> XOR_EQUALS','opasgn',1,'p_opasgn','parser.py',204),
  ('opasgn -> RIGHT_SHIFT_EQUALS','opasgn',1,'p_opasgn','parser.py',205),
  ('opasgn -> LEFT_SHIFT_EQUALS','opasgn',1,'p_opasgn','parser.py',206),
  ('opasgn -> MULTIPLY_EQUALS','opasgn',1,'p_opasgn','parser.py',207),
  ('opasgn -> LOGICAL_AND_EQUALS','opasgn',1,'p_opasgn','parser.py',208),
  ('opasgn -> LOGICAL_OR_EQUALS','opasgn',1,'p_opasgn','parser.py',209),
  ('opasgn -> POWER_EQUALS','opasgn',1,'p_opasgn','parser.py',210),
  ('symbol -> COLON fname','symbol',2,'p_symbol','parser.py',217),
  ('symbol -> COLON varname','symbol',2,'p_symbol','parser.py',218),
  ('fname -> IDENTIFIER','fname',1,'p_fname','parser.py',226),
  ('fname -> INCL_RANGE','fname',1,'p_fname','parser.py',227),
  ('fname -> BIT_OR','fname',1,'p_fname','parser.py',228),
  ('fname -> BIT_XOR','fname',1,'p_fname','parser.py',229),
  ('fname -> BIT_AND','fname',1,'p_fname','parser.py',230),
  ('fname -> COMPARISON','fname',1,'p_fname','parser.py',231),
  ('fname -> DOUBLE_EQUALS','fname',1,'p_fname','parser.py',232),
  ('fname -> TRIPLE_EQUALS','fname',1,'p_fname','parser.py',233),
  ('fname -> EQUAL_TILDE','fname',1,'p_fname','parser.py',234),
  ('fname -> GREATER','fname',1,'p_fname','parser.py',235),
  ('fname -> GREATER_EQUALS','fname',1,'p_fname','parser.py',236),
  ('fname -> LESS','fname',1,'p_fname','parser.py',237),
  ('fname -> LESS_EQUALS','fname',1,'p_fname','parser.py',238),
  ('fname -> PLUS','fname',1,'p_fname','parser.py',239),
  ('fname -> MINUS','fname',1,'p_fname','parser.py',240),
  ('fname -> MULTIPLY','fname',1,'p_fname','parser.py',241),
  ('fname -> DIVIDE','fname',1,'p_fname','parser.py',242),
  ('fname -> MODULO','fname',1,'p_fname','parser.py',243),
  ('fname -> POWER','fname',1,'p_fname','parser.py',244),
  ('fname -> LEFT_SHIFT','fname',1,'p_fname','parser.py',245),
  ('fname -> RIGHT_SHIFT','fname',1,'p_fname','parser.py',246),
  ('fname -> COMPLEMENT','fname',1,'p_fname','parser.py',247),
  ('fname -> PLUS_AT','fname',1,'p_fname','parser.py',248),
  ('fname -> MINUS_AT','fname',1,'p_fname','parser.py',249),
  ('fname -> ELEMENT_REFERENCE','fname',1,'p_fname','parser.py',250),
  ('fname -> ELEMENT_SET','fname',1,'p_fname','parser.py',251),
  ('operation -> IDENTIFIER','operation',1,'p_operation','parser.py',259),
  ('operation -> IDENTIFIER SYMBOL_NOT','operation',2,'p_operation','parser.py',260),
  ('operation -> IDENTIFIER QUESTION_MARK','operation',2,'p_operation','parser.py',261),
  ('varname -> GLOBAL','varname',1,'p_varname','parser.py',269),
  ('varname -> AT_THE_RATE IDENTIFIER','varname',2,'p_varname','parser.py',270),
  ('varname -> IDENTIFIER','varname',1,'p_varname','parser.py',271),
  ('lhs -> variable','lhs',1,'p_lhs','parser.py',279),
  ('lhs -> primary DOT IDENTIFIER','lhs',3,'p_lhs','parser.py',280),
  ('newline -> SEMI_COLON','newline',1,'p_newline','parser.py',288),
  ('newline -> NEWLINE','newline',1,'p_newline','parser.py',289),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',299),
]

Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    PLUS_AT
    undef
    STRING2
    WORD_OR
    rescue
    COMPLEMENT
    not
    yield
    SYMBOL_NOT
    module
    LOGICAL_AND
    ELEMENT_REFERENCE
    BEGIN
    retry
    COLON
    END
    REGEXP
    super
    ensure
    or
    DOUBLE_QUOTE
    ELEMENT_SET
    next
    redo
    WORD_AND
    QUESTION_MARK
    HEREDOC
    and
    defined
    MINUS_AT
    WORD_NOT
    begin
    unless
    DOLLAR
    alias

Grammar

Rule 0     S' -> compstmt
Rule 1     compstmt -> multcompstmt
Rule 2     multcompstmt -> newline stmt multcompstmt
Rule 3     multcompstmt -> stmt multcompstmt
Rule 4     multcompstmt -> newline
Rule 5     multcompstmt -> empty
Rule 6     stmt -> def IDENTIFIER argdecl compstmt end
Rule 7     stmt -> def singleton DOT IDENTIFIER argdecl compstmt end
Rule 8     stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end
Rule 9     stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end
Rule 10    stmt -> class IDENTIFIER compstmt end
Rule 11    stmt -> break
Rule 12    stmt -> expr
Rule 13    expr -> if expr1 pthen compstmt end
Rule 14    expr -> if expr1 pthen compstmt multelsif else compstmt end
Rule 15    expr -> while expr1 pdo compstmt end
Rule 16    expr -> until expr1 pdo compstmt end
Rule 17    expr -> case compstmt multcase else compstmt end
Rule 18    expr -> case compstmt multcase end
Rule 19    expr -> for mlhs in expr1 pdo compstmt end
Rule 20    expr -> expr1
Rule 21    expr1 -> return callargs
Rule 22    expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET
Rule 23    expr1 -> return OPEN_BRACKET CLOSE_BRACKET
Rule 24    expr1 -> return
Rule 25    expr1 -> expr2
Rule 26    expr2 -> call
Rule 27    expr2 -> arg
Rule 28    call -> function
Rule 29    function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
Rule 30    function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
Rule 31    function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
Rule 32    function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
Rule 33    function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
Rule 34    function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
Rule 35    function -> primary DOT IDENTIFIER
Rule 36    function -> primary CONSTANT_RESOLUTION IDENTIFIER
Rule 37    arg -> arg BIT_OR term0
Rule 38    arg -> term0
Rule 39    term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
Rule 40    term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
Rule 41    term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
Rule 42    term0 -> term1
Rule 43    term1 -> mlhs EQUALS mrhs
Rule 44    term1 -> mlhs opasgn mrhs
Rule 45    term1 -> term2
Rule 46    term2 -> term3 INCL_RANGE term3
Rule 47    term2 -> term3 EXCL_RANGE term3
Rule 48    term2 -> term3
Rule 49    term3 -> term3 LOGICAL_OR term4
Rule 50    term3 -> term4
Rule 51    term4 -> term5 DOUBLE_EQUALS term5
Rule 52    term4 -> term5 TRIPLE_EQUALS term5
Rule 53    term4 -> term5 NOT_EQUALS term5
Rule 54    term4 -> term5 EQUAL_TILDE term5
Rule 55    term4 -> term5 BANG_TILDE term5
Rule 56    term4 -> term5 COMPARISON term5
Rule 57    term4 -> term5
Rule 58    term5 -> term5 LESS term6
Rule 59    term5 -> term5 LESS_EQUALS term6
Rule 60    term5 -> term5 GREATER term6
Rule 61    term5 -> term5 GREATER_EQUALS term6
Rule 62    term5 -> term6
Rule 63    term6 -> term6 BIT_XOR term7
Rule 64    term6 -> term7
Rule 65    term7 -> term7 BIT_AND term8
Rule 66    term7 -> term8
Rule 67    term8 -> term8 LEFT_SHIFT term9
Rule 68    term8 -> term8 RIGHT_SHIFT term9
Rule 69    term8 -> term9
Rule 70    term9 -> term9 PLUS term10
Rule 71    term9 -> term9 MINUS term10
Rule 72    term9 -> term10
Rule 73    term10 -> term10 MULTIPLY term11
Rule 74    term10 -> term10 DIVIDE term11
Rule 75    term10 -> term10 MODULO term11
Rule 76    term10 -> term11
Rule 77    term11 -> MINUS term11
Rule 78    term11 -> term12
Rule 79    term12 -> PLUS term12
Rule 80    term12 -> term13
Rule 81    term13 -> primary POWER term13
Rule 82    term13 -> primary
Rule 83    primary -> OPEN_BRACKET expr2 CLOSE_BRACKET
Rule 84    primary -> variable CONSTANT_RESOLUTION IDENTIFIER
Rule 85    primary -> CONSTANT_RESOLUTION IDENTIFIER
Rule 86    primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE
Rule 87    primary -> OPEN_SQUARE args CLOSE_SQUARE
Rule 88    primary -> OPEN_SQUARE CLOSE_SQUARE
Rule 89    primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER
Rule 90    primary -> OPEN_FLOWER args CLOSE_FLOWER
Rule 91    primary -> OPEN_FLOWER CLOSE_FLOWER
Rule 92    primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER
Rule 93    primary -> OPEN_FLOWER assocs CLOSE_FLOWER
Rule 94    primary -> literal
Rule 95    primary -> lhs
Rule 96    multcase -> when whenargs pthen compstmt multcase
Rule 97    multcase -> when whenargs pthen compstmt
Rule 98    multelsif -> elsif expr pthen compstmt multelsif
Rule 99    multelsif -> empty
Rule 100   literal -> NUMBER
Rule 101   literal -> FLOAT
Rule 102   literal -> STRING
Rule 103   literal -> true
Rule 104   literal -> false
Rule 105   whenargs -> args COMMA MULTIPLY arg
Rule 106   whenargs -> args
Rule 107   whenargs -> MULTIPLY arg
Rule 108   mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
Rule 109   mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY
Rule 110   mlhs -> mlhsitem COMMA mlhsitem multmlhs
Rule 111   mlhs -> mlhsitem COMMA MULTIPLY lhs
Rule 112   mlhs -> mlhsitem COMMA MULTIPLY
Rule 113   mlhs -> mlhsitem COMMA
Rule 114   mlhs -> mlhsitem
Rule 115   multmlhs -> COMMA mlhsitem multmlhs
Rule 116   multmlhs -> empty
Rule 117   mlhsitem -> lhs
Rule 118   mlhsitem -> OPEN_BRACKET mlhs CLOSE_BRACKET
Rule 119   lhs -> variable
Rule 120   lhs -> variable OPEN_SQUARE args CLOSE_SQUARE
Rule 121   lhs -> variable OPEN_SQUARE CLOSE_SQUARE
Rule 122   lhs -> variable DOT IDENTIFIER
Rule 123   mrhs -> args
Rule 124   mrhs -> args COMMA MULTIPLY arg
Rule 125   mrhs -> MULTIPLY arg
Rule 126   callargs -> args
Rule 127   callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg
Rule 128   callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg
Rule 129   callargs -> args COMMA assocs COMMA BIT_AND arg
Rule 130   callargs -> args COMMA assocs COMMA MULTIPLY arg
Rule 131   callargs -> args COMMA assocs
Rule 132   callargs -> args COMMA MULTIPLY arg
Rule 133   callargs -> args COMMA BIT_AND arg
Rule 134   callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg
Rule 135   callargs -> assocs COMMA MULTIPLY arg
Rule 136   callargs -> assocs COMMA BIT_AND arg
Rule 137   callargs -> assocs
Rule 138   callargs -> MULTIPLY arg COMMA BIT_AND arg
Rule 139   callargs -> BIT_AND arg
Rule 140   args -> arg multargs
Rule 141   multargs -> COMMA arg multargs
Rule 142   multargs -> empty
Rule 143   argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET
Rule 144   argdecl -> arglist newline
Rule 145   arglist -> IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER
Rule 146   arglist -> IDENTIFIER multarglist COMMA MULTIPLY COMMA BIT_AND IDENTIFIER
Rule 147   arglist -> IDENTIFIER multarglist COMMA BIT_AND IDENTIFIER
Rule 148   arglist -> IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER
Rule 149   arglist -> IDENTIFIER multarglist COMMA MULTIPLY
Rule 150   arglist -> IDENTIFIER multarglist
Rule 151   arglist -> MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER
Rule 152   arglist -> MULTIPLY IDENTIFIER
Rule 153   arglist -> BIT_AND IDENTIFIER
Rule 154   arglist -> empty
Rule 155   multarglist -> COMMA IDENTIFIER multarglist
Rule 156   multarglist -> empty
Rule 157   singleton -> variable
Rule 158   singleton -> OPEN_BRACKET expr CLOSE_BRACKET
Rule 159   assocs -> assoc multassocs
Rule 160   multassocs -> COMMA assoc multassocs
Rule 161   multassocs -> empty
Rule 162   assoc -> arg MAP arg
Rule 163   variable -> varname
Rule 164   variable -> nil
Rule 165   variable -> self
Rule 166   pthen -> newline
Rule 167   pthen -> then
Rule 168   pthen -> newline then
Rule 169   pdo -> newline
Rule 170   pdo -> do
Rule 171   pdo -> newline do
Rule 172   opasgn -> MODULO_EQUALS
Rule 173   opasgn -> DIVIDE_EQUALS
Rule 174   opasgn -> MINUS_EQUALS
Rule 175   opasgn -> PLUS_EQUALS
Rule 176   opasgn -> OR_EQUALS
Rule 177   opasgn -> AND_EQUALS
Rule 178   opasgn -> XOR_EQUALS
Rule 179   opasgn -> RIGHT_SHIFT_EQUALS
Rule 180   opasgn -> LEFT_SHIFT_EQUALS
Rule 181   opasgn -> MULTIPLY_EQUALS
Rule 182   opasgn -> LOGICAL_AND_EQUALS
Rule 183   opasgn -> LOGICAL_OR_EQUALS
Rule 184   opasgn -> POWER_EQUALS
Rule 185   varname -> GLOBAL
Rule 186   varname -> AT_THE_RATE IDENTIFIER
Rule 187   varname -> IDENTIFIER
Rule 188   newline -> SEMI_COLON
Rule 189   newline -> NEWLINE
Rule 190   empty -> <empty>

Terminals, with rules where they appear

AND_EQUALS           : 177
AT_THE_RATE          : 186
BANG_TILDE           : 55
BEGIN                : 
BIT_AND              : 65 127 128 129 133 134 136 138 139 145 146 147 151 153
BIT_OR               : 37
BIT_XOR              : 63
CLOSE_BRACKET        : 22 23 29 30 31 32 33 34 39 40 41 83 118 143 158
CLOSE_FLOWER         : 89 90 91 92 93
CLOSE_SQUARE         : 86 87 88 120 121
COLON                : 
COMMA                : 86 89 92 105 108 109 110 111 112 113 115 124 127 127 127 128 128 129 129 130 130 131 132 133 134 134 135 136 138 141 145 145 146 146 147 148 149 151 155 160
COMPARISON           : 56
COMPLEMENT           : 
CONSTANT_RESOLUTION  : 8 33 34 36 84 85
DIVIDE               : 74
DIVIDE_EQUALS        : 173
DOLLAR               : 
DOT                  : 7 31 32 35 122
DOUBLE_EQUALS        : 51
DOUBLE_QUOTE         : 
ELEMENT_REFERENCE    : 
ELEMENT_SET          : 
END                  : 
EQUALS               : 39 40 43
EQUAL_TILDE          : 54
EXCL_RANGE           : 47
FLOAT                : 101
GLOBAL               : 185
GREATER              : 60
GREATER_EQUALS       : 61
HEREDOC              : 
IDENTIFIER           : 6 7 8 9 9 10 29 30 31 32 33 34 35 36 39 40 41 84 85 122 145 145 145 146 146 147 147 148 148 149 150 151 151 152 153 155 186 187
INCL_RANGE           : 46
LEFT_SHIFT           : 67
LEFT_SHIFT_EQUALS    : 180
LESS                 : 9 58
LESS_EQUALS          : 59
LOGICAL_AND          : 
LOGICAL_AND_EQUALS   : 182
LOGICAL_OR           : 49
LOGICAL_OR_EQUALS    : 183
MAP                  : 162
MINUS                : 71 77
MINUS_AT             : 
MINUS_EQUALS         : 174
MODULO               : 75
MODULO_EQUALS        : 172
MULTIPLY             : 73 105 107 108 109 111 112 124 125 127 128 130 132 134 135 138 145 146 148 149 151 152
MULTIPLY_EQUALS      : 181
NEWLINE              : 189
NOT_EQUALS           : 53
NUMBER               : 100
OPEN_BRACKET         : 22 23 29 30 31 32 33 34 39 40 41 83 118 143 158
OPEN_FLOWER          : 89 90 91 92 93
OPEN_SQUARE          : 86 87 88 120 121
OR_EQUALS            : 176
PLUS                 : 70 79
PLUS_AT              : 
PLUS_EQUALS          : 175
POWER                : 81
POWER_EQUALS         : 184
QUESTION_MARK        : 
REGEXP               : 
RIGHT_SHIFT          : 68
RIGHT_SHIFT_EQUALS   : 179
SEMI_COLON           : 188
STRING               : 102
STRING2              : 
SYMBOL_NOT           : 
TRIPLE_EQUALS        : 52
WORD_AND             : 
WORD_NOT             : 
WORD_OR              : 
XOR_EQUALS           : 178
alias                : 
and                  : 
begin                : 
break                : 11
case                 : 17 18
class                : 9 10
def                  : 6 7 8
defined              : 
do                   : 170 171
else                 : 14 17
elsif                : 98
end                  : 6 7 8 9 10 13 14 15 16 17 18 19
ensure               : 
error                : 
false                : 104
for                  : 19
if                   : 13 14
in                   : 19
module               : 
next                 : 
nil                  : 164
not                  : 
or                   : 
redo                 : 
rescue               : 
retry                : 
return               : 21 22 23 24
self                 : 165
super                : 
then                 : 167 168
true                 : 103
undef                : 
unless               : 
until                : 16
when                 : 96 97
while                : 15
yield                : 

Nonterminals, with rules where they appear

arg                  : 27 37 105 107 124 125 127 127 128 128 129 130 132 133 134 134 135 136 138 138 139 140 141 162 162
argdecl              : 6 7 8
arglist              : 143 144
args                 : 86 87 89 90 105 106 120 123 124 126 127 128 129 130 131 132 133
assoc                : 159 160
assocs               : 92 93 127 129 130 131 134 135 136 137
call                 : 26
callargs             : 21 22 29 31 33 40 41
compstmt             : 6 7 8 9 10 13 14 14 15 16 17 17 18 19 96 97 98 0
empty                : 5 99 116 142 154 156 161
expr                 : 12 98 158
expr1                : 13 14 15 16 19 20
expr2                : 25 83
function             : 28
lhs                  : 95 108 111 117
literal              : 94
mlhs                 : 19 39 40 41 43 44 118
mlhsitem             : 108 108 109 109 110 110 111 112 113 114 115
mrhs                 : 43 44
multarglist          : 145 146 147 148 149 150 155
multargs             : 140 141
multassocs           : 159 160
multcase             : 17 18 96
multcompstmt         : 1 2 3
multelsif            : 14 98
multmlhs             : 108 109 110 115
newline              : 2 4 144 166 168 169 171
opasgn               : 41 44
pdo                  : 15 16 19
primary              : 31 32 33 34 35 36 81 82
pthen                : 13 14 96 97 98
singleton            : 7 8
stmt                 : 2 3
term0                : 37 38
term1                : 42
term10               : 70 71 72 73 74 75
term11               : 73 74 75 76 77
term12               : 78 79
term13               : 80 81
term2                : 45
term3                : 46 46 47 47 48 49
term4                : 49 50
term5                : 51 51 52 52 53 53 54 54 55 55 56 56 57 58 59 60 61
term6                : 58 59 60 61 62 63
term7                : 63 64 65
term8                : 65 66 67 68
term9                : 67 68 69 70 71
variable             : 84 119 120 121 122 157
varname              : 163
whenargs             : 96 97

Parsing method: LALR

state 0

    (0) S' -> . compstmt
    (1) compstmt -> . multcompstmt
    (2) multcompstmt -> . newline stmt multcompstmt
    (3) multcompstmt -> . stmt multcompstmt
    (4) multcompstmt -> . newline
    (5) multcompstmt -> . empty
    (188) newline -> . SEMI_COLON
    (189) newline -> . NEWLINE
    (6) stmt -> . def IDENTIFIER argdecl compstmt end
    (7) stmt -> . def singleton DOT IDENTIFIER argdecl compstmt end
    (8) stmt -> . def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end
    (9) stmt -> . class IDENTIFIER LESS IDENTIFIER compstmt end
    (10) stmt -> . class IDENTIFIER compstmt end
    (11) stmt -> . break
    (12) stmt -> . expr
    (190) empty -> .
    (13) expr -> . if expr1 pthen compstmt end
    (14) expr -> . if expr1 pthen compstmt multelsif else compstmt end
    (15) expr -> . while expr1 pdo compstmt end
    (16) expr -> . until expr1 pdo compstmt end
    (17) expr -> . case compstmt multcase else compstmt end
    (18) expr -> . case compstmt multcase end
    (19) expr -> . for mlhs in expr1 pdo compstmt end
    (20) expr -> . expr1
    (21) expr1 -> . return callargs
    (22) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (23) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (24) expr1 -> . return
    (25) expr1 -> . expr2
    (26) expr2 -> . call
    (27) expr2 -> . arg
    (28) call -> . function
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (29) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (30) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) function -> . primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> . primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (33) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> . primary DOT IDENTIFIER
    (36) function -> . primary CONSTANT_RESOLUTION IDENTIFIER
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary

    SEMI_COLON      shift and go to state 24
    NEWLINE         shift and go to state 4
    def             shift and go to state 45
    class           shift and go to state 57
    break           shift and go to state 9
    $end            reduce using rule 190 (empty -> .)
    if              shift and go to state 49
    while           shift and go to state 44
    until           shift and go to state 36
    case            shift and go to state 42
    for             shift and go to state 26
    return          shift and go to state 7
    IDENTIFIER      shift and go to state 35
    OPEN_BRACKET    shift and go to state 5
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 32
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 25
    expr2                          shift and go to state 51
    literal                        shift and go to state 33
    expr1                          shift and go to state 52
    call                           shift and go to state 34
    varname                        shift and go to state 30
    empty                          shift and go to state 37
    function                       shift and go to state 38
    newline                        shift and go to state 55
    multcompstmt                   shift and go to state 8
    stmt                           shift and go to state 27
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 56
    compstmt                       shift and go to state 29
    term5                          shift and go to state 16
    expr                           shift and go to state 43
    lhs                            shift and go to state 59
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 1

    (85) primary -> CONSTANT_RESOLUTION . IDENTIFIER

    IDENTIFIER      shift and go to state 60


state 2

    (39) term0 -> mlhs . EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> mlhs . EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> mlhs . opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (43) term1 -> mlhs . EQUALS mrhs
    (44) term1 -> mlhs . opasgn mrhs
    (172) opasgn -> . MODULO_EQUALS
    (173) opasgn -> . DIVIDE_EQUALS
    (174) opasgn -> . MINUS_EQUALS
    (175) opasgn -> . PLUS_EQUALS
    (176) opasgn -> . OR_EQUALS
    (177) opasgn -> . AND_EQUALS
    (178) opasgn -> . XOR_EQUALS
    (179) opasgn -> . RIGHT_SHIFT_EQUALS
    (180) opasgn -> . LEFT_SHIFT_EQUALS
    (181) opasgn -> . MULTIPLY_EQUALS
    (182) opasgn -> . LOGICAL_AND_EQUALS
    (183) opasgn -> . LOGICAL_OR_EQUALS
    (184) opasgn -> . POWER_EQUALS

    EQUALS          shift and go to state 70
    MODULO_EQUALS   shift and go to state 75
    DIVIDE_EQUALS   shift and go to state 66
    MINUS_EQUALS    shift and go to state 61
    PLUS_EQUALS     shift and go to state 62
    OR_EQUALS       shift and go to state 71
    AND_EQUALS      shift and go to state 65
    XOR_EQUALS      shift and go to state 63
    RIGHT_SHIFT_EQUALS shift and go to state 69
    LEFT_SHIFT_EQUALS shift and go to state 64
    MULTIPLY_EQUALS shift and go to state 73
    LOGICAL_AND_EQUALS shift and go to state 68
    LOGICAL_OR_EQUALS shift and go to state 74
    POWER_EQUALS    shift and go to state 67

    opasgn                         shift and go to state 72

state 3

    (77) term11 -> MINUS . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    OPEN_BRACKET    shift and go to state 77
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    varname                        shift and go to state 30
    primary                        shift and go to state 76
    literal                        shift and go to state 33
    lhs                            shift and go to state 79
    variable                       shift and go to state 56
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 80

state 4

    (189) newline -> NEWLINE .

    def             reduce using rule 189 (newline -> NEWLINE .)
    class           reduce using rule 189 (newline -> NEWLINE .)
    break           reduce using rule 189 (newline -> NEWLINE .)
    if              reduce using rule 189 (newline -> NEWLINE .)
    while           reduce using rule 189 (newline -> NEWLINE .)
    until           reduce using rule 189 (newline -> NEWLINE .)
    case            reduce using rule 189 (newline -> NEWLINE .)
    for             reduce using rule 189 (newline -> NEWLINE .)
    return          reduce using rule 189 (newline -> NEWLINE .)
    IDENTIFIER      reduce using rule 189 (newline -> NEWLINE .)
    OPEN_BRACKET    reduce using rule 189 (newline -> NEWLINE .)
    CONSTANT_RESOLUTION reduce using rule 189 (newline -> NEWLINE .)
    OPEN_SQUARE     reduce using rule 189 (newline -> NEWLINE .)
    OPEN_FLOWER     reduce using rule 189 (newline -> NEWLINE .)
    nil             reduce using rule 189 (newline -> NEWLINE .)
    self            reduce using rule 189 (newline -> NEWLINE .)
    NUMBER          reduce using rule 189 (newline -> NEWLINE .)
    FLOAT           reduce using rule 189 (newline -> NEWLINE .)
    STRING          reduce using rule 189 (newline -> NEWLINE .)
    true            reduce using rule 189 (newline -> NEWLINE .)
    false           reduce using rule 189 (newline -> NEWLINE .)
    GLOBAL          reduce using rule 189 (newline -> NEWLINE .)
    AT_THE_RATE     reduce using rule 189 (newline -> NEWLINE .)
    MINUS           reduce using rule 189 (newline -> NEWLINE .)
    PLUS            reduce using rule 189 (newline -> NEWLINE .)
    when            reduce using rule 189 (newline -> NEWLINE .)
    else            reduce using rule 189 (newline -> NEWLINE .)
    end             reduce using rule 189 (newline -> NEWLINE .)
    then            reduce using rule 189 (newline -> NEWLINE .)
    SEMI_COLON      reduce using rule 189 (newline -> NEWLINE .)
    NEWLINE         reduce using rule 189 (newline -> NEWLINE .)
    elsif           reduce using rule 189 (newline -> NEWLINE .)
    do              reduce using rule 189 (newline -> NEWLINE .)
    $end            reduce using rule 189 (newline -> NEWLINE .)


state 5

    (83) primary -> OPEN_BRACKET . expr2 CLOSE_BRACKET
    (118) mlhsitem -> OPEN_BRACKET . mlhs CLOSE_BRACKET
    (26) expr2 -> . call
    (27) expr2 -> . arg
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (28) call -> . function
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (29) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (30) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) function -> . primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> . primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (33) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> . primary DOT IDENTIFIER
    (36) function -> . primary CONSTANT_RESOLUTION IDENTIFIER
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary

    OPEN_BRACKET    shift and go to state 82
    IDENTIFIER      shift and go to state 35
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 81
    primary                        shift and go to state 32
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 25
    expr2                          shift and go to state 83
    literal                        shift and go to state 33
    call                           shift and go to state 34
    function                       shift and go to state 38
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 6

    (79) term12 -> PLUS . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    PLUS            shift and go to state 6
    OPEN_BRACKET    shift and go to state 77
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    varname                        shift and go to state 30
    primary                        shift and go to state 76
    literal                        shift and go to state 33
    lhs                            shift and go to state 79
    variable                       shift and go to state 56
    term13                         shift and go to state 10
    term12                         shift and go to state 86

state 7

    (21) expr1 -> return . callargs
    (22) expr1 -> return . OPEN_BRACKET callargs CLOSE_BRACKET
    (23) expr1 -> return . OPEN_BRACKET CLOSE_BRACKET
    (24) expr1 -> return .
    (126) callargs -> . args
    (127) callargs -> . args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg
    (128) callargs -> . args COMMA MULTIPLY arg COMMA BIT_AND arg
    (129) callargs -> . args COMMA assocs COMMA BIT_AND arg
    (130) callargs -> . args COMMA assocs COMMA MULTIPLY arg
    (131) callargs -> . args COMMA assocs
    (132) callargs -> . args COMMA MULTIPLY arg
    (133) callargs -> . args COMMA BIT_AND arg
    (134) callargs -> . assocs COMMA MULTIPLY arg COMMA BIT_AND arg
    (135) callargs -> . assocs COMMA MULTIPLY arg
    (136) callargs -> . assocs COMMA BIT_AND arg
    (137) callargs -> . assocs
    (138) callargs -> . MULTIPLY arg COMMA BIT_AND arg
    (139) callargs -> . BIT_AND arg
    (140) args -> . arg multargs
    (159) assocs -> . assoc multassocs
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (162) assoc -> . arg MAP arg
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

  ! shift/reduce conflict for OPEN_BRACKET resolved as shift
  ! shift/reduce conflict for nil resolved as shift
  ! shift/reduce conflict for self resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for AT_THE_RATE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for CONSTANT_RESOLUTION resolved as shift
  ! shift/reduce conflict for OPEN_SQUARE resolved as shift
  ! shift/reduce conflict for OPEN_FLOWER resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
    OPEN_BRACKET    shift and go to state 89
    SEMI_COLON      reduce using rule 24 (expr1 -> return .)
    NEWLINE         reduce using rule 24 (expr1 -> return .)
    def             reduce using rule 24 (expr1 -> return .)
    class           reduce using rule 24 (expr1 -> return .)
    break           reduce using rule 24 (expr1 -> return .)
    if              reduce using rule 24 (expr1 -> return .)
    while           reduce using rule 24 (expr1 -> return .)
    until           reduce using rule 24 (expr1 -> return .)
    case            reduce using rule 24 (expr1 -> return .)
    for             reduce using rule 24 (expr1 -> return .)
    return          reduce using rule 24 (expr1 -> return .)
    end             reduce using rule 24 (expr1 -> return .)
    $end            reduce using rule 24 (expr1 -> return .)
    when            reduce using rule 24 (expr1 -> return .)
    elsif           reduce using rule 24 (expr1 -> return .)
    else            reduce using rule 24 (expr1 -> return .)
    CLOSE_BRACKET   reduce using rule 24 (expr1 -> return .)
    do              reduce using rule 24 (expr1 -> return .)
    then            reduce using rule 24 (expr1 -> return .)
    MULTIPLY        shift and go to state 88
    BIT_AND         shift and go to state 91
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

  ! IDENTIFIER      [ reduce using rule 24 (expr1 -> return .) ]
  ! OPEN_BRACKET    [ reduce using rule 24 (expr1 -> return .) ]
  ! CONSTANT_RESOLUTION [ reduce using rule 24 (expr1 -> return .) ]
  ! OPEN_SQUARE     [ reduce using rule 24 (expr1 -> return .) ]
  ! OPEN_FLOWER     [ reduce using rule 24 (expr1 -> return .) ]
  ! nil             [ reduce using rule 24 (expr1 -> return .) ]
  ! self            [ reduce using rule 24 (expr1 -> return .) ]
  ! NUMBER          [ reduce using rule 24 (expr1 -> return .) ]
  ! FLOAT           [ reduce using rule 24 (expr1 -> return .) ]
  ! STRING          [ reduce using rule 24 (expr1 -> return .) ]
  ! true            [ reduce using rule 24 (expr1 -> return .) ]
  ! false           [ reduce using rule 24 (expr1 -> return .) ]
  ! GLOBAL          [ reduce using rule 24 (expr1 -> return .) ]
  ! AT_THE_RATE     [ reduce using rule 24 (expr1 -> return .) ]
  ! MINUS           [ reduce using rule 24 (expr1 -> return .) ]
  ! PLUS            [ reduce using rule 24 (expr1 -> return .) ]

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 87
    literal                        shift and go to state 33
    assocs                         shift and go to state 90
    args                           shift and go to state 92
    assoc                          shift and go to state 93
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    callargs                       shift and go to state 94
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 8

    (1) compstmt -> multcompstmt .

    when            reduce using rule 1 (compstmt -> multcompstmt .)
    else            reduce using rule 1 (compstmt -> multcompstmt .)
    end             reduce using rule 1 (compstmt -> multcompstmt .)
    elsif           reduce using rule 1 (compstmt -> multcompstmt .)
    $end            reduce using rule 1 (compstmt -> multcompstmt .)


state 9

    (11) stmt -> break .

    SEMI_COLON      reduce using rule 11 (stmt -> break .)
    NEWLINE         reduce using rule 11 (stmt -> break .)
    def             reduce using rule 11 (stmt -> break .)
    class           reduce using rule 11 (stmt -> break .)
    break           reduce using rule 11 (stmt -> break .)
    if              reduce using rule 11 (stmt -> break .)
    while           reduce using rule 11 (stmt -> break .)
    until           reduce using rule 11 (stmt -> break .)
    case            reduce using rule 11 (stmt -> break .)
    for             reduce using rule 11 (stmt -> break .)
    return          reduce using rule 11 (stmt -> break .)
    IDENTIFIER      reduce using rule 11 (stmt -> break .)
    OPEN_BRACKET    reduce using rule 11 (stmt -> break .)
    CONSTANT_RESOLUTION reduce using rule 11 (stmt -> break .)
    OPEN_SQUARE     reduce using rule 11 (stmt -> break .)
    OPEN_FLOWER     reduce using rule 11 (stmt -> break .)
    nil             reduce using rule 11 (stmt -> break .)
    self            reduce using rule 11 (stmt -> break .)
    NUMBER          reduce using rule 11 (stmt -> break .)
    FLOAT           reduce using rule 11 (stmt -> break .)
    STRING          reduce using rule 11 (stmt -> break .)
    true            reduce using rule 11 (stmt -> break .)
    false           reduce using rule 11 (stmt -> break .)
    GLOBAL          reduce using rule 11 (stmt -> break .)
    AT_THE_RATE     reduce using rule 11 (stmt -> break .)
    MINUS           reduce using rule 11 (stmt -> break .)
    PLUS            reduce using rule 11 (stmt -> break .)
    $end            reduce using rule 11 (stmt -> break .)
    when            reduce using rule 11 (stmt -> break .)
    end             reduce using rule 11 (stmt -> break .)
    elsif           reduce using rule 11 (stmt -> break .)
    else            reduce using rule 11 (stmt -> break .)


state 10

    (80) term12 -> term13 .

    MULTIPLY        reduce using rule 80 (term12 -> term13 .)
    DIVIDE          reduce using rule 80 (term12 -> term13 .)
    MODULO          reduce using rule 80 (term12 -> term13 .)
    PLUS            reduce using rule 80 (term12 -> term13 .)
    MINUS           reduce using rule 80 (term12 -> term13 .)
    LEFT_SHIFT      reduce using rule 80 (term12 -> term13 .)
    RIGHT_SHIFT     reduce using rule 80 (term12 -> term13 .)
    BIT_AND         reduce using rule 80 (term12 -> term13 .)
    BIT_XOR         reduce using rule 80 (term12 -> term13 .)
    DOUBLE_EQUALS   reduce using rule 80 (term12 -> term13 .)
    TRIPLE_EQUALS   reduce using rule 80 (term12 -> term13 .)
    NOT_EQUALS      reduce using rule 80 (term12 -> term13 .)
    EQUAL_TILDE     reduce using rule 80 (term12 -> term13 .)
    BANG_TILDE      reduce using rule 80 (term12 -> term13 .)
    COMPARISON      reduce using rule 80 (term12 -> term13 .)
    LESS            reduce using rule 80 (term12 -> term13 .)
    LESS_EQUALS     reduce using rule 80 (term12 -> term13 .)
    GREATER         reduce using rule 80 (term12 -> term13 .)
    GREATER_EQUALS  reduce using rule 80 (term12 -> term13 .)
    INCL_RANGE      reduce using rule 80 (term12 -> term13 .)
    EXCL_RANGE      reduce using rule 80 (term12 -> term13 .)
    LOGICAL_OR      reduce using rule 80 (term12 -> term13 .)
    BIT_OR          reduce using rule 80 (term12 -> term13 .)
    SEMI_COLON      reduce using rule 80 (term12 -> term13 .)
    NEWLINE         reduce using rule 80 (term12 -> term13 .)
    def             reduce using rule 80 (term12 -> term13 .)
    class           reduce using rule 80 (term12 -> term13 .)
    break           reduce using rule 80 (term12 -> term13 .)
    if              reduce using rule 80 (term12 -> term13 .)
    while           reduce using rule 80 (term12 -> term13 .)
    until           reduce using rule 80 (term12 -> term13 .)
    case            reduce using rule 80 (term12 -> term13 .)
    for             reduce using rule 80 (term12 -> term13 .)
    return          reduce using rule 80 (term12 -> term13 .)
    IDENTIFIER      reduce using rule 80 (term12 -> term13 .)
    OPEN_BRACKET    reduce using rule 80 (term12 -> term13 .)
    CONSTANT_RESOLUTION reduce using rule 80 (term12 -> term13 .)
    OPEN_SQUARE     reduce using rule 80 (term12 -> term13 .)
    OPEN_FLOWER     reduce using rule 80 (term12 -> term13 .)
    nil             reduce using rule 80 (term12 -> term13 .)
    self            reduce using rule 80 (term12 -> term13 .)
    NUMBER          reduce using rule 80 (term12 -> term13 .)
    FLOAT           reduce using rule 80 (term12 -> term13 .)
    STRING          reduce using rule 80 (term12 -> term13 .)
    true            reduce using rule 80 (term12 -> term13 .)
    false           reduce using rule 80 (term12 -> term13 .)
    GLOBAL          reduce using rule 80 (term12 -> term13 .)
    AT_THE_RATE     reduce using rule 80 (term12 -> term13 .)
    end             reduce using rule 80 (term12 -> term13 .)
    CLOSE_BRACKET   reduce using rule 80 (term12 -> term13 .)
    MAP             reduce using rule 80 (term12 -> term13 .)
    COMMA           reduce using rule 80 (term12 -> term13 .)
    $end            reduce using rule 80 (term12 -> term13 .)
    when            reduce using rule 80 (term12 -> term13 .)
    elsif           reduce using rule 80 (term12 -> term13 .)
    else            reduce using rule 80 (term12 -> term13 .)
    do              reduce using rule 80 (term12 -> term13 .)
    then            reduce using rule 80 (term12 -> term13 .)
    CLOSE_SQUARE    reduce using rule 80 (term12 -> term13 .)
    CLOSE_FLOWER    reduce using rule 80 (term12 -> term13 .)


state 11

    (78) term11 -> term12 .

    MULTIPLY        reduce using rule 78 (term11 -> term12 .)
    DIVIDE          reduce using rule 78 (term11 -> term12 .)
    MODULO          reduce using rule 78 (term11 -> term12 .)
    PLUS            reduce using rule 78 (term11 -> term12 .)
    MINUS           reduce using rule 78 (term11 -> term12 .)
    LEFT_SHIFT      reduce using rule 78 (term11 -> term12 .)
    RIGHT_SHIFT     reduce using rule 78 (term11 -> term12 .)
    BIT_AND         reduce using rule 78 (term11 -> term12 .)
    BIT_XOR         reduce using rule 78 (term11 -> term12 .)
    DOUBLE_EQUALS   reduce using rule 78 (term11 -> term12 .)
    TRIPLE_EQUALS   reduce using rule 78 (term11 -> term12 .)
    NOT_EQUALS      reduce using rule 78 (term11 -> term12 .)
    EQUAL_TILDE     reduce using rule 78 (term11 -> term12 .)
    BANG_TILDE      reduce using rule 78 (term11 -> term12 .)
    COMPARISON      reduce using rule 78 (term11 -> term12 .)
    LESS            reduce using rule 78 (term11 -> term12 .)
    LESS_EQUALS     reduce using rule 78 (term11 -> term12 .)
    GREATER         reduce using rule 78 (term11 -> term12 .)
    GREATER_EQUALS  reduce using rule 78 (term11 -> term12 .)
    INCL_RANGE      reduce using rule 78 (term11 -> term12 .)
    EXCL_RANGE      reduce using rule 78 (term11 -> term12 .)
    LOGICAL_OR      reduce using rule 78 (term11 -> term12 .)
    BIT_OR          reduce using rule 78 (term11 -> term12 .)
    MAP             reduce using rule 78 (term11 -> term12 .)
    COMMA           reduce using rule 78 (term11 -> term12 .)
    CLOSE_BRACKET   reduce using rule 78 (term11 -> term12 .)
    SEMI_COLON      reduce using rule 78 (term11 -> term12 .)
    NEWLINE         reduce using rule 78 (term11 -> term12 .)
    def             reduce using rule 78 (term11 -> term12 .)
    class           reduce using rule 78 (term11 -> term12 .)
    break           reduce using rule 78 (term11 -> term12 .)
    if              reduce using rule 78 (term11 -> term12 .)
    while           reduce using rule 78 (term11 -> term12 .)
    until           reduce using rule 78 (term11 -> term12 .)
    case            reduce using rule 78 (term11 -> term12 .)
    for             reduce using rule 78 (term11 -> term12 .)
    return          reduce using rule 78 (term11 -> term12 .)
    IDENTIFIER      reduce using rule 78 (term11 -> term12 .)
    OPEN_BRACKET    reduce using rule 78 (term11 -> term12 .)
    CONSTANT_RESOLUTION reduce using rule 78 (term11 -> term12 .)
    OPEN_SQUARE     reduce using rule 78 (term11 -> term12 .)
    OPEN_FLOWER     reduce using rule 78 (term11 -> term12 .)
    nil             reduce using rule 78 (term11 -> term12 .)
    self            reduce using rule 78 (term11 -> term12 .)
    NUMBER          reduce using rule 78 (term11 -> term12 .)
    FLOAT           reduce using rule 78 (term11 -> term12 .)
    STRING          reduce using rule 78 (term11 -> term12 .)
    true            reduce using rule 78 (term11 -> term12 .)
    false           reduce using rule 78 (term11 -> term12 .)
    GLOBAL          reduce using rule 78 (term11 -> term12 .)
    AT_THE_RATE     reduce using rule 78 (term11 -> term12 .)
    $end            reduce using rule 78 (term11 -> term12 .)
    when            reduce using rule 78 (term11 -> term12 .)
    end             reduce using rule 78 (term11 -> term12 .)
    elsif           reduce using rule 78 (term11 -> term12 .)
    else            reduce using rule 78 (term11 -> term12 .)
    do              reduce using rule 78 (term11 -> term12 .)
    then            reduce using rule 78 (term11 -> term12 .)
    CLOSE_SQUARE    reduce using rule 78 (term11 -> term12 .)
    CLOSE_FLOWER    reduce using rule 78 (term11 -> term12 .)


state 12

    (76) term10 -> term11 .

    MULTIPLY        reduce using rule 76 (term10 -> term11 .)
    DIVIDE          reduce using rule 76 (term10 -> term11 .)
    MODULO          reduce using rule 76 (term10 -> term11 .)
    PLUS            reduce using rule 76 (term10 -> term11 .)
    MINUS           reduce using rule 76 (term10 -> term11 .)
    LEFT_SHIFT      reduce using rule 76 (term10 -> term11 .)
    RIGHT_SHIFT     reduce using rule 76 (term10 -> term11 .)
    BIT_AND         reduce using rule 76 (term10 -> term11 .)
    BIT_XOR         reduce using rule 76 (term10 -> term11 .)
    DOUBLE_EQUALS   reduce using rule 76 (term10 -> term11 .)
    TRIPLE_EQUALS   reduce using rule 76 (term10 -> term11 .)
    NOT_EQUALS      reduce using rule 76 (term10 -> term11 .)
    EQUAL_TILDE     reduce using rule 76 (term10 -> term11 .)
    BANG_TILDE      reduce using rule 76 (term10 -> term11 .)
    COMPARISON      reduce using rule 76 (term10 -> term11 .)
    LESS            reduce using rule 76 (term10 -> term11 .)
    LESS_EQUALS     reduce using rule 76 (term10 -> term11 .)
    GREATER         reduce using rule 76 (term10 -> term11 .)
    GREATER_EQUALS  reduce using rule 76 (term10 -> term11 .)
    INCL_RANGE      reduce using rule 76 (term10 -> term11 .)
    EXCL_RANGE      reduce using rule 76 (term10 -> term11 .)
    LOGICAL_OR      reduce using rule 76 (term10 -> term11 .)
    BIT_OR          reduce using rule 76 (term10 -> term11 .)
    SEMI_COLON      reduce using rule 76 (term10 -> term11 .)
    NEWLINE         reduce using rule 76 (term10 -> term11 .)
    def             reduce using rule 76 (term10 -> term11 .)
    class           reduce using rule 76 (term10 -> term11 .)
    break           reduce using rule 76 (term10 -> term11 .)
    if              reduce using rule 76 (term10 -> term11 .)
    while           reduce using rule 76 (term10 -> term11 .)
    until           reduce using rule 76 (term10 -> term11 .)
    case            reduce using rule 76 (term10 -> term11 .)
    for             reduce using rule 76 (term10 -> term11 .)
    return          reduce using rule 76 (term10 -> term11 .)
    IDENTIFIER      reduce using rule 76 (term10 -> term11 .)
    OPEN_BRACKET    reduce using rule 76 (term10 -> term11 .)
    CONSTANT_RESOLUTION reduce using rule 76 (term10 -> term11 .)
    OPEN_SQUARE     reduce using rule 76 (term10 -> term11 .)
    OPEN_FLOWER     reduce using rule 76 (term10 -> term11 .)
    nil             reduce using rule 76 (term10 -> term11 .)
    self            reduce using rule 76 (term10 -> term11 .)
    NUMBER          reduce using rule 76 (term10 -> term11 .)
    FLOAT           reduce using rule 76 (term10 -> term11 .)
    STRING          reduce using rule 76 (term10 -> term11 .)
    true            reduce using rule 76 (term10 -> term11 .)
    false           reduce using rule 76 (term10 -> term11 .)
    GLOBAL          reduce using rule 76 (term10 -> term11 .)
    AT_THE_RATE     reduce using rule 76 (term10 -> term11 .)
    $end            reduce using rule 76 (term10 -> term11 .)
    CLOSE_BRACKET   reduce using rule 76 (term10 -> term11 .)
    MAP             reduce using rule 76 (term10 -> term11 .)
    COMMA           reduce using rule 76 (term10 -> term11 .)
    when            reduce using rule 76 (term10 -> term11 .)
    end             reduce using rule 76 (term10 -> term11 .)
    elsif           reduce using rule 76 (term10 -> term11 .)
    else            reduce using rule 76 (term10 -> term11 .)
    do              reduce using rule 76 (term10 -> term11 .)
    then            reduce using rule 76 (term10 -> term11 .)
    CLOSE_SQUARE    reduce using rule 76 (term10 -> term11 .)
    CLOSE_FLOWER    reduce using rule 76 (term10 -> term11 .)


state 13

    (72) term9 -> term10 .
    (73) term10 -> term10 . MULTIPLY term11
    (74) term10 -> term10 . DIVIDE term11
    (75) term10 -> term10 . MODULO term11

    PLUS            reduce using rule 72 (term9 -> term10 .)
    MINUS           reduce using rule 72 (term9 -> term10 .)
    LEFT_SHIFT      reduce using rule 72 (term9 -> term10 .)
    RIGHT_SHIFT     reduce using rule 72 (term9 -> term10 .)
    BIT_AND         reduce using rule 72 (term9 -> term10 .)
    BIT_XOR         reduce using rule 72 (term9 -> term10 .)
    DOUBLE_EQUALS   reduce using rule 72 (term9 -> term10 .)
    TRIPLE_EQUALS   reduce using rule 72 (term9 -> term10 .)
    NOT_EQUALS      reduce using rule 72 (term9 -> term10 .)
    EQUAL_TILDE     reduce using rule 72 (term9 -> term10 .)
    BANG_TILDE      reduce using rule 72 (term9 -> term10 .)
    COMPARISON      reduce using rule 72 (term9 -> term10 .)
    LESS            reduce using rule 72 (term9 -> term10 .)
    LESS_EQUALS     reduce using rule 72 (term9 -> term10 .)
    GREATER         reduce using rule 72 (term9 -> term10 .)
    GREATER_EQUALS  reduce using rule 72 (term9 -> term10 .)
    INCL_RANGE      reduce using rule 72 (term9 -> term10 .)
    EXCL_RANGE      reduce using rule 72 (term9 -> term10 .)
    LOGICAL_OR      reduce using rule 72 (term9 -> term10 .)
    BIT_OR          reduce using rule 72 (term9 -> term10 .)
    SEMI_COLON      reduce using rule 72 (term9 -> term10 .)
    NEWLINE         reduce using rule 72 (term9 -> term10 .)
    def             reduce using rule 72 (term9 -> term10 .)
    class           reduce using rule 72 (term9 -> term10 .)
    break           reduce using rule 72 (term9 -> term10 .)
    if              reduce using rule 72 (term9 -> term10 .)
    while           reduce using rule 72 (term9 -> term10 .)
    until           reduce using rule 72 (term9 -> term10 .)
    case            reduce using rule 72 (term9 -> term10 .)
    for             reduce using rule 72 (term9 -> term10 .)
    return          reduce using rule 72 (term9 -> term10 .)
    IDENTIFIER      reduce using rule 72 (term9 -> term10 .)
    OPEN_BRACKET    reduce using rule 72 (term9 -> term10 .)
    CONSTANT_RESOLUTION reduce using rule 72 (term9 -> term10 .)
    OPEN_SQUARE     reduce using rule 72 (term9 -> term10 .)
    OPEN_FLOWER     reduce using rule 72 (term9 -> term10 .)
    nil             reduce using rule 72 (term9 -> term10 .)
    self            reduce using rule 72 (term9 -> term10 .)
    NUMBER          reduce using rule 72 (term9 -> term10 .)
    FLOAT           reduce using rule 72 (term9 -> term10 .)
    STRING          reduce using rule 72 (term9 -> term10 .)
    true            reduce using rule 72 (term9 -> term10 .)
    false           reduce using rule 72 (term9 -> term10 .)
    GLOBAL          reduce using rule 72 (term9 -> term10 .)
    AT_THE_RATE     reduce using rule 72 (term9 -> term10 .)
    $end            reduce using rule 72 (term9 -> term10 .)
    when            reduce using rule 72 (term9 -> term10 .)
    end             reduce using rule 72 (term9 -> term10 .)
    elsif           reduce using rule 72 (term9 -> term10 .)
    else            reduce using rule 72 (term9 -> term10 .)
    do              reduce using rule 72 (term9 -> term10 .)
    then            reduce using rule 72 (term9 -> term10 .)
    CLOSE_BRACKET   reduce using rule 72 (term9 -> term10 .)
    MAP             reduce using rule 72 (term9 -> term10 .)
    COMMA           reduce using rule 72 (term9 -> term10 .)
    CLOSE_SQUARE    reduce using rule 72 (term9 -> term10 .)
    CLOSE_FLOWER    reduce using rule 72 (term9 -> term10 .)
    MULTIPLY        shift and go to state 95
    DIVIDE          shift and go to state 97
    MODULO          shift and go to state 96


state 14

    (64) term6 -> term7 .
    (65) term7 -> term7 . BIT_AND term8

    BIT_XOR         reduce using rule 64 (term6 -> term7 .)
    DOUBLE_EQUALS   reduce using rule 64 (term6 -> term7 .)
    TRIPLE_EQUALS   reduce using rule 64 (term6 -> term7 .)
    NOT_EQUALS      reduce using rule 64 (term6 -> term7 .)
    EQUAL_TILDE     reduce using rule 64 (term6 -> term7 .)
    BANG_TILDE      reduce using rule 64 (term6 -> term7 .)
    COMPARISON      reduce using rule 64 (term6 -> term7 .)
    LESS            reduce using rule 64 (term6 -> term7 .)
    LESS_EQUALS     reduce using rule 64 (term6 -> term7 .)
    GREATER         reduce using rule 64 (term6 -> term7 .)
    GREATER_EQUALS  reduce using rule 64 (term6 -> term7 .)
    INCL_RANGE      reduce using rule 64 (term6 -> term7 .)
    EXCL_RANGE      reduce using rule 64 (term6 -> term7 .)
    LOGICAL_OR      reduce using rule 64 (term6 -> term7 .)
    BIT_OR          reduce using rule 64 (term6 -> term7 .)
    MAP             reduce using rule 64 (term6 -> term7 .)
    COMMA           reduce using rule 64 (term6 -> term7 .)
    CLOSE_BRACKET   reduce using rule 64 (term6 -> term7 .)
    SEMI_COLON      reduce using rule 64 (term6 -> term7 .)
    NEWLINE         reduce using rule 64 (term6 -> term7 .)
    def             reduce using rule 64 (term6 -> term7 .)
    class           reduce using rule 64 (term6 -> term7 .)
    break           reduce using rule 64 (term6 -> term7 .)
    if              reduce using rule 64 (term6 -> term7 .)
    while           reduce using rule 64 (term6 -> term7 .)
    until           reduce using rule 64 (term6 -> term7 .)
    case            reduce using rule 64 (term6 -> term7 .)
    for             reduce using rule 64 (term6 -> term7 .)
    return          reduce using rule 64 (term6 -> term7 .)
    IDENTIFIER      reduce using rule 64 (term6 -> term7 .)
    OPEN_BRACKET    reduce using rule 64 (term6 -> term7 .)
    CONSTANT_RESOLUTION reduce using rule 64 (term6 -> term7 .)
    OPEN_SQUARE     reduce using rule 64 (term6 -> term7 .)
    OPEN_FLOWER     reduce using rule 64 (term6 -> term7 .)
    nil             reduce using rule 64 (term6 -> term7 .)
    self            reduce using rule 64 (term6 -> term7 .)
    NUMBER          reduce using rule 64 (term6 -> term7 .)
    FLOAT           reduce using rule 64 (term6 -> term7 .)
    STRING          reduce using rule 64 (term6 -> term7 .)
    true            reduce using rule 64 (term6 -> term7 .)
    false           reduce using rule 64 (term6 -> term7 .)
    GLOBAL          reduce using rule 64 (term6 -> term7 .)
    AT_THE_RATE     reduce using rule 64 (term6 -> term7 .)
    MINUS           reduce using rule 64 (term6 -> term7 .)
    PLUS            reduce using rule 64 (term6 -> term7 .)
    $end            reduce using rule 64 (term6 -> term7 .)
    when            reduce using rule 64 (term6 -> term7 .)
    end             reduce using rule 64 (term6 -> term7 .)
    elsif           reduce using rule 64 (term6 -> term7 .)
    else            reduce using rule 64 (term6 -> term7 .)
    do              reduce using rule 64 (term6 -> term7 .)
    then            reduce using rule 64 (term6 -> term7 .)
    CLOSE_SQUARE    reduce using rule 64 (term6 -> term7 .)
    CLOSE_FLOWER    reduce using rule 64 (term6 -> term7 .)
    BIT_AND         shift and go to state 98


state 15

    (62) term5 -> term6 .
    (63) term6 -> term6 . BIT_XOR term7

    DOUBLE_EQUALS   reduce using rule 62 (term5 -> term6 .)
    TRIPLE_EQUALS   reduce using rule 62 (term5 -> term6 .)
    NOT_EQUALS      reduce using rule 62 (term5 -> term6 .)
    EQUAL_TILDE     reduce using rule 62 (term5 -> term6 .)
    BANG_TILDE      reduce using rule 62 (term5 -> term6 .)
    COMPARISON      reduce using rule 62 (term5 -> term6 .)
    LESS            reduce using rule 62 (term5 -> term6 .)
    LESS_EQUALS     reduce using rule 62 (term5 -> term6 .)
    GREATER         reduce using rule 62 (term5 -> term6 .)
    GREATER_EQUALS  reduce using rule 62 (term5 -> term6 .)
    INCL_RANGE      reduce using rule 62 (term5 -> term6 .)
    EXCL_RANGE      reduce using rule 62 (term5 -> term6 .)
    LOGICAL_OR      reduce using rule 62 (term5 -> term6 .)
    BIT_OR          reduce using rule 62 (term5 -> term6 .)
    then            reduce using rule 62 (term5 -> term6 .)
    SEMI_COLON      reduce using rule 62 (term5 -> term6 .)
    NEWLINE         reduce using rule 62 (term5 -> term6 .)
    def             reduce using rule 62 (term5 -> term6 .)
    class           reduce using rule 62 (term5 -> term6 .)
    break           reduce using rule 62 (term5 -> term6 .)
    if              reduce using rule 62 (term5 -> term6 .)
    while           reduce using rule 62 (term5 -> term6 .)
    until           reduce using rule 62 (term5 -> term6 .)
    case            reduce using rule 62 (term5 -> term6 .)
    for             reduce using rule 62 (term5 -> term6 .)
    return          reduce using rule 62 (term5 -> term6 .)
    IDENTIFIER      reduce using rule 62 (term5 -> term6 .)
    OPEN_BRACKET    reduce using rule 62 (term5 -> term6 .)
    CONSTANT_RESOLUTION reduce using rule 62 (term5 -> term6 .)
    OPEN_SQUARE     reduce using rule 62 (term5 -> term6 .)
    OPEN_FLOWER     reduce using rule 62 (term5 -> term6 .)
    nil             reduce using rule 62 (term5 -> term6 .)
    self            reduce using rule 62 (term5 -> term6 .)
    NUMBER          reduce using rule 62 (term5 -> term6 .)
    FLOAT           reduce using rule 62 (term5 -> term6 .)
    STRING          reduce using rule 62 (term5 -> term6 .)
    true            reduce using rule 62 (term5 -> term6 .)
    false           reduce using rule 62 (term5 -> term6 .)
    GLOBAL          reduce using rule 62 (term5 -> term6 .)
    AT_THE_RATE     reduce using rule 62 (term5 -> term6 .)
    MINUS           reduce using rule 62 (term5 -> term6 .)
    PLUS            reduce using rule 62 (term5 -> term6 .)
    $end            reduce using rule 62 (term5 -> term6 .)
    when            reduce using rule 62 (term5 -> term6 .)
    end             reduce using rule 62 (term5 -> term6 .)
    elsif           reduce using rule 62 (term5 -> term6 .)
    else            reduce using rule 62 (term5 -> term6 .)
    do              reduce using rule 62 (term5 -> term6 .)
    CLOSE_BRACKET   reduce using rule 62 (term5 -> term6 .)
    MAP             reduce using rule 62 (term5 -> term6 .)
    COMMA           reduce using rule 62 (term5 -> term6 .)
    CLOSE_SQUARE    reduce using rule 62 (term5 -> term6 .)
    CLOSE_FLOWER    reduce using rule 62 (term5 -> term6 .)
    BIT_XOR         shift and go to state 99


state 16

    (51) term4 -> term5 . DOUBLE_EQUALS term5
    (52) term4 -> term5 . TRIPLE_EQUALS term5
    (53) term4 -> term5 . NOT_EQUALS term5
    (54) term4 -> term5 . EQUAL_TILDE term5
    (55) term4 -> term5 . BANG_TILDE term5
    (56) term4 -> term5 . COMPARISON term5
    (57) term4 -> term5 .
    (58) term5 -> term5 . LESS term6
    (59) term5 -> term5 . LESS_EQUALS term6
    (60) term5 -> term5 . GREATER term6
    (61) term5 -> term5 . GREATER_EQUALS term6

    DOUBLE_EQUALS   shift and go to state 101
    TRIPLE_EQUALS   shift and go to state 108
    NOT_EQUALS      shift and go to state 103
    EQUAL_TILDE     shift and go to state 107
    BANG_TILDE      shift and go to state 106
    COMPARISON      shift and go to state 100
    INCL_RANGE      reduce using rule 57 (term4 -> term5 .)
    EXCL_RANGE      reduce using rule 57 (term4 -> term5 .)
    LOGICAL_OR      reduce using rule 57 (term4 -> term5 .)
    BIT_OR          reduce using rule 57 (term4 -> term5 .)
    MAP             reduce using rule 57 (term4 -> term5 .)
    COMMA           reduce using rule 57 (term4 -> term5 .)
    CLOSE_BRACKET   reduce using rule 57 (term4 -> term5 .)
    SEMI_COLON      reduce using rule 57 (term4 -> term5 .)
    NEWLINE         reduce using rule 57 (term4 -> term5 .)
    def             reduce using rule 57 (term4 -> term5 .)
    class           reduce using rule 57 (term4 -> term5 .)
    break           reduce using rule 57 (term4 -> term5 .)
    if              reduce using rule 57 (term4 -> term5 .)
    while           reduce using rule 57 (term4 -> term5 .)
    until           reduce using rule 57 (term4 -> term5 .)
    case            reduce using rule 57 (term4 -> term5 .)
    for             reduce using rule 57 (term4 -> term5 .)
    return          reduce using rule 57 (term4 -> term5 .)
    IDENTIFIER      reduce using rule 57 (term4 -> term5 .)
    OPEN_BRACKET    reduce using rule 57 (term4 -> term5 .)
    CONSTANT_RESOLUTION reduce using rule 57 (term4 -> term5 .)
    OPEN_SQUARE     reduce using rule 57 (term4 -> term5 .)
    OPEN_FLOWER     reduce using rule 57 (term4 -> term5 .)
    nil             reduce using rule 57 (term4 -> term5 .)
    self            reduce using rule 57 (term4 -> term5 .)
    NUMBER          reduce using rule 57 (term4 -> term5 .)
    FLOAT           reduce using rule 57 (term4 -> term5 .)
    STRING          reduce using rule 57 (term4 -> term5 .)
    true            reduce using rule 57 (term4 -> term5 .)
    false           reduce using rule 57 (term4 -> term5 .)
    GLOBAL          reduce using rule 57 (term4 -> term5 .)
    AT_THE_RATE     reduce using rule 57 (term4 -> term5 .)
    MINUS           reduce using rule 57 (term4 -> term5 .)
    PLUS            reduce using rule 57 (term4 -> term5 .)
    end             reduce using rule 57 (term4 -> term5 .)
    elsif           reduce using rule 57 (term4 -> term5 .)
    else            reduce using rule 57 (term4 -> term5 .)
    CLOSE_FLOWER    reduce using rule 57 (term4 -> term5 .)
    $end            reduce using rule 57 (term4 -> term5 .)
    when            reduce using rule 57 (term4 -> term5 .)
    do              reduce using rule 57 (term4 -> term5 .)
    then            reduce using rule 57 (term4 -> term5 .)
    CLOSE_SQUARE    reduce using rule 57 (term4 -> term5 .)
    LESS            shift and go to state 104
    LESS_EQUALS     shift and go to state 105
    GREATER         shift and go to state 102
    GREATER_EQUALS  shift and go to state 109


state 17

    (50) term3 -> term4 .

    INCL_RANGE      reduce using rule 50 (term3 -> term4 .)
    EXCL_RANGE      reduce using rule 50 (term3 -> term4 .)
    LOGICAL_OR      reduce using rule 50 (term3 -> term4 .)
    BIT_OR          reduce using rule 50 (term3 -> term4 .)
    SEMI_COLON      reduce using rule 50 (term3 -> term4 .)
    NEWLINE         reduce using rule 50 (term3 -> term4 .)
    def             reduce using rule 50 (term3 -> term4 .)
    class           reduce using rule 50 (term3 -> term4 .)
    break           reduce using rule 50 (term3 -> term4 .)
    if              reduce using rule 50 (term3 -> term4 .)
    while           reduce using rule 50 (term3 -> term4 .)
    until           reduce using rule 50 (term3 -> term4 .)
    case            reduce using rule 50 (term3 -> term4 .)
    for             reduce using rule 50 (term3 -> term4 .)
    return          reduce using rule 50 (term3 -> term4 .)
    IDENTIFIER      reduce using rule 50 (term3 -> term4 .)
    OPEN_BRACKET    reduce using rule 50 (term3 -> term4 .)
    CONSTANT_RESOLUTION reduce using rule 50 (term3 -> term4 .)
    OPEN_SQUARE     reduce using rule 50 (term3 -> term4 .)
    OPEN_FLOWER     reduce using rule 50 (term3 -> term4 .)
    nil             reduce using rule 50 (term3 -> term4 .)
    self            reduce using rule 50 (term3 -> term4 .)
    NUMBER          reduce using rule 50 (term3 -> term4 .)
    FLOAT           reduce using rule 50 (term3 -> term4 .)
    STRING          reduce using rule 50 (term3 -> term4 .)
    true            reduce using rule 50 (term3 -> term4 .)
    false           reduce using rule 50 (term3 -> term4 .)
    GLOBAL          reduce using rule 50 (term3 -> term4 .)
    AT_THE_RATE     reduce using rule 50 (term3 -> term4 .)
    MINUS           reduce using rule 50 (term3 -> term4 .)
    PLUS            reduce using rule 50 (term3 -> term4 .)
    end             reduce using rule 50 (term3 -> term4 .)
    CLOSE_BRACKET   reduce using rule 50 (term3 -> term4 .)
    COMMA           reduce using rule 50 (term3 -> term4 .)
    $end            reduce using rule 50 (term3 -> term4 .)
    MAP             reduce using rule 50 (term3 -> term4 .)
    when            reduce using rule 50 (term3 -> term4 .)
    elsif           reduce using rule 50 (term3 -> term4 .)
    else            reduce using rule 50 (term3 -> term4 .)
    do              reduce using rule 50 (term3 -> term4 .)
    then            reduce using rule 50 (term3 -> term4 .)
    CLOSE_SQUARE    reduce using rule 50 (term3 -> term4 .)
    CLOSE_FLOWER    reduce using rule 50 (term3 -> term4 .)


state 18

    (46) term2 -> term3 . INCL_RANGE term3
    (47) term2 -> term3 . EXCL_RANGE term3
    (48) term2 -> term3 .
    (49) term3 -> term3 . LOGICAL_OR term4

    INCL_RANGE      shift and go to state 110
    EXCL_RANGE      shift and go to state 111
    BIT_OR          reduce using rule 48 (term2 -> term3 .)
    MAP             reduce using rule 48 (term2 -> term3 .)
    COMMA           reduce using rule 48 (term2 -> term3 .)
    CLOSE_BRACKET   reduce using rule 48 (term2 -> term3 .)
    SEMI_COLON      reduce using rule 48 (term2 -> term3 .)
    NEWLINE         reduce using rule 48 (term2 -> term3 .)
    def             reduce using rule 48 (term2 -> term3 .)
    class           reduce using rule 48 (term2 -> term3 .)
    break           reduce using rule 48 (term2 -> term3 .)
    if              reduce using rule 48 (term2 -> term3 .)
    while           reduce using rule 48 (term2 -> term3 .)
    until           reduce using rule 48 (term2 -> term3 .)
    case            reduce using rule 48 (term2 -> term3 .)
    for             reduce using rule 48 (term2 -> term3 .)
    return          reduce using rule 48 (term2 -> term3 .)
    IDENTIFIER      reduce using rule 48 (term2 -> term3 .)
    OPEN_BRACKET    reduce using rule 48 (term2 -> term3 .)
    CONSTANT_RESOLUTION reduce using rule 48 (term2 -> term3 .)
    OPEN_SQUARE     reduce using rule 48 (term2 -> term3 .)
    OPEN_FLOWER     reduce using rule 48 (term2 -> term3 .)
    nil             reduce using rule 48 (term2 -> term3 .)
    self            reduce using rule 48 (term2 -> term3 .)
    NUMBER          reduce using rule 48 (term2 -> term3 .)
    FLOAT           reduce using rule 48 (term2 -> term3 .)
    STRING          reduce using rule 48 (term2 -> term3 .)
    true            reduce using rule 48 (term2 -> term3 .)
    false           reduce using rule 48 (term2 -> term3 .)
    GLOBAL          reduce using rule 48 (term2 -> term3 .)
    AT_THE_RATE     reduce using rule 48 (term2 -> term3 .)
    MINUS           reduce using rule 48 (term2 -> term3 .)
    PLUS            reduce using rule 48 (term2 -> term3 .)
    $end            reduce using rule 48 (term2 -> term3 .)
    when            reduce using rule 48 (term2 -> term3 .)
    end             reduce using rule 48 (term2 -> term3 .)
    elsif           reduce using rule 48 (term2 -> term3 .)
    else            reduce using rule 48 (term2 -> term3 .)
    CLOSE_SQUARE    reduce using rule 48 (term2 -> term3 .)
    do              reduce using rule 48 (term2 -> term3 .)
    then            reduce using rule 48 (term2 -> term3 .)
    CLOSE_FLOWER    reduce using rule 48 (term2 -> term3 .)
    LOGICAL_OR      shift and go to state 112


state 19

    (45) term1 -> term2 .

    COMMA           reduce using rule 45 (term1 -> term2 .)
    BIT_OR          reduce using rule 45 (term1 -> term2 .)
    SEMI_COLON      reduce using rule 45 (term1 -> term2 .)
    NEWLINE         reduce using rule 45 (term1 -> term2 .)
    def             reduce using rule 45 (term1 -> term2 .)
    class           reduce using rule 45 (term1 -> term2 .)
    break           reduce using rule 45 (term1 -> term2 .)
    if              reduce using rule 45 (term1 -> term2 .)
    while           reduce using rule 45 (term1 -> term2 .)
    until           reduce using rule 45 (term1 -> term2 .)
    case            reduce using rule 45 (term1 -> term2 .)
    for             reduce using rule 45 (term1 -> term2 .)
    return          reduce using rule 45 (term1 -> term2 .)
    IDENTIFIER      reduce using rule 45 (term1 -> term2 .)
    OPEN_BRACKET    reduce using rule 45 (term1 -> term2 .)
    CONSTANT_RESOLUTION reduce using rule 45 (term1 -> term2 .)
    OPEN_SQUARE     reduce using rule 45 (term1 -> term2 .)
    OPEN_FLOWER     reduce using rule 45 (term1 -> term2 .)
    nil             reduce using rule 45 (term1 -> term2 .)
    self            reduce using rule 45 (term1 -> term2 .)
    NUMBER          reduce using rule 45 (term1 -> term2 .)
    FLOAT           reduce using rule 45 (term1 -> term2 .)
    STRING          reduce using rule 45 (term1 -> term2 .)
    true            reduce using rule 45 (term1 -> term2 .)
    false           reduce using rule 45 (term1 -> term2 .)
    GLOBAL          reduce using rule 45 (term1 -> term2 .)
    AT_THE_RATE     reduce using rule 45 (term1 -> term2 .)
    MINUS           reduce using rule 45 (term1 -> term2 .)
    PLUS            reduce using rule 45 (term1 -> term2 .)
    $end            reduce using rule 45 (term1 -> term2 .)
    when            reduce using rule 45 (term1 -> term2 .)
    end             reduce using rule 45 (term1 -> term2 .)
    elsif           reduce using rule 45 (term1 -> term2 .)
    else            reduce using rule 45 (term1 -> term2 .)
    do              reduce using rule 45 (term1 -> term2 .)
    then            reduce using rule 45 (term1 -> term2 .)
    CLOSE_BRACKET   reduce using rule 45 (term1 -> term2 .)
    CLOSE_SQUARE    reduce using rule 45 (term1 -> term2 .)
    MAP             reduce using rule 45 (term1 -> term2 .)
    CLOSE_FLOWER    reduce using rule 45 (term1 -> term2 .)


state 20

    (42) term0 -> term1 .

    BIT_OR          reduce using rule 42 (term0 -> term1 .)
    COMMA           reduce using rule 42 (term0 -> term1 .)
    SEMI_COLON      reduce using rule 42 (term0 -> term1 .)
    NEWLINE         reduce using rule 42 (term0 -> term1 .)
    def             reduce using rule 42 (term0 -> term1 .)
    class           reduce using rule 42 (term0 -> term1 .)
    break           reduce using rule 42 (term0 -> term1 .)
    if              reduce using rule 42 (term0 -> term1 .)
    while           reduce using rule 42 (term0 -> term1 .)
    until           reduce using rule 42 (term0 -> term1 .)
    case            reduce using rule 42 (term0 -> term1 .)
    for             reduce using rule 42 (term0 -> term1 .)
    return          reduce using rule 42 (term0 -> term1 .)
    IDENTIFIER      reduce using rule 42 (term0 -> term1 .)
    OPEN_BRACKET    reduce using rule 42 (term0 -> term1 .)
    CONSTANT_RESOLUTION reduce using rule 42 (term0 -> term1 .)
    OPEN_SQUARE     reduce using rule 42 (term0 -> term1 .)
    OPEN_FLOWER     reduce using rule 42 (term0 -> term1 .)
    nil             reduce using rule 42 (term0 -> term1 .)
    self            reduce using rule 42 (term0 -> term1 .)
    NUMBER          reduce using rule 42 (term0 -> term1 .)
    FLOAT           reduce using rule 42 (term0 -> term1 .)
    STRING          reduce using rule 42 (term0 -> term1 .)
    true            reduce using rule 42 (term0 -> term1 .)
    false           reduce using rule 42 (term0 -> term1 .)
    GLOBAL          reduce using rule 42 (term0 -> term1 .)
    AT_THE_RATE     reduce using rule 42 (term0 -> term1 .)
    MINUS           reduce using rule 42 (term0 -> term1 .)
    PLUS            reduce using rule 42 (term0 -> term1 .)
    $end            reduce using rule 42 (term0 -> term1 .)
    when            reduce using rule 42 (term0 -> term1 .)
    end             reduce using rule 42 (term0 -> term1 .)
    elsif           reduce using rule 42 (term0 -> term1 .)
    else            reduce using rule 42 (term0 -> term1 .)
    do              reduce using rule 42 (term0 -> term1 .)
    then            reduce using rule 42 (term0 -> term1 .)
    CLOSE_BRACKET   reduce using rule 42 (term0 -> term1 .)
    CLOSE_FLOWER    reduce using rule 42 (term0 -> term1 .)
    MAP             reduce using rule 42 (term0 -> term1 .)
    CLOSE_SQUARE    reduce using rule 42 (term0 -> term1 .)


state 21

    (38) arg -> term0 .

    BIT_OR          reduce using rule 38 (arg -> term0 .)
    SEMI_COLON      reduce using rule 38 (arg -> term0 .)
    NEWLINE         reduce using rule 38 (arg -> term0 .)
    def             reduce using rule 38 (arg -> term0 .)
    class           reduce using rule 38 (arg -> term0 .)
    break           reduce using rule 38 (arg -> term0 .)
    if              reduce using rule 38 (arg -> term0 .)
    while           reduce using rule 38 (arg -> term0 .)
    until           reduce using rule 38 (arg -> term0 .)
    case            reduce using rule 38 (arg -> term0 .)
    for             reduce using rule 38 (arg -> term0 .)
    return          reduce using rule 38 (arg -> term0 .)
    IDENTIFIER      reduce using rule 38 (arg -> term0 .)
    OPEN_BRACKET    reduce using rule 38 (arg -> term0 .)
    CONSTANT_RESOLUTION reduce using rule 38 (arg -> term0 .)
    OPEN_SQUARE     reduce using rule 38 (arg -> term0 .)
    OPEN_FLOWER     reduce using rule 38 (arg -> term0 .)
    nil             reduce using rule 38 (arg -> term0 .)
    self            reduce using rule 38 (arg -> term0 .)
    NUMBER          reduce using rule 38 (arg -> term0 .)
    FLOAT           reduce using rule 38 (arg -> term0 .)
    STRING          reduce using rule 38 (arg -> term0 .)
    true            reduce using rule 38 (arg -> term0 .)
    false           reduce using rule 38 (arg -> term0 .)
    GLOBAL          reduce using rule 38 (arg -> term0 .)
    AT_THE_RATE     reduce using rule 38 (arg -> term0 .)
    MINUS           reduce using rule 38 (arg -> term0 .)
    PLUS            reduce using rule 38 (arg -> term0 .)
    end             reduce using rule 38 (arg -> term0 .)
    CLOSE_BRACKET   reduce using rule 38 (arg -> term0 .)
    MAP             reduce using rule 38 (arg -> term0 .)
    COMMA           reduce using rule 38 (arg -> term0 .)
    CLOSE_SQUARE    reduce using rule 38 (arg -> term0 .)
    $end            reduce using rule 38 (arg -> term0 .)
    when            reduce using rule 38 (arg -> term0 .)
    elsif           reduce using rule 38 (arg -> term0 .)
    else            reduce using rule 38 (arg -> term0 .)
    do              reduce using rule 38 (arg -> term0 .)
    then            reduce using rule 38 (arg -> term0 .)
    CLOSE_FLOWER    reduce using rule 38 (arg -> term0 .)


state 22

    (69) term8 -> term9 .
    (70) term9 -> term9 . PLUS term10
    (71) term9 -> term9 . MINUS term10

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LEFT_SHIFT      reduce using rule 69 (term8 -> term9 .)
    RIGHT_SHIFT     reduce using rule 69 (term8 -> term9 .)
    BIT_AND         reduce using rule 69 (term8 -> term9 .)
    BIT_XOR         reduce using rule 69 (term8 -> term9 .)
    LESS            reduce using rule 69 (term8 -> term9 .)
    LESS_EQUALS     reduce using rule 69 (term8 -> term9 .)
    GREATER         reduce using rule 69 (term8 -> term9 .)
    GREATER_EQUALS  reduce using rule 69 (term8 -> term9 .)
    INCL_RANGE      reduce using rule 69 (term8 -> term9 .)
    EXCL_RANGE      reduce using rule 69 (term8 -> term9 .)
    LOGICAL_OR      reduce using rule 69 (term8 -> term9 .)
    BIT_OR          reduce using rule 69 (term8 -> term9 .)
    SEMI_COLON      reduce using rule 69 (term8 -> term9 .)
    NEWLINE         reduce using rule 69 (term8 -> term9 .)
    def             reduce using rule 69 (term8 -> term9 .)
    class           reduce using rule 69 (term8 -> term9 .)
    break           reduce using rule 69 (term8 -> term9 .)
    if              reduce using rule 69 (term8 -> term9 .)
    while           reduce using rule 69 (term8 -> term9 .)
    until           reduce using rule 69 (term8 -> term9 .)
    case            reduce using rule 69 (term8 -> term9 .)
    for             reduce using rule 69 (term8 -> term9 .)
    return          reduce using rule 69 (term8 -> term9 .)
    IDENTIFIER      reduce using rule 69 (term8 -> term9 .)
    OPEN_BRACKET    reduce using rule 69 (term8 -> term9 .)
    CONSTANT_RESOLUTION reduce using rule 69 (term8 -> term9 .)
    OPEN_SQUARE     reduce using rule 69 (term8 -> term9 .)
    OPEN_FLOWER     reduce using rule 69 (term8 -> term9 .)
    nil             reduce using rule 69 (term8 -> term9 .)
    self            reduce using rule 69 (term8 -> term9 .)
    NUMBER          reduce using rule 69 (term8 -> term9 .)
    FLOAT           reduce using rule 69 (term8 -> term9 .)
    STRING          reduce using rule 69 (term8 -> term9 .)
    true            reduce using rule 69 (term8 -> term9 .)
    false           reduce using rule 69 (term8 -> term9 .)
    GLOBAL          reduce using rule 69 (term8 -> term9 .)
    AT_THE_RATE     reduce using rule 69 (term8 -> term9 .)
    $end            reduce using rule 69 (term8 -> term9 .)
    CLOSE_BRACKET   reduce using rule 69 (term8 -> term9 .)
    MAP             reduce using rule 69 (term8 -> term9 .)
    COMMA           reduce using rule 69 (term8 -> term9 .)
    when            reduce using rule 69 (term8 -> term9 .)
    end             reduce using rule 69 (term8 -> term9 .)
    elsif           reduce using rule 69 (term8 -> term9 .)
    else            reduce using rule 69 (term8 -> term9 .)
    do              reduce using rule 69 (term8 -> term9 .)
    then            reduce using rule 69 (term8 -> term9 .)
    CLOSE_SQUARE    reduce using rule 69 (term8 -> term9 .)
    CLOSE_FLOWER    reduce using rule 69 (term8 -> term9 .)
    DOUBLE_EQUALS   reduce using rule 69 (term8 -> term9 .)
    TRIPLE_EQUALS   reduce using rule 69 (term8 -> term9 .)
    NOT_EQUALS      reduce using rule 69 (term8 -> term9 .)
    EQUAL_TILDE     reduce using rule 69 (term8 -> term9 .)
    BANG_TILDE      reduce using rule 69 (term8 -> term9 .)
    COMPARISON      reduce using rule 69 (term8 -> term9 .)
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114

  ! MINUS           [ reduce using rule 69 (term8 -> term9 .) ]
  ! PLUS            [ reduce using rule 69 (term8 -> term9 .) ]


state 23

    (186) varname -> AT_THE_RATE . IDENTIFIER

    IDENTIFIER      shift and go to state 115


state 24

    (188) newline -> SEMI_COLON .

    def             reduce using rule 188 (newline -> SEMI_COLON .)
    class           reduce using rule 188 (newline -> SEMI_COLON .)
    break           reduce using rule 188 (newline -> SEMI_COLON .)
    if              reduce using rule 188 (newline -> SEMI_COLON .)
    while           reduce using rule 188 (newline -> SEMI_COLON .)
    until           reduce using rule 188 (newline -> SEMI_COLON .)
    case            reduce using rule 188 (newline -> SEMI_COLON .)
    for             reduce using rule 188 (newline -> SEMI_COLON .)
    return          reduce using rule 188 (newline -> SEMI_COLON .)
    IDENTIFIER      reduce using rule 188 (newline -> SEMI_COLON .)
    OPEN_BRACKET    reduce using rule 188 (newline -> SEMI_COLON .)
    CONSTANT_RESOLUTION reduce using rule 188 (newline -> SEMI_COLON .)
    OPEN_SQUARE     reduce using rule 188 (newline -> SEMI_COLON .)
    OPEN_FLOWER     reduce using rule 188 (newline -> SEMI_COLON .)
    nil             reduce using rule 188 (newline -> SEMI_COLON .)
    self            reduce using rule 188 (newline -> SEMI_COLON .)
    NUMBER          reduce using rule 188 (newline -> SEMI_COLON .)
    FLOAT           reduce using rule 188 (newline -> SEMI_COLON .)
    STRING          reduce using rule 188 (newline -> SEMI_COLON .)
    true            reduce using rule 188 (newline -> SEMI_COLON .)
    false           reduce using rule 188 (newline -> SEMI_COLON .)
    GLOBAL          reduce using rule 188 (newline -> SEMI_COLON .)
    AT_THE_RATE     reduce using rule 188 (newline -> SEMI_COLON .)
    MINUS           reduce using rule 188 (newline -> SEMI_COLON .)
    PLUS            reduce using rule 188 (newline -> SEMI_COLON .)
    when            reduce using rule 188 (newline -> SEMI_COLON .)
    else            reduce using rule 188 (newline -> SEMI_COLON .)
    end             reduce using rule 188 (newline -> SEMI_COLON .)
    then            reduce using rule 188 (newline -> SEMI_COLON .)
    SEMI_COLON      reduce using rule 188 (newline -> SEMI_COLON .)
    NEWLINE         reduce using rule 188 (newline -> SEMI_COLON .)
    elsif           reduce using rule 188 (newline -> SEMI_COLON .)
    do              reduce using rule 188 (newline -> SEMI_COLON .)
    $end            reduce using rule 188 (newline -> SEMI_COLON .)


state 25

    (27) expr2 -> arg .
    (37) arg -> arg . BIT_OR term0

    SEMI_COLON      reduce using rule 27 (expr2 -> arg .)
    NEWLINE         reduce using rule 27 (expr2 -> arg .)
    def             reduce using rule 27 (expr2 -> arg .)
    class           reduce using rule 27 (expr2 -> arg .)
    break           reduce using rule 27 (expr2 -> arg .)
    if              reduce using rule 27 (expr2 -> arg .)
    while           reduce using rule 27 (expr2 -> arg .)
    until           reduce using rule 27 (expr2 -> arg .)
    case            reduce using rule 27 (expr2 -> arg .)
    for             reduce using rule 27 (expr2 -> arg .)
    return          reduce using rule 27 (expr2 -> arg .)
    IDENTIFIER      reduce using rule 27 (expr2 -> arg .)
    OPEN_BRACKET    reduce using rule 27 (expr2 -> arg .)
    CONSTANT_RESOLUTION reduce using rule 27 (expr2 -> arg .)
    OPEN_SQUARE     reduce using rule 27 (expr2 -> arg .)
    OPEN_FLOWER     reduce using rule 27 (expr2 -> arg .)
    nil             reduce using rule 27 (expr2 -> arg .)
    self            reduce using rule 27 (expr2 -> arg .)
    NUMBER          reduce using rule 27 (expr2 -> arg .)
    FLOAT           reduce using rule 27 (expr2 -> arg .)
    STRING          reduce using rule 27 (expr2 -> arg .)
    true            reduce using rule 27 (expr2 -> arg .)
    false           reduce using rule 27 (expr2 -> arg .)
    GLOBAL          reduce using rule 27 (expr2 -> arg .)
    AT_THE_RATE     reduce using rule 27 (expr2 -> arg .)
    MINUS           reduce using rule 27 (expr2 -> arg .)
    PLUS            reduce using rule 27 (expr2 -> arg .)
    end             reduce using rule 27 (expr2 -> arg .)
    $end            reduce using rule 27 (expr2 -> arg .)
    when            reduce using rule 27 (expr2 -> arg .)
    elsif           reduce using rule 27 (expr2 -> arg .)
    else            reduce using rule 27 (expr2 -> arg .)
    do              reduce using rule 27 (expr2 -> arg .)
    CLOSE_BRACKET   reduce using rule 27 (expr2 -> arg .)
    then            reduce using rule 27 (expr2 -> arg .)
    BIT_OR          shift and go to state 116


state 26

    (19) expr -> for . mlhs in expr1 pdo compstmt end
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    OPEN_BRACKET    shift and go to state 118
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    varname                        shift and go to state 30
    mlhs                           shift and go to state 117
    lhs                            shift and go to state 120
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 119

state 27

    (3) multcompstmt -> stmt . multcompstmt
    (2) multcompstmt -> . newline stmt multcompstmt
    (3) multcompstmt -> . stmt multcompstmt
    (4) multcompstmt -> . newline
    (5) multcompstmt -> . empty
    (188) newline -> . SEMI_COLON
    (189) newline -> . NEWLINE
    (6) stmt -> . def IDENTIFIER argdecl compstmt end
    (7) stmt -> . def singleton DOT IDENTIFIER argdecl compstmt end
    (8) stmt -> . def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end
    (9) stmt -> . class IDENTIFIER LESS IDENTIFIER compstmt end
    (10) stmt -> . class IDENTIFIER compstmt end
    (11) stmt -> . break
    (12) stmt -> . expr
    (190) empty -> .
    (13) expr -> . if expr1 pthen compstmt end
    (14) expr -> . if expr1 pthen compstmt multelsif else compstmt end
    (15) expr -> . while expr1 pdo compstmt end
    (16) expr -> . until expr1 pdo compstmt end
    (17) expr -> . case compstmt multcase else compstmt end
    (18) expr -> . case compstmt multcase end
    (19) expr -> . for mlhs in expr1 pdo compstmt end
    (20) expr -> . expr1
    (21) expr1 -> . return callargs
    (22) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (23) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (24) expr1 -> . return
    (25) expr1 -> . expr2
    (26) expr2 -> . call
    (27) expr2 -> . arg
    (28) call -> . function
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (29) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (30) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) function -> . primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> . primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (33) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> . primary DOT IDENTIFIER
    (36) function -> . primary CONSTANT_RESOLUTION IDENTIFIER
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary

    SEMI_COLON      shift and go to state 24
    NEWLINE         shift and go to state 4
    def             shift and go to state 45
    class           shift and go to state 57
    break           shift and go to state 9
    $end            reduce using rule 190 (empty -> .)
    when            reduce using rule 190 (empty -> .)
    end             reduce using rule 190 (empty -> .)
    elsif           reduce using rule 190 (empty -> .)
    else            reduce using rule 190 (empty -> .)
    if              shift and go to state 49
    while           shift and go to state 44
    until           shift and go to state 36
    case            shift and go to state 42
    for             shift and go to state 26
    return          shift and go to state 7
    IDENTIFIER      shift and go to state 35
    OPEN_BRACKET    shift and go to state 5
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 32
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 25
    expr2                          shift and go to state 51
    literal                        shift and go to state 33
    expr1                          shift and go to state 52
    call                           shift and go to state 34
    varname                        shift and go to state 30
    empty                          shift and go to state 37
    function                       shift and go to state 38
    newline                        shift and go to state 55
    multcompstmt                   shift and go to state 121
    stmt                           shift and go to state 27
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 56
    term5                          shift and go to state 16
    expr                           shift and go to state 43
    lhs                            shift and go to state 59
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 28

    (86) primary -> OPEN_SQUARE . args COMMA CLOSE_SQUARE
    (87) primary -> OPEN_SQUARE . args CLOSE_SQUARE
    (88) primary -> OPEN_SQUARE . CLOSE_SQUARE
    (140) args -> . arg multargs
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    CLOSE_SQUARE    shift and go to state 123
    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 122
    literal                        shift and go to state 33
    args                           shift and go to state 124
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 29

    (0) S' -> compstmt .



state 30

    (163) variable -> varname .

    CONSTANT_RESOLUTION reduce using rule 163 (variable -> varname .)
    OPEN_SQUARE     reduce using rule 163 (variable -> varname .)
    DOT             reduce using rule 163 (variable -> varname .)
    POWER           reduce using rule 163 (variable -> varname .)
    MULTIPLY        reduce using rule 163 (variable -> varname .)
    DIVIDE          reduce using rule 163 (variable -> varname .)
    MODULO          reduce using rule 163 (variable -> varname .)
    PLUS            reduce using rule 163 (variable -> varname .)
    MINUS           reduce using rule 163 (variable -> varname .)
    LEFT_SHIFT      reduce using rule 163 (variable -> varname .)
    RIGHT_SHIFT     reduce using rule 163 (variable -> varname .)
    BIT_AND         reduce using rule 163 (variable -> varname .)
    BIT_XOR         reduce using rule 163 (variable -> varname .)
    DOUBLE_EQUALS   reduce using rule 163 (variable -> varname .)
    TRIPLE_EQUALS   reduce using rule 163 (variable -> varname .)
    NOT_EQUALS      reduce using rule 163 (variable -> varname .)
    EQUAL_TILDE     reduce using rule 163 (variable -> varname .)
    BANG_TILDE      reduce using rule 163 (variable -> varname .)
    COMPARISON      reduce using rule 163 (variable -> varname .)
    LESS            reduce using rule 163 (variable -> varname .)
    LESS_EQUALS     reduce using rule 163 (variable -> varname .)
    GREATER         reduce using rule 163 (variable -> varname .)
    GREATER_EQUALS  reduce using rule 163 (variable -> varname .)
    INCL_RANGE      reduce using rule 163 (variable -> varname .)
    EXCL_RANGE      reduce using rule 163 (variable -> varname .)
    LOGICAL_OR      reduce using rule 163 (variable -> varname .)
    BIT_OR          reduce using rule 163 (variable -> varname .)
    SEMI_COLON      reduce using rule 163 (variable -> varname .)
    NEWLINE         reduce using rule 163 (variable -> varname .)
    def             reduce using rule 163 (variable -> varname .)
    class           reduce using rule 163 (variable -> varname .)
    break           reduce using rule 163 (variable -> varname .)
    if              reduce using rule 163 (variable -> varname .)
    while           reduce using rule 163 (variable -> varname .)
    until           reduce using rule 163 (variable -> varname .)
    case            reduce using rule 163 (variable -> varname .)
    for             reduce using rule 163 (variable -> varname .)
    return          reduce using rule 163 (variable -> varname .)
    IDENTIFIER      reduce using rule 163 (variable -> varname .)
    OPEN_BRACKET    reduce using rule 163 (variable -> varname .)
    OPEN_FLOWER     reduce using rule 163 (variable -> varname .)
    nil             reduce using rule 163 (variable -> varname .)
    self            reduce using rule 163 (variable -> varname .)
    NUMBER          reduce using rule 163 (variable -> varname .)
    FLOAT           reduce using rule 163 (variable -> varname .)
    STRING          reduce using rule 163 (variable -> varname .)
    true            reduce using rule 163 (variable -> varname .)
    false           reduce using rule 163 (variable -> varname .)
    GLOBAL          reduce using rule 163 (variable -> varname .)
    AT_THE_RATE     reduce using rule 163 (variable -> varname .)
    $end            reduce using rule 163 (variable -> varname .)
    CLOSE_BRACKET   reduce using rule 163 (variable -> varname .)
    MAP             reduce using rule 163 (variable -> varname .)
    COMMA           reduce using rule 163 (variable -> varname .)
    when            reduce using rule 163 (variable -> varname .)
    end             reduce using rule 163 (variable -> varname .)
    elsif           reduce using rule 163 (variable -> varname .)
    else            reduce using rule 163 (variable -> varname .)
    do              reduce using rule 163 (variable -> varname .)
    then            reduce using rule 163 (variable -> varname .)
    CLOSE_SQUARE    reduce using rule 163 (variable -> varname .)
    CLOSE_FLOWER    reduce using rule 163 (variable -> varname .)
    EQUALS          reduce using rule 163 (variable -> varname .)
    MODULO_EQUALS   reduce using rule 163 (variable -> varname .)
    DIVIDE_EQUALS   reduce using rule 163 (variable -> varname .)
    MINUS_EQUALS    reduce using rule 163 (variable -> varname .)
    PLUS_EQUALS     reduce using rule 163 (variable -> varname .)
    OR_EQUALS       reduce using rule 163 (variable -> varname .)
    AND_EQUALS      reduce using rule 163 (variable -> varname .)
    XOR_EQUALS      reduce using rule 163 (variable -> varname .)
    RIGHT_SHIFT_EQUALS reduce using rule 163 (variable -> varname .)
    LEFT_SHIFT_EQUALS reduce using rule 163 (variable -> varname .)
    MULTIPLY_EQUALS reduce using rule 163 (variable -> varname .)
    LOGICAL_AND_EQUALS reduce using rule 163 (variable -> varname .)
    LOGICAL_OR_EQUALS reduce using rule 163 (variable -> varname .)
    POWER_EQUALS    reduce using rule 163 (variable -> varname .)
    in              reduce using rule 163 (variable -> varname .)


state 31

    (185) varname -> GLOBAL .

    OPEN_SQUARE     reduce using rule 185 (varname -> GLOBAL .)
    DOT             reduce using rule 185 (varname -> GLOBAL .)
    CONSTANT_RESOLUTION reduce using rule 185 (varname -> GLOBAL .)
    COMMA           reduce using rule 185 (varname -> GLOBAL .)
    EQUALS          reduce using rule 185 (varname -> GLOBAL .)
    MODULO_EQUALS   reduce using rule 185 (varname -> GLOBAL .)
    DIVIDE_EQUALS   reduce using rule 185 (varname -> GLOBAL .)
    MINUS_EQUALS    reduce using rule 185 (varname -> GLOBAL .)
    PLUS_EQUALS     reduce using rule 185 (varname -> GLOBAL .)
    OR_EQUALS       reduce using rule 185 (varname -> GLOBAL .)
    AND_EQUALS      reduce using rule 185 (varname -> GLOBAL .)
    XOR_EQUALS      reduce using rule 185 (varname -> GLOBAL .)
    RIGHT_SHIFT_EQUALS reduce using rule 185 (varname -> GLOBAL .)
    LEFT_SHIFT_EQUALS reduce using rule 185 (varname -> GLOBAL .)
    MULTIPLY_EQUALS reduce using rule 185 (varname -> GLOBAL .)
    LOGICAL_AND_EQUALS reduce using rule 185 (varname -> GLOBAL .)
    LOGICAL_OR_EQUALS reduce using rule 185 (varname -> GLOBAL .)
    POWER_EQUALS    reduce using rule 185 (varname -> GLOBAL .)
    POWER           reduce using rule 185 (varname -> GLOBAL .)
    MULTIPLY        reduce using rule 185 (varname -> GLOBAL .)
    DIVIDE          reduce using rule 185 (varname -> GLOBAL .)
    MODULO          reduce using rule 185 (varname -> GLOBAL .)
    PLUS            reduce using rule 185 (varname -> GLOBAL .)
    MINUS           reduce using rule 185 (varname -> GLOBAL .)
    LEFT_SHIFT      reduce using rule 185 (varname -> GLOBAL .)
    RIGHT_SHIFT     reduce using rule 185 (varname -> GLOBAL .)
    BIT_AND         reduce using rule 185 (varname -> GLOBAL .)
    BIT_XOR         reduce using rule 185 (varname -> GLOBAL .)
    DOUBLE_EQUALS   reduce using rule 185 (varname -> GLOBAL .)
    TRIPLE_EQUALS   reduce using rule 185 (varname -> GLOBAL .)
    NOT_EQUALS      reduce using rule 185 (varname -> GLOBAL .)
    EQUAL_TILDE     reduce using rule 185 (varname -> GLOBAL .)
    BANG_TILDE      reduce using rule 185 (varname -> GLOBAL .)
    COMPARISON      reduce using rule 185 (varname -> GLOBAL .)
    LESS            reduce using rule 185 (varname -> GLOBAL .)
    LESS_EQUALS     reduce using rule 185 (varname -> GLOBAL .)
    GREATER         reduce using rule 185 (varname -> GLOBAL .)
    GREATER_EQUALS  reduce using rule 185 (varname -> GLOBAL .)
    INCL_RANGE      reduce using rule 185 (varname -> GLOBAL .)
    EXCL_RANGE      reduce using rule 185 (varname -> GLOBAL .)
    LOGICAL_OR      reduce using rule 185 (varname -> GLOBAL .)
    BIT_OR          reduce using rule 185 (varname -> GLOBAL .)
    SEMI_COLON      reduce using rule 185 (varname -> GLOBAL .)
    NEWLINE         reduce using rule 185 (varname -> GLOBAL .)
    def             reduce using rule 185 (varname -> GLOBAL .)
    class           reduce using rule 185 (varname -> GLOBAL .)
    break           reduce using rule 185 (varname -> GLOBAL .)
    if              reduce using rule 185 (varname -> GLOBAL .)
    while           reduce using rule 185 (varname -> GLOBAL .)
    until           reduce using rule 185 (varname -> GLOBAL .)
    case            reduce using rule 185 (varname -> GLOBAL .)
    for             reduce using rule 185 (varname -> GLOBAL .)
    return          reduce using rule 185 (varname -> GLOBAL .)
    IDENTIFIER      reduce using rule 185 (varname -> GLOBAL .)
    OPEN_BRACKET    reduce using rule 185 (varname -> GLOBAL .)
    OPEN_FLOWER     reduce using rule 185 (varname -> GLOBAL .)
    nil             reduce using rule 185 (varname -> GLOBAL .)
    self            reduce using rule 185 (varname -> GLOBAL .)
    NUMBER          reduce using rule 185 (varname -> GLOBAL .)
    FLOAT           reduce using rule 185 (varname -> GLOBAL .)
    STRING          reduce using rule 185 (varname -> GLOBAL .)
    true            reduce using rule 185 (varname -> GLOBAL .)
    false           reduce using rule 185 (varname -> GLOBAL .)
    GLOBAL          reduce using rule 185 (varname -> GLOBAL .)
    AT_THE_RATE     reduce using rule 185 (varname -> GLOBAL .)
    $end            reduce using rule 185 (varname -> GLOBAL .)
    when            reduce using rule 185 (varname -> GLOBAL .)
    end             reduce using rule 185 (varname -> GLOBAL .)
    elsif           reduce using rule 185 (varname -> GLOBAL .)
    else            reduce using rule 185 (varname -> GLOBAL .)
    do              reduce using rule 185 (varname -> GLOBAL .)
    then            reduce using rule 185 (varname -> GLOBAL .)
    CLOSE_BRACKET   reduce using rule 185 (varname -> GLOBAL .)
    CLOSE_FLOWER    reduce using rule 185 (varname -> GLOBAL .)
    MAP             reduce using rule 185 (varname -> GLOBAL .)
    CLOSE_SQUARE    reduce using rule 185 (varname -> GLOBAL .)
    in              reduce using rule 185 (varname -> GLOBAL .)


state 32

    (31) function -> primary . DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> primary . DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (33) function -> primary . CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> primary . CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> primary . DOT IDENTIFIER
    (36) function -> primary . CONSTANT_RESOLUTION IDENTIFIER
    (81) term13 -> primary . POWER term13
    (82) term13 -> primary .

  ! shift/reduce conflict for CONSTANT_RESOLUTION resolved as shift
    DOT             shift and go to state 127
    CONSTANT_RESOLUTION shift and go to state 125
    POWER           shift and go to state 126
    MULTIPLY        reduce using rule 82 (term13 -> primary .)
    DIVIDE          reduce using rule 82 (term13 -> primary .)
    MODULO          reduce using rule 82 (term13 -> primary .)
    PLUS            reduce using rule 82 (term13 -> primary .)
    MINUS           reduce using rule 82 (term13 -> primary .)
    LEFT_SHIFT      reduce using rule 82 (term13 -> primary .)
    RIGHT_SHIFT     reduce using rule 82 (term13 -> primary .)
    BIT_AND         reduce using rule 82 (term13 -> primary .)
    BIT_XOR         reduce using rule 82 (term13 -> primary .)
    DOUBLE_EQUALS   reduce using rule 82 (term13 -> primary .)
    TRIPLE_EQUALS   reduce using rule 82 (term13 -> primary .)
    NOT_EQUALS      reduce using rule 82 (term13 -> primary .)
    EQUAL_TILDE     reduce using rule 82 (term13 -> primary .)
    BANG_TILDE      reduce using rule 82 (term13 -> primary .)
    COMPARISON      reduce using rule 82 (term13 -> primary .)
    LESS            reduce using rule 82 (term13 -> primary .)
    LESS_EQUALS     reduce using rule 82 (term13 -> primary .)
    GREATER         reduce using rule 82 (term13 -> primary .)
    GREATER_EQUALS  reduce using rule 82 (term13 -> primary .)
    INCL_RANGE      reduce using rule 82 (term13 -> primary .)
    EXCL_RANGE      reduce using rule 82 (term13 -> primary .)
    LOGICAL_OR      reduce using rule 82 (term13 -> primary .)
    BIT_OR          reduce using rule 82 (term13 -> primary .)
    do              reduce using rule 82 (term13 -> primary .)
    SEMI_COLON      reduce using rule 82 (term13 -> primary .)
    NEWLINE         reduce using rule 82 (term13 -> primary .)
    def             reduce using rule 82 (term13 -> primary .)
    class           reduce using rule 82 (term13 -> primary .)
    break           reduce using rule 82 (term13 -> primary .)
    if              reduce using rule 82 (term13 -> primary .)
    while           reduce using rule 82 (term13 -> primary .)
    until           reduce using rule 82 (term13 -> primary .)
    case            reduce using rule 82 (term13 -> primary .)
    for             reduce using rule 82 (term13 -> primary .)
    return          reduce using rule 82 (term13 -> primary .)
    IDENTIFIER      reduce using rule 82 (term13 -> primary .)
    OPEN_BRACKET    reduce using rule 82 (term13 -> primary .)
    OPEN_SQUARE     reduce using rule 82 (term13 -> primary .)
    OPEN_FLOWER     reduce using rule 82 (term13 -> primary .)
    nil             reduce using rule 82 (term13 -> primary .)
    self            reduce using rule 82 (term13 -> primary .)
    NUMBER          reduce using rule 82 (term13 -> primary .)
    FLOAT           reduce using rule 82 (term13 -> primary .)
    STRING          reduce using rule 82 (term13 -> primary .)
    true            reduce using rule 82 (term13 -> primary .)
    false           reduce using rule 82 (term13 -> primary .)
    GLOBAL          reduce using rule 82 (term13 -> primary .)
    AT_THE_RATE     reduce using rule 82 (term13 -> primary .)
    $end            reduce using rule 82 (term13 -> primary .)
    when            reduce using rule 82 (term13 -> primary .)
    end             reduce using rule 82 (term13 -> primary .)
    elsif           reduce using rule 82 (term13 -> primary .)
    else            reduce using rule 82 (term13 -> primary .)
    CLOSE_BRACKET   reduce using rule 82 (term13 -> primary .)
    then            reduce using rule 82 (term13 -> primary .)
    MAP             reduce using rule 82 (term13 -> primary .)
    COMMA           reduce using rule 82 (term13 -> primary .)

  ! CONSTANT_RESOLUTION [ reduce using rule 82 (term13 -> primary .) ]


state 33

    (94) primary -> literal .

    POWER           reduce using rule 94 (primary -> literal .)
    MULTIPLY        reduce using rule 94 (primary -> literal .)
    DIVIDE          reduce using rule 94 (primary -> literal .)
    MODULO          reduce using rule 94 (primary -> literal .)
    PLUS            reduce using rule 94 (primary -> literal .)
    MINUS           reduce using rule 94 (primary -> literal .)
    LEFT_SHIFT      reduce using rule 94 (primary -> literal .)
    RIGHT_SHIFT     reduce using rule 94 (primary -> literal .)
    BIT_AND         reduce using rule 94 (primary -> literal .)
    BIT_XOR         reduce using rule 94 (primary -> literal .)
    DOUBLE_EQUALS   reduce using rule 94 (primary -> literal .)
    TRIPLE_EQUALS   reduce using rule 94 (primary -> literal .)
    NOT_EQUALS      reduce using rule 94 (primary -> literal .)
    EQUAL_TILDE     reduce using rule 94 (primary -> literal .)
    BANG_TILDE      reduce using rule 94 (primary -> literal .)
    COMPARISON      reduce using rule 94 (primary -> literal .)
    LESS            reduce using rule 94 (primary -> literal .)
    LESS_EQUALS     reduce using rule 94 (primary -> literal .)
    GREATER         reduce using rule 94 (primary -> literal .)
    GREATER_EQUALS  reduce using rule 94 (primary -> literal .)
    INCL_RANGE      reduce using rule 94 (primary -> literal .)
    EXCL_RANGE      reduce using rule 94 (primary -> literal .)
    LOGICAL_OR      reduce using rule 94 (primary -> literal .)
    BIT_OR          reduce using rule 94 (primary -> literal .)
    COMMA           reduce using rule 94 (primary -> literal .)
    SEMI_COLON      reduce using rule 94 (primary -> literal .)
    NEWLINE         reduce using rule 94 (primary -> literal .)
    def             reduce using rule 94 (primary -> literal .)
    class           reduce using rule 94 (primary -> literal .)
    break           reduce using rule 94 (primary -> literal .)
    if              reduce using rule 94 (primary -> literal .)
    while           reduce using rule 94 (primary -> literal .)
    until           reduce using rule 94 (primary -> literal .)
    case            reduce using rule 94 (primary -> literal .)
    for             reduce using rule 94 (primary -> literal .)
    return          reduce using rule 94 (primary -> literal .)
    IDENTIFIER      reduce using rule 94 (primary -> literal .)
    OPEN_BRACKET    reduce using rule 94 (primary -> literal .)
    CONSTANT_RESOLUTION reduce using rule 94 (primary -> literal .)
    OPEN_SQUARE     reduce using rule 94 (primary -> literal .)
    OPEN_FLOWER     reduce using rule 94 (primary -> literal .)
    nil             reduce using rule 94 (primary -> literal .)
    self            reduce using rule 94 (primary -> literal .)
    NUMBER          reduce using rule 94 (primary -> literal .)
    FLOAT           reduce using rule 94 (primary -> literal .)
    STRING          reduce using rule 94 (primary -> literal .)
    true            reduce using rule 94 (primary -> literal .)
    false           reduce using rule 94 (primary -> literal .)
    GLOBAL          reduce using rule 94 (primary -> literal .)
    AT_THE_RATE     reduce using rule 94 (primary -> literal .)
    $end            reduce using rule 94 (primary -> literal .)
    CLOSE_BRACKET   reduce using rule 94 (primary -> literal .)
    MAP             reduce using rule 94 (primary -> literal .)
    when            reduce using rule 94 (primary -> literal .)
    end             reduce using rule 94 (primary -> literal .)
    elsif           reduce using rule 94 (primary -> literal .)
    else            reduce using rule 94 (primary -> literal .)
    do              reduce using rule 94 (primary -> literal .)
    then            reduce using rule 94 (primary -> literal .)
    CLOSE_SQUARE    reduce using rule 94 (primary -> literal .)
    CLOSE_FLOWER    reduce using rule 94 (primary -> literal .)
    DOT             reduce using rule 94 (primary -> literal .)


state 34

    (26) expr2 -> call .

    SEMI_COLON      reduce using rule 26 (expr2 -> call .)
    NEWLINE         reduce using rule 26 (expr2 -> call .)
    def             reduce using rule 26 (expr2 -> call .)
    class           reduce using rule 26 (expr2 -> call .)
    break           reduce using rule 26 (expr2 -> call .)
    if              reduce using rule 26 (expr2 -> call .)
    while           reduce using rule 26 (expr2 -> call .)
    until           reduce using rule 26 (expr2 -> call .)
    case            reduce using rule 26 (expr2 -> call .)
    for             reduce using rule 26 (expr2 -> call .)
    return          reduce using rule 26 (expr2 -> call .)
    IDENTIFIER      reduce using rule 26 (expr2 -> call .)
    OPEN_BRACKET    reduce using rule 26 (expr2 -> call .)
    CONSTANT_RESOLUTION reduce using rule 26 (expr2 -> call .)
    OPEN_SQUARE     reduce using rule 26 (expr2 -> call .)
    OPEN_FLOWER     reduce using rule 26 (expr2 -> call .)
    nil             reduce using rule 26 (expr2 -> call .)
    self            reduce using rule 26 (expr2 -> call .)
    NUMBER          reduce using rule 26 (expr2 -> call .)
    FLOAT           reduce using rule 26 (expr2 -> call .)
    STRING          reduce using rule 26 (expr2 -> call .)
    true            reduce using rule 26 (expr2 -> call .)
    false           reduce using rule 26 (expr2 -> call .)
    GLOBAL          reduce using rule 26 (expr2 -> call .)
    AT_THE_RATE     reduce using rule 26 (expr2 -> call .)
    MINUS           reduce using rule 26 (expr2 -> call .)
    PLUS            reduce using rule 26 (expr2 -> call .)
    end             reduce using rule 26 (expr2 -> call .)
    $end            reduce using rule 26 (expr2 -> call .)
    when            reduce using rule 26 (expr2 -> call .)
    elsif           reduce using rule 26 (expr2 -> call .)
    else            reduce using rule 26 (expr2 -> call .)
    do              reduce using rule 26 (expr2 -> call .)
    CLOSE_BRACKET   reduce using rule 26 (expr2 -> call .)
    then            reduce using rule 26 (expr2 -> call .)


state 35

    (29) function -> IDENTIFIER . OPEN_BRACKET callargs CLOSE_BRACKET
    (30) function -> IDENTIFIER . OPEN_BRACKET CLOSE_BRACKET
    (187) varname -> IDENTIFIER .

  ! shift/reduce conflict for OPEN_BRACKET resolved as shift
    OPEN_BRACKET    shift and go to state 128
    CONSTANT_RESOLUTION reduce using rule 187 (varname -> IDENTIFIER .)
    OPEN_SQUARE     reduce using rule 187 (varname -> IDENTIFIER .)
    DOT             reduce using rule 187 (varname -> IDENTIFIER .)
    POWER           reduce using rule 187 (varname -> IDENTIFIER .)
    MULTIPLY        reduce using rule 187 (varname -> IDENTIFIER .)
    DIVIDE          reduce using rule 187 (varname -> IDENTIFIER .)
    MODULO          reduce using rule 187 (varname -> IDENTIFIER .)
    PLUS            reduce using rule 187 (varname -> IDENTIFIER .)
    MINUS           reduce using rule 187 (varname -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 187 (varname -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 187 (varname -> IDENTIFIER .)
    BIT_AND         reduce using rule 187 (varname -> IDENTIFIER .)
    BIT_XOR         reduce using rule 187 (varname -> IDENTIFIER .)
    DOUBLE_EQUALS   reduce using rule 187 (varname -> IDENTIFIER .)
    TRIPLE_EQUALS   reduce using rule 187 (varname -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 187 (varname -> IDENTIFIER .)
    EQUAL_TILDE     reduce using rule 187 (varname -> IDENTIFIER .)
    BANG_TILDE      reduce using rule 187 (varname -> IDENTIFIER .)
    COMPARISON      reduce using rule 187 (varname -> IDENTIFIER .)
    LESS            reduce using rule 187 (varname -> IDENTIFIER .)
    LESS_EQUALS     reduce using rule 187 (varname -> IDENTIFIER .)
    GREATER         reduce using rule 187 (varname -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 187 (varname -> IDENTIFIER .)
    INCL_RANGE      reduce using rule 187 (varname -> IDENTIFIER .)
    EXCL_RANGE      reduce using rule 187 (varname -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 187 (varname -> IDENTIFIER .)
    BIT_OR          reduce using rule 187 (varname -> IDENTIFIER .)
    SEMI_COLON      reduce using rule 187 (varname -> IDENTIFIER .)
    NEWLINE         reduce using rule 187 (varname -> IDENTIFIER .)
    def             reduce using rule 187 (varname -> IDENTIFIER .)
    class           reduce using rule 187 (varname -> IDENTIFIER .)
    break           reduce using rule 187 (varname -> IDENTIFIER .)
    if              reduce using rule 187 (varname -> IDENTIFIER .)
    while           reduce using rule 187 (varname -> IDENTIFIER .)
    until           reduce using rule 187 (varname -> IDENTIFIER .)
    case            reduce using rule 187 (varname -> IDENTIFIER .)
    for             reduce using rule 187 (varname -> IDENTIFIER .)
    return          reduce using rule 187 (varname -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 187 (varname -> IDENTIFIER .)
    OPEN_FLOWER     reduce using rule 187 (varname -> IDENTIFIER .)
    nil             reduce using rule 187 (varname -> IDENTIFIER .)
    self            reduce using rule 187 (varname -> IDENTIFIER .)
    NUMBER          reduce using rule 187 (varname -> IDENTIFIER .)
    FLOAT           reduce using rule 187 (varname -> IDENTIFIER .)
    STRING          reduce using rule 187 (varname -> IDENTIFIER .)
    true            reduce using rule 187 (varname -> IDENTIFIER .)
    false           reduce using rule 187 (varname -> IDENTIFIER .)
    GLOBAL          reduce using rule 187 (varname -> IDENTIFIER .)
    AT_THE_RATE     reduce using rule 187 (varname -> IDENTIFIER .)
    end             reduce using rule 187 (varname -> IDENTIFIER .)
    COMMA           reduce using rule 187 (varname -> IDENTIFIER .)
    EQUALS          reduce using rule 187 (varname -> IDENTIFIER .)
    MODULO_EQUALS   reduce using rule 187 (varname -> IDENTIFIER .)
    DIVIDE_EQUALS   reduce using rule 187 (varname -> IDENTIFIER .)
    MINUS_EQUALS    reduce using rule 187 (varname -> IDENTIFIER .)
    PLUS_EQUALS     reduce using rule 187 (varname -> IDENTIFIER .)
    OR_EQUALS       reduce using rule 187 (varname -> IDENTIFIER .)
    AND_EQUALS      reduce using rule 187 (varname -> IDENTIFIER .)
    XOR_EQUALS      reduce using rule 187 (varname -> IDENTIFIER .)
    RIGHT_SHIFT_EQUALS reduce using rule 187 (varname -> IDENTIFIER .)
    LEFT_SHIFT_EQUALS reduce using rule 187 (varname -> IDENTIFIER .)
    MULTIPLY_EQUALS reduce using rule 187 (varname -> IDENTIFIER .)
    LOGICAL_AND_EQUALS reduce using rule 187 (varname -> IDENTIFIER .)
    LOGICAL_OR_EQUALS reduce using rule 187 (varname -> IDENTIFIER .)
    POWER_EQUALS    reduce using rule 187 (varname -> IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 187 (varname -> IDENTIFIER .)
    do              reduce using rule 187 (varname -> IDENTIFIER .)
    when            reduce using rule 187 (varname -> IDENTIFIER .)
    else            reduce using rule 187 (varname -> IDENTIFIER .)
    $end            reduce using rule 187 (varname -> IDENTIFIER .)
    elsif           reduce using rule 187 (varname -> IDENTIFIER .)
    then            reduce using rule 187 (varname -> IDENTIFIER .)
    MAP             reduce using rule 187 (varname -> IDENTIFIER .)

  ! OPEN_BRACKET    [ reduce using rule 187 (varname -> IDENTIFIER .) ]


state 36

    (16) expr -> until . expr1 pdo compstmt end
    (21) expr1 -> . return callargs
    (22) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (23) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (24) expr1 -> . return
    (25) expr1 -> . expr2
    (26) expr2 -> . call
    (27) expr2 -> . arg
    (28) call -> . function
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (29) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (30) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) function -> . primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> . primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (33) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> . primary DOT IDENTIFIER
    (36) function -> . primary CONSTANT_RESOLUTION IDENTIFIER
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary

    return          shift and go to state 7
    IDENTIFIER      shift and go to state 35
    OPEN_BRACKET    shift and go to state 5
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 32
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 25
    expr2                          shift and go to state 51
    literal                        shift and go to state 33
    expr1                          shift and go to state 129
    call                           shift and go to state 34
    function                       shift and go to state 38
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 56
    varname                        shift and go to state 30
    lhs                            shift and go to state 59
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 37

    (5) multcompstmt -> empty .

    end             reduce using rule 5 (multcompstmt -> empty .)
    elsif           reduce using rule 5 (multcompstmt -> empty .)
    else            reduce using rule 5 (multcompstmt -> empty .)
    $end            reduce using rule 5 (multcompstmt -> empty .)
    when            reduce using rule 5 (multcompstmt -> empty .)


state 38

    (28) call -> function .

    SEMI_COLON      reduce using rule 28 (call -> function .)
    NEWLINE         reduce using rule 28 (call -> function .)
    def             reduce using rule 28 (call -> function .)
    class           reduce using rule 28 (call -> function .)
    break           reduce using rule 28 (call -> function .)
    if              reduce using rule 28 (call -> function .)
    while           reduce using rule 28 (call -> function .)
    until           reduce using rule 28 (call -> function .)
    case            reduce using rule 28 (call -> function .)
    for             reduce using rule 28 (call -> function .)
    return          reduce using rule 28 (call -> function .)
    IDENTIFIER      reduce using rule 28 (call -> function .)
    OPEN_BRACKET    reduce using rule 28 (call -> function .)
    CONSTANT_RESOLUTION reduce using rule 28 (call -> function .)
    OPEN_SQUARE     reduce using rule 28 (call -> function .)
    OPEN_FLOWER     reduce using rule 28 (call -> function .)
    nil             reduce using rule 28 (call -> function .)
    self            reduce using rule 28 (call -> function .)
    NUMBER          reduce using rule 28 (call -> function .)
    FLOAT           reduce using rule 28 (call -> function .)
    STRING          reduce using rule 28 (call -> function .)
    true            reduce using rule 28 (call -> function .)
    false           reduce using rule 28 (call -> function .)
    GLOBAL          reduce using rule 28 (call -> function .)
    AT_THE_RATE     reduce using rule 28 (call -> function .)
    MINUS           reduce using rule 28 (call -> function .)
    PLUS            reduce using rule 28 (call -> function .)
    end             reduce using rule 28 (call -> function .)
    CLOSE_BRACKET   reduce using rule 28 (call -> function .)
    then            reduce using rule 28 (call -> function .)
    do              reduce using rule 28 (call -> function .)
    $end            reduce using rule 28 (call -> function .)
    when            reduce using rule 28 (call -> function .)
    elsif           reduce using rule 28 (call -> function .)
    else            reduce using rule 28 (call -> function .)


state 39

    (108) mlhs -> mlhsitem . COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> mlhsitem . COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> mlhsitem . COMMA mlhsitem multmlhs
    (111) mlhs -> mlhsitem . COMMA MULTIPLY lhs
    (112) mlhs -> mlhsitem . COMMA MULTIPLY
    (113) mlhs -> mlhsitem . COMMA
    (114) mlhs -> mlhsitem .

    COMMA           shift and go to state 130
    CLOSE_BRACKET   reduce using rule 114 (mlhs -> mlhsitem .)
    EQUALS          reduce using rule 114 (mlhs -> mlhsitem .)
    MODULO_EQUALS   reduce using rule 114 (mlhs -> mlhsitem .)
    DIVIDE_EQUALS   reduce using rule 114 (mlhs -> mlhsitem .)
    MINUS_EQUALS    reduce using rule 114 (mlhs -> mlhsitem .)
    PLUS_EQUALS     reduce using rule 114 (mlhs -> mlhsitem .)
    OR_EQUALS       reduce using rule 114 (mlhs -> mlhsitem .)
    AND_EQUALS      reduce using rule 114 (mlhs -> mlhsitem .)
    XOR_EQUALS      reduce using rule 114 (mlhs -> mlhsitem .)
    RIGHT_SHIFT_EQUALS reduce using rule 114 (mlhs -> mlhsitem .)
    LEFT_SHIFT_EQUALS reduce using rule 114 (mlhs -> mlhsitem .)
    MULTIPLY_EQUALS reduce using rule 114 (mlhs -> mlhsitem .)
    LOGICAL_AND_EQUALS reduce using rule 114 (mlhs -> mlhsitem .)
    LOGICAL_OR_EQUALS reduce using rule 114 (mlhs -> mlhsitem .)
    POWER_EQUALS    reduce using rule 114 (mlhs -> mlhsitem .)
    in              reduce using rule 114 (mlhs -> mlhsitem .)


state 40

    (66) term7 -> term8 .
    (67) term8 -> term8 . LEFT_SHIFT term9
    (68) term8 -> term8 . RIGHT_SHIFT term9

    BIT_AND         reduce using rule 66 (term7 -> term8 .)
    BIT_XOR         reduce using rule 66 (term7 -> term8 .)
    DOUBLE_EQUALS   reduce using rule 66 (term7 -> term8 .)
    TRIPLE_EQUALS   reduce using rule 66 (term7 -> term8 .)
    NOT_EQUALS      reduce using rule 66 (term7 -> term8 .)
    EQUAL_TILDE     reduce using rule 66 (term7 -> term8 .)
    BANG_TILDE      reduce using rule 66 (term7 -> term8 .)
    COMPARISON      reduce using rule 66 (term7 -> term8 .)
    LESS            reduce using rule 66 (term7 -> term8 .)
    LESS_EQUALS     reduce using rule 66 (term7 -> term8 .)
    GREATER         reduce using rule 66 (term7 -> term8 .)
    GREATER_EQUALS  reduce using rule 66 (term7 -> term8 .)
    INCL_RANGE      reduce using rule 66 (term7 -> term8 .)
    EXCL_RANGE      reduce using rule 66 (term7 -> term8 .)
    LOGICAL_OR      reduce using rule 66 (term7 -> term8 .)
    BIT_OR          reduce using rule 66 (term7 -> term8 .)
    SEMI_COLON      reduce using rule 66 (term7 -> term8 .)
    NEWLINE         reduce using rule 66 (term7 -> term8 .)
    def             reduce using rule 66 (term7 -> term8 .)
    class           reduce using rule 66 (term7 -> term8 .)
    break           reduce using rule 66 (term7 -> term8 .)
    if              reduce using rule 66 (term7 -> term8 .)
    while           reduce using rule 66 (term7 -> term8 .)
    until           reduce using rule 66 (term7 -> term8 .)
    case            reduce using rule 66 (term7 -> term8 .)
    for             reduce using rule 66 (term7 -> term8 .)
    return          reduce using rule 66 (term7 -> term8 .)
    IDENTIFIER      reduce using rule 66 (term7 -> term8 .)
    OPEN_BRACKET    reduce using rule 66 (term7 -> term8 .)
    CONSTANT_RESOLUTION reduce using rule 66 (term7 -> term8 .)
    OPEN_SQUARE     reduce using rule 66 (term7 -> term8 .)
    OPEN_FLOWER     reduce using rule 66 (term7 -> term8 .)
    nil             reduce using rule 66 (term7 -> term8 .)
    self            reduce using rule 66 (term7 -> term8 .)
    NUMBER          reduce using rule 66 (term7 -> term8 .)
    FLOAT           reduce using rule 66 (term7 -> term8 .)
    STRING          reduce using rule 66 (term7 -> term8 .)
    true            reduce using rule 66 (term7 -> term8 .)
    false           reduce using rule 66 (term7 -> term8 .)
    GLOBAL          reduce using rule 66 (term7 -> term8 .)
    AT_THE_RATE     reduce using rule 66 (term7 -> term8 .)
    MINUS           reduce using rule 66 (term7 -> term8 .)
    PLUS            reduce using rule 66 (term7 -> term8 .)
    end             reduce using rule 66 (term7 -> term8 .)
    $end            reduce using rule 66 (term7 -> term8 .)
    when            reduce using rule 66 (term7 -> term8 .)
    elsif           reduce using rule 66 (term7 -> term8 .)
    else            reduce using rule 66 (term7 -> term8 .)
    do              reduce using rule 66 (term7 -> term8 .)
    then            reduce using rule 66 (term7 -> term8 .)
    CLOSE_BRACKET   reduce using rule 66 (term7 -> term8 .)
    MAP             reduce using rule 66 (term7 -> term8 .)
    COMMA           reduce using rule 66 (term7 -> term8 .)
    CLOSE_SQUARE    reduce using rule 66 (term7 -> term8 .)
    CLOSE_FLOWER    reduce using rule 66 (term7 -> term8 .)
    LEFT_SHIFT      shift and go to state 132
    RIGHT_SHIFT     shift and go to state 131


state 41

    (103) literal -> true .

    POWER           reduce using rule 103 (literal -> true .)
    MULTIPLY        reduce using rule 103 (literal -> true .)
    DIVIDE          reduce using rule 103 (literal -> true .)
    MODULO          reduce using rule 103 (literal -> true .)
    PLUS            reduce using rule 103 (literal -> true .)
    MINUS           reduce using rule 103 (literal -> true .)
    LEFT_SHIFT      reduce using rule 103 (literal -> true .)
    RIGHT_SHIFT     reduce using rule 103 (literal -> true .)
    BIT_AND         reduce using rule 103 (literal -> true .)
    BIT_XOR         reduce using rule 103 (literal -> true .)
    DOUBLE_EQUALS   reduce using rule 103 (literal -> true .)
    TRIPLE_EQUALS   reduce using rule 103 (literal -> true .)
    NOT_EQUALS      reduce using rule 103 (literal -> true .)
    EQUAL_TILDE     reduce using rule 103 (literal -> true .)
    BANG_TILDE      reduce using rule 103 (literal -> true .)
    COMPARISON      reduce using rule 103 (literal -> true .)
    LESS            reduce using rule 103 (literal -> true .)
    LESS_EQUALS     reduce using rule 103 (literal -> true .)
    GREATER         reduce using rule 103 (literal -> true .)
    GREATER_EQUALS  reduce using rule 103 (literal -> true .)
    INCL_RANGE      reduce using rule 103 (literal -> true .)
    EXCL_RANGE      reduce using rule 103 (literal -> true .)
    LOGICAL_OR      reduce using rule 103 (literal -> true .)
    BIT_OR          reduce using rule 103 (literal -> true .)
    SEMI_COLON      reduce using rule 103 (literal -> true .)
    NEWLINE         reduce using rule 103 (literal -> true .)
    def             reduce using rule 103 (literal -> true .)
    class           reduce using rule 103 (literal -> true .)
    break           reduce using rule 103 (literal -> true .)
    if              reduce using rule 103 (literal -> true .)
    while           reduce using rule 103 (literal -> true .)
    until           reduce using rule 103 (literal -> true .)
    case            reduce using rule 103 (literal -> true .)
    for             reduce using rule 103 (literal -> true .)
    return          reduce using rule 103 (literal -> true .)
    IDENTIFIER      reduce using rule 103 (literal -> true .)
    OPEN_BRACKET    reduce using rule 103 (literal -> true .)
    CONSTANT_RESOLUTION reduce using rule 103 (literal -> true .)
    OPEN_SQUARE     reduce using rule 103 (literal -> true .)
    OPEN_FLOWER     reduce using rule 103 (literal -> true .)
    nil             reduce using rule 103 (literal -> true .)
    self            reduce using rule 103 (literal -> true .)
    NUMBER          reduce using rule 103 (literal -> true .)
    FLOAT           reduce using rule 103 (literal -> true .)
    STRING          reduce using rule 103 (literal -> true .)
    true            reduce using rule 103 (literal -> true .)
    false           reduce using rule 103 (literal -> true .)
    GLOBAL          reduce using rule 103 (literal -> true .)
    AT_THE_RATE     reduce using rule 103 (literal -> true .)
    $end            reduce using rule 103 (literal -> true .)
    CLOSE_BRACKET   reduce using rule 103 (literal -> true .)
    MAP             reduce using rule 103 (literal -> true .)
    COMMA           reduce using rule 103 (literal -> true .)
    when            reduce using rule 103 (literal -> true .)
    end             reduce using rule 103 (literal -> true .)
    elsif           reduce using rule 103 (literal -> true .)
    else            reduce using rule 103 (literal -> true .)
    do              reduce using rule 103 (literal -> true .)
    then            reduce using rule 103 (literal -> true .)
    CLOSE_SQUARE    reduce using rule 103 (literal -> true .)
    CLOSE_FLOWER    reduce using rule 103 (literal -> true .)
    DOT             reduce using rule 103 (literal -> true .)


state 42

    (17) expr -> case . compstmt multcase else compstmt end
    (18) expr -> case . compstmt multcase end
    (1) compstmt -> . multcompstmt
    (2) multcompstmt -> . newline stmt multcompstmt
    (3) multcompstmt -> . stmt multcompstmt
    (4) multcompstmt -> . newline
    (5) multcompstmt -> . empty
    (188) newline -> . SEMI_COLON
    (189) newline -> . NEWLINE
    (6) stmt -> . def IDENTIFIER argdecl compstmt end
    (7) stmt -> . def singleton DOT IDENTIFIER argdecl compstmt end
    (8) stmt -> . def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end
    (9) stmt -> . class IDENTIFIER LESS IDENTIFIER compstmt end
    (10) stmt -> . class IDENTIFIER compstmt end
    (11) stmt -> . break
    (12) stmt -> . expr
    (190) empty -> .
    (13) expr -> . if expr1 pthen compstmt end
    (14) expr -> . if expr1 pthen compstmt multelsif else compstmt end
    (15) expr -> . while expr1 pdo compstmt end
    (16) expr -> . until expr1 pdo compstmt end
    (17) expr -> . case compstmt multcase else compstmt end
    (18) expr -> . case compstmt multcase end
    (19) expr -> . for mlhs in expr1 pdo compstmt end
    (20) expr -> . expr1
    (21) expr1 -> . return callargs
    (22) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (23) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (24) expr1 -> . return
    (25) expr1 -> . expr2
    (26) expr2 -> . call
    (27) expr2 -> . arg
    (28) call -> . function
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (29) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (30) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) function -> . primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> . primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (33) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> . primary DOT IDENTIFIER
    (36) function -> . primary CONSTANT_RESOLUTION IDENTIFIER
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary

    SEMI_COLON      shift and go to state 24
    NEWLINE         shift and go to state 4
    def             shift and go to state 45
    class           shift and go to state 57
    break           shift and go to state 9
    when            reduce using rule 190 (empty -> .)
    if              shift and go to state 49
    while           shift and go to state 44
    until           shift and go to state 36
    case            shift and go to state 42
    for             shift and go to state 26
    return          shift and go to state 7
    IDENTIFIER      shift and go to state 35
    OPEN_BRACKET    shift and go to state 5
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 32
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 25
    expr2                          shift and go to state 51
    literal                        shift and go to state 33
    expr1                          shift and go to state 52
    call                           shift and go to state 34
    varname                        shift and go to state 30
    empty                          shift and go to state 37
    function                       shift and go to state 38
    newline                        shift and go to state 55
    multcompstmt                   shift and go to state 8
    stmt                           shift and go to state 27
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 56
    compstmt                       shift and go to state 133
    term5                          shift and go to state 16
    expr                           shift and go to state 43
    lhs                            shift and go to state 59
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 43

    (12) stmt -> expr .

    SEMI_COLON      reduce using rule 12 (stmt -> expr .)
    NEWLINE         reduce using rule 12 (stmt -> expr .)
    def             reduce using rule 12 (stmt -> expr .)
    class           reduce using rule 12 (stmt -> expr .)
    break           reduce using rule 12 (stmt -> expr .)
    if              reduce using rule 12 (stmt -> expr .)
    while           reduce using rule 12 (stmt -> expr .)
    until           reduce using rule 12 (stmt -> expr .)
    case            reduce using rule 12 (stmt -> expr .)
    for             reduce using rule 12 (stmt -> expr .)
    return          reduce using rule 12 (stmt -> expr .)
    IDENTIFIER      reduce using rule 12 (stmt -> expr .)
    OPEN_BRACKET    reduce using rule 12 (stmt -> expr .)
    CONSTANT_RESOLUTION reduce using rule 12 (stmt -> expr .)
    OPEN_SQUARE     reduce using rule 12 (stmt -> expr .)
    OPEN_FLOWER     reduce using rule 12 (stmt -> expr .)
    nil             reduce using rule 12 (stmt -> expr .)
    self            reduce using rule 12 (stmt -> expr .)
    NUMBER          reduce using rule 12 (stmt -> expr .)
    FLOAT           reduce using rule 12 (stmt -> expr .)
    STRING          reduce using rule 12 (stmt -> expr .)
    true            reduce using rule 12 (stmt -> expr .)
    false           reduce using rule 12 (stmt -> expr .)
    GLOBAL          reduce using rule 12 (stmt -> expr .)
    AT_THE_RATE     reduce using rule 12 (stmt -> expr .)
    MINUS           reduce using rule 12 (stmt -> expr .)
    PLUS            reduce using rule 12 (stmt -> expr .)
    $end            reduce using rule 12 (stmt -> expr .)
    when            reduce using rule 12 (stmt -> expr .)
    end             reduce using rule 12 (stmt -> expr .)
    elsif           reduce using rule 12 (stmt -> expr .)
    else            reduce using rule 12 (stmt -> expr .)


state 44

    (15) expr -> while . expr1 pdo compstmt end
    (21) expr1 -> . return callargs
    (22) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (23) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (24) expr1 -> . return
    (25) expr1 -> . expr2
    (26) expr2 -> . call
    (27) expr2 -> . arg
    (28) call -> . function
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (29) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (30) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) function -> . primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> . primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (33) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> . primary DOT IDENTIFIER
    (36) function -> . primary CONSTANT_RESOLUTION IDENTIFIER
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary

    return          shift and go to state 7
    IDENTIFIER      shift and go to state 35
    OPEN_BRACKET    shift and go to state 5
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 32
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 25
    expr2                          shift and go to state 51
    literal                        shift and go to state 33
    expr1                          shift and go to state 134
    call                           shift and go to state 34
    function                       shift and go to state 38
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 56
    varname                        shift and go to state 30
    lhs                            shift and go to state 59
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 45

    (6) stmt -> def . IDENTIFIER argdecl compstmt end
    (7) stmt -> def . singleton DOT IDENTIFIER argdecl compstmt end
    (8) stmt -> def . singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end
    (157) singleton -> . variable
    (158) singleton -> . OPEN_BRACKET expr CLOSE_BRACKET
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    IDENTIFIER      shift and go to state 138
    OPEN_BRACKET    shift and go to state 136
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23

    singleton                      shift and go to state 135
    varname                        shift and go to state 30
    variable                       shift and go to state 137

state 46

    (104) literal -> false .

    POWER           reduce using rule 104 (literal -> false .)
    MULTIPLY        reduce using rule 104 (literal -> false .)
    DIVIDE          reduce using rule 104 (literal -> false .)
    MODULO          reduce using rule 104 (literal -> false .)
    PLUS            reduce using rule 104 (literal -> false .)
    MINUS           reduce using rule 104 (literal -> false .)
    LEFT_SHIFT      reduce using rule 104 (literal -> false .)
    RIGHT_SHIFT     reduce using rule 104 (literal -> false .)
    BIT_AND         reduce using rule 104 (literal -> false .)
    BIT_XOR         reduce using rule 104 (literal -> false .)
    DOUBLE_EQUALS   reduce using rule 104 (literal -> false .)
    TRIPLE_EQUALS   reduce using rule 104 (literal -> false .)
    NOT_EQUALS      reduce using rule 104 (literal -> false .)
    EQUAL_TILDE     reduce using rule 104 (literal -> false .)
    BANG_TILDE      reduce using rule 104 (literal -> false .)
    COMPARISON      reduce using rule 104 (literal -> false .)
    LESS            reduce using rule 104 (literal -> false .)
    LESS_EQUALS     reduce using rule 104 (literal -> false .)
    GREATER         reduce using rule 104 (literal -> false .)
    GREATER_EQUALS  reduce using rule 104 (literal -> false .)
    INCL_RANGE      reduce using rule 104 (literal -> false .)
    EXCL_RANGE      reduce using rule 104 (literal -> false .)
    LOGICAL_OR      reduce using rule 104 (literal -> false .)
    BIT_OR          reduce using rule 104 (literal -> false .)
    SEMI_COLON      reduce using rule 104 (literal -> false .)
    NEWLINE         reduce using rule 104 (literal -> false .)
    def             reduce using rule 104 (literal -> false .)
    class           reduce using rule 104 (literal -> false .)
    break           reduce using rule 104 (literal -> false .)
    if              reduce using rule 104 (literal -> false .)
    while           reduce using rule 104 (literal -> false .)
    until           reduce using rule 104 (literal -> false .)
    case            reduce using rule 104 (literal -> false .)
    for             reduce using rule 104 (literal -> false .)
    return          reduce using rule 104 (literal -> false .)
    IDENTIFIER      reduce using rule 104 (literal -> false .)
    OPEN_BRACKET    reduce using rule 104 (literal -> false .)
    CONSTANT_RESOLUTION reduce using rule 104 (literal -> false .)
    OPEN_SQUARE     reduce using rule 104 (literal -> false .)
    OPEN_FLOWER     reduce using rule 104 (literal -> false .)
    nil             reduce using rule 104 (literal -> false .)
    self            reduce using rule 104 (literal -> false .)
    NUMBER          reduce using rule 104 (literal -> false .)
    FLOAT           reduce using rule 104 (literal -> false .)
    STRING          reduce using rule 104 (literal -> false .)
    true            reduce using rule 104 (literal -> false .)
    false           reduce using rule 104 (literal -> false .)
    GLOBAL          reduce using rule 104 (literal -> false .)
    AT_THE_RATE     reduce using rule 104 (literal -> false .)
    $end            reduce using rule 104 (literal -> false .)
    CLOSE_BRACKET   reduce using rule 104 (literal -> false .)
    MAP             reduce using rule 104 (literal -> false .)
    COMMA           reduce using rule 104 (literal -> false .)
    when            reduce using rule 104 (literal -> false .)
    end             reduce using rule 104 (literal -> false .)
    elsif           reduce using rule 104 (literal -> false .)
    else            reduce using rule 104 (literal -> false .)
    do              reduce using rule 104 (literal -> false .)
    then            reduce using rule 104 (literal -> false .)
    CLOSE_SQUARE    reduce using rule 104 (literal -> false .)
    CLOSE_FLOWER    reduce using rule 104 (literal -> false .)
    DOT             reduce using rule 104 (literal -> false .)


state 47

    (100) literal -> NUMBER .

    POWER           reduce using rule 100 (literal -> NUMBER .)
    MULTIPLY        reduce using rule 100 (literal -> NUMBER .)
    DIVIDE          reduce using rule 100 (literal -> NUMBER .)
    MODULO          reduce using rule 100 (literal -> NUMBER .)
    PLUS            reduce using rule 100 (literal -> NUMBER .)
    MINUS           reduce using rule 100 (literal -> NUMBER .)
    LEFT_SHIFT      reduce using rule 100 (literal -> NUMBER .)
    RIGHT_SHIFT     reduce using rule 100 (literal -> NUMBER .)
    BIT_AND         reduce using rule 100 (literal -> NUMBER .)
    BIT_XOR         reduce using rule 100 (literal -> NUMBER .)
    DOUBLE_EQUALS   reduce using rule 100 (literal -> NUMBER .)
    TRIPLE_EQUALS   reduce using rule 100 (literal -> NUMBER .)
    NOT_EQUALS      reduce using rule 100 (literal -> NUMBER .)
    EQUAL_TILDE     reduce using rule 100 (literal -> NUMBER .)
    BANG_TILDE      reduce using rule 100 (literal -> NUMBER .)
    COMPARISON      reduce using rule 100 (literal -> NUMBER .)
    LESS            reduce using rule 100 (literal -> NUMBER .)
    LESS_EQUALS     reduce using rule 100 (literal -> NUMBER .)
    GREATER         reduce using rule 100 (literal -> NUMBER .)
    GREATER_EQUALS  reduce using rule 100 (literal -> NUMBER .)
    INCL_RANGE      reduce using rule 100 (literal -> NUMBER .)
    EXCL_RANGE      reduce using rule 100 (literal -> NUMBER .)
    LOGICAL_OR      reduce using rule 100 (literal -> NUMBER .)
    BIT_OR          reduce using rule 100 (literal -> NUMBER .)
    SEMI_COLON      reduce using rule 100 (literal -> NUMBER .)
    NEWLINE         reduce using rule 100 (literal -> NUMBER .)
    def             reduce using rule 100 (literal -> NUMBER .)
    class           reduce using rule 100 (literal -> NUMBER .)
    break           reduce using rule 100 (literal -> NUMBER .)
    if              reduce using rule 100 (literal -> NUMBER .)
    while           reduce using rule 100 (literal -> NUMBER .)
    until           reduce using rule 100 (literal -> NUMBER .)
    case            reduce using rule 100 (literal -> NUMBER .)
    for             reduce using rule 100 (literal -> NUMBER .)
    return          reduce using rule 100 (literal -> NUMBER .)
    IDENTIFIER      reduce using rule 100 (literal -> NUMBER .)
    OPEN_BRACKET    reduce using rule 100 (literal -> NUMBER .)
    CONSTANT_RESOLUTION reduce using rule 100 (literal -> NUMBER .)
    OPEN_SQUARE     reduce using rule 100 (literal -> NUMBER .)
    OPEN_FLOWER     reduce using rule 100 (literal -> NUMBER .)
    nil             reduce using rule 100 (literal -> NUMBER .)
    self            reduce using rule 100 (literal -> NUMBER .)
    NUMBER          reduce using rule 100 (literal -> NUMBER .)
    FLOAT           reduce using rule 100 (literal -> NUMBER .)
    STRING          reduce using rule 100 (literal -> NUMBER .)
    true            reduce using rule 100 (literal -> NUMBER .)
    false           reduce using rule 100 (literal -> NUMBER .)
    GLOBAL          reduce using rule 100 (literal -> NUMBER .)
    AT_THE_RATE     reduce using rule 100 (literal -> NUMBER .)
    $end            reduce using rule 100 (literal -> NUMBER .)
    CLOSE_BRACKET   reduce using rule 100 (literal -> NUMBER .)
    MAP             reduce using rule 100 (literal -> NUMBER .)
    COMMA           reduce using rule 100 (literal -> NUMBER .)
    when            reduce using rule 100 (literal -> NUMBER .)
    end             reduce using rule 100 (literal -> NUMBER .)
    elsif           reduce using rule 100 (literal -> NUMBER .)
    else            reduce using rule 100 (literal -> NUMBER .)
    do              reduce using rule 100 (literal -> NUMBER .)
    then            reduce using rule 100 (literal -> NUMBER .)
    CLOSE_SQUARE    reduce using rule 100 (literal -> NUMBER .)
    CLOSE_FLOWER    reduce using rule 100 (literal -> NUMBER .)
    DOT             reduce using rule 100 (literal -> NUMBER .)


state 48

    (89) primary -> OPEN_FLOWER . args COMMA CLOSE_FLOWER
    (90) primary -> OPEN_FLOWER . args CLOSE_FLOWER
    (91) primary -> OPEN_FLOWER . CLOSE_FLOWER
    (92) primary -> OPEN_FLOWER . assocs COMMA CLOSE_FLOWER
    (93) primary -> OPEN_FLOWER . assocs CLOSE_FLOWER
    (140) args -> . arg multargs
    (159) assocs -> . assoc multassocs
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (162) assoc -> . arg MAP arg
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    CLOSE_FLOWER    shift and go to state 141
    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 87
    literal                        shift and go to state 33
    assocs                         shift and go to state 139
    args                           shift and go to state 140
    assoc                          shift and go to state 93
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 49

    (13) expr -> if . expr1 pthen compstmt end
    (14) expr -> if . expr1 pthen compstmt multelsif else compstmt end
    (21) expr1 -> . return callargs
    (22) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (23) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (24) expr1 -> . return
    (25) expr1 -> . expr2
    (26) expr2 -> . call
    (27) expr2 -> . arg
    (28) call -> . function
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (29) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (30) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) function -> . primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> . primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (33) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> . primary DOT IDENTIFIER
    (36) function -> . primary CONSTANT_RESOLUTION IDENTIFIER
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary

    return          shift and go to state 7
    IDENTIFIER      shift and go to state 35
    OPEN_BRACKET    shift and go to state 5
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 32
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 25
    expr2                          shift and go to state 51
    literal                        shift and go to state 33
    expr1                          shift and go to state 142
    call                           shift and go to state 34
    function                       shift and go to state 38
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 56
    varname                        shift and go to state 30
    lhs                            shift and go to state 59
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 50

    (165) variable -> self .

    CONSTANT_RESOLUTION reduce using rule 165 (variable -> self .)
    OPEN_SQUARE     reduce using rule 165 (variable -> self .)
    DOT             reduce using rule 165 (variable -> self .)
    POWER           reduce using rule 165 (variable -> self .)
    MULTIPLY        reduce using rule 165 (variable -> self .)
    DIVIDE          reduce using rule 165 (variable -> self .)
    MODULO          reduce using rule 165 (variable -> self .)
    PLUS            reduce using rule 165 (variable -> self .)
    MINUS           reduce using rule 165 (variable -> self .)
    LEFT_SHIFT      reduce using rule 165 (variable -> self .)
    RIGHT_SHIFT     reduce using rule 165 (variable -> self .)
    BIT_AND         reduce using rule 165 (variable -> self .)
    BIT_XOR         reduce using rule 165 (variable -> self .)
    DOUBLE_EQUALS   reduce using rule 165 (variable -> self .)
    TRIPLE_EQUALS   reduce using rule 165 (variable -> self .)
    NOT_EQUALS      reduce using rule 165 (variable -> self .)
    EQUAL_TILDE     reduce using rule 165 (variable -> self .)
    BANG_TILDE      reduce using rule 165 (variable -> self .)
    COMPARISON      reduce using rule 165 (variable -> self .)
    LESS            reduce using rule 165 (variable -> self .)
    LESS_EQUALS     reduce using rule 165 (variable -> self .)
    GREATER         reduce using rule 165 (variable -> self .)
    GREATER_EQUALS  reduce using rule 165 (variable -> self .)
    INCL_RANGE      reduce using rule 165 (variable -> self .)
    EXCL_RANGE      reduce using rule 165 (variable -> self .)
    LOGICAL_OR      reduce using rule 165 (variable -> self .)
    BIT_OR          reduce using rule 165 (variable -> self .)
    SEMI_COLON      reduce using rule 165 (variable -> self .)
    NEWLINE         reduce using rule 165 (variable -> self .)
    def             reduce using rule 165 (variable -> self .)
    class           reduce using rule 165 (variable -> self .)
    break           reduce using rule 165 (variable -> self .)
    if              reduce using rule 165 (variable -> self .)
    while           reduce using rule 165 (variable -> self .)
    until           reduce using rule 165 (variable -> self .)
    case            reduce using rule 165 (variable -> self .)
    for             reduce using rule 165 (variable -> self .)
    return          reduce using rule 165 (variable -> self .)
    IDENTIFIER      reduce using rule 165 (variable -> self .)
    OPEN_BRACKET    reduce using rule 165 (variable -> self .)
    OPEN_FLOWER     reduce using rule 165 (variable -> self .)
    nil             reduce using rule 165 (variable -> self .)
    self            reduce using rule 165 (variable -> self .)
    NUMBER          reduce using rule 165 (variable -> self .)
    FLOAT           reduce using rule 165 (variable -> self .)
    STRING          reduce using rule 165 (variable -> self .)
    true            reduce using rule 165 (variable -> self .)
    false           reduce using rule 165 (variable -> self .)
    GLOBAL          reduce using rule 165 (variable -> self .)
    AT_THE_RATE     reduce using rule 165 (variable -> self .)
    $end            reduce using rule 165 (variable -> self .)
    CLOSE_BRACKET   reduce using rule 165 (variable -> self .)
    MAP             reduce using rule 165 (variable -> self .)
    COMMA           reduce using rule 165 (variable -> self .)
    when            reduce using rule 165 (variable -> self .)
    end             reduce using rule 165 (variable -> self .)
    elsif           reduce using rule 165 (variable -> self .)
    else            reduce using rule 165 (variable -> self .)
    do              reduce using rule 165 (variable -> self .)
    then            reduce using rule 165 (variable -> self .)
    CLOSE_SQUARE    reduce using rule 165 (variable -> self .)
    CLOSE_FLOWER    reduce using rule 165 (variable -> self .)
    EQUALS          reduce using rule 165 (variable -> self .)
    MODULO_EQUALS   reduce using rule 165 (variable -> self .)
    DIVIDE_EQUALS   reduce using rule 165 (variable -> self .)
    MINUS_EQUALS    reduce using rule 165 (variable -> self .)
    PLUS_EQUALS     reduce using rule 165 (variable -> self .)
    OR_EQUALS       reduce using rule 165 (variable -> self .)
    AND_EQUALS      reduce using rule 165 (variable -> self .)
    XOR_EQUALS      reduce using rule 165 (variable -> self .)
    RIGHT_SHIFT_EQUALS reduce using rule 165 (variable -> self .)
    LEFT_SHIFT_EQUALS reduce using rule 165 (variable -> self .)
    MULTIPLY_EQUALS reduce using rule 165 (variable -> self .)
    LOGICAL_AND_EQUALS reduce using rule 165 (variable -> self .)
    LOGICAL_OR_EQUALS reduce using rule 165 (variable -> self .)
    POWER_EQUALS    reduce using rule 165 (variable -> self .)
    in              reduce using rule 165 (variable -> self .)


state 51

    (25) expr1 -> expr2 .

    SEMI_COLON      reduce using rule 25 (expr1 -> expr2 .)
    NEWLINE         reduce using rule 25 (expr1 -> expr2 .)
    def             reduce using rule 25 (expr1 -> expr2 .)
    class           reduce using rule 25 (expr1 -> expr2 .)
    break           reduce using rule 25 (expr1 -> expr2 .)
    if              reduce using rule 25 (expr1 -> expr2 .)
    while           reduce using rule 25 (expr1 -> expr2 .)
    until           reduce using rule 25 (expr1 -> expr2 .)
    case            reduce using rule 25 (expr1 -> expr2 .)
    for             reduce using rule 25 (expr1 -> expr2 .)
    return          reduce using rule 25 (expr1 -> expr2 .)
    IDENTIFIER      reduce using rule 25 (expr1 -> expr2 .)
    OPEN_BRACKET    reduce using rule 25 (expr1 -> expr2 .)
    CONSTANT_RESOLUTION reduce using rule 25 (expr1 -> expr2 .)
    OPEN_SQUARE     reduce using rule 25 (expr1 -> expr2 .)
    OPEN_FLOWER     reduce using rule 25 (expr1 -> expr2 .)
    nil             reduce using rule 25 (expr1 -> expr2 .)
    self            reduce using rule 25 (expr1 -> expr2 .)
    NUMBER          reduce using rule 25 (expr1 -> expr2 .)
    FLOAT           reduce using rule 25 (expr1 -> expr2 .)
    STRING          reduce using rule 25 (expr1 -> expr2 .)
    true            reduce using rule 25 (expr1 -> expr2 .)
    false           reduce using rule 25 (expr1 -> expr2 .)
    GLOBAL          reduce using rule 25 (expr1 -> expr2 .)
    AT_THE_RATE     reduce using rule 25 (expr1 -> expr2 .)
    MINUS           reduce using rule 25 (expr1 -> expr2 .)
    PLUS            reduce using rule 25 (expr1 -> expr2 .)
    end             reduce using rule 25 (expr1 -> expr2 .)
    $end            reduce using rule 25 (expr1 -> expr2 .)
    when            reduce using rule 25 (expr1 -> expr2 .)
    elsif           reduce using rule 25 (expr1 -> expr2 .)
    else            reduce using rule 25 (expr1 -> expr2 .)
    CLOSE_BRACKET   reduce using rule 25 (expr1 -> expr2 .)
    do              reduce using rule 25 (expr1 -> expr2 .)
    then            reduce using rule 25 (expr1 -> expr2 .)


state 52

    (20) expr -> expr1 .

    SEMI_COLON      reduce using rule 20 (expr -> expr1 .)
    NEWLINE         reduce using rule 20 (expr -> expr1 .)
    def             reduce using rule 20 (expr -> expr1 .)
    class           reduce using rule 20 (expr -> expr1 .)
    break           reduce using rule 20 (expr -> expr1 .)
    if              reduce using rule 20 (expr -> expr1 .)
    while           reduce using rule 20 (expr -> expr1 .)
    until           reduce using rule 20 (expr -> expr1 .)
    case            reduce using rule 20 (expr -> expr1 .)
    for             reduce using rule 20 (expr -> expr1 .)
    return          reduce using rule 20 (expr -> expr1 .)
    IDENTIFIER      reduce using rule 20 (expr -> expr1 .)
    OPEN_BRACKET    reduce using rule 20 (expr -> expr1 .)
    CONSTANT_RESOLUTION reduce using rule 20 (expr -> expr1 .)
    OPEN_SQUARE     reduce using rule 20 (expr -> expr1 .)
    OPEN_FLOWER     reduce using rule 20 (expr -> expr1 .)
    nil             reduce using rule 20 (expr -> expr1 .)
    self            reduce using rule 20 (expr -> expr1 .)
    NUMBER          reduce using rule 20 (expr -> expr1 .)
    FLOAT           reduce using rule 20 (expr -> expr1 .)
    STRING          reduce using rule 20 (expr -> expr1 .)
    true            reduce using rule 20 (expr -> expr1 .)
    false           reduce using rule 20 (expr -> expr1 .)
    GLOBAL          reduce using rule 20 (expr -> expr1 .)
    AT_THE_RATE     reduce using rule 20 (expr -> expr1 .)
    MINUS           reduce using rule 20 (expr -> expr1 .)
    PLUS            reduce using rule 20 (expr -> expr1 .)
    $end            reduce using rule 20 (expr -> expr1 .)
    when            reduce using rule 20 (expr -> expr1 .)
    end             reduce using rule 20 (expr -> expr1 .)
    elsif           reduce using rule 20 (expr -> expr1 .)
    else            reduce using rule 20 (expr -> expr1 .)
    then            reduce using rule 20 (expr -> expr1 .)
    CLOSE_BRACKET   reduce using rule 20 (expr -> expr1 .)


state 53

    (102) literal -> STRING .

    POWER           reduce using rule 102 (literal -> STRING .)
    MULTIPLY        reduce using rule 102 (literal -> STRING .)
    DIVIDE          reduce using rule 102 (literal -> STRING .)
    MODULO          reduce using rule 102 (literal -> STRING .)
    PLUS            reduce using rule 102 (literal -> STRING .)
    MINUS           reduce using rule 102 (literal -> STRING .)
    LEFT_SHIFT      reduce using rule 102 (literal -> STRING .)
    RIGHT_SHIFT     reduce using rule 102 (literal -> STRING .)
    BIT_AND         reduce using rule 102 (literal -> STRING .)
    BIT_XOR         reduce using rule 102 (literal -> STRING .)
    DOUBLE_EQUALS   reduce using rule 102 (literal -> STRING .)
    TRIPLE_EQUALS   reduce using rule 102 (literal -> STRING .)
    NOT_EQUALS      reduce using rule 102 (literal -> STRING .)
    EQUAL_TILDE     reduce using rule 102 (literal -> STRING .)
    BANG_TILDE      reduce using rule 102 (literal -> STRING .)
    COMPARISON      reduce using rule 102 (literal -> STRING .)
    LESS            reduce using rule 102 (literal -> STRING .)
    LESS_EQUALS     reduce using rule 102 (literal -> STRING .)
    GREATER         reduce using rule 102 (literal -> STRING .)
    GREATER_EQUALS  reduce using rule 102 (literal -> STRING .)
    INCL_RANGE      reduce using rule 102 (literal -> STRING .)
    EXCL_RANGE      reduce using rule 102 (literal -> STRING .)
    LOGICAL_OR      reduce using rule 102 (literal -> STRING .)
    BIT_OR          reduce using rule 102 (literal -> STRING .)
    SEMI_COLON      reduce using rule 102 (literal -> STRING .)
    NEWLINE         reduce using rule 102 (literal -> STRING .)
    def             reduce using rule 102 (literal -> STRING .)
    class           reduce using rule 102 (literal -> STRING .)
    break           reduce using rule 102 (literal -> STRING .)
    if              reduce using rule 102 (literal -> STRING .)
    while           reduce using rule 102 (literal -> STRING .)
    until           reduce using rule 102 (literal -> STRING .)
    case            reduce using rule 102 (literal -> STRING .)
    for             reduce using rule 102 (literal -> STRING .)
    return          reduce using rule 102 (literal -> STRING .)
    IDENTIFIER      reduce using rule 102 (literal -> STRING .)
    OPEN_BRACKET    reduce using rule 102 (literal -> STRING .)
    CONSTANT_RESOLUTION reduce using rule 102 (literal -> STRING .)
    OPEN_SQUARE     reduce using rule 102 (literal -> STRING .)
    OPEN_FLOWER     reduce using rule 102 (literal -> STRING .)
    nil             reduce using rule 102 (literal -> STRING .)
    self            reduce using rule 102 (literal -> STRING .)
    NUMBER          reduce using rule 102 (literal -> STRING .)
    FLOAT           reduce using rule 102 (literal -> STRING .)
    STRING          reduce using rule 102 (literal -> STRING .)
    true            reduce using rule 102 (literal -> STRING .)
    false           reduce using rule 102 (literal -> STRING .)
    GLOBAL          reduce using rule 102 (literal -> STRING .)
    AT_THE_RATE     reduce using rule 102 (literal -> STRING .)
    $end            reduce using rule 102 (literal -> STRING .)
    CLOSE_BRACKET   reduce using rule 102 (literal -> STRING .)
    MAP             reduce using rule 102 (literal -> STRING .)
    COMMA           reduce using rule 102 (literal -> STRING .)
    when            reduce using rule 102 (literal -> STRING .)
    end             reduce using rule 102 (literal -> STRING .)
    elsif           reduce using rule 102 (literal -> STRING .)
    else            reduce using rule 102 (literal -> STRING .)
    do              reduce using rule 102 (literal -> STRING .)
    then            reduce using rule 102 (literal -> STRING .)
    CLOSE_SQUARE    reduce using rule 102 (literal -> STRING .)
    CLOSE_FLOWER    reduce using rule 102 (literal -> STRING .)
    DOT             reduce using rule 102 (literal -> STRING .)


state 54

    (164) variable -> nil .

    CONSTANT_RESOLUTION reduce using rule 164 (variable -> nil .)
    OPEN_SQUARE     reduce using rule 164 (variable -> nil .)
    DOT             reduce using rule 164 (variable -> nil .)
    POWER           reduce using rule 164 (variable -> nil .)
    MULTIPLY        reduce using rule 164 (variable -> nil .)
    DIVIDE          reduce using rule 164 (variable -> nil .)
    MODULO          reduce using rule 164 (variable -> nil .)
    PLUS            reduce using rule 164 (variable -> nil .)
    MINUS           reduce using rule 164 (variable -> nil .)
    LEFT_SHIFT      reduce using rule 164 (variable -> nil .)
    RIGHT_SHIFT     reduce using rule 164 (variable -> nil .)
    BIT_AND         reduce using rule 164 (variable -> nil .)
    BIT_XOR         reduce using rule 164 (variable -> nil .)
    DOUBLE_EQUALS   reduce using rule 164 (variable -> nil .)
    TRIPLE_EQUALS   reduce using rule 164 (variable -> nil .)
    NOT_EQUALS      reduce using rule 164 (variable -> nil .)
    EQUAL_TILDE     reduce using rule 164 (variable -> nil .)
    BANG_TILDE      reduce using rule 164 (variable -> nil .)
    COMPARISON      reduce using rule 164 (variable -> nil .)
    LESS            reduce using rule 164 (variable -> nil .)
    LESS_EQUALS     reduce using rule 164 (variable -> nil .)
    GREATER         reduce using rule 164 (variable -> nil .)
    GREATER_EQUALS  reduce using rule 164 (variable -> nil .)
    INCL_RANGE      reduce using rule 164 (variable -> nil .)
    EXCL_RANGE      reduce using rule 164 (variable -> nil .)
    LOGICAL_OR      reduce using rule 164 (variable -> nil .)
    BIT_OR          reduce using rule 164 (variable -> nil .)
    SEMI_COLON      reduce using rule 164 (variable -> nil .)
    NEWLINE         reduce using rule 164 (variable -> nil .)
    def             reduce using rule 164 (variable -> nil .)
    class           reduce using rule 164 (variable -> nil .)
    break           reduce using rule 164 (variable -> nil .)
    if              reduce using rule 164 (variable -> nil .)
    while           reduce using rule 164 (variable -> nil .)
    until           reduce using rule 164 (variable -> nil .)
    case            reduce using rule 164 (variable -> nil .)
    for             reduce using rule 164 (variable -> nil .)
    return          reduce using rule 164 (variable -> nil .)
    IDENTIFIER      reduce using rule 164 (variable -> nil .)
    OPEN_BRACKET    reduce using rule 164 (variable -> nil .)
    OPEN_FLOWER     reduce using rule 164 (variable -> nil .)
    nil             reduce using rule 164 (variable -> nil .)
    self            reduce using rule 164 (variable -> nil .)
    NUMBER          reduce using rule 164 (variable -> nil .)
    FLOAT           reduce using rule 164 (variable -> nil .)
    STRING          reduce using rule 164 (variable -> nil .)
    true            reduce using rule 164 (variable -> nil .)
    false           reduce using rule 164 (variable -> nil .)
    GLOBAL          reduce using rule 164 (variable -> nil .)
    AT_THE_RATE     reduce using rule 164 (variable -> nil .)
    $end            reduce using rule 164 (variable -> nil .)
    CLOSE_BRACKET   reduce using rule 164 (variable -> nil .)
    MAP             reduce using rule 164 (variable -> nil .)
    COMMA           reduce using rule 164 (variable -> nil .)
    when            reduce using rule 164 (variable -> nil .)
    end             reduce using rule 164 (variable -> nil .)
    elsif           reduce using rule 164 (variable -> nil .)
    else            reduce using rule 164 (variable -> nil .)
    do              reduce using rule 164 (variable -> nil .)
    then            reduce using rule 164 (variable -> nil .)
    CLOSE_SQUARE    reduce using rule 164 (variable -> nil .)
    CLOSE_FLOWER    reduce using rule 164 (variable -> nil .)
    EQUALS          reduce using rule 164 (variable -> nil .)
    MODULO_EQUALS   reduce using rule 164 (variable -> nil .)
    DIVIDE_EQUALS   reduce using rule 164 (variable -> nil .)
    MINUS_EQUALS    reduce using rule 164 (variable -> nil .)
    PLUS_EQUALS     reduce using rule 164 (variable -> nil .)
    OR_EQUALS       reduce using rule 164 (variable -> nil .)
    AND_EQUALS      reduce using rule 164 (variable -> nil .)
    XOR_EQUALS      reduce using rule 164 (variable -> nil .)
    RIGHT_SHIFT_EQUALS reduce using rule 164 (variable -> nil .)
    LEFT_SHIFT_EQUALS reduce using rule 164 (variable -> nil .)
    MULTIPLY_EQUALS reduce using rule 164 (variable -> nil .)
    LOGICAL_AND_EQUALS reduce using rule 164 (variable -> nil .)
    LOGICAL_OR_EQUALS reduce using rule 164 (variable -> nil .)
    POWER_EQUALS    reduce using rule 164 (variable -> nil .)
    in              reduce using rule 164 (variable -> nil .)


state 55

    (2) multcompstmt -> newline . stmt multcompstmt
    (4) multcompstmt -> newline .
    (6) stmt -> . def IDENTIFIER argdecl compstmt end
    (7) stmt -> . def singleton DOT IDENTIFIER argdecl compstmt end
    (8) stmt -> . def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end
    (9) stmt -> . class IDENTIFIER LESS IDENTIFIER compstmt end
    (10) stmt -> . class IDENTIFIER compstmt end
    (11) stmt -> . break
    (12) stmt -> . expr
    (13) expr -> . if expr1 pthen compstmt end
    (14) expr -> . if expr1 pthen compstmt multelsif else compstmt end
    (15) expr -> . while expr1 pdo compstmt end
    (16) expr -> . until expr1 pdo compstmt end
    (17) expr -> . case compstmt multcase else compstmt end
    (18) expr -> . case compstmt multcase end
    (19) expr -> . for mlhs in expr1 pdo compstmt end
    (20) expr -> . expr1
    (21) expr1 -> . return callargs
    (22) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (23) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (24) expr1 -> . return
    (25) expr1 -> . expr2
    (26) expr2 -> . call
    (27) expr2 -> . arg
    (28) call -> . function
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (29) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (30) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) function -> . primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> . primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (33) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> . primary DOT IDENTIFIER
    (36) function -> . primary CONSTANT_RESOLUTION IDENTIFIER
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary

    end             reduce using rule 4 (multcompstmt -> newline .)
    elsif           reduce using rule 4 (multcompstmt -> newline .)
    else            reduce using rule 4 (multcompstmt -> newline .)
    $end            reduce using rule 4 (multcompstmt -> newline .)
    when            reduce using rule 4 (multcompstmt -> newline .)
    def             shift and go to state 45
    class           shift and go to state 57
    break           shift and go to state 9
    if              shift and go to state 49
    while           shift and go to state 44
    until           shift and go to state 36
    case            shift and go to state 42
    for             shift and go to state 26
    return          shift and go to state 7
    IDENTIFIER      shift and go to state 35
    OPEN_BRACKET    shift and go to state 5
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 32
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 25
    expr2                          shift and go to state 51
    literal                        shift and go to state 33
    expr1                          shift and go to state 52
    call                           shift and go to state 34
    varname                        shift and go to state 30
    function                       shift and go to state 38
    stmt                           shift and go to state 143
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 56
    term5                          shift and go to state 16
    expr                           shift and go to state 43
    lhs                            shift and go to state 59
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 56

    (84) primary -> variable . CONSTANT_RESOLUTION IDENTIFIER
    (119) lhs -> variable .
    (120) lhs -> variable . OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> variable . OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> variable . DOT IDENTIFIER

  ! shift/reduce conflict for CONSTANT_RESOLUTION resolved as shift
  ! shift/reduce conflict for OPEN_SQUARE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    CONSTANT_RESOLUTION shift and go to state 144
    POWER           reduce using rule 119 (lhs -> variable .)
    MULTIPLY        reduce using rule 119 (lhs -> variable .)
    DIVIDE          reduce using rule 119 (lhs -> variable .)
    MODULO          reduce using rule 119 (lhs -> variable .)
    PLUS            reduce using rule 119 (lhs -> variable .)
    MINUS           reduce using rule 119 (lhs -> variable .)
    LEFT_SHIFT      reduce using rule 119 (lhs -> variable .)
    RIGHT_SHIFT     reduce using rule 119 (lhs -> variable .)
    BIT_AND         reduce using rule 119 (lhs -> variable .)
    BIT_XOR         reduce using rule 119 (lhs -> variable .)
    DOUBLE_EQUALS   reduce using rule 119 (lhs -> variable .)
    TRIPLE_EQUALS   reduce using rule 119 (lhs -> variable .)
    NOT_EQUALS      reduce using rule 119 (lhs -> variable .)
    EQUAL_TILDE     reduce using rule 119 (lhs -> variable .)
    BANG_TILDE      reduce using rule 119 (lhs -> variable .)
    COMPARISON      reduce using rule 119 (lhs -> variable .)
    LESS            reduce using rule 119 (lhs -> variable .)
    LESS_EQUALS     reduce using rule 119 (lhs -> variable .)
    GREATER         reduce using rule 119 (lhs -> variable .)
    GREATER_EQUALS  reduce using rule 119 (lhs -> variable .)
    LOGICAL_OR      reduce using rule 119 (lhs -> variable .)
    BIT_OR          reduce using rule 119 (lhs -> variable .)
    SEMI_COLON      reduce using rule 119 (lhs -> variable .)
    NEWLINE         reduce using rule 119 (lhs -> variable .)
    def             reduce using rule 119 (lhs -> variable .)
    class           reduce using rule 119 (lhs -> variable .)
    break           reduce using rule 119 (lhs -> variable .)
    if              reduce using rule 119 (lhs -> variable .)
    while           reduce using rule 119 (lhs -> variable .)
    until           reduce using rule 119 (lhs -> variable .)
    case            reduce using rule 119 (lhs -> variable .)
    for             reduce using rule 119 (lhs -> variable .)
    return          reduce using rule 119 (lhs -> variable .)
    IDENTIFIER      reduce using rule 119 (lhs -> variable .)
    OPEN_BRACKET    reduce using rule 119 (lhs -> variable .)
    OPEN_FLOWER     reduce using rule 119 (lhs -> variable .)
    nil             reduce using rule 119 (lhs -> variable .)
    self            reduce using rule 119 (lhs -> variable .)
    NUMBER          reduce using rule 119 (lhs -> variable .)
    FLOAT           reduce using rule 119 (lhs -> variable .)
    STRING          reduce using rule 119 (lhs -> variable .)
    true            reduce using rule 119 (lhs -> variable .)
    false           reduce using rule 119 (lhs -> variable .)
    GLOBAL          reduce using rule 119 (lhs -> variable .)
    AT_THE_RATE     reduce using rule 119 (lhs -> variable .)
    $end            reduce using rule 119 (lhs -> variable .)
    CLOSE_BRACKET   reduce using rule 119 (lhs -> variable .)
    MAP             reduce using rule 119 (lhs -> variable .)
    COMMA           reduce using rule 119 (lhs -> variable .)
    when            reduce using rule 119 (lhs -> variable .)
    end             reduce using rule 119 (lhs -> variable .)
    elsif           reduce using rule 119 (lhs -> variable .)
    else            reduce using rule 119 (lhs -> variable .)
    do              reduce using rule 119 (lhs -> variable .)
    then            reduce using rule 119 (lhs -> variable .)
    CLOSE_SQUARE    reduce using rule 119 (lhs -> variable .)
    CLOSE_FLOWER    reduce using rule 119 (lhs -> variable .)
    INCL_RANGE      reduce using rule 119 (lhs -> variable .)
    EXCL_RANGE      reduce using rule 119 (lhs -> variable .)
    EQUALS          reduce using rule 119 (lhs -> variable .)
    MODULO_EQUALS   reduce using rule 119 (lhs -> variable .)
    DIVIDE_EQUALS   reduce using rule 119 (lhs -> variable .)
    MINUS_EQUALS    reduce using rule 119 (lhs -> variable .)
    PLUS_EQUALS     reduce using rule 119 (lhs -> variable .)
    OR_EQUALS       reduce using rule 119 (lhs -> variable .)
    AND_EQUALS      reduce using rule 119 (lhs -> variable .)
    XOR_EQUALS      reduce using rule 119 (lhs -> variable .)
    RIGHT_SHIFT_EQUALS reduce using rule 119 (lhs -> variable .)
    LEFT_SHIFT_EQUALS reduce using rule 119 (lhs -> variable .)
    MULTIPLY_EQUALS reduce using rule 119 (lhs -> variable .)
    LOGICAL_AND_EQUALS reduce using rule 119 (lhs -> variable .)
    LOGICAL_OR_EQUALS reduce using rule 119 (lhs -> variable .)
    POWER_EQUALS    reduce using rule 119 (lhs -> variable .)
    OPEN_SQUARE     shift and go to state 145
    DOT             shift and go to state 146

  ! CONSTANT_RESOLUTION [ reduce using rule 119 (lhs -> variable .) ]
  ! OPEN_SQUARE     [ reduce using rule 119 (lhs -> variable .) ]
  ! DOT             [ reduce using rule 119 (lhs -> variable .) ]


state 57

    (9) stmt -> class . IDENTIFIER LESS IDENTIFIER compstmt end
    (10) stmt -> class . IDENTIFIER compstmt end

    IDENTIFIER      shift and go to state 147


state 58

    (101) literal -> FLOAT .

    POWER           reduce using rule 101 (literal -> FLOAT .)
    MULTIPLY        reduce using rule 101 (literal -> FLOAT .)
    DIVIDE          reduce using rule 101 (literal -> FLOAT .)
    MODULO          reduce using rule 101 (literal -> FLOAT .)
    PLUS            reduce using rule 101 (literal -> FLOAT .)
    MINUS           reduce using rule 101 (literal -> FLOAT .)
    LEFT_SHIFT      reduce using rule 101 (literal -> FLOAT .)
    RIGHT_SHIFT     reduce using rule 101 (literal -> FLOAT .)
    BIT_AND         reduce using rule 101 (literal -> FLOAT .)
    BIT_XOR         reduce using rule 101 (literal -> FLOAT .)
    DOUBLE_EQUALS   reduce using rule 101 (literal -> FLOAT .)
    TRIPLE_EQUALS   reduce using rule 101 (literal -> FLOAT .)
    NOT_EQUALS      reduce using rule 101 (literal -> FLOAT .)
    EQUAL_TILDE     reduce using rule 101 (literal -> FLOAT .)
    BANG_TILDE      reduce using rule 101 (literal -> FLOAT .)
    COMPARISON      reduce using rule 101 (literal -> FLOAT .)
    LESS            reduce using rule 101 (literal -> FLOAT .)
    LESS_EQUALS     reduce using rule 101 (literal -> FLOAT .)
    GREATER         reduce using rule 101 (literal -> FLOAT .)
    GREATER_EQUALS  reduce using rule 101 (literal -> FLOAT .)
    INCL_RANGE      reduce using rule 101 (literal -> FLOAT .)
    EXCL_RANGE      reduce using rule 101 (literal -> FLOAT .)
    LOGICAL_OR      reduce using rule 101 (literal -> FLOAT .)
    BIT_OR          reduce using rule 101 (literal -> FLOAT .)
    SEMI_COLON      reduce using rule 101 (literal -> FLOAT .)
    NEWLINE         reduce using rule 101 (literal -> FLOAT .)
    def             reduce using rule 101 (literal -> FLOAT .)
    class           reduce using rule 101 (literal -> FLOAT .)
    break           reduce using rule 101 (literal -> FLOAT .)
    if              reduce using rule 101 (literal -> FLOAT .)
    while           reduce using rule 101 (literal -> FLOAT .)
    until           reduce using rule 101 (literal -> FLOAT .)
    case            reduce using rule 101 (literal -> FLOAT .)
    for             reduce using rule 101 (literal -> FLOAT .)
    return          reduce using rule 101 (literal -> FLOAT .)
    IDENTIFIER      reduce using rule 101 (literal -> FLOAT .)
    OPEN_BRACKET    reduce using rule 101 (literal -> FLOAT .)
    CONSTANT_RESOLUTION reduce using rule 101 (literal -> FLOAT .)
    OPEN_SQUARE     reduce using rule 101 (literal -> FLOAT .)
    OPEN_FLOWER     reduce using rule 101 (literal -> FLOAT .)
    nil             reduce using rule 101 (literal -> FLOAT .)
    self            reduce using rule 101 (literal -> FLOAT .)
    NUMBER          reduce using rule 101 (literal -> FLOAT .)
    FLOAT           reduce using rule 101 (literal -> FLOAT .)
    STRING          reduce using rule 101 (literal -> FLOAT .)
    true            reduce using rule 101 (literal -> FLOAT .)
    false           reduce using rule 101 (literal -> FLOAT .)
    GLOBAL          reduce using rule 101 (literal -> FLOAT .)
    AT_THE_RATE     reduce using rule 101 (literal -> FLOAT .)
    $end            reduce using rule 101 (literal -> FLOAT .)
    CLOSE_BRACKET   reduce using rule 101 (literal -> FLOAT .)
    MAP             reduce using rule 101 (literal -> FLOAT .)
    COMMA           reduce using rule 101 (literal -> FLOAT .)
    when            reduce using rule 101 (literal -> FLOAT .)
    end             reduce using rule 101 (literal -> FLOAT .)
    elsif           reduce using rule 101 (literal -> FLOAT .)
    else            reduce using rule 101 (literal -> FLOAT .)
    do              reduce using rule 101 (literal -> FLOAT .)
    then            reduce using rule 101 (literal -> FLOAT .)
    CLOSE_SQUARE    reduce using rule 101 (literal -> FLOAT .)
    CLOSE_FLOWER    reduce using rule 101 (literal -> FLOAT .)
    DOT             reduce using rule 101 (literal -> FLOAT .)


state 59

    (95) primary -> lhs .
    (117) mlhsitem -> lhs .

    DOT             reduce using rule 95 (primary -> lhs .)
    CONSTANT_RESOLUTION reduce using rule 95 (primary -> lhs .)
    POWER           reduce using rule 95 (primary -> lhs .)
    MULTIPLY        reduce using rule 95 (primary -> lhs .)
    DIVIDE          reduce using rule 95 (primary -> lhs .)
    MODULO          reduce using rule 95 (primary -> lhs .)
    PLUS            reduce using rule 95 (primary -> lhs .)
    MINUS           reduce using rule 95 (primary -> lhs .)
    LEFT_SHIFT      reduce using rule 95 (primary -> lhs .)
    RIGHT_SHIFT     reduce using rule 95 (primary -> lhs .)
    BIT_AND         reduce using rule 95 (primary -> lhs .)
    BIT_XOR         reduce using rule 95 (primary -> lhs .)
    DOUBLE_EQUALS   reduce using rule 95 (primary -> lhs .)
    TRIPLE_EQUALS   reduce using rule 95 (primary -> lhs .)
    NOT_EQUALS      reduce using rule 95 (primary -> lhs .)
    EQUAL_TILDE     reduce using rule 95 (primary -> lhs .)
    BANG_TILDE      reduce using rule 95 (primary -> lhs .)
    COMPARISON      reduce using rule 95 (primary -> lhs .)
    LESS            reduce using rule 95 (primary -> lhs .)
    LESS_EQUALS     reduce using rule 95 (primary -> lhs .)
    GREATER         reduce using rule 95 (primary -> lhs .)
    GREATER_EQUALS  reduce using rule 95 (primary -> lhs .)
    INCL_RANGE      reduce using rule 95 (primary -> lhs .)
    EXCL_RANGE      reduce using rule 95 (primary -> lhs .)
    LOGICAL_OR      reduce using rule 95 (primary -> lhs .)
    BIT_OR          reduce using rule 95 (primary -> lhs .)
    SEMI_COLON      reduce using rule 95 (primary -> lhs .)
    NEWLINE         reduce using rule 95 (primary -> lhs .)
    def             reduce using rule 95 (primary -> lhs .)
    class           reduce using rule 95 (primary -> lhs .)
    break           reduce using rule 95 (primary -> lhs .)
    if              reduce using rule 95 (primary -> lhs .)
    while           reduce using rule 95 (primary -> lhs .)
    until           reduce using rule 95 (primary -> lhs .)
    case            reduce using rule 95 (primary -> lhs .)
    for             reduce using rule 95 (primary -> lhs .)
    return          reduce using rule 95 (primary -> lhs .)
    IDENTIFIER      reduce using rule 95 (primary -> lhs .)
    OPEN_BRACKET    reduce using rule 95 (primary -> lhs .)
    OPEN_SQUARE     reduce using rule 95 (primary -> lhs .)
    OPEN_FLOWER     reduce using rule 95 (primary -> lhs .)
    nil             reduce using rule 95 (primary -> lhs .)
    self            reduce using rule 95 (primary -> lhs .)
    NUMBER          reduce using rule 95 (primary -> lhs .)
    FLOAT           reduce using rule 95 (primary -> lhs .)
    STRING          reduce using rule 95 (primary -> lhs .)
    true            reduce using rule 95 (primary -> lhs .)
    false           reduce using rule 95 (primary -> lhs .)
    GLOBAL          reduce using rule 95 (primary -> lhs .)
    AT_THE_RATE     reduce using rule 95 (primary -> lhs .)
    end             reduce using rule 95 (primary -> lhs .)
    do              reduce using rule 95 (primary -> lhs .)
    when            reduce using rule 95 (primary -> lhs .)
    else            reduce using rule 95 (primary -> lhs .)
    $end            reduce using rule 95 (primary -> lhs .)
    elsif           reduce using rule 95 (primary -> lhs .)
    CLOSE_BRACKET   reduce using rule 95 (primary -> lhs .)
    then            reduce using rule 95 (primary -> lhs .)
    COMMA           reduce using rule 117 (mlhsitem -> lhs .)
    EQUALS          reduce using rule 117 (mlhsitem -> lhs .)
    MODULO_EQUALS   reduce using rule 117 (mlhsitem -> lhs .)
    DIVIDE_EQUALS   reduce using rule 117 (mlhsitem -> lhs .)
    MINUS_EQUALS    reduce using rule 117 (mlhsitem -> lhs .)
    PLUS_EQUALS     reduce using rule 117 (mlhsitem -> lhs .)
    OR_EQUALS       reduce using rule 117 (mlhsitem -> lhs .)
    AND_EQUALS      reduce using rule 117 (mlhsitem -> lhs .)
    XOR_EQUALS      reduce using rule 117 (mlhsitem -> lhs .)
    RIGHT_SHIFT_EQUALS reduce using rule 117 (mlhsitem -> lhs .)
    LEFT_SHIFT_EQUALS reduce using rule 117 (mlhsitem -> lhs .)
    MULTIPLY_EQUALS reduce using rule 117 (mlhsitem -> lhs .)
    LOGICAL_AND_EQUALS reduce using rule 117 (mlhsitem -> lhs .)
    LOGICAL_OR_EQUALS reduce using rule 117 (mlhsitem -> lhs .)
    POWER_EQUALS    reduce using rule 117 (mlhsitem -> lhs .)


state 60

    (85) primary -> CONSTANT_RESOLUTION IDENTIFIER .

    POWER           reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    MULTIPLY        reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    DIVIDE          reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    MODULO          reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    PLUS            reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    MINUS           reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    BIT_AND         reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    BIT_XOR         reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    DOUBLE_EQUALS   reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    TRIPLE_EQUALS   reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    NOT_EQUALS      reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    EQUAL_TILDE     reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    BANG_TILDE      reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    COMPARISON      reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    LESS            reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    LESS_EQUALS     reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    GREATER         reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    INCL_RANGE      reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    EXCL_RANGE      reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    LOGICAL_OR      reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    BIT_OR          reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    COMMA           reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    SEMI_COLON      reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    NEWLINE         reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    def             reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    class           reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    break           reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    if              reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    while           reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    until           reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    case            reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    for             reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    return          reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    IDENTIFIER      reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    OPEN_BRACKET    reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    CONSTANT_RESOLUTION reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    OPEN_SQUARE     reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    OPEN_FLOWER     reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    nil             reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    self            reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    NUMBER          reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    FLOAT           reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    STRING          reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    true            reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    false           reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    GLOBAL          reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    AT_THE_RATE     reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    $end            reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    MAP             reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    when            reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    end             reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    elsif           reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    else            reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    do              reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    then            reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    CLOSE_SQUARE    reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    CLOSE_FLOWER    reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    DOT             reduce using rule 85 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)


state 61

    (174) opasgn -> MINUS_EQUALS .

    IDENTIFIER      reduce using rule 174 (opasgn -> MINUS_EQUALS .)
    MULTIPLY        reduce using rule 174 (opasgn -> MINUS_EQUALS .)
    OPEN_BRACKET    reduce using rule 174 (opasgn -> MINUS_EQUALS .)
    nil             reduce using rule 174 (opasgn -> MINUS_EQUALS .)
    self            reduce using rule 174 (opasgn -> MINUS_EQUALS .)
    GLOBAL          reduce using rule 174 (opasgn -> MINUS_EQUALS .)
    AT_THE_RATE     reduce using rule 174 (opasgn -> MINUS_EQUALS .)
    MINUS           reduce using rule 174 (opasgn -> MINUS_EQUALS .)
    PLUS            reduce using rule 174 (opasgn -> MINUS_EQUALS .)
    CONSTANT_RESOLUTION reduce using rule 174 (opasgn -> MINUS_EQUALS .)
    OPEN_SQUARE     reduce using rule 174 (opasgn -> MINUS_EQUALS .)
    OPEN_FLOWER     reduce using rule 174 (opasgn -> MINUS_EQUALS .)
    NUMBER          reduce using rule 174 (opasgn -> MINUS_EQUALS .)
    FLOAT           reduce using rule 174 (opasgn -> MINUS_EQUALS .)
    STRING          reduce using rule 174 (opasgn -> MINUS_EQUALS .)
    true            reduce using rule 174 (opasgn -> MINUS_EQUALS .)
    false           reduce using rule 174 (opasgn -> MINUS_EQUALS .)


state 62

    (175) opasgn -> PLUS_EQUALS .

    IDENTIFIER      reduce using rule 175 (opasgn -> PLUS_EQUALS .)
    MULTIPLY        reduce using rule 175 (opasgn -> PLUS_EQUALS .)
    OPEN_BRACKET    reduce using rule 175 (opasgn -> PLUS_EQUALS .)
    nil             reduce using rule 175 (opasgn -> PLUS_EQUALS .)
    self            reduce using rule 175 (opasgn -> PLUS_EQUALS .)
    GLOBAL          reduce using rule 175 (opasgn -> PLUS_EQUALS .)
    AT_THE_RATE     reduce using rule 175 (opasgn -> PLUS_EQUALS .)
    MINUS           reduce using rule 175 (opasgn -> PLUS_EQUALS .)
    PLUS            reduce using rule 175 (opasgn -> PLUS_EQUALS .)
    CONSTANT_RESOLUTION reduce using rule 175 (opasgn -> PLUS_EQUALS .)
    OPEN_SQUARE     reduce using rule 175 (opasgn -> PLUS_EQUALS .)
    OPEN_FLOWER     reduce using rule 175 (opasgn -> PLUS_EQUALS .)
    NUMBER          reduce using rule 175 (opasgn -> PLUS_EQUALS .)
    FLOAT           reduce using rule 175 (opasgn -> PLUS_EQUALS .)
    STRING          reduce using rule 175 (opasgn -> PLUS_EQUALS .)
    true            reduce using rule 175 (opasgn -> PLUS_EQUALS .)
    false           reduce using rule 175 (opasgn -> PLUS_EQUALS .)


state 63

    (178) opasgn -> XOR_EQUALS .

    IDENTIFIER      reduce using rule 178 (opasgn -> XOR_EQUALS .)
    MULTIPLY        reduce using rule 178 (opasgn -> XOR_EQUALS .)
    OPEN_BRACKET    reduce using rule 178 (opasgn -> XOR_EQUALS .)
    nil             reduce using rule 178 (opasgn -> XOR_EQUALS .)
    self            reduce using rule 178 (opasgn -> XOR_EQUALS .)
    GLOBAL          reduce using rule 178 (opasgn -> XOR_EQUALS .)
    AT_THE_RATE     reduce using rule 178 (opasgn -> XOR_EQUALS .)
    MINUS           reduce using rule 178 (opasgn -> XOR_EQUALS .)
    PLUS            reduce using rule 178 (opasgn -> XOR_EQUALS .)
    CONSTANT_RESOLUTION reduce using rule 178 (opasgn -> XOR_EQUALS .)
    OPEN_SQUARE     reduce using rule 178 (opasgn -> XOR_EQUALS .)
    OPEN_FLOWER     reduce using rule 178 (opasgn -> XOR_EQUALS .)
    NUMBER          reduce using rule 178 (opasgn -> XOR_EQUALS .)
    FLOAT           reduce using rule 178 (opasgn -> XOR_EQUALS .)
    STRING          reduce using rule 178 (opasgn -> XOR_EQUALS .)
    true            reduce using rule 178 (opasgn -> XOR_EQUALS .)
    false           reduce using rule 178 (opasgn -> XOR_EQUALS .)


state 64

    (180) opasgn -> LEFT_SHIFT_EQUALS .

    IDENTIFIER      reduce using rule 180 (opasgn -> LEFT_SHIFT_EQUALS .)
    MULTIPLY        reduce using rule 180 (opasgn -> LEFT_SHIFT_EQUALS .)
    OPEN_BRACKET    reduce using rule 180 (opasgn -> LEFT_SHIFT_EQUALS .)
    nil             reduce using rule 180 (opasgn -> LEFT_SHIFT_EQUALS .)
    self            reduce using rule 180 (opasgn -> LEFT_SHIFT_EQUALS .)
    GLOBAL          reduce using rule 180 (opasgn -> LEFT_SHIFT_EQUALS .)
    AT_THE_RATE     reduce using rule 180 (opasgn -> LEFT_SHIFT_EQUALS .)
    MINUS           reduce using rule 180 (opasgn -> LEFT_SHIFT_EQUALS .)
    PLUS            reduce using rule 180 (opasgn -> LEFT_SHIFT_EQUALS .)
    CONSTANT_RESOLUTION reduce using rule 180 (opasgn -> LEFT_SHIFT_EQUALS .)
    OPEN_SQUARE     reduce using rule 180 (opasgn -> LEFT_SHIFT_EQUALS .)
    OPEN_FLOWER     reduce using rule 180 (opasgn -> LEFT_SHIFT_EQUALS .)
    NUMBER          reduce using rule 180 (opasgn -> LEFT_SHIFT_EQUALS .)
    FLOAT           reduce using rule 180 (opasgn -> LEFT_SHIFT_EQUALS .)
    STRING          reduce using rule 180 (opasgn -> LEFT_SHIFT_EQUALS .)
    true            reduce using rule 180 (opasgn -> LEFT_SHIFT_EQUALS .)
    false           reduce using rule 180 (opasgn -> LEFT_SHIFT_EQUALS .)


state 65

    (177) opasgn -> AND_EQUALS .

    IDENTIFIER      reduce using rule 177 (opasgn -> AND_EQUALS .)
    MULTIPLY        reduce using rule 177 (opasgn -> AND_EQUALS .)
    OPEN_BRACKET    reduce using rule 177 (opasgn -> AND_EQUALS .)
    nil             reduce using rule 177 (opasgn -> AND_EQUALS .)
    self            reduce using rule 177 (opasgn -> AND_EQUALS .)
    GLOBAL          reduce using rule 177 (opasgn -> AND_EQUALS .)
    AT_THE_RATE     reduce using rule 177 (opasgn -> AND_EQUALS .)
    MINUS           reduce using rule 177 (opasgn -> AND_EQUALS .)
    PLUS            reduce using rule 177 (opasgn -> AND_EQUALS .)
    CONSTANT_RESOLUTION reduce using rule 177 (opasgn -> AND_EQUALS .)
    OPEN_SQUARE     reduce using rule 177 (opasgn -> AND_EQUALS .)
    OPEN_FLOWER     reduce using rule 177 (opasgn -> AND_EQUALS .)
    NUMBER          reduce using rule 177 (opasgn -> AND_EQUALS .)
    FLOAT           reduce using rule 177 (opasgn -> AND_EQUALS .)
    STRING          reduce using rule 177 (opasgn -> AND_EQUALS .)
    true            reduce using rule 177 (opasgn -> AND_EQUALS .)
    false           reduce using rule 177 (opasgn -> AND_EQUALS .)


state 66

    (173) opasgn -> DIVIDE_EQUALS .

    IDENTIFIER      reduce using rule 173 (opasgn -> DIVIDE_EQUALS .)
    MULTIPLY        reduce using rule 173 (opasgn -> DIVIDE_EQUALS .)
    OPEN_BRACKET    reduce using rule 173 (opasgn -> DIVIDE_EQUALS .)
    nil             reduce using rule 173 (opasgn -> DIVIDE_EQUALS .)
    self            reduce using rule 173 (opasgn -> DIVIDE_EQUALS .)
    GLOBAL          reduce using rule 173 (opasgn -> DIVIDE_EQUALS .)
    AT_THE_RATE     reduce using rule 173 (opasgn -> DIVIDE_EQUALS .)
    MINUS           reduce using rule 173 (opasgn -> DIVIDE_EQUALS .)
    PLUS            reduce using rule 173 (opasgn -> DIVIDE_EQUALS .)
    CONSTANT_RESOLUTION reduce using rule 173 (opasgn -> DIVIDE_EQUALS .)
    OPEN_SQUARE     reduce using rule 173 (opasgn -> DIVIDE_EQUALS .)
    OPEN_FLOWER     reduce using rule 173 (opasgn -> DIVIDE_EQUALS .)
    NUMBER          reduce using rule 173 (opasgn -> DIVIDE_EQUALS .)
    FLOAT           reduce using rule 173 (opasgn -> DIVIDE_EQUALS .)
    STRING          reduce using rule 173 (opasgn -> DIVIDE_EQUALS .)
    true            reduce using rule 173 (opasgn -> DIVIDE_EQUALS .)
    false           reduce using rule 173 (opasgn -> DIVIDE_EQUALS .)


state 67

    (184) opasgn -> POWER_EQUALS .

    IDENTIFIER      reduce using rule 184 (opasgn -> POWER_EQUALS .)
    MULTIPLY        reduce using rule 184 (opasgn -> POWER_EQUALS .)
    OPEN_BRACKET    reduce using rule 184 (opasgn -> POWER_EQUALS .)
    nil             reduce using rule 184 (opasgn -> POWER_EQUALS .)
    self            reduce using rule 184 (opasgn -> POWER_EQUALS .)
    GLOBAL          reduce using rule 184 (opasgn -> POWER_EQUALS .)
    AT_THE_RATE     reduce using rule 184 (opasgn -> POWER_EQUALS .)
    MINUS           reduce using rule 184 (opasgn -> POWER_EQUALS .)
    PLUS            reduce using rule 184 (opasgn -> POWER_EQUALS .)
    CONSTANT_RESOLUTION reduce using rule 184 (opasgn -> POWER_EQUALS .)
    OPEN_SQUARE     reduce using rule 184 (opasgn -> POWER_EQUALS .)
    OPEN_FLOWER     reduce using rule 184 (opasgn -> POWER_EQUALS .)
    NUMBER          reduce using rule 184 (opasgn -> POWER_EQUALS .)
    FLOAT           reduce using rule 184 (opasgn -> POWER_EQUALS .)
    STRING          reduce using rule 184 (opasgn -> POWER_EQUALS .)
    true            reduce using rule 184 (opasgn -> POWER_EQUALS .)
    false           reduce using rule 184 (opasgn -> POWER_EQUALS .)


state 68

    (182) opasgn -> LOGICAL_AND_EQUALS .

    IDENTIFIER      reduce using rule 182 (opasgn -> LOGICAL_AND_EQUALS .)
    MULTIPLY        reduce using rule 182 (opasgn -> LOGICAL_AND_EQUALS .)
    OPEN_BRACKET    reduce using rule 182 (opasgn -> LOGICAL_AND_EQUALS .)
    nil             reduce using rule 182 (opasgn -> LOGICAL_AND_EQUALS .)
    self            reduce using rule 182 (opasgn -> LOGICAL_AND_EQUALS .)
    GLOBAL          reduce using rule 182 (opasgn -> LOGICAL_AND_EQUALS .)
    AT_THE_RATE     reduce using rule 182 (opasgn -> LOGICAL_AND_EQUALS .)
    MINUS           reduce using rule 182 (opasgn -> LOGICAL_AND_EQUALS .)
    PLUS            reduce using rule 182 (opasgn -> LOGICAL_AND_EQUALS .)
    CONSTANT_RESOLUTION reduce using rule 182 (opasgn -> LOGICAL_AND_EQUALS .)
    OPEN_SQUARE     reduce using rule 182 (opasgn -> LOGICAL_AND_EQUALS .)
    OPEN_FLOWER     reduce using rule 182 (opasgn -> LOGICAL_AND_EQUALS .)
    NUMBER          reduce using rule 182 (opasgn -> LOGICAL_AND_EQUALS .)
    FLOAT           reduce using rule 182 (opasgn -> LOGICAL_AND_EQUALS .)
    STRING          reduce using rule 182 (opasgn -> LOGICAL_AND_EQUALS .)
    true            reduce using rule 182 (opasgn -> LOGICAL_AND_EQUALS .)
    false           reduce using rule 182 (opasgn -> LOGICAL_AND_EQUALS .)


state 69

    (179) opasgn -> RIGHT_SHIFT_EQUALS .

    IDENTIFIER      reduce using rule 179 (opasgn -> RIGHT_SHIFT_EQUALS .)
    MULTIPLY        reduce using rule 179 (opasgn -> RIGHT_SHIFT_EQUALS .)
    OPEN_BRACKET    reduce using rule 179 (opasgn -> RIGHT_SHIFT_EQUALS .)
    nil             reduce using rule 179 (opasgn -> RIGHT_SHIFT_EQUALS .)
    self            reduce using rule 179 (opasgn -> RIGHT_SHIFT_EQUALS .)
    GLOBAL          reduce using rule 179 (opasgn -> RIGHT_SHIFT_EQUALS .)
    AT_THE_RATE     reduce using rule 179 (opasgn -> RIGHT_SHIFT_EQUALS .)
    MINUS           reduce using rule 179 (opasgn -> RIGHT_SHIFT_EQUALS .)
    PLUS            reduce using rule 179 (opasgn -> RIGHT_SHIFT_EQUALS .)
    CONSTANT_RESOLUTION reduce using rule 179 (opasgn -> RIGHT_SHIFT_EQUALS .)
    OPEN_SQUARE     reduce using rule 179 (opasgn -> RIGHT_SHIFT_EQUALS .)
    OPEN_FLOWER     reduce using rule 179 (opasgn -> RIGHT_SHIFT_EQUALS .)
    NUMBER          reduce using rule 179 (opasgn -> RIGHT_SHIFT_EQUALS .)
    FLOAT           reduce using rule 179 (opasgn -> RIGHT_SHIFT_EQUALS .)
    STRING          reduce using rule 179 (opasgn -> RIGHT_SHIFT_EQUALS .)
    true            reduce using rule 179 (opasgn -> RIGHT_SHIFT_EQUALS .)
    false           reduce using rule 179 (opasgn -> RIGHT_SHIFT_EQUALS .)


state 70

    (39) term0 -> mlhs EQUALS . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> mlhs EQUALS . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (43) term1 -> mlhs EQUALS . mrhs
    (123) mrhs -> . args
    (124) mrhs -> . args COMMA MULTIPLY arg
    (125) mrhs -> . MULTIPLY arg
    (140) args -> . arg multargs
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    IDENTIFIER      shift and go to state 149
    MULTIPLY        shift and go to state 148
    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 122
    literal                        shift and go to state 33
    args                           shift and go to state 150
    mrhs                           shift and go to state 151
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 71

    (176) opasgn -> OR_EQUALS .

    IDENTIFIER      reduce using rule 176 (opasgn -> OR_EQUALS .)
    MULTIPLY        reduce using rule 176 (opasgn -> OR_EQUALS .)
    OPEN_BRACKET    reduce using rule 176 (opasgn -> OR_EQUALS .)
    nil             reduce using rule 176 (opasgn -> OR_EQUALS .)
    self            reduce using rule 176 (opasgn -> OR_EQUALS .)
    GLOBAL          reduce using rule 176 (opasgn -> OR_EQUALS .)
    AT_THE_RATE     reduce using rule 176 (opasgn -> OR_EQUALS .)
    MINUS           reduce using rule 176 (opasgn -> OR_EQUALS .)
    PLUS            reduce using rule 176 (opasgn -> OR_EQUALS .)
    CONSTANT_RESOLUTION reduce using rule 176 (opasgn -> OR_EQUALS .)
    OPEN_SQUARE     reduce using rule 176 (opasgn -> OR_EQUALS .)
    OPEN_FLOWER     reduce using rule 176 (opasgn -> OR_EQUALS .)
    NUMBER          reduce using rule 176 (opasgn -> OR_EQUALS .)
    FLOAT           reduce using rule 176 (opasgn -> OR_EQUALS .)
    STRING          reduce using rule 176 (opasgn -> OR_EQUALS .)
    true            reduce using rule 176 (opasgn -> OR_EQUALS .)
    false           reduce using rule 176 (opasgn -> OR_EQUALS .)


state 72

    (41) term0 -> mlhs opasgn . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (44) term1 -> mlhs opasgn . mrhs
    (123) mrhs -> . args
    (124) mrhs -> . args COMMA MULTIPLY arg
    (125) mrhs -> . MULTIPLY arg
    (140) args -> . arg multargs
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    IDENTIFIER      shift and go to state 152
    MULTIPLY        shift and go to state 148
    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 122
    literal                        shift and go to state 33
    args                           shift and go to state 150
    mrhs                           shift and go to state 153
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 73

    (181) opasgn -> MULTIPLY_EQUALS .

    IDENTIFIER      reduce using rule 181 (opasgn -> MULTIPLY_EQUALS .)
    MULTIPLY        reduce using rule 181 (opasgn -> MULTIPLY_EQUALS .)
    OPEN_BRACKET    reduce using rule 181 (opasgn -> MULTIPLY_EQUALS .)
    nil             reduce using rule 181 (opasgn -> MULTIPLY_EQUALS .)
    self            reduce using rule 181 (opasgn -> MULTIPLY_EQUALS .)
    GLOBAL          reduce using rule 181 (opasgn -> MULTIPLY_EQUALS .)
    AT_THE_RATE     reduce using rule 181 (opasgn -> MULTIPLY_EQUALS .)
    MINUS           reduce using rule 181 (opasgn -> MULTIPLY_EQUALS .)
    PLUS            reduce using rule 181 (opasgn -> MULTIPLY_EQUALS .)
    CONSTANT_RESOLUTION reduce using rule 181 (opasgn -> MULTIPLY_EQUALS .)
    OPEN_SQUARE     reduce using rule 181 (opasgn -> MULTIPLY_EQUALS .)
    OPEN_FLOWER     reduce using rule 181 (opasgn -> MULTIPLY_EQUALS .)
    NUMBER          reduce using rule 181 (opasgn -> MULTIPLY_EQUALS .)
    FLOAT           reduce using rule 181 (opasgn -> MULTIPLY_EQUALS .)
    STRING          reduce using rule 181 (opasgn -> MULTIPLY_EQUALS .)
    true            reduce using rule 181 (opasgn -> MULTIPLY_EQUALS .)
    false           reduce using rule 181 (opasgn -> MULTIPLY_EQUALS .)


state 74

    (183) opasgn -> LOGICAL_OR_EQUALS .

    IDENTIFIER      reduce using rule 183 (opasgn -> LOGICAL_OR_EQUALS .)
    MULTIPLY        reduce using rule 183 (opasgn -> LOGICAL_OR_EQUALS .)
    OPEN_BRACKET    reduce using rule 183 (opasgn -> LOGICAL_OR_EQUALS .)
    nil             reduce using rule 183 (opasgn -> LOGICAL_OR_EQUALS .)
    self            reduce using rule 183 (opasgn -> LOGICAL_OR_EQUALS .)
    GLOBAL          reduce using rule 183 (opasgn -> LOGICAL_OR_EQUALS .)
    AT_THE_RATE     reduce using rule 183 (opasgn -> LOGICAL_OR_EQUALS .)
    MINUS           reduce using rule 183 (opasgn -> LOGICAL_OR_EQUALS .)
    PLUS            reduce using rule 183 (opasgn -> LOGICAL_OR_EQUALS .)
    CONSTANT_RESOLUTION reduce using rule 183 (opasgn -> LOGICAL_OR_EQUALS .)
    OPEN_SQUARE     reduce using rule 183 (opasgn -> LOGICAL_OR_EQUALS .)
    OPEN_FLOWER     reduce using rule 183 (opasgn -> LOGICAL_OR_EQUALS .)
    NUMBER          reduce using rule 183 (opasgn -> LOGICAL_OR_EQUALS .)
    FLOAT           reduce using rule 183 (opasgn -> LOGICAL_OR_EQUALS .)
    STRING          reduce using rule 183 (opasgn -> LOGICAL_OR_EQUALS .)
    true            reduce using rule 183 (opasgn -> LOGICAL_OR_EQUALS .)
    false           reduce using rule 183 (opasgn -> LOGICAL_OR_EQUALS .)


state 75

    (172) opasgn -> MODULO_EQUALS .

    IDENTIFIER      reduce using rule 172 (opasgn -> MODULO_EQUALS .)
    MULTIPLY        reduce using rule 172 (opasgn -> MODULO_EQUALS .)
    OPEN_BRACKET    reduce using rule 172 (opasgn -> MODULO_EQUALS .)
    nil             reduce using rule 172 (opasgn -> MODULO_EQUALS .)
    self            reduce using rule 172 (opasgn -> MODULO_EQUALS .)
    GLOBAL          reduce using rule 172 (opasgn -> MODULO_EQUALS .)
    AT_THE_RATE     reduce using rule 172 (opasgn -> MODULO_EQUALS .)
    MINUS           reduce using rule 172 (opasgn -> MODULO_EQUALS .)
    PLUS            reduce using rule 172 (opasgn -> MODULO_EQUALS .)
    CONSTANT_RESOLUTION reduce using rule 172 (opasgn -> MODULO_EQUALS .)
    OPEN_SQUARE     reduce using rule 172 (opasgn -> MODULO_EQUALS .)
    OPEN_FLOWER     reduce using rule 172 (opasgn -> MODULO_EQUALS .)
    NUMBER          reduce using rule 172 (opasgn -> MODULO_EQUALS .)
    FLOAT           reduce using rule 172 (opasgn -> MODULO_EQUALS .)
    STRING          reduce using rule 172 (opasgn -> MODULO_EQUALS .)
    true            reduce using rule 172 (opasgn -> MODULO_EQUALS .)
    false           reduce using rule 172 (opasgn -> MODULO_EQUALS .)


state 76

    (81) term13 -> primary . POWER term13
    (82) term13 -> primary .

    POWER           shift and go to state 126
    MULTIPLY        reduce using rule 82 (term13 -> primary .)
    DIVIDE          reduce using rule 82 (term13 -> primary .)
    MODULO          reduce using rule 82 (term13 -> primary .)
    PLUS            reduce using rule 82 (term13 -> primary .)
    MINUS           reduce using rule 82 (term13 -> primary .)
    LEFT_SHIFT      reduce using rule 82 (term13 -> primary .)
    RIGHT_SHIFT     reduce using rule 82 (term13 -> primary .)
    BIT_AND         reduce using rule 82 (term13 -> primary .)
    BIT_XOR         reduce using rule 82 (term13 -> primary .)
    DOUBLE_EQUALS   reduce using rule 82 (term13 -> primary .)
    TRIPLE_EQUALS   reduce using rule 82 (term13 -> primary .)
    NOT_EQUALS      reduce using rule 82 (term13 -> primary .)
    EQUAL_TILDE     reduce using rule 82 (term13 -> primary .)
    BANG_TILDE      reduce using rule 82 (term13 -> primary .)
    COMPARISON      reduce using rule 82 (term13 -> primary .)
    LESS            reduce using rule 82 (term13 -> primary .)
    LESS_EQUALS     reduce using rule 82 (term13 -> primary .)
    GREATER         reduce using rule 82 (term13 -> primary .)
    GREATER_EQUALS  reduce using rule 82 (term13 -> primary .)
    INCL_RANGE      reduce using rule 82 (term13 -> primary .)
    EXCL_RANGE      reduce using rule 82 (term13 -> primary .)
    LOGICAL_OR      reduce using rule 82 (term13 -> primary .)
    BIT_OR          reduce using rule 82 (term13 -> primary .)
    MAP             reduce using rule 82 (term13 -> primary .)
    COMMA           reduce using rule 82 (term13 -> primary .)
    CLOSE_FLOWER    reduce using rule 82 (term13 -> primary .)
    SEMI_COLON      reduce using rule 82 (term13 -> primary .)
    NEWLINE         reduce using rule 82 (term13 -> primary .)
    def             reduce using rule 82 (term13 -> primary .)
    class           reduce using rule 82 (term13 -> primary .)
    break           reduce using rule 82 (term13 -> primary .)
    if              reduce using rule 82 (term13 -> primary .)
    while           reduce using rule 82 (term13 -> primary .)
    until           reduce using rule 82 (term13 -> primary .)
    case            reduce using rule 82 (term13 -> primary .)
    for             reduce using rule 82 (term13 -> primary .)
    return          reduce using rule 82 (term13 -> primary .)
    IDENTIFIER      reduce using rule 82 (term13 -> primary .)
    OPEN_BRACKET    reduce using rule 82 (term13 -> primary .)
    CONSTANT_RESOLUTION reduce using rule 82 (term13 -> primary .)
    OPEN_SQUARE     reduce using rule 82 (term13 -> primary .)
    OPEN_FLOWER     reduce using rule 82 (term13 -> primary .)
    nil             reduce using rule 82 (term13 -> primary .)
    self            reduce using rule 82 (term13 -> primary .)
    NUMBER          reduce using rule 82 (term13 -> primary .)
    FLOAT           reduce using rule 82 (term13 -> primary .)
    STRING          reduce using rule 82 (term13 -> primary .)
    true            reduce using rule 82 (term13 -> primary .)
    false           reduce using rule 82 (term13 -> primary .)
    GLOBAL          reduce using rule 82 (term13 -> primary .)
    AT_THE_RATE     reduce using rule 82 (term13 -> primary .)
    $end            reduce using rule 82 (term13 -> primary .)
    CLOSE_BRACKET   reduce using rule 82 (term13 -> primary .)
    when            reduce using rule 82 (term13 -> primary .)
    end             reduce using rule 82 (term13 -> primary .)
    elsif           reduce using rule 82 (term13 -> primary .)
    else            reduce using rule 82 (term13 -> primary .)
    do              reduce using rule 82 (term13 -> primary .)
    then            reduce using rule 82 (term13 -> primary .)
    CLOSE_SQUARE    reduce using rule 82 (term13 -> primary .)


state 77

    (83) primary -> OPEN_BRACKET . expr2 CLOSE_BRACKET
    (26) expr2 -> . call
    (27) expr2 -> . arg
    (28) call -> . function
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (29) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (30) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) function -> . primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> . primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (33) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> . primary DOT IDENTIFIER
    (36) function -> . primary CONSTANT_RESOLUTION IDENTIFIER
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary

    IDENTIFIER      shift and go to state 35
    OPEN_BRACKET    shift and go to state 5
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 32
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 25
    expr2                          shift and go to state 83
    literal                        shift and go to state 33
    call                           shift and go to state 34
    function                       shift and go to state 38
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 56
    varname                        shift and go to state 30
    lhs                            shift and go to state 59
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 78

    (187) varname -> IDENTIFIER .

    OPEN_SQUARE     reduce using rule 187 (varname -> IDENTIFIER .)
    DOT             reduce using rule 187 (varname -> IDENTIFIER .)
    CONSTANT_RESOLUTION reduce using rule 187 (varname -> IDENTIFIER .)
    COMMA           reduce using rule 187 (varname -> IDENTIFIER .)
    EQUALS          reduce using rule 187 (varname -> IDENTIFIER .)
    MODULO_EQUALS   reduce using rule 187 (varname -> IDENTIFIER .)
    DIVIDE_EQUALS   reduce using rule 187 (varname -> IDENTIFIER .)
    MINUS_EQUALS    reduce using rule 187 (varname -> IDENTIFIER .)
    PLUS_EQUALS     reduce using rule 187 (varname -> IDENTIFIER .)
    OR_EQUALS       reduce using rule 187 (varname -> IDENTIFIER .)
    AND_EQUALS      reduce using rule 187 (varname -> IDENTIFIER .)
    XOR_EQUALS      reduce using rule 187 (varname -> IDENTIFIER .)
    RIGHT_SHIFT_EQUALS reduce using rule 187 (varname -> IDENTIFIER .)
    LEFT_SHIFT_EQUALS reduce using rule 187 (varname -> IDENTIFIER .)
    MULTIPLY_EQUALS reduce using rule 187 (varname -> IDENTIFIER .)
    LOGICAL_AND_EQUALS reduce using rule 187 (varname -> IDENTIFIER .)
    LOGICAL_OR_EQUALS reduce using rule 187 (varname -> IDENTIFIER .)
    POWER_EQUALS    reduce using rule 187 (varname -> IDENTIFIER .)
    POWER           reduce using rule 187 (varname -> IDENTIFIER .)
    MULTIPLY        reduce using rule 187 (varname -> IDENTIFIER .)
    DIVIDE          reduce using rule 187 (varname -> IDENTIFIER .)
    MODULO          reduce using rule 187 (varname -> IDENTIFIER .)
    PLUS            reduce using rule 187 (varname -> IDENTIFIER .)
    MINUS           reduce using rule 187 (varname -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 187 (varname -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 187 (varname -> IDENTIFIER .)
    BIT_AND         reduce using rule 187 (varname -> IDENTIFIER .)
    BIT_XOR         reduce using rule 187 (varname -> IDENTIFIER .)
    DOUBLE_EQUALS   reduce using rule 187 (varname -> IDENTIFIER .)
    TRIPLE_EQUALS   reduce using rule 187 (varname -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 187 (varname -> IDENTIFIER .)
    EQUAL_TILDE     reduce using rule 187 (varname -> IDENTIFIER .)
    BANG_TILDE      reduce using rule 187 (varname -> IDENTIFIER .)
    COMPARISON      reduce using rule 187 (varname -> IDENTIFIER .)
    LESS            reduce using rule 187 (varname -> IDENTIFIER .)
    LESS_EQUALS     reduce using rule 187 (varname -> IDENTIFIER .)
    GREATER         reduce using rule 187 (varname -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 187 (varname -> IDENTIFIER .)
    INCL_RANGE      reduce using rule 187 (varname -> IDENTIFIER .)
    EXCL_RANGE      reduce using rule 187 (varname -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 187 (varname -> IDENTIFIER .)
    BIT_OR          reduce using rule 187 (varname -> IDENTIFIER .)
    SEMI_COLON      reduce using rule 187 (varname -> IDENTIFIER .)
    NEWLINE         reduce using rule 187 (varname -> IDENTIFIER .)
    def             reduce using rule 187 (varname -> IDENTIFIER .)
    class           reduce using rule 187 (varname -> IDENTIFIER .)
    break           reduce using rule 187 (varname -> IDENTIFIER .)
    if              reduce using rule 187 (varname -> IDENTIFIER .)
    while           reduce using rule 187 (varname -> IDENTIFIER .)
    until           reduce using rule 187 (varname -> IDENTIFIER .)
    case            reduce using rule 187 (varname -> IDENTIFIER .)
    for             reduce using rule 187 (varname -> IDENTIFIER .)
    return          reduce using rule 187 (varname -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 187 (varname -> IDENTIFIER .)
    OPEN_BRACKET    reduce using rule 187 (varname -> IDENTIFIER .)
    OPEN_FLOWER     reduce using rule 187 (varname -> IDENTIFIER .)
    nil             reduce using rule 187 (varname -> IDENTIFIER .)
    self            reduce using rule 187 (varname -> IDENTIFIER .)
    NUMBER          reduce using rule 187 (varname -> IDENTIFIER .)
    FLOAT           reduce using rule 187 (varname -> IDENTIFIER .)
    STRING          reduce using rule 187 (varname -> IDENTIFIER .)
    true            reduce using rule 187 (varname -> IDENTIFIER .)
    false           reduce using rule 187 (varname -> IDENTIFIER .)
    GLOBAL          reduce using rule 187 (varname -> IDENTIFIER .)
    AT_THE_RATE     reduce using rule 187 (varname -> IDENTIFIER .)
    $end            reduce using rule 187 (varname -> IDENTIFIER .)
    when            reduce using rule 187 (varname -> IDENTIFIER .)
    end             reduce using rule 187 (varname -> IDENTIFIER .)
    elsif           reduce using rule 187 (varname -> IDENTIFIER .)
    else            reduce using rule 187 (varname -> IDENTIFIER .)
    do              reduce using rule 187 (varname -> IDENTIFIER .)
    then            reduce using rule 187 (varname -> IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 187 (varname -> IDENTIFIER .)
    CLOSE_FLOWER    reduce using rule 187 (varname -> IDENTIFIER .)
    MAP             reduce using rule 187 (varname -> IDENTIFIER .)
    CLOSE_SQUARE    reduce using rule 187 (varname -> IDENTIFIER .)
    in              reduce using rule 187 (varname -> IDENTIFIER .)


state 79

    (95) primary -> lhs .

    POWER           reduce using rule 95 (primary -> lhs .)
    MULTIPLY        reduce using rule 95 (primary -> lhs .)
    DIVIDE          reduce using rule 95 (primary -> lhs .)
    MODULO          reduce using rule 95 (primary -> lhs .)
    PLUS            reduce using rule 95 (primary -> lhs .)
    MINUS           reduce using rule 95 (primary -> lhs .)
    LEFT_SHIFT      reduce using rule 95 (primary -> lhs .)
    RIGHT_SHIFT     reduce using rule 95 (primary -> lhs .)
    BIT_AND         reduce using rule 95 (primary -> lhs .)
    BIT_XOR         reduce using rule 95 (primary -> lhs .)
    LESS            reduce using rule 95 (primary -> lhs .)
    LESS_EQUALS     reduce using rule 95 (primary -> lhs .)
    GREATER         reduce using rule 95 (primary -> lhs .)
    GREATER_EQUALS  reduce using rule 95 (primary -> lhs .)
    INCL_RANGE      reduce using rule 95 (primary -> lhs .)
    EXCL_RANGE      reduce using rule 95 (primary -> lhs .)
    LOGICAL_OR      reduce using rule 95 (primary -> lhs .)
    BIT_OR          reduce using rule 95 (primary -> lhs .)
    SEMI_COLON      reduce using rule 95 (primary -> lhs .)
    NEWLINE         reduce using rule 95 (primary -> lhs .)
    def             reduce using rule 95 (primary -> lhs .)
    class           reduce using rule 95 (primary -> lhs .)
    break           reduce using rule 95 (primary -> lhs .)
    if              reduce using rule 95 (primary -> lhs .)
    while           reduce using rule 95 (primary -> lhs .)
    until           reduce using rule 95 (primary -> lhs .)
    case            reduce using rule 95 (primary -> lhs .)
    for             reduce using rule 95 (primary -> lhs .)
    return          reduce using rule 95 (primary -> lhs .)
    IDENTIFIER      reduce using rule 95 (primary -> lhs .)
    OPEN_BRACKET    reduce using rule 95 (primary -> lhs .)
    CONSTANT_RESOLUTION reduce using rule 95 (primary -> lhs .)
    OPEN_SQUARE     reduce using rule 95 (primary -> lhs .)
    OPEN_FLOWER     reduce using rule 95 (primary -> lhs .)
    nil             reduce using rule 95 (primary -> lhs .)
    self            reduce using rule 95 (primary -> lhs .)
    NUMBER          reduce using rule 95 (primary -> lhs .)
    FLOAT           reduce using rule 95 (primary -> lhs .)
    STRING          reduce using rule 95 (primary -> lhs .)
    true            reduce using rule 95 (primary -> lhs .)
    false           reduce using rule 95 (primary -> lhs .)
    GLOBAL          reduce using rule 95 (primary -> lhs .)
    AT_THE_RATE     reduce using rule 95 (primary -> lhs .)
    $end            reduce using rule 95 (primary -> lhs .)
    CLOSE_BRACKET   reduce using rule 95 (primary -> lhs .)
    MAP             reduce using rule 95 (primary -> lhs .)
    COMMA           reduce using rule 95 (primary -> lhs .)
    when            reduce using rule 95 (primary -> lhs .)
    end             reduce using rule 95 (primary -> lhs .)
    elsif           reduce using rule 95 (primary -> lhs .)
    else            reduce using rule 95 (primary -> lhs .)
    do              reduce using rule 95 (primary -> lhs .)
    then            reduce using rule 95 (primary -> lhs .)
    CLOSE_SQUARE    reduce using rule 95 (primary -> lhs .)
    CLOSE_FLOWER    reduce using rule 95 (primary -> lhs .)
    DOUBLE_EQUALS   reduce using rule 95 (primary -> lhs .)
    TRIPLE_EQUALS   reduce using rule 95 (primary -> lhs .)
    NOT_EQUALS      reduce using rule 95 (primary -> lhs .)
    EQUAL_TILDE     reduce using rule 95 (primary -> lhs .)
    BANG_TILDE      reduce using rule 95 (primary -> lhs .)
    COMPARISON      reduce using rule 95 (primary -> lhs .)


state 80

    (77) term11 -> MINUS term11 .

    MULTIPLY        reduce using rule 77 (term11 -> MINUS term11 .)
    DIVIDE          reduce using rule 77 (term11 -> MINUS term11 .)
    MODULO          reduce using rule 77 (term11 -> MINUS term11 .)
    PLUS            reduce using rule 77 (term11 -> MINUS term11 .)
    MINUS           reduce using rule 77 (term11 -> MINUS term11 .)
    LEFT_SHIFT      reduce using rule 77 (term11 -> MINUS term11 .)
    RIGHT_SHIFT     reduce using rule 77 (term11 -> MINUS term11 .)
    BIT_AND         reduce using rule 77 (term11 -> MINUS term11 .)
    BIT_XOR         reduce using rule 77 (term11 -> MINUS term11 .)
    DOUBLE_EQUALS   reduce using rule 77 (term11 -> MINUS term11 .)
    TRIPLE_EQUALS   reduce using rule 77 (term11 -> MINUS term11 .)
    NOT_EQUALS      reduce using rule 77 (term11 -> MINUS term11 .)
    EQUAL_TILDE     reduce using rule 77 (term11 -> MINUS term11 .)
    BANG_TILDE      reduce using rule 77 (term11 -> MINUS term11 .)
    COMPARISON      reduce using rule 77 (term11 -> MINUS term11 .)
    LESS            reduce using rule 77 (term11 -> MINUS term11 .)
    LESS_EQUALS     reduce using rule 77 (term11 -> MINUS term11 .)
    GREATER         reduce using rule 77 (term11 -> MINUS term11 .)
    GREATER_EQUALS  reduce using rule 77 (term11 -> MINUS term11 .)
    INCL_RANGE      reduce using rule 77 (term11 -> MINUS term11 .)
    EXCL_RANGE      reduce using rule 77 (term11 -> MINUS term11 .)
    LOGICAL_OR      reduce using rule 77 (term11 -> MINUS term11 .)
    BIT_OR          reduce using rule 77 (term11 -> MINUS term11 .)
    MAP             reduce using rule 77 (term11 -> MINUS term11 .)
    COMMA           reduce using rule 77 (term11 -> MINUS term11 .)
    CLOSE_BRACKET   reduce using rule 77 (term11 -> MINUS term11 .)
    SEMI_COLON      reduce using rule 77 (term11 -> MINUS term11 .)
    NEWLINE         reduce using rule 77 (term11 -> MINUS term11 .)
    def             reduce using rule 77 (term11 -> MINUS term11 .)
    class           reduce using rule 77 (term11 -> MINUS term11 .)
    break           reduce using rule 77 (term11 -> MINUS term11 .)
    if              reduce using rule 77 (term11 -> MINUS term11 .)
    while           reduce using rule 77 (term11 -> MINUS term11 .)
    until           reduce using rule 77 (term11 -> MINUS term11 .)
    case            reduce using rule 77 (term11 -> MINUS term11 .)
    for             reduce using rule 77 (term11 -> MINUS term11 .)
    return          reduce using rule 77 (term11 -> MINUS term11 .)
    IDENTIFIER      reduce using rule 77 (term11 -> MINUS term11 .)
    OPEN_BRACKET    reduce using rule 77 (term11 -> MINUS term11 .)
    CONSTANT_RESOLUTION reduce using rule 77 (term11 -> MINUS term11 .)
    OPEN_SQUARE     reduce using rule 77 (term11 -> MINUS term11 .)
    OPEN_FLOWER     reduce using rule 77 (term11 -> MINUS term11 .)
    nil             reduce using rule 77 (term11 -> MINUS term11 .)
    self            reduce using rule 77 (term11 -> MINUS term11 .)
    NUMBER          reduce using rule 77 (term11 -> MINUS term11 .)
    FLOAT           reduce using rule 77 (term11 -> MINUS term11 .)
    STRING          reduce using rule 77 (term11 -> MINUS term11 .)
    true            reduce using rule 77 (term11 -> MINUS term11 .)
    false           reduce using rule 77 (term11 -> MINUS term11 .)
    GLOBAL          reduce using rule 77 (term11 -> MINUS term11 .)
    AT_THE_RATE     reduce using rule 77 (term11 -> MINUS term11 .)
    $end            reduce using rule 77 (term11 -> MINUS term11 .)
    when            reduce using rule 77 (term11 -> MINUS term11 .)
    end             reduce using rule 77 (term11 -> MINUS term11 .)
    elsif           reduce using rule 77 (term11 -> MINUS term11 .)
    else            reduce using rule 77 (term11 -> MINUS term11 .)
    do              reduce using rule 77 (term11 -> MINUS term11 .)
    then            reduce using rule 77 (term11 -> MINUS term11 .)
    CLOSE_SQUARE    reduce using rule 77 (term11 -> MINUS term11 .)
    CLOSE_FLOWER    reduce using rule 77 (term11 -> MINUS term11 .)


state 81

    (118) mlhsitem -> OPEN_BRACKET mlhs . CLOSE_BRACKET
    (39) term0 -> mlhs . EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> mlhs . EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> mlhs . opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (43) term1 -> mlhs . EQUALS mrhs
    (44) term1 -> mlhs . opasgn mrhs
    (172) opasgn -> . MODULO_EQUALS
    (173) opasgn -> . DIVIDE_EQUALS
    (174) opasgn -> . MINUS_EQUALS
    (175) opasgn -> . PLUS_EQUALS
    (176) opasgn -> . OR_EQUALS
    (177) opasgn -> . AND_EQUALS
    (178) opasgn -> . XOR_EQUALS
    (179) opasgn -> . RIGHT_SHIFT_EQUALS
    (180) opasgn -> . LEFT_SHIFT_EQUALS
    (181) opasgn -> . MULTIPLY_EQUALS
    (182) opasgn -> . LOGICAL_AND_EQUALS
    (183) opasgn -> . LOGICAL_OR_EQUALS
    (184) opasgn -> . POWER_EQUALS

    CLOSE_BRACKET   shift and go to state 154
    EQUALS          shift and go to state 70
    MODULO_EQUALS   shift and go to state 75
    DIVIDE_EQUALS   shift and go to state 66
    MINUS_EQUALS    shift and go to state 61
    PLUS_EQUALS     shift and go to state 62
    OR_EQUALS       shift and go to state 71
    AND_EQUALS      shift and go to state 65
    XOR_EQUALS      shift and go to state 63
    RIGHT_SHIFT_EQUALS shift and go to state 69
    LEFT_SHIFT_EQUALS shift and go to state 64
    MULTIPLY_EQUALS shift and go to state 73
    LOGICAL_AND_EQUALS shift and go to state 68
    LOGICAL_OR_EQUALS shift and go to state 74
    POWER_EQUALS    shift and go to state 67

    opasgn                         shift and go to state 72

state 82

    (118) mlhsitem -> OPEN_BRACKET . mlhs CLOSE_BRACKET
    (83) primary -> OPEN_BRACKET . expr2 CLOSE_BRACKET
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (26) expr2 -> . call
    (27) expr2 -> . arg
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (28) call -> . function
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (29) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (30) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) function -> . primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> . primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (33) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> . primary DOT IDENTIFIER
    (36) function -> . primary CONSTANT_RESOLUTION IDENTIFIER
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary

    OPEN_BRACKET    shift and go to state 82
    IDENTIFIER      shift and go to state 35
    nil             shift and go to state 54
    self            shift and go to state 50
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 81
    primary                        shift and go to state 32
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 25
    expr2                          shift and go to state 83
    literal                        shift and go to state 33
    call                           shift and go to state 34
    function                       shift and go to state 38
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 83

    (83) primary -> OPEN_BRACKET expr2 . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 155


state 84

    (119) lhs -> variable .
    (120) lhs -> variable . OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> variable . OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> variable . DOT IDENTIFIER
    (84) primary -> variable . CONSTANT_RESOLUTION IDENTIFIER

  ! shift/reduce conflict for OPEN_SQUARE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for CONSTANT_RESOLUTION resolved as shift
    COMMA           reduce using rule 119 (lhs -> variable .)
    EQUALS          reduce using rule 119 (lhs -> variable .)
    MODULO_EQUALS   reduce using rule 119 (lhs -> variable .)
    DIVIDE_EQUALS   reduce using rule 119 (lhs -> variable .)
    MINUS_EQUALS    reduce using rule 119 (lhs -> variable .)
    PLUS_EQUALS     reduce using rule 119 (lhs -> variable .)
    OR_EQUALS       reduce using rule 119 (lhs -> variable .)
    AND_EQUALS      reduce using rule 119 (lhs -> variable .)
    XOR_EQUALS      reduce using rule 119 (lhs -> variable .)
    RIGHT_SHIFT_EQUALS reduce using rule 119 (lhs -> variable .)
    LEFT_SHIFT_EQUALS reduce using rule 119 (lhs -> variable .)
    MULTIPLY_EQUALS reduce using rule 119 (lhs -> variable .)
    LOGICAL_AND_EQUALS reduce using rule 119 (lhs -> variable .)
    LOGICAL_OR_EQUALS reduce using rule 119 (lhs -> variable .)
    POWER_EQUALS    reduce using rule 119 (lhs -> variable .)
    POWER           reduce using rule 119 (lhs -> variable .)
    MULTIPLY        reduce using rule 119 (lhs -> variable .)
    DIVIDE          reduce using rule 119 (lhs -> variable .)
    MODULO          reduce using rule 119 (lhs -> variable .)
    PLUS            reduce using rule 119 (lhs -> variable .)
    MINUS           reduce using rule 119 (lhs -> variable .)
    LEFT_SHIFT      reduce using rule 119 (lhs -> variable .)
    RIGHT_SHIFT     reduce using rule 119 (lhs -> variable .)
    BIT_AND         reduce using rule 119 (lhs -> variable .)
    BIT_XOR         reduce using rule 119 (lhs -> variable .)
    DOUBLE_EQUALS   reduce using rule 119 (lhs -> variable .)
    TRIPLE_EQUALS   reduce using rule 119 (lhs -> variable .)
    NOT_EQUALS      reduce using rule 119 (lhs -> variable .)
    EQUAL_TILDE     reduce using rule 119 (lhs -> variable .)
    BANG_TILDE      reduce using rule 119 (lhs -> variable .)
    COMPARISON      reduce using rule 119 (lhs -> variable .)
    LESS            reduce using rule 119 (lhs -> variable .)
    LESS_EQUALS     reduce using rule 119 (lhs -> variable .)
    GREATER         reduce using rule 119 (lhs -> variable .)
    GREATER_EQUALS  reduce using rule 119 (lhs -> variable .)
    INCL_RANGE      reduce using rule 119 (lhs -> variable .)
    EXCL_RANGE      reduce using rule 119 (lhs -> variable .)
    LOGICAL_OR      reduce using rule 119 (lhs -> variable .)
    BIT_OR          reduce using rule 119 (lhs -> variable .)
    then            reduce using rule 119 (lhs -> variable .)
    SEMI_COLON      reduce using rule 119 (lhs -> variable .)
    NEWLINE         reduce using rule 119 (lhs -> variable .)
    def             reduce using rule 119 (lhs -> variable .)
    class           reduce using rule 119 (lhs -> variable .)
    break           reduce using rule 119 (lhs -> variable .)
    if              reduce using rule 119 (lhs -> variable .)
    while           reduce using rule 119 (lhs -> variable .)
    until           reduce using rule 119 (lhs -> variable .)
    case            reduce using rule 119 (lhs -> variable .)
    for             reduce using rule 119 (lhs -> variable .)
    return          reduce using rule 119 (lhs -> variable .)
    IDENTIFIER      reduce using rule 119 (lhs -> variable .)
    OPEN_BRACKET    reduce using rule 119 (lhs -> variable .)
    OPEN_FLOWER     reduce using rule 119 (lhs -> variable .)
    nil             reduce using rule 119 (lhs -> variable .)
    self            reduce using rule 119 (lhs -> variable .)
    NUMBER          reduce using rule 119 (lhs -> variable .)
    FLOAT           reduce using rule 119 (lhs -> variable .)
    STRING          reduce using rule 119 (lhs -> variable .)
    true            reduce using rule 119 (lhs -> variable .)
    false           reduce using rule 119 (lhs -> variable .)
    GLOBAL          reduce using rule 119 (lhs -> variable .)
    AT_THE_RATE     reduce using rule 119 (lhs -> variable .)
    $end            reduce using rule 119 (lhs -> variable .)
    when            reduce using rule 119 (lhs -> variable .)
    end             reduce using rule 119 (lhs -> variable .)
    elsif           reduce using rule 119 (lhs -> variable .)
    else            reduce using rule 119 (lhs -> variable .)
    do              reduce using rule 119 (lhs -> variable .)
    CLOSE_BRACKET   reduce using rule 119 (lhs -> variable .)
    CLOSE_SQUARE    reduce using rule 119 (lhs -> variable .)
    MAP             reduce using rule 119 (lhs -> variable .)
    CLOSE_FLOWER    reduce using rule 119 (lhs -> variable .)
    OPEN_SQUARE     shift and go to state 145
    DOT             shift and go to state 146
    CONSTANT_RESOLUTION shift and go to state 144

  ! CONSTANT_RESOLUTION [ reduce using rule 119 (lhs -> variable .) ]
  ! OPEN_SQUARE     [ reduce using rule 119 (lhs -> variable .) ]
  ! DOT             [ reduce using rule 119 (lhs -> variable .) ]


state 85

    (117) mlhsitem -> lhs .
    (95) primary -> lhs .

  ! reduce/reduce conflict for COMMA resolved using rule 95 (primary -> lhs .)
  ! reduce/reduce conflict for CLOSE_BRACKET resolved using rule 95 (primary -> lhs .)
    EQUALS          reduce using rule 117 (mlhsitem -> lhs .)
    MODULO_EQUALS   reduce using rule 117 (mlhsitem -> lhs .)
    DIVIDE_EQUALS   reduce using rule 117 (mlhsitem -> lhs .)
    MINUS_EQUALS    reduce using rule 117 (mlhsitem -> lhs .)
    PLUS_EQUALS     reduce using rule 117 (mlhsitem -> lhs .)
    OR_EQUALS       reduce using rule 117 (mlhsitem -> lhs .)
    AND_EQUALS      reduce using rule 117 (mlhsitem -> lhs .)
    XOR_EQUALS      reduce using rule 117 (mlhsitem -> lhs .)
    RIGHT_SHIFT_EQUALS reduce using rule 117 (mlhsitem -> lhs .)
    LEFT_SHIFT_EQUALS reduce using rule 117 (mlhsitem -> lhs .)
    MULTIPLY_EQUALS reduce using rule 117 (mlhsitem -> lhs .)
    LOGICAL_AND_EQUALS reduce using rule 117 (mlhsitem -> lhs .)
    LOGICAL_OR_EQUALS reduce using rule 117 (mlhsitem -> lhs .)
    POWER_EQUALS    reduce using rule 117 (mlhsitem -> lhs .)
    POWER           reduce using rule 95 (primary -> lhs .)
    MULTIPLY        reduce using rule 95 (primary -> lhs .)
    DIVIDE          reduce using rule 95 (primary -> lhs .)
    MODULO          reduce using rule 95 (primary -> lhs .)
    PLUS            reduce using rule 95 (primary -> lhs .)
    MINUS           reduce using rule 95 (primary -> lhs .)
    LEFT_SHIFT      reduce using rule 95 (primary -> lhs .)
    RIGHT_SHIFT     reduce using rule 95 (primary -> lhs .)
    BIT_AND         reduce using rule 95 (primary -> lhs .)
    BIT_XOR         reduce using rule 95 (primary -> lhs .)
    DOUBLE_EQUALS   reduce using rule 95 (primary -> lhs .)
    TRIPLE_EQUALS   reduce using rule 95 (primary -> lhs .)
    NOT_EQUALS      reduce using rule 95 (primary -> lhs .)
    EQUAL_TILDE     reduce using rule 95 (primary -> lhs .)
    BANG_TILDE      reduce using rule 95 (primary -> lhs .)
    COMPARISON      reduce using rule 95 (primary -> lhs .)
    LESS            reduce using rule 95 (primary -> lhs .)
    LESS_EQUALS     reduce using rule 95 (primary -> lhs .)
    GREATER         reduce using rule 95 (primary -> lhs .)
    GREATER_EQUALS  reduce using rule 95 (primary -> lhs .)
    INCL_RANGE      reduce using rule 95 (primary -> lhs .)
    EXCL_RANGE      reduce using rule 95 (primary -> lhs .)
    LOGICAL_OR      reduce using rule 95 (primary -> lhs .)
    BIT_OR          reduce using rule 95 (primary -> lhs .)
    COMMA           reduce using rule 95 (primary -> lhs .)
    SEMI_COLON      reduce using rule 95 (primary -> lhs .)
    NEWLINE         reduce using rule 95 (primary -> lhs .)
    def             reduce using rule 95 (primary -> lhs .)
    class           reduce using rule 95 (primary -> lhs .)
    break           reduce using rule 95 (primary -> lhs .)
    if              reduce using rule 95 (primary -> lhs .)
    while           reduce using rule 95 (primary -> lhs .)
    until           reduce using rule 95 (primary -> lhs .)
    case            reduce using rule 95 (primary -> lhs .)
    for             reduce using rule 95 (primary -> lhs .)
    return          reduce using rule 95 (primary -> lhs .)
    IDENTIFIER      reduce using rule 95 (primary -> lhs .)
    OPEN_BRACKET    reduce using rule 95 (primary -> lhs .)
    CONSTANT_RESOLUTION reduce using rule 95 (primary -> lhs .)
    OPEN_SQUARE     reduce using rule 95 (primary -> lhs .)
    OPEN_FLOWER     reduce using rule 95 (primary -> lhs .)
    nil             reduce using rule 95 (primary -> lhs .)
    self            reduce using rule 95 (primary -> lhs .)
    NUMBER          reduce using rule 95 (primary -> lhs .)
    FLOAT           reduce using rule 95 (primary -> lhs .)
    STRING          reduce using rule 95 (primary -> lhs .)
    true            reduce using rule 95 (primary -> lhs .)
    false           reduce using rule 95 (primary -> lhs .)
    GLOBAL          reduce using rule 95 (primary -> lhs .)
    AT_THE_RATE     reduce using rule 95 (primary -> lhs .)
    $end            reduce using rule 95 (primary -> lhs .)
    CLOSE_BRACKET   reduce using rule 95 (primary -> lhs .)
    MAP             reduce using rule 95 (primary -> lhs .)
    when            reduce using rule 95 (primary -> lhs .)
    end             reduce using rule 95 (primary -> lhs .)
    elsif           reduce using rule 95 (primary -> lhs .)
    else            reduce using rule 95 (primary -> lhs .)
    do              reduce using rule 95 (primary -> lhs .)
    then            reduce using rule 95 (primary -> lhs .)
    CLOSE_SQUARE    reduce using rule 95 (primary -> lhs .)
    CLOSE_FLOWER    reduce using rule 95 (primary -> lhs .)
    DOT             reduce using rule 95 (primary -> lhs .)

  ! COMMA           [ reduce using rule 117 (mlhsitem -> lhs .) ]
  ! CLOSE_BRACKET   [ reduce using rule 117 (mlhsitem -> lhs .) ]


state 86

    (79) term12 -> PLUS term12 .

    MULTIPLY        reduce using rule 79 (term12 -> PLUS term12 .)
    DIVIDE          reduce using rule 79 (term12 -> PLUS term12 .)
    MODULO          reduce using rule 79 (term12 -> PLUS term12 .)
    PLUS            reduce using rule 79 (term12 -> PLUS term12 .)
    MINUS           reduce using rule 79 (term12 -> PLUS term12 .)
    LEFT_SHIFT      reduce using rule 79 (term12 -> PLUS term12 .)
    RIGHT_SHIFT     reduce using rule 79 (term12 -> PLUS term12 .)
    BIT_AND         reduce using rule 79 (term12 -> PLUS term12 .)
    BIT_XOR         reduce using rule 79 (term12 -> PLUS term12 .)
    DOUBLE_EQUALS   reduce using rule 79 (term12 -> PLUS term12 .)
    TRIPLE_EQUALS   reduce using rule 79 (term12 -> PLUS term12 .)
    NOT_EQUALS      reduce using rule 79 (term12 -> PLUS term12 .)
    EQUAL_TILDE     reduce using rule 79 (term12 -> PLUS term12 .)
    BANG_TILDE      reduce using rule 79 (term12 -> PLUS term12 .)
    COMPARISON      reduce using rule 79 (term12 -> PLUS term12 .)
    LESS            reduce using rule 79 (term12 -> PLUS term12 .)
    LESS_EQUALS     reduce using rule 79 (term12 -> PLUS term12 .)
    GREATER         reduce using rule 79 (term12 -> PLUS term12 .)
    GREATER_EQUALS  reduce using rule 79 (term12 -> PLUS term12 .)
    INCL_RANGE      reduce using rule 79 (term12 -> PLUS term12 .)
    EXCL_RANGE      reduce using rule 79 (term12 -> PLUS term12 .)
    LOGICAL_OR      reduce using rule 79 (term12 -> PLUS term12 .)
    BIT_OR          reduce using rule 79 (term12 -> PLUS term12 .)
    SEMI_COLON      reduce using rule 79 (term12 -> PLUS term12 .)
    NEWLINE         reduce using rule 79 (term12 -> PLUS term12 .)
    def             reduce using rule 79 (term12 -> PLUS term12 .)
    class           reduce using rule 79 (term12 -> PLUS term12 .)
    break           reduce using rule 79 (term12 -> PLUS term12 .)
    if              reduce using rule 79 (term12 -> PLUS term12 .)
    while           reduce using rule 79 (term12 -> PLUS term12 .)
    until           reduce using rule 79 (term12 -> PLUS term12 .)
    case            reduce using rule 79 (term12 -> PLUS term12 .)
    for             reduce using rule 79 (term12 -> PLUS term12 .)
    return          reduce using rule 79 (term12 -> PLUS term12 .)
    IDENTIFIER      reduce using rule 79 (term12 -> PLUS term12 .)
    OPEN_BRACKET    reduce using rule 79 (term12 -> PLUS term12 .)
    CONSTANT_RESOLUTION reduce using rule 79 (term12 -> PLUS term12 .)
    OPEN_SQUARE     reduce using rule 79 (term12 -> PLUS term12 .)
    OPEN_FLOWER     reduce using rule 79 (term12 -> PLUS term12 .)
    nil             reduce using rule 79 (term12 -> PLUS term12 .)
    self            reduce using rule 79 (term12 -> PLUS term12 .)
    NUMBER          reduce using rule 79 (term12 -> PLUS term12 .)
    FLOAT           reduce using rule 79 (term12 -> PLUS term12 .)
    STRING          reduce using rule 79 (term12 -> PLUS term12 .)
    true            reduce using rule 79 (term12 -> PLUS term12 .)
    false           reduce using rule 79 (term12 -> PLUS term12 .)
    GLOBAL          reduce using rule 79 (term12 -> PLUS term12 .)
    AT_THE_RATE     reduce using rule 79 (term12 -> PLUS term12 .)
    end             reduce using rule 79 (term12 -> PLUS term12 .)
    CLOSE_BRACKET   reduce using rule 79 (term12 -> PLUS term12 .)
    MAP             reduce using rule 79 (term12 -> PLUS term12 .)
    COMMA           reduce using rule 79 (term12 -> PLUS term12 .)
    $end            reduce using rule 79 (term12 -> PLUS term12 .)
    when            reduce using rule 79 (term12 -> PLUS term12 .)
    elsif           reduce using rule 79 (term12 -> PLUS term12 .)
    else            reduce using rule 79 (term12 -> PLUS term12 .)
    do              reduce using rule 79 (term12 -> PLUS term12 .)
    then            reduce using rule 79 (term12 -> PLUS term12 .)
    CLOSE_SQUARE    reduce using rule 79 (term12 -> PLUS term12 .)
    CLOSE_FLOWER    reduce using rule 79 (term12 -> PLUS term12 .)


state 87

    (140) args -> arg . multargs
    (37) arg -> arg . BIT_OR term0
    (162) assoc -> arg . MAP arg
    (141) multargs -> . COMMA arg multargs
    (142) multargs -> . empty
    (190) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    BIT_OR          shift and go to state 116
    MAP             shift and go to state 156
    COMMA           shift and go to state 157
    SEMI_COLON      reduce using rule 190 (empty -> .)
    NEWLINE         reduce using rule 190 (empty -> .)
    def             reduce using rule 190 (empty -> .)
    class           reduce using rule 190 (empty -> .)
    break           reduce using rule 190 (empty -> .)
    if              reduce using rule 190 (empty -> .)
    while           reduce using rule 190 (empty -> .)
    until           reduce using rule 190 (empty -> .)
    case            reduce using rule 190 (empty -> .)
    for             reduce using rule 190 (empty -> .)
    return          reduce using rule 190 (empty -> .)
    IDENTIFIER      reduce using rule 190 (empty -> .)
    OPEN_BRACKET    reduce using rule 190 (empty -> .)
    CONSTANT_RESOLUTION reduce using rule 190 (empty -> .)
    OPEN_SQUARE     reduce using rule 190 (empty -> .)
    OPEN_FLOWER     reduce using rule 190 (empty -> .)
    nil             reduce using rule 190 (empty -> .)
    self            reduce using rule 190 (empty -> .)
    NUMBER          reduce using rule 190 (empty -> .)
    FLOAT           reduce using rule 190 (empty -> .)
    STRING          reduce using rule 190 (empty -> .)
    true            reduce using rule 190 (empty -> .)
    false           reduce using rule 190 (empty -> .)
    GLOBAL          reduce using rule 190 (empty -> .)
    AT_THE_RATE     reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    PLUS            reduce using rule 190 (empty -> .)
    $end            reduce using rule 190 (empty -> .)
    when            reduce using rule 190 (empty -> .)
    end             reduce using rule 190 (empty -> .)
    elsif           reduce using rule 190 (empty -> .)
    else            reduce using rule 190 (empty -> .)
    do              reduce using rule 190 (empty -> .)
    then            reduce using rule 190 (empty -> .)
    CLOSE_BRACKET   reduce using rule 190 (empty -> .)
    CLOSE_FLOWER    reduce using rule 190 (empty -> .)

  ! COMMA           [ reduce using rule 190 (empty -> .) ]

    multargs                       shift and go to state 158
    empty                          shift and go to state 159

state 88

    (138) callargs -> MULTIPLY . arg COMMA BIT_AND arg
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 160
    literal                        shift and go to state 33
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 89

    (22) expr1 -> return OPEN_BRACKET . callargs CLOSE_BRACKET
    (23) expr1 -> return OPEN_BRACKET . CLOSE_BRACKET
    (118) mlhsitem -> OPEN_BRACKET . mlhs CLOSE_BRACKET
    (83) primary -> OPEN_BRACKET . expr2 CLOSE_BRACKET
    (126) callargs -> . args
    (127) callargs -> . args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg
    (128) callargs -> . args COMMA MULTIPLY arg COMMA BIT_AND arg
    (129) callargs -> . args COMMA assocs COMMA BIT_AND arg
    (130) callargs -> . args COMMA assocs COMMA MULTIPLY arg
    (131) callargs -> . args COMMA assocs
    (132) callargs -> . args COMMA MULTIPLY arg
    (133) callargs -> . args COMMA BIT_AND arg
    (134) callargs -> . assocs COMMA MULTIPLY arg COMMA BIT_AND arg
    (135) callargs -> . assocs COMMA MULTIPLY arg
    (136) callargs -> . assocs COMMA BIT_AND arg
    (137) callargs -> . assocs
    (138) callargs -> . MULTIPLY arg COMMA BIT_AND arg
    (139) callargs -> . BIT_AND arg
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (26) expr2 -> . call
    (27) expr2 -> . arg
    (140) args -> . arg multargs
    (159) assocs -> . assoc multassocs
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (28) call -> . function
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (162) assoc -> . arg MAP arg
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (29) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (30) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) function -> . primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> . primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (33) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> . primary DOT IDENTIFIER
    (36) function -> . primary CONSTANT_RESOLUTION IDENTIFIER
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary

    CLOSE_BRACKET   shift and go to state 161
    MULTIPLY        shift and go to state 88
    BIT_AND         shift and go to state 91
    OPEN_BRACKET    shift and go to state 82
    IDENTIFIER      shift and go to state 35
    nil             shift and go to state 54
    self            shift and go to state 50
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 81
    primary                        shift and go to state 32
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 162
    expr2                          shift and go to state 83
    literal                        shift and go to state 33
    call                           shift and go to state 34
    function                       shift and go to state 38
    assocs                         shift and go to state 90
    args                           shift and go to state 92
    assoc                          shift and go to state 93
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    callargs                       shift and go to state 163
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 90

    (134) callargs -> assocs . COMMA MULTIPLY arg COMMA BIT_AND arg
    (135) callargs -> assocs . COMMA MULTIPLY arg
    (136) callargs -> assocs . COMMA BIT_AND arg
    (137) callargs -> assocs .

    COMMA           shift and go to state 164
    CLOSE_BRACKET   reduce using rule 137 (callargs -> assocs .)
    SEMI_COLON      reduce using rule 137 (callargs -> assocs .)
    NEWLINE         reduce using rule 137 (callargs -> assocs .)
    def             reduce using rule 137 (callargs -> assocs .)
    class           reduce using rule 137 (callargs -> assocs .)
    break           reduce using rule 137 (callargs -> assocs .)
    if              reduce using rule 137 (callargs -> assocs .)
    while           reduce using rule 137 (callargs -> assocs .)
    until           reduce using rule 137 (callargs -> assocs .)
    case            reduce using rule 137 (callargs -> assocs .)
    for             reduce using rule 137 (callargs -> assocs .)
    return          reduce using rule 137 (callargs -> assocs .)
    IDENTIFIER      reduce using rule 137 (callargs -> assocs .)
    OPEN_BRACKET    reduce using rule 137 (callargs -> assocs .)
    CONSTANT_RESOLUTION reduce using rule 137 (callargs -> assocs .)
    OPEN_SQUARE     reduce using rule 137 (callargs -> assocs .)
    OPEN_FLOWER     reduce using rule 137 (callargs -> assocs .)
    nil             reduce using rule 137 (callargs -> assocs .)
    self            reduce using rule 137 (callargs -> assocs .)
    NUMBER          reduce using rule 137 (callargs -> assocs .)
    FLOAT           reduce using rule 137 (callargs -> assocs .)
    STRING          reduce using rule 137 (callargs -> assocs .)
    true            reduce using rule 137 (callargs -> assocs .)
    false           reduce using rule 137 (callargs -> assocs .)
    GLOBAL          reduce using rule 137 (callargs -> assocs .)
    AT_THE_RATE     reduce using rule 137 (callargs -> assocs .)
    MINUS           reduce using rule 137 (callargs -> assocs .)
    PLUS            reduce using rule 137 (callargs -> assocs .)
    $end            reduce using rule 137 (callargs -> assocs .)
    when            reduce using rule 137 (callargs -> assocs .)
    end             reduce using rule 137 (callargs -> assocs .)
    elsif           reduce using rule 137 (callargs -> assocs .)
    else            reduce using rule 137 (callargs -> assocs .)
    do              reduce using rule 137 (callargs -> assocs .)
    then            reduce using rule 137 (callargs -> assocs .)


state 91

    (139) callargs -> BIT_AND . arg
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 165
    literal                        shift and go to state 33
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 92

    (126) callargs -> args .
    (127) callargs -> args . COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg
    (128) callargs -> args . COMMA MULTIPLY arg COMMA BIT_AND arg
    (129) callargs -> args . COMMA assocs COMMA BIT_AND arg
    (130) callargs -> args . COMMA assocs COMMA MULTIPLY arg
    (131) callargs -> args . COMMA assocs
    (132) callargs -> args . COMMA MULTIPLY arg
    (133) callargs -> args . COMMA BIT_AND arg

    CLOSE_BRACKET   reduce using rule 126 (callargs -> args .)
    SEMI_COLON      reduce using rule 126 (callargs -> args .)
    NEWLINE         reduce using rule 126 (callargs -> args .)
    def             reduce using rule 126 (callargs -> args .)
    class           reduce using rule 126 (callargs -> args .)
    break           reduce using rule 126 (callargs -> args .)
    if              reduce using rule 126 (callargs -> args .)
    while           reduce using rule 126 (callargs -> args .)
    until           reduce using rule 126 (callargs -> args .)
    case            reduce using rule 126 (callargs -> args .)
    for             reduce using rule 126 (callargs -> args .)
    return          reduce using rule 126 (callargs -> args .)
    IDENTIFIER      reduce using rule 126 (callargs -> args .)
    OPEN_BRACKET    reduce using rule 126 (callargs -> args .)
    CONSTANT_RESOLUTION reduce using rule 126 (callargs -> args .)
    OPEN_SQUARE     reduce using rule 126 (callargs -> args .)
    OPEN_FLOWER     reduce using rule 126 (callargs -> args .)
    nil             reduce using rule 126 (callargs -> args .)
    self            reduce using rule 126 (callargs -> args .)
    NUMBER          reduce using rule 126 (callargs -> args .)
    FLOAT           reduce using rule 126 (callargs -> args .)
    STRING          reduce using rule 126 (callargs -> args .)
    true            reduce using rule 126 (callargs -> args .)
    false           reduce using rule 126 (callargs -> args .)
    GLOBAL          reduce using rule 126 (callargs -> args .)
    AT_THE_RATE     reduce using rule 126 (callargs -> args .)
    MINUS           reduce using rule 126 (callargs -> args .)
    PLUS            reduce using rule 126 (callargs -> args .)
    $end            reduce using rule 126 (callargs -> args .)
    when            reduce using rule 126 (callargs -> args .)
    end             reduce using rule 126 (callargs -> args .)
    elsif           reduce using rule 126 (callargs -> args .)
    else            reduce using rule 126 (callargs -> args .)
    do              reduce using rule 126 (callargs -> args .)
    then            reduce using rule 126 (callargs -> args .)
    COMMA           shift and go to state 166


state 93

    (159) assocs -> assoc . multassocs
    (160) multassocs -> . COMMA assoc multassocs
    (161) multassocs -> . empty
    (190) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 168
    SEMI_COLON      reduce using rule 190 (empty -> .)
    NEWLINE         reduce using rule 190 (empty -> .)
    def             reduce using rule 190 (empty -> .)
    class           reduce using rule 190 (empty -> .)
    break           reduce using rule 190 (empty -> .)
    if              reduce using rule 190 (empty -> .)
    while           reduce using rule 190 (empty -> .)
    until           reduce using rule 190 (empty -> .)
    case            reduce using rule 190 (empty -> .)
    for             reduce using rule 190 (empty -> .)
    return          reduce using rule 190 (empty -> .)
    IDENTIFIER      reduce using rule 190 (empty -> .)
    OPEN_BRACKET    reduce using rule 190 (empty -> .)
    CONSTANT_RESOLUTION reduce using rule 190 (empty -> .)
    OPEN_SQUARE     reduce using rule 190 (empty -> .)
    OPEN_FLOWER     reduce using rule 190 (empty -> .)
    nil             reduce using rule 190 (empty -> .)
    self            reduce using rule 190 (empty -> .)
    NUMBER          reduce using rule 190 (empty -> .)
    FLOAT           reduce using rule 190 (empty -> .)
    STRING          reduce using rule 190 (empty -> .)
    true            reduce using rule 190 (empty -> .)
    false           reduce using rule 190 (empty -> .)
    GLOBAL          reduce using rule 190 (empty -> .)
    AT_THE_RATE     reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    PLUS            reduce using rule 190 (empty -> .)
    $end            reduce using rule 190 (empty -> .)
    when            reduce using rule 190 (empty -> .)
    end             reduce using rule 190 (empty -> .)
    elsif           reduce using rule 190 (empty -> .)
    else            reduce using rule 190 (empty -> .)
    do              reduce using rule 190 (empty -> .)
    then            reduce using rule 190 (empty -> .)
    CLOSE_BRACKET   reduce using rule 190 (empty -> .)
    CLOSE_FLOWER    reduce using rule 190 (empty -> .)

  ! COMMA           [ reduce using rule 190 (empty -> .) ]

    multassocs                     shift and go to state 167
    empty                          shift and go to state 169

state 94

    (21) expr1 -> return callargs .

    SEMI_COLON      reduce using rule 21 (expr1 -> return callargs .)
    NEWLINE         reduce using rule 21 (expr1 -> return callargs .)
    def             reduce using rule 21 (expr1 -> return callargs .)
    class           reduce using rule 21 (expr1 -> return callargs .)
    break           reduce using rule 21 (expr1 -> return callargs .)
    if              reduce using rule 21 (expr1 -> return callargs .)
    while           reduce using rule 21 (expr1 -> return callargs .)
    until           reduce using rule 21 (expr1 -> return callargs .)
    case            reduce using rule 21 (expr1 -> return callargs .)
    for             reduce using rule 21 (expr1 -> return callargs .)
    return          reduce using rule 21 (expr1 -> return callargs .)
    IDENTIFIER      reduce using rule 21 (expr1 -> return callargs .)
    OPEN_BRACKET    reduce using rule 21 (expr1 -> return callargs .)
    CONSTANT_RESOLUTION reduce using rule 21 (expr1 -> return callargs .)
    OPEN_SQUARE     reduce using rule 21 (expr1 -> return callargs .)
    OPEN_FLOWER     reduce using rule 21 (expr1 -> return callargs .)
    nil             reduce using rule 21 (expr1 -> return callargs .)
    self            reduce using rule 21 (expr1 -> return callargs .)
    NUMBER          reduce using rule 21 (expr1 -> return callargs .)
    FLOAT           reduce using rule 21 (expr1 -> return callargs .)
    STRING          reduce using rule 21 (expr1 -> return callargs .)
    true            reduce using rule 21 (expr1 -> return callargs .)
    false           reduce using rule 21 (expr1 -> return callargs .)
    GLOBAL          reduce using rule 21 (expr1 -> return callargs .)
    AT_THE_RATE     reduce using rule 21 (expr1 -> return callargs .)
    MINUS           reduce using rule 21 (expr1 -> return callargs .)
    PLUS            reduce using rule 21 (expr1 -> return callargs .)
    end             reduce using rule 21 (expr1 -> return callargs .)
    $end            reduce using rule 21 (expr1 -> return callargs .)
    when            reduce using rule 21 (expr1 -> return callargs .)
    elsif           reduce using rule 21 (expr1 -> return callargs .)
    else            reduce using rule 21 (expr1 -> return callargs .)
    CLOSE_BRACKET   reduce using rule 21 (expr1 -> return callargs .)
    do              reduce using rule 21 (expr1 -> return callargs .)
    then            reduce using rule 21 (expr1 -> return callargs .)


state 95

    (73) term10 -> term10 MULTIPLY . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    OPEN_BRACKET    shift and go to state 77
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    varname                        shift and go to state 30
    primary                        shift and go to state 76
    literal                        shift and go to state 33
    lhs                            shift and go to state 79
    variable                       shift and go to state 56
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 170

state 96

    (75) term10 -> term10 MODULO . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    OPEN_BRACKET    shift and go to state 77
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    varname                        shift and go to state 30
    primary                        shift and go to state 76
    literal                        shift and go to state 33
    lhs                            shift and go to state 79
    variable                       shift and go to state 56
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 171

state 97

    (74) term10 -> term10 DIVIDE . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    OPEN_BRACKET    shift and go to state 77
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    varname                        shift and go to state 30
    primary                        shift and go to state 76
    literal                        shift and go to state 33
    lhs                            shift and go to state 79
    variable                       shift and go to state 56
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 172

state 98

    (65) term7 -> term7 BIT_AND . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    OPEN_BRACKET    shift and go to state 77
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    varname                        shift and go to state 30
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 173
    literal                        shift and go to state 33
    lhs                            shift and go to state 79
    variable                       shift and go to state 56
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 99

    (63) term6 -> term6 BIT_XOR . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    OPEN_BRACKET    shift and go to state 77
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    term7                          shift and go to state 174
    varname                        shift and go to state 30
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    literal                        shift and go to state 33
    lhs                            shift and go to state 79
    variable                       shift and go to state 56
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 100

    (56) term4 -> term5 COMPARISON . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    OPEN_BRACKET    shift and go to state 77
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 175
    varname                        shift and go to state 30
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    literal                        shift and go to state 33
    lhs                            shift and go to state 79
    variable                       shift and go to state 56
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 101

    (51) term4 -> term5 DOUBLE_EQUALS . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    OPEN_BRACKET    shift and go to state 77
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 176
    varname                        shift and go to state 30
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    literal                        shift and go to state 33
    lhs                            shift and go to state 79
    variable                       shift and go to state 56
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 102

    (60) term5 -> term5 GREATER . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    OPEN_BRACKET    shift and go to state 77
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    term7                          shift and go to state 14
    term6                          shift and go to state 177
    varname                        shift and go to state 30
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    literal                        shift and go to state 33
    lhs                            shift and go to state 79
    variable                       shift and go to state 56
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 103

    (53) term4 -> term5 NOT_EQUALS . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    OPEN_BRACKET    shift and go to state 77
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 178
    varname                        shift and go to state 30
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    literal                        shift and go to state 33
    lhs                            shift and go to state 79
    variable                       shift and go to state 56
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 104

    (58) term5 -> term5 LESS . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    OPEN_BRACKET    shift and go to state 77
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    term7                          shift and go to state 14
    term6                          shift and go to state 179
    varname                        shift and go to state 30
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    literal                        shift and go to state 33
    lhs                            shift and go to state 79
    variable                       shift and go to state 56
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 105

    (59) term5 -> term5 LESS_EQUALS . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    OPEN_BRACKET    shift and go to state 77
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    term7                          shift and go to state 14
    term6                          shift and go to state 180
    varname                        shift and go to state 30
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    literal                        shift and go to state 33
    lhs                            shift and go to state 79
    variable                       shift and go to state 56
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 106

    (55) term4 -> term5 BANG_TILDE . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    OPEN_BRACKET    shift and go to state 77
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 181
    varname                        shift and go to state 30
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    literal                        shift and go to state 33
    lhs                            shift and go to state 79
    variable                       shift and go to state 56
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 107

    (54) term4 -> term5 EQUAL_TILDE . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    OPEN_BRACKET    shift and go to state 77
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 182
    varname                        shift and go to state 30
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    literal                        shift and go to state 33
    lhs                            shift and go to state 79
    variable                       shift and go to state 56
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 108

    (52) term4 -> term5 TRIPLE_EQUALS . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    OPEN_BRACKET    shift and go to state 77
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 183
    varname                        shift and go to state 30
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    literal                        shift and go to state 33
    lhs                            shift and go to state 79
    variable                       shift and go to state 56
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 109

    (61) term5 -> term5 GREATER_EQUALS . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    OPEN_BRACKET    shift and go to state 77
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    term7                          shift and go to state 14
    term6                          shift and go to state 184
    varname                        shift and go to state 30
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    literal                        shift and go to state 33
    lhs                            shift and go to state 79
    variable                       shift and go to state 56
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 110

    (46) term2 -> term3 INCL_RANGE . term3
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    OPEN_BRACKET    shift and go to state 77
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 185
    varname                        shift and go to state 30
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    literal                        shift and go to state 33
    lhs                            shift and go to state 79
    variable                       shift and go to state 56
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 111

    (47) term2 -> term3 EXCL_RANGE . term3
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    OPEN_BRACKET    shift and go to state 77
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 186
    varname                        shift and go to state 30
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    literal                        shift and go to state 33
    lhs                            shift and go to state 79
    variable                       shift and go to state 56
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 112

    (49) term3 -> term3 LOGICAL_OR . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    OPEN_BRACKET    shift and go to state 77
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 187
    varname                        shift and go to state 30
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    literal                        shift and go to state 33
    lhs                            shift and go to state 79
    variable                       shift and go to state 56
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 113

    (70) term9 -> term9 PLUS . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    OPEN_BRACKET    shift and go to state 77
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    varname                        shift and go to state 30
    primary                        shift and go to state 76
    literal                        shift and go to state 33
    lhs                            shift and go to state 79
    variable                       shift and go to state 56
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 188

state 114

    (71) term9 -> term9 MINUS . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    OPEN_BRACKET    shift and go to state 77
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    varname                        shift and go to state 30
    primary                        shift and go to state 76
    literal                        shift and go to state 33
    lhs                            shift and go to state 79
    variable                       shift and go to state 56
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 189

state 115

    (186) varname -> AT_THE_RATE IDENTIFIER .

    OPEN_SQUARE     reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    DOT             reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    CONSTANT_RESOLUTION reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    COMMA           reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    EQUALS          reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    MODULO_EQUALS   reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    DIVIDE_EQUALS   reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    MINUS_EQUALS    reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    PLUS_EQUALS     reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    OR_EQUALS       reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    AND_EQUALS      reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    XOR_EQUALS      reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    RIGHT_SHIFT_EQUALS reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    LEFT_SHIFT_EQUALS reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    MULTIPLY_EQUALS reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    LOGICAL_AND_EQUALS reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    LOGICAL_OR_EQUALS reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    POWER_EQUALS    reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    POWER           reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    MULTIPLY        reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    DIVIDE          reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    MODULO          reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    PLUS            reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    MINUS           reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    BIT_AND         reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    BIT_XOR         reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    DOUBLE_EQUALS   reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    TRIPLE_EQUALS   reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    NOT_EQUALS      reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    EQUAL_TILDE     reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    BANG_TILDE      reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    COMPARISON      reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    LESS            reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    LESS_EQUALS     reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    GREATER         reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    INCL_RANGE      reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    EXCL_RANGE      reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    LOGICAL_OR      reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    BIT_OR          reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    SEMI_COLON      reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    NEWLINE         reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    def             reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    class           reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    break           reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    if              reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    while           reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    until           reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    case            reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    for             reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    return          reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    IDENTIFIER      reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    OPEN_BRACKET    reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    OPEN_FLOWER     reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    nil             reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    self            reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    NUMBER          reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    FLOAT           reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    STRING          reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    true            reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    false           reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    GLOBAL          reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    AT_THE_RATE     reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    $end            reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    when            reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    end             reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    elsif           reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    else            reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    do              reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    then            reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    CLOSE_FLOWER    reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    MAP             reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    CLOSE_SQUARE    reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)
    in              reduce using rule 186 (varname -> AT_THE_RATE IDENTIFIER .)


state 116

    (37) arg -> arg BIT_OR . term0
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 190
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    literal                        shift and go to state 33
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 117

    (19) expr -> for mlhs . in expr1 pdo compstmt end

    in              shift and go to state 191


state 118

    (118) mlhsitem -> OPEN_BRACKET . mlhs CLOSE_BRACKET
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    OPEN_BRACKET    shift and go to state 118
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    varname                        shift and go to state 30
    mlhs                           shift and go to state 192
    lhs                            shift and go to state 120
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 119

state 119

    (119) lhs -> variable .
    (120) lhs -> variable . OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> variable . OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> variable . DOT IDENTIFIER

    COMMA           reduce using rule 119 (lhs -> variable .)
    in              reduce using rule 119 (lhs -> variable .)
    MULTIPLY        reduce using rule 119 (lhs -> variable .)
    EQUALS          reduce using rule 119 (lhs -> variable .)
    MODULO_EQUALS   reduce using rule 119 (lhs -> variable .)
    DIVIDE_EQUALS   reduce using rule 119 (lhs -> variable .)
    MINUS_EQUALS    reduce using rule 119 (lhs -> variable .)
    PLUS_EQUALS     reduce using rule 119 (lhs -> variable .)
    OR_EQUALS       reduce using rule 119 (lhs -> variable .)
    AND_EQUALS      reduce using rule 119 (lhs -> variable .)
    XOR_EQUALS      reduce using rule 119 (lhs -> variable .)
    RIGHT_SHIFT_EQUALS reduce using rule 119 (lhs -> variable .)
    LEFT_SHIFT_EQUALS reduce using rule 119 (lhs -> variable .)
    MULTIPLY_EQUALS reduce using rule 119 (lhs -> variable .)
    LOGICAL_AND_EQUALS reduce using rule 119 (lhs -> variable .)
    LOGICAL_OR_EQUALS reduce using rule 119 (lhs -> variable .)
    POWER_EQUALS    reduce using rule 119 (lhs -> variable .)
    CLOSE_BRACKET   reduce using rule 119 (lhs -> variable .)
    OPEN_SQUARE     shift and go to state 145
    DOT             shift and go to state 146


state 120

    (117) mlhsitem -> lhs .

    COMMA           reduce using rule 117 (mlhsitem -> lhs .)
    in              reduce using rule 117 (mlhsitem -> lhs .)
    CLOSE_BRACKET   reduce using rule 117 (mlhsitem -> lhs .)
    MULTIPLY        reduce using rule 117 (mlhsitem -> lhs .)
    EQUALS          reduce using rule 117 (mlhsitem -> lhs .)
    MODULO_EQUALS   reduce using rule 117 (mlhsitem -> lhs .)
    DIVIDE_EQUALS   reduce using rule 117 (mlhsitem -> lhs .)
    MINUS_EQUALS    reduce using rule 117 (mlhsitem -> lhs .)
    PLUS_EQUALS     reduce using rule 117 (mlhsitem -> lhs .)
    OR_EQUALS       reduce using rule 117 (mlhsitem -> lhs .)
    AND_EQUALS      reduce using rule 117 (mlhsitem -> lhs .)
    XOR_EQUALS      reduce using rule 117 (mlhsitem -> lhs .)
    RIGHT_SHIFT_EQUALS reduce using rule 117 (mlhsitem -> lhs .)
    LEFT_SHIFT_EQUALS reduce using rule 117 (mlhsitem -> lhs .)
    MULTIPLY_EQUALS reduce using rule 117 (mlhsitem -> lhs .)
    LOGICAL_AND_EQUALS reduce using rule 117 (mlhsitem -> lhs .)
    LOGICAL_OR_EQUALS reduce using rule 117 (mlhsitem -> lhs .)
    POWER_EQUALS    reduce using rule 117 (mlhsitem -> lhs .)


state 121

    (3) multcompstmt -> stmt multcompstmt .

    end             reduce using rule 3 (multcompstmt -> stmt multcompstmt .)
    elsif           reduce using rule 3 (multcompstmt -> stmt multcompstmt .)
    else            reduce using rule 3 (multcompstmt -> stmt multcompstmt .)
    $end            reduce using rule 3 (multcompstmt -> stmt multcompstmt .)
    when            reduce using rule 3 (multcompstmt -> stmt multcompstmt .)


state 122

    (140) args -> arg . multargs
    (37) arg -> arg . BIT_OR term0
    (141) multargs -> . COMMA arg multargs
    (142) multargs -> . empty
    (190) empty -> .

  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    BIT_OR          shift and go to state 116
    COMMA           shift and go to state 157
    SEMI_COLON      reduce using rule 190 (empty -> .)
    NEWLINE         reduce using rule 190 (empty -> .)
    def             reduce using rule 190 (empty -> .)
    class           reduce using rule 190 (empty -> .)
    break           reduce using rule 190 (empty -> .)
    if              reduce using rule 190 (empty -> .)
    while           reduce using rule 190 (empty -> .)
    until           reduce using rule 190 (empty -> .)
    case            reduce using rule 190 (empty -> .)
    for             reduce using rule 190 (empty -> .)
    return          reduce using rule 190 (empty -> .)
    IDENTIFIER      reduce using rule 190 (empty -> .)
    OPEN_BRACKET    reduce using rule 190 (empty -> .)
    CONSTANT_RESOLUTION reduce using rule 190 (empty -> .)
    OPEN_SQUARE     reduce using rule 190 (empty -> .)
    OPEN_FLOWER     reduce using rule 190 (empty -> .)
    nil             reduce using rule 190 (empty -> .)
    self            reduce using rule 190 (empty -> .)
    NUMBER          reduce using rule 190 (empty -> .)
    FLOAT           reduce using rule 190 (empty -> .)
    STRING          reduce using rule 190 (empty -> .)
    true            reduce using rule 190 (empty -> .)
    false           reduce using rule 190 (empty -> .)
    GLOBAL          reduce using rule 190 (empty -> .)
    AT_THE_RATE     reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    PLUS            reduce using rule 190 (empty -> .)
    $end            reduce using rule 190 (empty -> .)
    CLOSE_BRACKET   reduce using rule 190 (empty -> .)
    MAP             reduce using rule 190 (empty -> .)
    when            reduce using rule 190 (empty -> .)
    end             reduce using rule 190 (empty -> .)
    elsif           reduce using rule 190 (empty -> .)
    else            reduce using rule 190 (empty -> .)
    do              reduce using rule 190 (empty -> .)
    then            reduce using rule 190 (empty -> .)
    CLOSE_SQUARE    reduce using rule 190 (empty -> .)
    CLOSE_FLOWER    reduce using rule 190 (empty -> .)

  ! BIT_OR          [ reduce using rule 190 (empty -> .) ]
  ! COMMA           [ reduce using rule 190 (empty -> .) ]

    multargs                       shift and go to state 158
    empty                          shift and go to state 159

state 123

    (88) primary -> OPEN_SQUARE CLOSE_SQUARE .

    POWER           reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    MULTIPLY        reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    DIVIDE          reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    MODULO          reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    PLUS            reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    MINUS           reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    LEFT_SHIFT      reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    RIGHT_SHIFT     reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    BIT_AND         reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    BIT_XOR         reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    DOUBLE_EQUALS   reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    TRIPLE_EQUALS   reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    NOT_EQUALS      reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    EQUAL_TILDE     reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    BANG_TILDE      reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    COMPARISON      reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    LESS            reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    LESS_EQUALS     reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    GREATER         reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    GREATER_EQUALS  reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    INCL_RANGE      reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    EXCL_RANGE      reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    LOGICAL_OR      reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    BIT_OR          reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    COMMA           reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    SEMI_COLON      reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    NEWLINE         reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    def             reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    class           reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    break           reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    if              reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    while           reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    until           reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    case            reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    for             reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    return          reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    OPEN_BRACKET    reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    CONSTANT_RESOLUTION reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    OPEN_FLOWER     reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    nil             reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    self            reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    NUMBER          reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    FLOAT           reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    STRING          reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    true            reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    false           reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    GLOBAL          reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    AT_THE_RATE     reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    $end            reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    CLOSE_BRACKET   reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    MAP             reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    when            reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    end             reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    elsif           reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    else            reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    do              reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    then            reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    CLOSE_FLOWER    reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)
    DOT             reduce using rule 88 (primary -> OPEN_SQUARE CLOSE_SQUARE .)


state 124

    (86) primary -> OPEN_SQUARE args . COMMA CLOSE_SQUARE
    (87) primary -> OPEN_SQUARE args . CLOSE_SQUARE

    COMMA           shift and go to state 194
    CLOSE_SQUARE    shift and go to state 193


state 125

    (33) function -> primary CONSTANT_RESOLUTION . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> primary CONSTANT_RESOLUTION . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (36) function -> primary CONSTANT_RESOLUTION . IDENTIFIER

    IDENTIFIER      shift and go to state 195


state 126

    (81) term13 -> primary POWER . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    OPEN_BRACKET    shift and go to state 77
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    varname                        shift and go to state 30
    primary                        shift and go to state 76
    literal                        shift and go to state 33
    lhs                            shift and go to state 79
    variable                       shift and go to state 56
    term13                         shift and go to state 196

state 127

    (31) function -> primary DOT . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> primary DOT . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> primary DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 197


state 128

    (29) function -> IDENTIFIER OPEN_BRACKET . callargs CLOSE_BRACKET
    (30) function -> IDENTIFIER OPEN_BRACKET . CLOSE_BRACKET
    (126) callargs -> . args
    (127) callargs -> . args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg
    (128) callargs -> . args COMMA MULTIPLY arg COMMA BIT_AND arg
    (129) callargs -> . args COMMA assocs COMMA BIT_AND arg
    (130) callargs -> . args COMMA assocs COMMA MULTIPLY arg
    (131) callargs -> . args COMMA assocs
    (132) callargs -> . args COMMA MULTIPLY arg
    (133) callargs -> . args COMMA BIT_AND arg
    (134) callargs -> . assocs COMMA MULTIPLY arg COMMA BIT_AND arg
    (135) callargs -> . assocs COMMA MULTIPLY arg
    (136) callargs -> . assocs COMMA BIT_AND arg
    (137) callargs -> . assocs
    (138) callargs -> . MULTIPLY arg COMMA BIT_AND arg
    (139) callargs -> . BIT_AND arg
    (140) args -> . arg multargs
    (159) assocs -> . assoc multassocs
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (162) assoc -> . arg MAP arg
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    CLOSE_BRACKET   shift and go to state 198
    MULTIPLY        shift and go to state 88
    BIT_AND         shift and go to state 91
    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 87
    literal                        shift and go to state 33
    assocs                         shift and go to state 90
    args                           shift and go to state 92
    assoc                          shift and go to state 93
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    callargs                       shift and go to state 199
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 129

    (16) expr -> until expr1 . pdo compstmt end
    (169) pdo -> . newline
    (170) pdo -> . do
    (171) pdo -> . newline do
    (188) newline -> . SEMI_COLON
    (189) newline -> . NEWLINE

    do              shift and go to state 200
    SEMI_COLON      shift and go to state 24
    NEWLINE         shift and go to state 4

    pdo                            shift and go to state 202
    newline                        shift and go to state 201

state 130

    (108) mlhs -> mlhsitem COMMA . mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> mlhsitem COMMA . mlhsitem multmlhs MULTIPLY
    (110) mlhs -> mlhsitem COMMA . mlhsitem multmlhs
    (111) mlhs -> mlhsitem COMMA . MULTIPLY lhs
    (112) mlhs -> mlhsitem COMMA . MULTIPLY
    (113) mlhs -> mlhsitem COMMA .
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    MULTIPLY        shift and go to state 204
    CLOSE_BRACKET   reduce using rule 113 (mlhs -> mlhsitem COMMA .)
    EQUALS          reduce using rule 113 (mlhs -> mlhsitem COMMA .)
    MODULO_EQUALS   reduce using rule 113 (mlhs -> mlhsitem COMMA .)
    DIVIDE_EQUALS   reduce using rule 113 (mlhs -> mlhsitem COMMA .)
    MINUS_EQUALS    reduce using rule 113 (mlhs -> mlhsitem COMMA .)
    PLUS_EQUALS     reduce using rule 113 (mlhs -> mlhsitem COMMA .)
    OR_EQUALS       reduce using rule 113 (mlhs -> mlhsitem COMMA .)
    AND_EQUALS      reduce using rule 113 (mlhs -> mlhsitem COMMA .)
    XOR_EQUALS      reduce using rule 113 (mlhs -> mlhsitem COMMA .)
    RIGHT_SHIFT_EQUALS reduce using rule 113 (mlhs -> mlhsitem COMMA .)
    LEFT_SHIFT_EQUALS reduce using rule 113 (mlhs -> mlhsitem COMMA .)
    MULTIPLY_EQUALS reduce using rule 113 (mlhs -> mlhsitem COMMA .)
    LOGICAL_AND_EQUALS reduce using rule 113 (mlhs -> mlhsitem COMMA .)
    LOGICAL_OR_EQUALS reduce using rule 113 (mlhs -> mlhsitem COMMA .)
    POWER_EQUALS    reduce using rule 113 (mlhs -> mlhsitem COMMA .)
    in              reduce using rule 113 (mlhs -> mlhsitem COMMA .)
    OPEN_BRACKET    shift and go to state 118
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    varname                        shift and go to state 30
    lhs                            shift and go to state 120
    mlhsitem                       shift and go to state 203
    variable                       shift and go to state 119

state 131

    (68) term8 -> term8 RIGHT_SHIFT . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    OPEN_BRACKET    shift and go to state 77
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    varname                        shift and go to state 30
    primary                        shift and go to state 76
    term9                          shift and go to state 205
    literal                        shift and go to state 33
    lhs                            shift and go to state 79
    variable                       shift and go to state 56
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 132

    (67) term8 -> term8 LEFT_SHIFT . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    OPEN_BRACKET    shift and go to state 77
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    varname                        shift and go to state 30
    primary                        shift and go to state 76
    term9                          shift and go to state 206
    literal                        shift and go to state 33
    lhs                            shift and go to state 79
    variable                       shift and go to state 56
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 133

    (17) expr -> case compstmt . multcase else compstmt end
    (18) expr -> case compstmt . multcase end
    (96) multcase -> . when whenargs pthen compstmt multcase
    (97) multcase -> . when whenargs pthen compstmt

    when            shift and go to state 207

    multcase                       shift and go to state 208

state 134

    (15) expr -> while expr1 . pdo compstmt end
    (169) pdo -> . newline
    (170) pdo -> . do
    (171) pdo -> . newline do
    (188) newline -> . SEMI_COLON
    (189) newline -> . NEWLINE

    do              shift and go to state 200
    SEMI_COLON      shift and go to state 24
    NEWLINE         shift and go to state 4

    pdo                            shift and go to state 209
    newline                        shift and go to state 201

state 135

    (7) stmt -> def singleton . DOT IDENTIFIER argdecl compstmt end
    (8) stmt -> def singleton . CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end

    DOT             shift and go to state 211
    CONSTANT_RESOLUTION shift and go to state 210


state 136

    (158) singleton -> OPEN_BRACKET . expr CLOSE_BRACKET
    (13) expr -> . if expr1 pthen compstmt end
    (14) expr -> . if expr1 pthen compstmt multelsif else compstmt end
    (15) expr -> . while expr1 pdo compstmt end
    (16) expr -> . until expr1 pdo compstmt end
    (17) expr -> . case compstmt multcase else compstmt end
    (18) expr -> . case compstmt multcase end
    (19) expr -> . for mlhs in expr1 pdo compstmt end
    (20) expr -> . expr1
    (21) expr1 -> . return callargs
    (22) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (23) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (24) expr1 -> . return
    (25) expr1 -> . expr2
    (26) expr2 -> . call
    (27) expr2 -> . arg
    (28) call -> . function
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (29) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (30) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) function -> . primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> . primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (33) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> . primary DOT IDENTIFIER
    (36) function -> . primary CONSTANT_RESOLUTION IDENTIFIER
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary

    if              shift and go to state 49
    while           shift and go to state 44
    until           shift and go to state 36
    case            shift and go to state 42
    for             shift and go to state 26
    return          shift and go to state 7
    IDENTIFIER      shift and go to state 35
    OPEN_BRACKET    shift and go to state 5
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 32
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 25
    expr2                          shift and go to state 51
    literal                        shift and go to state 33
    expr1                          shift and go to state 52
    call                           shift and go to state 34
    varname                        shift and go to state 30
    function                       shift and go to state 38
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 56
    expr                           shift and go to state 212
    lhs                            shift and go to state 59
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 137

    (157) singleton -> variable .

    DOT             reduce using rule 157 (singleton -> variable .)
    CONSTANT_RESOLUTION reduce using rule 157 (singleton -> variable .)


state 138

    (6) stmt -> def IDENTIFIER . argdecl compstmt end
    (187) varname -> IDENTIFIER .
    (143) argdecl -> . OPEN_BRACKET arglist CLOSE_BRACKET
    (144) argdecl -> . arglist newline
    (145) arglist -> . IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER
    (146) arglist -> . IDENTIFIER multarglist COMMA MULTIPLY COMMA BIT_AND IDENTIFIER
    (147) arglist -> . IDENTIFIER multarglist COMMA BIT_AND IDENTIFIER
    (148) arglist -> . IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER
    (149) arglist -> . IDENTIFIER multarglist COMMA MULTIPLY
    (150) arglist -> . IDENTIFIER multarglist
    (151) arglist -> . MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER
    (152) arglist -> . MULTIPLY IDENTIFIER
    (153) arglist -> . BIT_AND IDENTIFIER
    (154) arglist -> . empty
    (190) empty -> .

    DOT             reduce using rule 187 (varname -> IDENTIFIER .)
    CONSTANT_RESOLUTION reduce using rule 187 (varname -> IDENTIFIER .)
    OPEN_BRACKET    shift and go to state 215
    IDENTIFIER      shift and go to state 219
    MULTIPLY        shift and go to state 218
    BIT_AND         shift and go to state 214
    SEMI_COLON      reduce using rule 190 (empty -> .)
    NEWLINE         reduce using rule 190 (empty -> .)

    argdecl                        shift and go to state 213
    arglist                        shift and go to state 216
    empty                          shift and go to state 217

state 139

    (92) primary -> OPEN_FLOWER assocs . COMMA CLOSE_FLOWER
    (93) primary -> OPEN_FLOWER assocs . CLOSE_FLOWER

    COMMA           shift and go to state 221
    CLOSE_FLOWER    shift and go to state 220


state 140

    (89) primary -> OPEN_FLOWER args . COMMA CLOSE_FLOWER
    (90) primary -> OPEN_FLOWER args . CLOSE_FLOWER

    COMMA           shift and go to state 223
    CLOSE_FLOWER    shift and go to state 222


state 141

    (91) primary -> OPEN_FLOWER CLOSE_FLOWER .

    POWER           reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    MULTIPLY        reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    DIVIDE          reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    MODULO          reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    PLUS            reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    MINUS           reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    LEFT_SHIFT      reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    RIGHT_SHIFT     reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    BIT_AND         reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    BIT_XOR         reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    DOUBLE_EQUALS   reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    TRIPLE_EQUALS   reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    NOT_EQUALS      reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    EQUAL_TILDE     reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    BANG_TILDE      reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    COMPARISON      reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    LESS            reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    LESS_EQUALS     reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    GREATER         reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    GREATER_EQUALS  reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    INCL_RANGE      reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    EXCL_RANGE      reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    LOGICAL_OR      reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    BIT_OR          reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    COMMA           reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    SEMI_COLON      reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    NEWLINE         reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    def             reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    class           reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    break           reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    if              reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    while           reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    until           reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    case            reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    for             reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    return          reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    IDENTIFIER      reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    OPEN_BRACKET    reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    CONSTANT_RESOLUTION reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    OPEN_SQUARE     reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    OPEN_FLOWER     reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    nil             reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    self            reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    NUMBER          reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    FLOAT           reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    STRING          reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    true            reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    false           reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    GLOBAL          reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    AT_THE_RATE     reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    $end            reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    CLOSE_BRACKET   reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    MAP             reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    when            reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    end             reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    elsif           reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    else            reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    do              reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    then            reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    CLOSE_SQUARE    reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    CLOSE_FLOWER    reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)
    DOT             reduce using rule 91 (primary -> OPEN_FLOWER CLOSE_FLOWER .)


state 142

    (13) expr -> if expr1 . pthen compstmt end
    (14) expr -> if expr1 . pthen compstmt multelsif else compstmt end
    (166) pthen -> . newline
    (167) pthen -> . then
    (168) pthen -> . newline then
    (188) newline -> . SEMI_COLON
    (189) newline -> . NEWLINE

    then            shift and go to state 224
    SEMI_COLON      shift and go to state 24
    NEWLINE         shift and go to state 4

    pthen                          shift and go to state 226
    newline                        shift and go to state 225

state 143

    (2) multcompstmt -> newline stmt . multcompstmt
    (2) multcompstmt -> . newline stmt multcompstmt
    (3) multcompstmt -> . stmt multcompstmt
    (4) multcompstmt -> . newline
    (5) multcompstmt -> . empty
    (188) newline -> . SEMI_COLON
    (189) newline -> . NEWLINE
    (6) stmt -> . def IDENTIFIER argdecl compstmt end
    (7) stmt -> . def singleton DOT IDENTIFIER argdecl compstmt end
    (8) stmt -> . def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end
    (9) stmt -> . class IDENTIFIER LESS IDENTIFIER compstmt end
    (10) stmt -> . class IDENTIFIER compstmt end
    (11) stmt -> . break
    (12) stmt -> . expr
    (190) empty -> .
    (13) expr -> . if expr1 pthen compstmt end
    (14) expr -> . if expr1 pthen compstmt multelsif else compstmt end
    (15) expr -> . while expr1 pdo compstmt end
    (16) expr -> . until expr1 pdo compstmt end
    (17) expr -> . case compstmt multcase else compstmt end
    (18) expr -> . case compstmt multcase end
    (19) expr -> . for mlhs in expr1 pdo compstmt end
    (20) expr -> . expr1
    (21) expr1 -> . return callargs
    (22) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (23) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (24) expr1 -> . return
    (25) expr1 -> . expr2
    (26) expr2 -> . call
    (27) expr2 -> . arg
    (28) call -> . function
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (29) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (30) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) function -> . primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> . primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (33) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> . primary DOT IDENTIFIER
    (36) function -> . primary CONSTANT_RESOLUTION IDENTIFIER
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary

    SEMI_COLON      shift and go to state 24
    NEWLINE         shift and go to state 4
    def             shift and go to state 45
    class           shift and go to state 57
    break           shift and go to state 9
    $end            reduce using rule 190 (empty -> .)
    when            reduce using rule 190 (empty -> .)
    end             reduce using rule 190 (empty -> .)
    elsif           reduce using rule 190 (empty -> .)
    else            reduce using rule 190 (empty -> .)
    if              shift and go to state 49
    while           shift and go to state 44
    until           shift and go to state 36
    case            shift and go to state 42
    for             shift and go to state 26
    return          shift and go to state 7
    IDENTIFIER      shift and go to state 35
    OPEN_BRACKET    shift and go to state 5
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 32
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 25
    expr2                          shift and go to state 51
    literal                        shift and go to state 33
    expr1                          shift and go to state 52
    call                           shift and go to state 34
    varname                        shift and go to state 30
    empty                          shift and go to state 37
    function                       shift and go to state 38
    newline                        shift and go to state 55
    multcompstmt                   shift and go to state 227
    stmt                           shift and go to state 27
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 56
    term5                          shift and go to state 16
    expr                           shift and go to state 43
    lhs                            shift and go to state 59
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 144

    (84) primary -> variable CONSTANT_RESOLUTION . IDENTIFIER

    IDENTIFIER      shift and go to state 228


state 145

    (120) lhs -> variable OPEN_SQUARE . args CLOSE_SQUARE
    (121) lhs -> variable OPEN_SQUARE . CLOSE_SQUARE
    (140) args -> . arg multargs
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    CLOSE_SQUARE    shift and go to state 229
    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 122
    literal                        shift and go to state 33
    args                           shift and go to state 230
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 146

    (122) lhs -> variable DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 231


state 147

    (9) stmt -> class IDENTIFIER . LESS IDENTIFIER compstmt end
    (10) stmt -> class IDENTIFIER . compstmt end
    (1) compstmt -> . multcompstmt
    (2) multcompstmt -> . newline stmt multcompstmt
    (3) multcompstmt -> . stmt multcompstmt
    (4) multcompstmt -> . newline
    (5) multcompstmt -> . empty
    (188) newline -> . SEMI_COLON
    (189) newline -> . NEWLINE
    (6) stmt -> . def IDENTIFIER argdecl compstmt end
    (7) stmt -> . def singleton DOT IDENTIFIER argdecl compstmt end
    (8) stmt -> . def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end
    (9) stmt -> . class IDENTIFIER LESS IDENTIFIER compstmt end
    (10) stmt -> . class IDENTIFIER compstmt end
    (11) stmt -> . break
    (12) stmt -> . expr
    (190) empty -> .
    (13) expr -> . if expr1 pthen compstmt end
    (14) expr -> . if expr1 pthen compstmt multelsif else compstmt end
    (15) expr -> . while expr1 pdo compstmt end
    (16) expr -> . until expr1 pdo compstmt end
    (17) expr -> . case compstmt multcase else compstmt end
    (18) expr -> . case compstmt multcase end
    (19) expr -> . for mlhs in expr1 pdo compstmt end
    (20) expr -> . expr1
    (21) expr1 -> . return callargs
    (22) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (23) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (24) expr1 -> . return
    (25) expr1 -> . expr2
    (26) expr2 -> . call
    (27) expr2 -> . arg
    (28) call -> . function
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (29) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (30) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) function -> . primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> . primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (33) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> . primary DOT IDENTIFIER
    (36) function -> . primary CONSTANT_RESOLUTION IDENTIFIER
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary

    LESS            shift and go to state 232
    SEMI_COLON      shift and go to state 24
    NEWLINE         shift and go to state 4
    def             shift and go to state 45
    class           shift and go to state 57
    break           shift and go to state 9
    end             reduce using rule 190 (empty -> .)
    if              shift and go to state 49
    while           shift and go to state 44
    until           shift and go to state 36
    case            shift and go to state 42
    for             shift and go to state 26
    return          shift and go to state 7
    IDENTIFIER      shift and go to state 35
    OPEN_BRACKET    shift and go to state 5
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 32
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 25
    expr2                          shift and go to state 51
    literal                        shift and go to state 33
    expr1                          shift and go to state 52
    call                           shift and go to state 34
    varname                        shift and go to state 30
    empty                          shift and go to state 37
    function                       shift and go to state 38
    newline                        shift and go to state 55
    multcompstmt                   shift and go to state 8
    stmt                           shift and go to state 27
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 56
    compstmt                       shift and go to state 233
    term5                          shift and go to state 16
    expr                           shift and go to state 43
    lhs                            shift and go to state 59
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 148

    (125) mrhs -> MULTIPLY . arg
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 234
    literal                        shift and go to state 33
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 149

    (39) term0 -> mlhs EQUALS IDENTIFIER . OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> mlhs EQUALS IDENTIFIER . OPEN_BRACKET callargs CLOSE_BRACKET
    (187) varname -> IDENTIFIER .

  ! shift/reduce conflict for OPEN_BRACKET resolved as shift
    OPEN_BRACKET    shift and go to state 235
    OPEN_SQUARE     reduce using rule 187 (varname -> IDENTIFIER .)
    DOT             reduce using rule 187 (varname -> IDENTIFIER .)
    CONSTANT_RESOLUTION reduce using rule 187 (varname -> IDENTIFIER .)
    COMMA           reduce using rule 187 (varname -> IDENTIFIER .)
    EQUALS          reduce using rule 187 (varname -> IDENTIFIER .)
    MODULO_EQUALS   reduce using rule 187 (varname -> IDENTIFIER .)
    DIVIDE_EQUALS   reduce using rule 187 (varname -> IDENTIFIER .)
    MINUS_EQUALS    reduce using rule 187 (varname -> IDENTIFIER .)
    PLUS_EQUALS     reduce using rule 187 (varname -> IDENTIFIER .)
    OR_EQUALS       reduce using rule 187 (varname -> IDENTIFIER .)
    AND_EQUALS      reduce using rule 187 (varname -> IDENTIFIER .)
    XOR_EQUALS      reduce using rule 187 (varname -> IDENTIFIER .)
    RIGHT_SHIFT_EQUALS reduce using rule 187 (varname -> IDENTIFIER .)
    LEFT_SHIFT_EQUALS reduce using rule 187 (varname -> IDENTIFIER .)
    MULTIPLY_EQUALS reduce using rule 187 (varname -> IDENTIFIER .)
    LOGICAL_AND_EQUALS reduce using rule 187 (varname -> IDENTIFIER .)
    LOGICAL_OR_EQUALS reduce using rule 187 (varname -> IDENTIFIER .)
    POWER_EQUALS    reduce using rule 187 (varname -> IDENTIFIER .)
    POWER           reduce using rule 187 (varname -> IDENTIFIER .)
    MULTIPLY        reduce using rule 187 (varname -> IDENTIFIER .)
    DIVIDE          reduce using rule 187 (varname -> IDENTIFIER .)
    MODULO          reduce using rule 187 (varname -> IDENTIFIER .)
    PLUS            reduce using rule 187 (varname -> IDENTIFIER .)
    MINUS           reduce using rule 187 (varname -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 187 (varname -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 187 (varname -> IDENTIFIER .)
    BIT_AND         reduce using rule 187 (varname -> IDENTIFIER .)
    BIT_XOR         reduce using rule 187 (varname -> IDENTIFIER .)
    DOUBLE_EQUALS   reduce using rule 187 (varname -> IDENTIFIER .)
    TRIPLE_EQUALS   reduce using rule 187 (varname -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 187 (varname -> IDENTIFIER .)
    EQUAL_TILDE     reduce using rule 187 (varname -> IDENTIFIER .)
    BANG_TILDE      reduce using rule 187 (varname -> IDENTIFIER .)
    COMPARISON      reduce using rule 187 (varname -> IDENTIFIER .)
    LESS            reduce using rule 187 (varname -> IDENTIFIER .)
    LESS_EQUALS     reduce using rule 187 (varname -> IDENTIFIER .)
    GREATER         reduce using rule 187 (varname -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 187 (varname -> IDENTIFIER .)
    INCL_RANGE      reduce using rule 187 (varname -> IDENTIFIER .)
    EXCL_RANGE      reduce using rule 187 (varname -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 187 (varname -> IDENTIFIER .)
    BIT_OR          reduce using rule 187 (varname -> IDENTIFIER .)
    SEMI_COLON      reduce using rule 187 (varname -> IDENTIFIER .)
    NEWLINE         reduce using rule 187 (varname -> IDENTIFIER .)
    def             reduce using rule 187 (varname -> IDENTIFIER .)
    class           reduce using rule 187 (varname -> IDENTIFIER .)
    break           reduce using rule 187 (varname -> IDENTIFIER .)
    if              reduce using rule 187 (varname -> IDENTIFIER .)
    while           reduce using rule 187 (varname -> IDENTIFIER .)
    until           reduce using rule 187 (varname -> IDENTIFIER .)
    case            reduce using rule 187 (varname -> IDENTIFIER .)
    for             reduce using rule 187 (varname -> IDENTIFIER .)
    return          reduce using rule 187 (varname -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 187 (varname -> IDENTIFIER .)
    OPEN_FLOWER     reduce using rule 187 (varname -> IDENTIFIER .)
    nil             reduce using rule 187 (varname -> IDENTIFIER .)
    self            reduce using rule 187 (varname -> IDENTIFIER .)
    NUMBER          reduce using rule 187 (varname -> IDENTIFIER .)
    FLOAT           reduce using rule 187 (varname -> IDENTIFIER .)
    STRING          reduce using rule 187 (varname -> IDENTIFIER .)
    true            reduce using rule 187 (varname -> IDENTIFIER .)
    false           reduce using rule 187 (varname -> IDENTIFIER .)
    GLOBAL          reduce using rule 187 (varname -> IDENTIFIER .)
    AT_THE_RATE     reduce using rule 187 (varname -> IDENTIFIER .)
    $end            reduce using rule 187 (varname -> IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 187 (varname -> IDENTIFIER .)
    MAP             reduce using rule 187 (varname -> IDENTIFIER .)
    when            reduce using rule 187 (varname -> IDENTIFIER .)
    end             reduce using rule 187 (varname -> IDENTIFIER .)
    elsif           reduce using rule 187 (varname -> IDENTIFIER .)
    else            reduce using rule 187 (varname -> IDENTIFIER .)
    do              reduce using rule 187 (varname -> IDENTIFIER .)
    then            reduce using rule 187 (varname -> IDENTIFIER .)
    CLOSE_SQUARE    reduce using rule 187 (varname -> IDENTIFIER .)
    CLOSE_FLOWER    reduce using rule 187 (varname -> IDENTIFIER .)

  ! OPEN_BRACKET    [ reduce using rule 187 (varname -> IDENTIFIER .) ]


state 150

    (123) mrhs -> args .
    (124) mrhs -> args . COMMA MULTIPLY arg

  ! shift/reduce conflict for COMMA resolved as shift
    BIT_OR          reduce using rule 123 (mrhs -> args .)
    SEMI_COLON      reduce using rule 123 (mrhs -> args .)
    NEWLINE         reduce using rule 123 (mrhs -> args .)
    def             reduce using rule 123 (mrhs -> args .)
    class           reduce using rule 123 (mrhs -> args .)
    break           reduce using rule 123 (mrhs -> args .)
    if              reduce using rule 123 (mrhs -> args .)
    while           reduce using rule 123 (mrhs -> args .)
    until           reduce using rule 123 (mrhs -> args .)
    case            reduce using rule 123 (mrhs -> args .)
    for             reduce using rule 123 (mrhs -> args .)
    return          reduce using rule 123 (mrhs -> args .)
    IDENTIFIER      reduce using rule 123 (mrhs -> args .)
    OPEN_BRACKET    reduce using rule 123 (mrhs -> args .)
    CONSTANT_RESOLUTION reduce using rule 123 (mrhs -> args .)
    OPEN_SQUARE     reduce using rule 123 (mrhs -> args .)
    OPEN_FLOWER     reduce using rule 123 (mrhs -> args .)
    nil             reduce using rule 123 (mrhs -> args .)
    self            reduce using rule 123 (mrhs -> args .)
    NUMBER          reduce using rule 123 (mrhs -> args .)
    FLOAT           reduce using rule 123 (mrhs -> args .)
    STRING          reduce using rule 123 (mrhs -> args .)
    true            reduce using rule 123 (mrhs -> args .)
    false           reduce using rule 123 (mrhs -> args .)
    GLOBAL          reduce using rule 123 (mrhs -> args .)
    AT_THE_RATE     reduce using rule 123 (mrhs -> args .)
    MINUS           reduce using rule 123 (mrhs -> args .)
    PLUS            reduce using rule 123 (mrhs -> args .)
    $end            reduce using rule 123 (mrhs -> args .)
    CLOSE_BRACKET   reduce using rule 123 (mrhs -> args .)
    MAP             reduce using rule 123 (mrhs -> args .)
    when            reduce using rule 123 (mrhs -> args .)
    end             reduce using rule 123 (mrhs -> args .)
    elsif           reduce using rule 123 (mrhs -> args .)
    else            reduce using rule 123 (mrhs -> args .)
    do              reduce using rule 123 (mrhs -> args .)
    then            reduce using rule 123 (mrhs -> args .)
    CLOSE_SQUARE    reduce using rule 123 (mrhs -> args .)
    CLOSE_FLOWER    reduce using rule 123 (mrhs -> args .)
    COMMA           shift and go to state 236

  ! COMMA           [ reduce using rule 123 (mrhs -> args .) ]


state 151

    (43) term1 -> mlhs EQUALS mrhs .

    COMMA           reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    BIT_OR          reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    SEMI_COLON      reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    NEWLINE         reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    def             reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    class           reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    break           reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    if              reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    while           reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    until           reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    case            reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    for             reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    return          reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    IDENTIFIER      reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    OPEN_BRACKET    reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    CONSTANT_RESOLUTION reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    OPEN_SQUARE     reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    OPEN_FLOWER     reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    nil             reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    self            reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    NUMBER          reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    FLOAT           reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    STRING          reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    true            reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    false           reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    GLOBAL          reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    AT_THE_RATE     reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    MINUS           reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    PLUS            reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    $end            reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    when            reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    end             reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    elsif           reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    else            reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    do              reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    then            reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    CLOSE_BRACKET   reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    CLOSE_SQUARE    reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    MAP             reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)
    CLOSE_FLOWER    reduce using rule 43 (term1 -> mlhs EQUALS mrhs .)


state 152

    (41) term0 -> mlhs opasgn IDENTIFIER . OPEN_BRACKET callargs CLOSE_BRACKET
    (187) varname -> IDENTIFIER .

  ! shift/reduce conflict for OPEN_BRACKET resolved as shift
    OPEN_BRACKET    shift and go to state 237
    OPEN_SQUARE     reduce using rule 187 (varname -> IDENTIFIER .)
    DOT             reduce using rule 187 (varname -> IDENTIFIER .)
    CONSTANT_RESOLUTION reduce using rule 187 (varname -> IDENTIFIER .)
    COMMA           reduce using rule 187 (varname -> IDENTIFIER .)
    EQUALS          reduce using rule 187 (varname -> IDENTIFIER .)
    MODULO_EQUALS   reduce using rule 187 (varname -> IDENTIFIER .)
    DIVIDE_EQUALS   reduce using rule 187 (varname -> IDENTIFIER .)
    MINUS_EQUALS    reduce using rule 187 (varname -> IDENTIFIER .)
    PLUS_EQUALS     reduce using rule 187 (varname -> IDENTIFIER .)
    OR_EQUALS       reduce using rule 187 (varname -> IDENTIFIER .)
    AND_EQUALS      reduce using rule 187 (varname -> IDENTIFIER .)
    XOR_EQUALS      reduce using rule 187 (varname -> IDENTIFIER .)
    RIGHT_SHIFT_EQUALS reduce using rule 187 (varname -> IDENTIFIER .)
    LEFT_SHIFT_EQUALS reduce using rule 187 (varname -> IDENTIFIER .)
    MULTIPLY_EQUALS reduce using rule 187 (varname -> IDENTIFIER .)
    LOGICAL_AND_EQUALS reduce using rule 187 (varname -> IDENTIFIER .)
    LOGICAL_OR_EQUALS reduce using rule 187 (varname -> IDENTIFIER .)
    POWER_EQUALS    reduce using rule 187 (varname -> IDENTIFIER .)
    POWER           reduce using rule 187 (varname -> IDENTIFIER .)
    MULTIPLY        reduce using rule 187 (varname -> IDENTIFIER .)
    DIVIDE          reduce using rule 187 (varname -> IDENTIFIER .)
    MODULO          reduce using rule 187 (varname -> IDENTIFIER .)
    PLUS            reduce using rule 187 (varname -> IDENTIFIER .)
    MINUS           reduce using rule 187 (varname -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 187 (varname -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 187 (varname -> IDENTIFIER .)
    BIT_AND         reduce using rule 187 (varname -> IDENTIFIER .)
    BIT_XOR         reduce using rule 187 (varname -> IDENTIFIER .)
    DOUBLE_EQUALS   reduce using rule 187 (varname -> IDENTIFIER .)
    TRIPLE_EQUALS   reduce using rule 187 (varname -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 187 (varname -> IDENTIFIER .)
    EQUAL_TILDE     reduce using rule 187 (varname -> IDENTIFIER .)
    BANG_TILDE      reduce using rule 187 (varname -> IDENTIFIER .)
    COMPARISON      reduce using rule 187 (varname -> IDENTIFIER .)
    LESS            reduce using rule 187 (varname -> IDENTIFIER .)
    LESS_EQUALS     reduce using rule 187 (varname -> IDENTIFIER .)
    GREATER         reduce using rule 187 (varname -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 187 (varname -> IDENTIFIER .)
    INCL_RANGE      reduce using rule 187 (varname -> IDENTIFIER .)
    EXCL_RANGE      reduce using rule 187 (varname -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 187 (varname -> IDENTIFIER .)
    BIT_OR          reduce using rule 187 (varname -> IDENTIFIER .)
    SEMI_COLON      reduce using rule 187 (varname -> IDENTIFIER .)
    NEWLINE         reduce using rule 187 (varname -> IDENTIFIER .)
    def             reduce using rule 187 (varname -> IDENTIFIER .)
    class           reduce using rule 187 (varname -> IDENTIFIER .)
    break           reduce using rule 187 (varname -> IDENTIFIER .)
    if              reduce using rule 187 (varname -> IDENTIFIER .)
    while           reduce using rule 187 (varname -> IDENTIFIER .)
    until           reduce using rule 187 (varname -> IDENTIFIER .)
    case            reduce using rule 187 (varname -> IDENTIFIER .)
    for             reduce using rule 187 (varname -> IDENTIFIER .)
    return          reduce using rule 187 (varname -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 187 (varname -> IDENTIFIER .)
    OPEN_FLOWER     reduce using rule 187 (varname -> IDENTIFIER .)
    nil             reduce using rule 187 (varname -> IDENTIFIER .)
    self            reduce using rule 187 (varname -> IDENTIFIER .)
    NUMBER          reduce using rule 187 (varname -> IDENTIFIER .)
    FLOAT           reduce using rule 187 (varname -> IDENTIFIER .)
    STRING          reduce using rule 187 (varname -> IDENTIFIER .)
    true            reduce using rule 187 (varname -> IDENTIFIER .)
    false           reduce using rule 187 (varname -> IDENTIFIER .)
    GLOBAL          reduce using rule 187 (varname -> IDENTIFIER .)
    AT_THE_RATE     reduce using rule 187 (varname -> IDENTIFIER .)
    $end            reduce using rule 187 (varname -> IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 187 (varname -> IDENTIFIER .)
    MAP             reduce using rule 187 (varname -> IDENTIFIER .)
    when            reduce using rule 187 (varname -> IDENTIFIER .)
    end             reduce using rule 187 (varname -> IDENTIFIER .)
    elsif           reduce using rule 187 (varname -> IDENTIFIER .)
    else            reduce using rule 187 (varname -> IDENTIFIER .)
    do              reduce using rule 187 (varname -> IDENTIFIER .)
    then            reduce using rule 187 (varname -> IDENTIFIER .)
    CLOSE_SQUARE    reduce using rule 187 (varname -> IDENTIFIER .)
    CLOSE_FLOWER    reduce using rule 187 (varname -> IDENTIFIER .)

  ! OPEN_BRACKET    [ reduce using rule 187 (varname -> IDENTIFIER .) ]


state 153

    (44) term1 -> mlhs opasgn mrhs .

    COMMA           reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    BIT_OR          reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    SEMI_COLON      reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    NEWLINE         reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    def             reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    class           reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    break           reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    if              reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    while           reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    until           reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    case            reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    for             reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    return          reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    IDENTIFIER      reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    OPEN_BRACKET    reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    CONSTANT_RESOLUTION reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    OPEN_SQUARE     reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    OPEN_FLOWER     reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    nil             reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    self            reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    NUMBER          reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    FLOAT           reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    STRING          reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    true            reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    false           reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    GLOBAL          reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    AT_THE_RATE     reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    MINUS           reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    PLUS            reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    $end            reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    when            reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    end             reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    elsif           reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    else            reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    do              reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    then            reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    CLOSE_BRACKET   reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    CLOSE_SQUARE    reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    MAP             reduce using rule 44 (term1 -> mlhs opasgn mrhs .)
    CLOSE_FLOWER    reduce using rule 44 (term1 -> mlhs opasgn mrhs .)


state 154

    (118) mlhsitem -> OPEN_BRACKET mlhs CLOSE_BRACKET .

    COMMA           reduce using rule 118 (mlhsitem -> OPEN_BRACKET mlhs CLOSE_BRACKET .)
    EQUALS          reduce using rule 118 (mlhsitem -> OPEN_BRACKET mlhs CLOSE_BRACKET .)
    MODULO_EQUALS   reduce using rule 118 (mlhsitem -> OPEN_BRACKET mlhs CLOSE_BRACKET .)
    DIVIDE_EQUALS   reduce using rule 118 (mlhsitem -> OPEN_BRACKET mlhs CLOSE_BRACKET .)
    MINUS_EQUALS    reduce using rule 118 (mlhsitem -> OPEN_BRACKET mlhs CLOSE_BRACKET .)
    PLUS_EQUALS     reduce using rule 118 (mlhsitem -> OPEN_BRACKET mlhs CLOSE_BRACKET .)
    OR_EQUALS       reduce using rule 118 (mlhsitem -> OPEN_BRACKET mlhs CLOSE_BRACKET .)
    AND_EQUALS      reduce using rule 118 (mlhsitem -> OPEN_BRACKET mlhs CLOSE_BRACKET .)
    XOR_EQUALS      reduce using rule 118 (mlhsitem -> OPEN_BRACKET mlhs CLOSE_BRACKET .)
    RIGHT_SHIFT_EQUALS reduce using rule 118 (mlhsitem -> OPEN_BRACKET mlhs CLOSE_BRACKET .)
    LEFT_SHIFT_EQUALS reduce using rule 118 (mlhsitem -> OPEN_BRACKET mlhs CLOSE_BRACKET .)
    MULTIPLY_EQUALS reduce using rule 118 (mlhsitem -> OPEN_BRACKET mlhs CLOSE_BRACKET .)
    LOGICAL_AND_EQUALS reduce using rule 118 (mlhsitem -> OPEN_BRACKET mlhs CLOSE_BRACKET .)
    LOGICAL_OR_EQUALS reduce using rule 118 (mlhsitem -> OPEN_BRACKET mlhs CLOSE_BRACKET .)
    POWER_EQUALS    reduce using rule 118 (mlhsitem -> OPEN_BRACKET mlhs CLOSE_BRACKET .)
    in              reduce using rule 118 (mlhsitem -> OPEN_BRACKET mlhs CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 118 (mlhsitem -> OPEN_BRACKET mlhs CLOSE_BRACKET .)
    MULTIPLY        reduce using rule 118 (mlhsitem -> OPEN_BRACKET mlhs CLOSE_BRACKET .)


state 155

    (83) primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .

    POWER           reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    MULTIPLY        reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    DIVIDE          reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    MODULO          reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    PLUS            reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    MINUS           reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    LEFT_SHIFT      reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    RIGHT_SHIFT     reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    BIT_AND         reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    BIT_XOR         reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    DOUBLE_EQUALS   reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    TRIPLE_EQUALS   reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    NOT_EQUALS      reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    EQUAL_TILDE     reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    BANG_TILDE      reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    COMPARISON      reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    LESS            reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    LESS_EQUALS     reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    GREATER         reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    GREATER_EQUALS  reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    INCL_RANGE      reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    EXCL_RANGE      reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    LOGICAL_OR      reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    BIT_OR          reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    COMMA           reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    SEMI_COLON      reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    NEWLINE         reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    def             reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    class           reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    break           reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    if              reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    while           reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    until           reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    case            reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    for             reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    return          reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    CONSTANT_RESOLUTION reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    OPEN_SQUARE     reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    OPEN_FLOWER     reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    nil             reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    self            reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    NUMBER          reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    FLOAT           reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    STRING          reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    true            reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    false           reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    GLOBAL          reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    $end            reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    MAP             reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    when            reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    end             reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    elsif           reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    else            reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    do              reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    then            reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    CLOSE_SQUARE    reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    CLOSE_FLOWER    reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    DOT             reduce using rule 83 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)


state 156

    (162) assoc -> arg MAP . arg
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 238
    literal                        shift and go to state 33
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 157

    (141) multargs -> COMMA . arg multargs
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 239
    literal                        shift and go to state 33
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 158

    (140) args -> arg multargs .

    COMMA           reduce using rule 140 (args -> arg multargs .)
    CLOSE_BRACKET   reduce using rule 140 (args -> arg multargs .)
    BIT_OR          reduce using rule 140 (args -> arg multargs .)
    SEMI_COLON      reduce using rule 140 (args -> arg multargs .)
    NEWLINE         reduce using rule 140 (args -> arg multargs .)
    def             reduce using rule 140 (args -> arg multargs .)
    class           reduce using rule 140 (args -> arg multargs .)
    break           reduce using rule 140 (args -> arg multargs .)
    if              reduce using rule 140 (args -> arg multargs .)
    while           reduce using rule 140 (args -> arg multargs .)
    until           reduce using rule 140 (args -> arg multargs .)
    case            reduce using rule 140 (args -> arg multargs .)
    for             reduce using rule 140 (args -> arg multargs .)
    return          reduce using rule 140 (args -> arg multargs .)
    IDENTIFIER      reduce using rule 140 (args -> arg multargs .)
    OPEN_BRACKET    reduce using rule 140 (args -> arg multargs .)
    CONSTANT_RESOLUTION reduce using rule 140 (args -> arg multargs .)
    OPEN_SQUARE     reduce using rule 140 (args -> arg multargs .)
    OPEN_FLOWER     reduce using rule 140 (args -> arg multargs .)
    nil             reduce using rule 140 (args -> arg multargs .)
    self            reduce using rule 140 (args -> arg multargs .)
    NUMBER          reduce using rule 140 (args -> arg multargs .)
    FLOAT           reduce using rule 140 (args -> arg multargs .)
    STRING          reduce using rule 140 (args -> arg multargs .)
    true            reduce using rule 140 (args -> arg multargs .)
    false           reduce using rule 140 (args -> arg multargs .)
    GLOBAL          reduce using rule 140 (args -> arg multargs .)
    AT_THE_RATE     reduce using rule 140 (args -> arg multargs .)
    MINUS           reduce using rule 140 (args -> arg multargs .)
    PLUS            reduce using rule 140 (args -> arg multargs .)
    $end            reduce using rule 140 (args -> arg multargs .)
    MAP             reduce using rule 140 (args -> arg multargs .)
    when            reduce using rule 140 (args -> arg multargs .)
    end             reduce using rule 140 (args -> arg multargs .)
    elsif           reduce using rule 140 (args -> arg multargs .)
    else            reduce using rule 140 (args -> arg multargs .)
    do              reduce using rule 140 (args -> arg multargs .)
    then            reduce using rule 140 (args -> arg multargs .)
    CLOSE_SQUARE    reduce using rule 140 (args -> arg multargs .)
    CLOSE_FLOWER    reduce using rule 140 (args -> arg multargs .)


state 159

    (142) multargs -> empty .

    BIT_OR          reduce using rule 142 (multargs -> empty .)
    COMMA           reduce using rule 142 (multargs -> empty .)
    SEMI_COLON      reduce using rule 142 (multargs -> empty .)
    NEWLINE         reduce using rule 142 (multargs -> empty .)
    def             reduce using rule 142 (multargs -> empty .)
    class           reduce using rule 142 (multargs -> empty .)
    break           reduce using rule 142 (multargs -> empty .)
    if              reduce using rule 142 (multargs -> empty .)
    while           reduce using rule 142 (multargs -> empty .)
    until           reduce using rule 142 (multargs -> empty .)
    case            reduce using rule 142 (multargs -> empty .)
    for             reduce using rule 142 (multargs -> empty .)
    return          reduce using rule 142 (multargs -> empty .)
    IDENTIFIER      reduce using rule 142 (multargs -> empty .)
    OPEN_BRACKET    reduce using rule 142 (multargs -> empty .)
    CONSTANT_RESOLUTION reduce using rule 142 (multargs -> empty .)
    OPEN_SQUARE     reduce using rule 142 (multargs -> empty .)
    OPEN_FLOWER     reduce using rule 142 (multargs -> empty .)
    nil             reduce using rule 142 (multargs -> empty .)
    self            reduce using rule 142 (multargs -> empty .)
    NUMBER          reduce using rule 142 (multargs -> empty .)
    FLOAT           reduce using rule 142 (multargs -> empty .)
    STRING          reduce using rule 142 (multargs -> empty .)
    true            reduce using rule 142 (multargs -> empty .)
    false           reduce using rule 142 (multargs -> empty .)
    GLOBAL          reduce using rule 142 (multargs -> empty .)
    AT_THE_RATE     reduce using rule 142 (multargs -> empty .)
    MINUS           reduce using rule 142 (multargs -> empty .)
    PLUS            reduce using rule 142 (multargs -> empty .)
    $end            reduce using rule 142 (multargs -> empty .)
    CLOSE_BRACKET   reduce using rule 142 (multargs -> empty .)
    MAP             reduce using rule 142 (multargs -> empty .)
    when            reduce using rule 142 (multargs -> empty .)
    end             reduce using rule 142 (multargs -> empty .)
    elsif           reduce using rule 142 (multargs -> empty .)
    else            reduce using rule 142 (multargs -> empty .)
    do              reduce using rule 142 (multargs -> empty .)
    then            reduce using rule 142 (multargs -> empty .)
    CLOSE_SQUARE    reduce using rule 142 (multargs -> empty .)
    CLOSE_FLOWER    reduce using rule 142 (multargs -> empty .)


state 160

    (138) callargs -> MULTIPLY arg . COMMA BIT_AND arg
    (37) arg -> arg . BIT_OR term0

    COMMA           shift and go to state 240
    BIT_OR          shift and go to state 116


state 161

    (23) expr1 -> return OPEN_BRACKET CLOSE_BRACKET .

    SEMI_COLON      reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    NEWLINE         reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    def             reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    class           reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    break           reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    if              reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    while           reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    until           reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    case            reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    for             reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    return          reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    CONSTANT_RESOLUTION reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    OPEN_SQUARE     reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    OPEN_FLOWER     reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    nil             reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    self            reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    NUMBER          reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    FLOAT           reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    STRING          reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    true            reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    false           reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    GLOBAL          reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    MINUS           reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    PLUS            reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    end             reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    $end            reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    when            reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    elsif           reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    else            reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    do              reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    then            reduce using rule 23 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)


state 162

    (27) expr2 -> arg .
    (140) args -> arg . multargs
    (37) arg -> arg . BIT_OR term0
    (162) assoc -> arg . MAP arg
    (141) multargs -> . COMMA arg multargs
    (142) multargs -> . empty
    (190) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for CLOSE_BRACKET resolved using rule 27 (expr2 -> arg .)
    CLOSE_BRACKET   reduce using rule 27 (expr2 -> arg .)
    BIT_OR          shift and go to state 116
    MAP             shift and go to state 156
    COMMA           shift and go to state 157

  ! COMMA           [ reduce using rule 190 (empty -> .) ]
  ! CLOSE_BRACKET   [ reduce using rule 190 (empty -> .) ]

    multargs                       shift and go to state 158
    empty                          shift and go to state 159

state 163

    (22) expr1 -> return OPEN_BRACKET callargs . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 241


state 164

    (134) callargs -> assocs COMMA . MULTIPLY arg COMMA BIT_AND arg
    (135) callargs -> assocs COMMA . MULTIPLY arg
    (136) callargs -> assocs COMMA . BIT_AND arg

    MULTIPLY        shift and go to state 242
    BIT_AND         shift and go to state 243


state 165

    (139) callargs -> BIT_AND arg .
    (37) arg -> arg . BIT_OR term0

    CLOSE_BRACKET   reduce using rule 139 (callargs -> BIT_AND arg .)
    SEMI_COLON      reduce using rule 139 (callargs -> BIT_AND arg .)
    NEWLINE         reduce using rule 139 (callargs -> BIT_AND arg .)
    def             reduce using rule 139 (callargs -> BIT_AND arg .)
    class           reduce using rule 139 (callargs -> BIT_AND arg .)
    break           reduce using rule 139 (callargs -> BIT_AND arg .)
    if              reduce using rule 139 (callargs -> BIT_AND arg .)
    while           reduce using rule 139 (callargs -> BIT_AND arg .)
    until           reduce using rule 139 (callargs -> BIT_AND arg .)
    case            reduce using rule 139 (callargs -> BIT_AND arg .)
    for             reduce using rule 139 (callargs -> BIT_AND arg .)
    return          reduce using rule 139 (callargs -> BIT_AND arg .)
    IDENTIFIER      reduce using rule 139 (callargs -> BIT_AND arg .)
    OPEN_BRACKET    reduce using rule 139 (callargs -> BIT_AND arg .)
    CONSTANT_RESOLUTION reduce using rule 139 (callargs -> BIT_AND arg .)
    OPEN_SQUARE     reduce using rule 139 (callargs -> BIT_AND arg .)
    OPEN_FLOWER     reduce using rule 139 (callargs -> BIT_AND arg .)
    nil             reduce using rule 139 (callargs -> BIT_AND arg .)
    self            reduce using rule 139 (callargs -> BIT_AND arg .)
    NUMBER          reduce using rule 139 (callargs -> BIT_AND arg .)
    FLOAT           reduce using rule 139 (callargs -> BIT_AND arg .)
    STRING          reduce using rule 139 (callargs -> BIT_AND arg .)
    true            reduce using rule 139 (callargs -> BIT_AND arg .)
    false           reduce using rule 139 (callargs -> BIT_AND arg .)
    GLOBAL          reduce using rule 139 (callargs -> BIT_AND arg .)
    AT_THE_RATE     reduce using rule 139 (callargs -> BIT_AND arg .)
    MINUS           reduce using rule 139 (callargs -> BIT_AND arg .)
    PLUS            reduce using rule 139 (callargs -> BIT_AND arg .)
    $end            reduce using rule 139 (callargs -> BIT_AND arg .)
    when            reduce using rule 139 (callargs -> BIT_AND arg .)
    end             reduce using rule 139 (callargs -> BIT_AND arg .)
    elsif           reduce using rule 139 (callargs -> BIT_AND arg .)
    else            reduce using rule 139 (callargs -> BIT_AND arg .)
    do              reduce using rule 139 (callargs -> BIT_AND arg .)
    then            reduce using rule 139 (callargs -> BIT_AND arg .)
    BIT_OR          shift and go to state 116


state 166

    (127) callargs -> args COMMA . assocs COMMA MULTIPLY arg COMMA BIT_AND arg
    (128) callargs -> args COMMA . MULTIPLY arg COMMA BIT_AND arg
    (129) callargs -> args COMMA . assocs COMMA BIT_AND arg
    (130) callargs -> args COMMA . assocs COMMA MULTIPLY arg
    (131) callargs -> args COMMA . assocs
    (132) callargs -> args COMMA . MULTIPLY arg
    (133) callargs -> args COMMA . BIT_AND arg
    (159) assocs -> . assoc multassocs
    (162) assoc -> . arg MAP arg
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    MULTIPLY        shift and go to state 245
    BIT_AND         shift and go to state 247
    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 244
    literal                        shift and go to state 33
    assocs                         shift and go to state 246
    assoc                          shift and go to state 93
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 167

    (159) assocs -> assoc multassocs .

    COMMA           reduce using rule 159 (assocs -> assoc multassocs .)
    CLOSE_BRACKET   reduce using rule 159 (assocs -> assoc multassocs .)
    CLOSE_FLOWER    reduce using rule 159 (assocs -> assoc multassocs .)
    SEMI_COLON      reduce using rule 159 (assocs -> assoc multassocs .)
    NEWLINE         reduce using rule 159 (assocs -> assoc multassocs .)
    def             reduce using rule 159 (assocs -> assoc multassocs .)
    class           reduce using rule 159 (assocs -> assoc multassocs .)
    break           reduce using rule 159 (assocs -> assoc multassocs .)
    if              reduce using rule 159 (assocs -> assoc multassocs .)
    while           reduce using rule 159 (assocs -> assoc multassocs .)
    until           reduce using rule 159 (assocs -> assoc multassocs .)
    case            reduce using rule 159 (assocs -> assoc multassocs .)
    for             reduce using rule 159 (assocs -> assoc multassocs .)
    return          reduce using rule 159 (assocs -> assoc multassocs .)
    IDENTIFIER      reduce using rule 159 (assocs -> assoc multassocs .)
    OPEN_BRACKET    reduce using rule 159 (assocs -> assoc multassocs .)
    CONSTANT_RESOLUTION reduce using rule 159 (assocs -> assoc multassocs .)
    OPEN_SQUARE     reduce using rule 159 (assocs -> assoc multassocs .)
    OPEN_FLOWER     reduce using rule 159 (assocs -> assoc multassocs .)
    nil             reduce using rule 159 (assocs -> assoc multassocs .)
    self            reduce using rule 159 (assocs -> assoc multassocs .)
    NUMBER          reduce using rule 159 (assocs -> assoc multassocs .)
    FLOAT           reduce using rule 159 (assocs -> assoc multassocs .)
    STRING          reduce using rule 159 (assocs -> assoc multassocs .)
    true            reduce using rule 159 (assocs -> assoc multassocs .)
    false           reduce using rule 159 (assocs -> assoc multassocs .)
    GLOBAL          reduce using rule 159 (assocs -> assoc multassocs .)
    AT_THE_RATE     reduce using rule 159 (assocs -> assoc multassocs .)
    MINUS           reduce using rule 159 (assocs -> assoc multassocs .)
    PLUS            reduce using rule 159 (assocs -> assoc multassocs .)
    $end            reduce using rule 159 (assocs -> assoc multassocs .)
    when            reduce using rule 159 (assocs -> assoc multassocs .)
    end             reduce using rule 159 (assocs -> assoc multassocs .)
    elsif           reduce using rule 159 (assocs -> assoc multassocs .)
    else            reduce using rule 159 (assocs -> assoc multassocs .)
    do              reduce using rule 159 (assocs -> assoc multassocs .)
    then            reduce using rule 159 (assocs -> assoc multassocs .)


state 168

    (160) multassocs -> COMMA . assoc multassocs
    (162) assoc -> . arg MAP arg
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 244
    literal                        shift and go to state 33
    assoc                          shift and go to state 248
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 169

    (161) multassocs -> empty .

    COMMA           reduce using rule 161 (multassocs -> empty .)
    SEMI_COLON      reduce using rule 161 (multassocs -> empty .)
    NEWLINE         reduce using rule 161 (multassocs -> empty .)
    def             reduce using rule 161 (multassocs -> empty .)
    class           reduce using rule 161 (multassocs -> empty .)
    break           reduce using rule 161 (multassocs -> empty .)
    if              reduce using rule 161 (multassocs -> empty .)
    while           reduce using rule 161 (multassocs -> empty .)
    until           reduce using rule 161 (multassocs -> empty .)
    case            reduce using rule 161 (multassocs -> empty .)
    for             reduce using rule 161 (multassocs -> empty .)
    return          reduce using rule 161 (multassocs -> empty .)
    IDENTIFIER      reduce using rule 161 (multassocs -> empty .)
    OPEN_BRACKET    reduce using rule 161 (multassocs -> empty .)
    CONSTANT_RESOLUTION reduce using rule 161 (multassocs -> empty .)
    OPEN_SQUARE     reduce using rule 161 (multassocs -> empty .)
    OPEN_FLOWER     reduce using rule 161 (multassocs -> empty .)
    nil             reduce using rule 161 (multassocs -> empty .)
    self            reduce using rule 161 (multassocs -> empty .)
    NUMBER          reduce using rule 161 (multassocs -> empty .)
    FLOAT           reduce using rule 161 (multassocs -> empty .)
    STRING          reduce using rule 161 (multassocs -> empty .)
    true            reduce using rule 161 (multassocs -> empty .)
    false           reduce using rule 161 (multassocs -> empty .)
    GLOBAL          reduce using rule 161 (multassocs -> empty .)
    AT_THE_RATE     reduce using rule 161 (multassocs -> empty .)
    MINUS           reduce using rule 161 (multassocs -> empty .)
    PLUS            reduce using rule 161 (multassocs -> empty .)
    $end            reduce using rule 161 (multassocs -> empty .)
    when            reduce using rule 161 (multassocs -> empty .)
    end             reduce using rule 161 (multassocs -> empty .)
    elsif           reduce using rule 161 (multassocs -> empty .)
    else            reduce using rule 161 (multassocs -> empty .)
    do              reduce using rule 161 (multassocs -> empty .)
    then            reduce using rule 161 (multassocs -> empty .)
    CLOSE_BRACKET   reduce using rule 161 (multassocs -> empty .)
    CLOSE_FLOWER    reduce using rule 161 (multassocs -> empty .)


state 170

    (73) term10 -> term10 MULTIPLY term11 .

    MULTIPLY        reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    DIVIDE          reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    MODULO          reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    PLUS            reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    MINUS           reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    LEFT_SHIFT      reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    RIGHT_SHIFT     reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    BIT_AND         reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    BIT_XOR         reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    DOUBLE_EQUALS   reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    TRIPLE_EQUALS   reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    NOT_EQUALS      reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    EQUAL_TILDE     reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    BANG_TILDE      reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    COMPARISON      reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    LESS            reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    LESS_EQUALS     reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    GREATER         reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    GREATER_EQUALS  reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    INCL_RANGE      reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    EXCL_RANGE      reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    LOGICAL_OR      reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    BIT_OR          reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    SEMI_COLON      reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    NEWLINE         reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    def             reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    class           reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    break           reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    if              reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    while           reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    until           reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    case            reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    for             reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    return          reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    IDENTIFIER      reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    OPEN_BRACKET    reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    CONSTANT_RESOLUTION reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    OPEN_SQUARE     reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    OPEN_FLOWER     reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    nil             reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    self            reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    NUMBER          reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    FLOAT           reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    STRING          reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    true            reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    false           reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    GLOBAL          reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    AT_THE_RATE     reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    $end            reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    CLOSE_BRACKET   reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    MAP             reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    COMMA           reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    when            reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    end             reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    elsif           reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    else            reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    do              reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    then            reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    CLOSE_SQUARE    reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)
    CLOSE_FLOWER    reduce using rule 73 (term10 -> term10 MULTIPLY term11 .)


state 171

    (75) term10 -> term10 MODULO term11 .

    MULTIPLY        reduce using rule 75 (term10 -> term10 MODULO term11 .)
    DIVIDE          reduce using rule 75 (term10 -> term10 MODULO term11 .)
    MODULO          reduce using rule 75 (term10 -> term10 MODULO term11 .)
    PLUS            reduce using rule 75 (term10 -> term10 MODULO term11 .)
    MINUS           reduce using rule 75 (term10 -> term10 MODULO term11 .)
    LEFT_SHIFT      reduce using rule 75 (term10 -> term10 MODULO term11 .)
    RIGHT_SHIFT     reduce using rule 75 (term10 -> term10 MODULO term11 .)
    BIT_AND         reduce using rule 75 (term10 -> term10 MODULO term11 .)
    BIT_XOR         reduce using rule 75 (term10 -> term10 MODULO term11 .)
    DOUBLE_EQUALS   reduce using rule 75 (term10 -> term10 MODULO term11 .)
    TRIPLE_EQUALS   reduce using rule 75 (term10 -> term10 MODULO term11 .)
    NOT_EQUALS      reduce using rule 75 (term10 -> term10 MODULO term11 .)
    EQUAL_TILDE     reduce using rule 75 (term10 -> term10 MODULO term11 .)
    BANG_TILDE      reduce using rule 75 (term10 -> term10 MODULO term11 .)
    COMPARISON      reduce using rule 75 (term10 -> term10 MODULO term11 .)
    LESS            reduce using rule 75 (term10 -> term10 MODULO term11 .)
    LESS_EQUALS     reduce using rule 75 (term10 -> term10 MODULO term11 .)
    GREATER         reduce using rule 75 (term10 -> term10 MODULO term11 .)
    GREATER_EQUALS  reduce using rule 75 (term10 -> term10 MODULO term11 .)
    INCL_RANGE      reduce using rule 75 (term10 -> term10 MODULO term11 .)
    EXCL_RANGE      reduce using rule 75 (term10 -> term10 MODULO term11 .)
    LOGICAL_OR      reduce using rule 75 (term10 -> term10 MODULO term11 .)
    BIT_OR          reduce using rule 75 (term10 -> term10 MODULO term11 .)
    SEMI_COLON      reduce using rule 75 (term10 -> term10 MODULO term11 .)
    NEWLINE         reduce using rule 75 (term10 -> term10 MODULO term11 .)
    def             reduce using rule 75 (term10 -> term10 MODULO term11 .)
    class           reduce using rule 75 (term10 -> term10 MODULO term11 .)
    break           reduce using rule 75 (term10 -> term10 MODULO term11 .)
    if              reduce using rule 75 (term10 -> term10 MODULO term11 .)
    while           reduce using rule 75 (term10 -> term10 MODULO term11 .)
    until           reduce using rule 75 (term10 -> term10 MODULO term11 .)
    case            reduce using rule 75 (term10 -> term10 MODULO term11 .)
    for             reduce using rule 75 (term10 -> term10 MODULO term11 .)
    return          reduce using rule 75 (term10 -> term10 MODULO term11 .)
    IDENTIFIER      reduce using rule 75 (term10 -> term10 MODULO term11 .)
    OPEN_BRACKET    reduce using rule 75 (term10 -> term10 MODULO term11 .)
    CONSTANT_RESOLUTION reduce using rule 75 (term10 -> term10 MODULO term11 .)
    OPEN_SQUARE     reduce using rule 75 (term10 -> term10 MODULO term11 .)
    OPEN_FLOWER     reduce using rule 75 (term10 -> term10 MODULO term11 .)
    nil             reduce using rule 75 (term10 -> term10 MODULO term11 .)
    self            reduce using rule 75 (term10 -> term10 MODULO term11 .)
    NUMBER          reduce using rule 75 (term10 -> term10 MODULO term11 .)
    FLOAT           reduce using rule 75 (term10 -> term10 MODULO term11 .)
    STRING          reduce using rule 75 (term10 -> term10 MODULO term11 .)
    true            reduce using rule 75 (term10 -> term10 MODULO term11 .)
    false           reduce using rule 75 (term10 -> term10 MODULO term11 .)
    GLOBAL          reduce using rule 75 (term10 -> term10 MODULO term11 .)
    AT_THE_RATE     reduce using rule 75 (term10 -> term10 MODULO term11 .)
    $end            reduce using rule 75 (term10 -> term10 MODULO term11 .)
    CLOSE_BRACKET   reduce using rule 75 (term10 -> term10 MODULO term11 .)
    MAP             reduce using rule 75 (term10 -> term10 MODULO term11 .)
    COMMA           reduce using rule 75 (term10 -> term10 MODULO term11 .)
    when            reduce using rule 75 (term10 -> term10 MODULO term11 .)
    end             reduce using rule 75 (term10 -> term10 MODULO term11 .)
    elsif           reduce using rule 75 (term10 -> term10 MODULO term11 .)
    else            reduce using rule 75 (term10 -> term10 MODULO term11 .)
    do              reduce using rule 75 (term10 -> term10 MODULO term11 .)
    then            reduce using rule 75 (term10 -> term10 MODULO term11 .)
    CLOSE_SQUARE    reduce using rule 75 (term10 -> term10 MODULO term11 .)
    CLOSE_FLOWER    reduce using rule 75 (term10 -> term10 MODULO term11 .)


state 172

    (74) term10 -> term10 DIVIDE term11 .

    MULTIPLY        reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    DIVIDE          reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    MODULO          reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    PLUS            reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    MINUS           reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    LEFT_SHIFT      reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    RIGHT_SHIFT     reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    BIT_AND         reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    BIT_XOR         reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    DOUBLE_EQUALS   reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    TRIPLE_EQUALS   reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    NOT_EQUALS      reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    EQUAL_TILDE     reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    BANG_TILDE      reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    COMPARISON      reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    LESS            reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    LESS_EQUALS     reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    GREATER         reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    GREATER_EQUALS  reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    INCL_RANGE      reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    EXCL_RANGE      reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    LOGICAL_OR      reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    BIT_OR          reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    SEMI_COLON      reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    NEWLINE         reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    def             reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    class           reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    break           reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    if              reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    while           reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    until           reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    case            reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    for             reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    return          reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    IDENTIFIER      reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    OPEN_BRACKET    reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    CONSTANT_RESOLUTION reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    OPEN_SQUARE     reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    OPEN_FLOWER     reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    nil             reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    self            reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    NUMBER          reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    FLOAT           reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    STRING          reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    true            reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    false           reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    GLOBAL          reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    AT_THE_RATE     reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    $end            reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    CLOSE_BRACKET   reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    MAP             reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    COMMA           reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    when            reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    end             reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    elsif           reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    else            reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    do              reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    then            reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    CLOSE_SQUARE    reduce using rule 74 (term10 -> term10 DIVIDE term11 .)
    CLOSE_FLOWER    reduce using rule 74 (term10 -> term10 DIVIDE term11 .)


state 173

    (65) term7 -> term7 BIT_AND term8 .
    (67) term8 -> term8 . LEFT_SHIFT term9
    (68) term8 -> term8 . RIGHT_SHIFT term9

    BIT_AND         reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    BIT_XOR         reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    DOUBLE_EQUALS   reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    TRIPLE_EQUALS   reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    NOT_EQUALS      reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    EQUAL_TILDE     reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    BANG_TILDE      reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    COMPARISON      reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    LESS            reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    LESS_EQUALS     reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    GREATER         reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    GREATER_EQUALS  reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    INCL_RANGE      reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    EXCL_RANGE      reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    LOGICAL_OR      reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    BIT_OR          reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    SEMI_COLON      reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    NEWLINE         reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    def             reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    class           reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    break           reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    if              reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    while           reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    until           reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    case            reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    for             reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    return          reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    IDENTIFIER      reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    OPEN_BRACKET    reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    CONSTANT_RESOLUTION reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    OPEN_SQUARE     reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    OPEN_FLOWER     reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    nil             reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    self            reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    NUMBER          reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    FLOAT           reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    STRING          reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    true            reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    false           reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    GLOBAL          reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    AT_THE_RATE     reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    MINUS           reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    PLUS            reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    end             reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    $end            reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    when            reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    elsif           reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    else            reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    do              reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    then            reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    CLOSE_BRACKET   reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    MAP             reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    COMMA           reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    CLOSE_SQUARE    reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    CLOSE_FLOWER    reduce using rule 65 (term7 -> term7 BIT_AND term8 .)
    LEFT_SHIFT      shift and go to state 132
    RIGHT_SHIFT     shift and go to state 131


state 174

    (63) term6 -> term6 BIT_XOR term7 .
    (65) term7 -> term7 . BIT_AND term8

    BIT_XOR         reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    DOUBLE_EQUALS   reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    TRIPLE_EQUALS   reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    NOT_EQUALS      reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    EQUAL_TILDE     reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    BANG_TILDE      reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    COMPARISON      reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    LESS            reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    LESS_EQUALS     reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    GREATER         reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    GREATER_EQUALS  reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    INCL_RANGE      reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    EXCL_RANGE      reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    LOGICAL_OR      reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    BIT_OR          reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    MAP             reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    COMMA           reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    CLOSE_BRACKET   reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    SEMI_COLON      reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    NEWLINE         reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    def             reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    class           reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    break           reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    if              reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    while           reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    until           reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    case            reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    for             reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    return          reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    IDENTIFIER      reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    OPEN_BRACKET    reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    CONSTANT_RESOLUTION reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    OPEN_SQUARE     reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    OPEN_FLOWER     reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    nil             reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    self            reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    NUMBER          reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    FLOAT           reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    STRING          reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    true            reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    false           reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    GLOBAL          reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    AT_THE_RATE     reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    MINUS           reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    PLUS            reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    $end            reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    when            reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    end             reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    elsif           reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    else            reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    do              reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    then            reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    CLOSE_SQUARE    reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    CLOSE_FLOWER    reduce using rule 63 (term6 -> term6 BIT_XOR term7 .)
    BIT_AND         shift and go to state 98


state 175

    (56) term4 -> term5 COMPARISON term5 .
    (58) term5 -> term5 . LESS term6
    (59) term5 -> term5 . LESS_EQUALS term6
    (60) term5 -> term5 . GREATER term6
    (61) term5 -> term5 . GREATER_EQUALS term6

    INCL_RANGE      reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    EXCL_RANGE      reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    LOGICAL_OR      reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    BIT_OR          reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    MAP             reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    COMMA           reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    CLOSE_BRACKET   reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    SEMI_COLON      reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    NEWLINE         reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    def             reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    class           reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    break           reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    if              reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    while           reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    until           reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    case            reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    for             reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    return          reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    IDENTIFIER      reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    OPEN_BRACKET    reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    CONSTANT_RESOLUTION reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    OPEN_SQUARE     reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    OPEN_FLOWER     reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    nil             reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    self            reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    NUMBER          reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    FLOAT           reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    STRING          reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    true            reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    false           reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    GLOBAL          reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    AT_THE_RATE     reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    MINUS           reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    PLUS            reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    end             reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    elsif           reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    else            reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    CLOSE_FLOWER    reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    $end            reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    when            reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    do              reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    then            reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    CLOSE_SQUARE    reduce using rule 56 (term4 -> term5 COMPARISON term5 .)
    LESS            shift and go to state 104
    LESS_EQUALS     shift and go to state 105
    GREATER         shift and go to state 102
    GREATER_EQUALS  shift and go to state 109


state 176

    (51) term4 -> term5 DOUBLE_EQUALS term5 .
    (58) term5 -> term5 . LESS term6
    (59) term5 -> term5 . LESS_EQUALS term6
    (60) term5 -> term5 . GREATER term6
    (61) term5 -> term5 . GREATER_EQUALS term6

    INCL_RANGE      reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    EXCL_RANGE      reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    LOGICAL_OR      reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    BIT_OR          reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    MAP             reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    COMMA           reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    CLOSE_BRACKET   reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    SEMI_COLON      reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    NEWLINE         reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    def             reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    class           reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    break           reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    if              reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    while           reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    until           reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    case            reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    for             reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    return          reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    IDENTIFIER      reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    OPEN_BRACKET    reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    CONSTANT_RESOLUTION reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    OPEN_SQUARE     reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    OPEN_FLOWER     reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    nil             reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    self            reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    NUMBER          reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    FLOAT           reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    STRING          reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    true            reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    false           reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    GLOBAL          reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    AT_THE_RATE     reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    MINUS           reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    PLUS            reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    end             reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    elsif           reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    else            reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    CLOSE_FLOWER    reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    $end            reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    when            reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    do              reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    then            reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    CLOSE_SQUARE    reduce using rule 51 (term4 -> term5 DOUBLE_EQUALS term5 .)
    LESS            shift and go to state 104
    LESS_EQUALS     shift and go to state 105
    GREATER         shift and go to state 102
    GREATER_EQUALS  shift and go to state 109


state 177

    (60) term5 -> term5 GREATER term6 .
    (63) term6 -> term6 . BIT_XOR term7

    DOUBLE_EQUALS   reduce using rule 60 (term5 -> term5 GREATER term6 .)
    TRIPLE_EQUALS   reduce using rule 60 (term5 -> term5 GREATER term6 .)
    NOT_EQUALS      reduce using rule 60 (term5 -> term5 GREATER term6 .)
    EQUAL_TILDE     reduce using rule 60 (term5 -> term5 GREATER term6 .)
    BANG_TILDE      reduce using rule 60 (term5 -> term5 GREATER term6 .)
    COMPARISON      reduce using rule 60 (term5 -> term5 GREATER term6 .)
    LESS            reduce using rule 60 (term5 -> term5 GREATER term6 .)
    LESS_EQUALS     reduce using rule 60 (term5 -> term5 GREATER term6 .)
    GREATER         reduce using rule 60 (term5 -> term5 GREATER term6 .)
    GREATER_EQUALS  reduce using rule 60 (term5 -> term5 GREATER term6 .)
    INCL_RANGE      reduce using rule 60 (term5 -> term5 GREATER term6 .)
    EXCL_RANGE      reduce using rule 60 (term5 -> term5 GREATER term6 .)
    LOGICAL_OR      reduce using rule 60 (term5 -> term5 GREATER term6 .)
    BIT_OR          reduce using rule 60 (term5 -> term5 GREATER term6 .)
    then            reduce using rule 60 (term5 -> term5 GREATER term6 .)
    SEMI_COLON      reduce using rule 60 (term5 -> term5 GREATER term6 .)
    NEWLINE         reduce using rule 60 (term5 -> term5 GREATER term6 .)
    def             reduce using rule 60 (term5 -> term5 GREATER term6 .)
    class           reduce using rule 60 (term5 -> term5 GREATER term6 .)
    break           reduce using rule 60 (term5 -> term5 GREATER term6 .)
    if              reduce using rule 60 (term5 -> term5 GREATER term6 .)
    while           reduce using rule 60 (term5 -> term5 GREATER term6 .)
    until           reduce using rule 60 (term5 -> term5 GREATER term6 .)
    case            reduce using rule 60 (term5 -> term5 GREATER term6 .)
    for             reduce using rule 60 (term5 -> term5 GREATER term6 .)
    return          reduce using rule 60 (term5 -> term5 GREATER term6 .)
    IDENTIFIER      reduce using rule 60 (term5 -> term5 GREATER term6 .)
    OPEN_BRACKET    reduce using rule 60 (term5 -> term5 GREATER term6 .)
    CONSTANT_RESOLUTION reduce using rule 60 (term5 -> term5 GREATER term6 .)
    OPEN_SQUARE     reduce using rule 60 (term5 -> term5 GREATER term6 .)
    OPEN_FLOWER     reduce using rule 60 (term5 -> term5 GREATER term6 .)
    nil             reduce using rule 60 (term5 -> term5 GREATER term6 .)
    self            reduce using rule 60 (term5 -> term5 GREATER term6 .)
    NUMBER          reduce using rule 60 (term5 -> term5 GREATER term6 .)
    FLOAT           reduce using rule 60 (term5 -> term5 GREATER term6 .)
    STRING          reduce using rule 60 (term5 -> term5 GREATER term6 .)
    true            reduce using rule 60 (term5 -> term5 GREATER term6 .)
    false           reduce using rule 60 (term5 -> term5 GREATER term6 .)
    GLOBAL          reduce using rule 60 (term5 -> term5 GREATER term6 .)
    AT_THE_RATE     reduce using rule 60 (term5 -> term5 GREATER term6 .)
    MINUS           reduce using rule 60 (term5 -> term5 GREATER term6 .)
    PLUS            reduce using rule 60 (term5 -> term5 GREATER term6 .)
    $end            reduce using rule 60 (term5 -> term5 GREATER term6 .)
    when            reduce using rule 60 (term5 -> term5 GREATER term6 .)
    end             reduce using rule 60 (term5 -> term5 GREATER term6 .)
    elsif           reduce using rule 60 (term5 -> term5 GREATER term6 .)
    else            reduce using rule 60 (term5 -> term5 GREATER term6 .)
    do              reduce using rule 60 (term5 -> term5 GREATER term6 .)
    CLOSE_BRACKET   reduce using rule 60 (term5 -> term5 GREATER term6 .)
    MAP             reduce using rule 60 (term5 -> term5 GREATER term6 .)
    COMMA           reduce using rule 60 (term5 -> term5 GREATER term6 .)
    CLOSE_SQUARE    reduce using rule 60 (term5 -> term5 GREATER term6 .)
    CLOSE_FLOWER    reduce using rule 60 (term5 -> term5 GREATER term6 .)
    BIT_XOR         shift and go to state 99


state 178

    (53) term4 -> term5 NOT_EQUALS term5 .
    (58) term5 -> term5 . LESS term6
    (59) term5 -> term5 . LESS_EQUALS term6
    (60) term5 -> term5 . GREATER term6
    (61) term5 -> term5 . GREATER_EQUALS term6

    INCL_RANGE      reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    EXCL_RANGE      reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    LOGICAL_OR      reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    BIT_OR          reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    MAP             reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    COMMA           reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    CLOSE_BRACKET   reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    SEMI_COLON      reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    NEWLINE         reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    def             reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    class           reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    break           reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    if              reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    while           reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    until           reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    case            reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    for             reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    return          reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    IDENTIFIER      reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    OPEN_BRACKET    reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    CONSTANT_RESOLUTION reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    OPEN_SQUARE     reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    OPEN_FLOWER     reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    nil             reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    self            reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    NUMBER          reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    FLOAT           reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    STRING          reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    true            reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    false           reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    GLOBAL          reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    AT_THE_RATE     reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    MINUS           reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    PLUS            reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    end             reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    elsif           reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    else            reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    CLOSE_FLOWER    reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    $end            reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    when            reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    do              reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    then            reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    CLOSE_SQUARE    reduce using rule 53 (term4 -> term5 NOT_EQUALS term5 .)
    LESS            shift and go to state 104
    LESS_EQUALS     shift and go to state 105
    GREATER         shift and go to state 102
    GREATER_EQUALS  shift and go to state 109


state 179

    (58) term5 -> term5 LESS term6 .
    (63) term6 -> term6 . BIT_XOR term7

    DOUBLE_EQUALS   reduce using rule 58 (term5 -> term5 LESS term6 .)
    TRIPLE_EQUALS   reduce using rule 58 (term5 -> term5 LESS term6 .)
    NOT_EQUALS      reduce using rule 58 (term5 -> term5 LESS term6 .)
    EQUAL_TILDE     reduce using rule 58 (term5 -> term5 LESS term6 .)
    BANG_TILDE      reduce using rule 58 (term5 -> term5 LESS term6 .)
    COMPARISON      reduce using rule 58 (term5 -> term5 LESS term6 .)
    LESS            reduce using rule 58 (term5 -> term5 LESS term6 .)
    LESS_EQUALS     reduce using rule 58 (term5 -> term5 LESS term6 .)
    GREATER         reduce using rule 58 (term5 -> term5 LESS term6 .)
    GREATER_EQUALS  reduce using rule 58 (term5 -> term5 LESS term6 .)
    INCL_RANGE      reduce using rule 58 (term5 -> term5 LESS term6 .)
    EXCL_RANGE      reduce using rule 58 (term5 -> term5 LESS term6 .)
    LOGICAL_OR      reduce using rule 58 (term5 -> term5 LESS term6 .)
    BIT_OR          reduce using rule 58 (term5 -> term5 LESS term6 .)
    then            reduce using rule 58 (term5 -> term5 LESS term6 .)
    SEMI_COLON      reduce using rule 58 (term5 -> term5 LESS term6 .)
    NEWLINE         reduce using rule 58 (term5 -> term5 LESS term6 .)
    def             reduce using rule 58 (term5 -> term5 LESS term6 .)
    class           reduce using rule 58 (term5 -> term5 LESS term6 .)
    break           reduce using rule 58 (term5 -> term5 LESS term6 .)
    if              reduce using rule 58 (term5 -> term5 LESS term6 .)
    while           reduce using rule 58 (term5 -> term5 LESS term6 .)
    until           reduce using rule 58 (term5 -> term5 LESS term6 .)
    case            reduce using rule 58 (term5 -> term5 LESS term6 .)
    for             reduce using rule 58 (term5 -> term5 LESS term6 .)
    return          reduce using rule 58 (term5 -> term5 LESS term6 .)
    IDENTIFIER      reduce using rule 58 (term5 -> term5 LESS term6 .)
    OPEN_BRACKET    reduce using rule 58 (term5 -> term5 LESS term6 .)
    CONSTANT_RESOLUTION reduce using rule 58 (term5 -> term5 LESS term6 .)
    OPEN_SQUARE     reduce using rule 58 (term5 -> term5 LESS term6 .)
    OPEN_FLOWER     reduce using rule 58 (term5 -> term5 LESS term6 .)
    nil             reduce using rule 58 (term5 -> term5 LESS term6 .)
    self            reduce using rule 58 (term5 -> term5 LESS term6 .)
    NUMBER          reduce using rule 58 (term5 -> term5 LESS term6 .)
    FLOAT           reduce using rule 58 (term5 -> term5 LESS term6 .)
    STRING          reduce using rule 58 (term5 -> term5 LESS term6 .)
    true            reduce using rule 58 (term5 -> term5 LESS term6 .)
    false           reduce using rule 58 (term5 -> term5 LESS term6 .)
    GLOBAL          reduce using rule 58 (term5 -> term5 LESS term6 .)
    AT_THE_RATE     reduce using rule 58 (term5 -> term5 LESS term6 .)
    MINUS           reduce using rule 58 (term5 -> term5 LESS term6 .)
    PLUS            reduce using rule 58 (term5 -> term5 LESS term6 .)
    $end            reduce using rule 58 (term5 -> term5 LESS term6 .)
    when            reduce using rule 58 (term5 -> term5 LESS term6 .)
    end             reduce using rule 58 (term5 -> term5 LESS term6 .)
    elsif           reduce using rule 58 (term5 -> term5 LESS term6 .)
    else            reduce using rule 58 (term5 -> term5 LESS term6 .)
    do              reduce using rule 58 (term5 -> term5 LESS term6 .)
    CLOSE_BRACKET   reduce using rule 58 (term5 -> term5 LESS term6 .)
    MAP             reduce using rule 58 (term5 -> term5 LESS term6 .)
    COMMA           reduce using rule 58 (term5 -> term5 LESS term6 .)
    CLOSE_SQUARE    reduce using rule 58 (term5 -> term5 LESS term6 .)
    CLOSE_FLOWER    reduce using rule 58 (term5 -> term5 LESS term6 .)
    BIT_XOR         shift and go to state 99


state 180

    (59) term5 -> term5 LESS_EQUALS term6 .
    (63) term6 -> term6 . BIT_XOR term7

    DOUBLE_EQUALS   reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    TRIPLE_EQUALS   reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    NOT_EQUALS      reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    EQUAL_TILDE     reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    BANG_TILDE      reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    COMPARISON      reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    LESS            reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    LESS_EQUALS     reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    GREATER         reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    GREATER_EQUALS  reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    INCL_RANGE      reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    EXCL_RANGE      reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    LOGICAL_OR      reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    BIT_OR          reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    then            reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    SEMI_COLON      reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    NEWLINE         reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    def             reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    class           reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    break           reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    if              reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    while           reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    until           reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    case            reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    for             reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    return          reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    IDENTIFIER      reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    OPEN_BRACKET    reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    CONSTANT_RESOLUTION reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    OPEN_SQUARE     reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    OPEN_FLOWER     reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    nil             reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    self            reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    NUMBER          reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    FLOAT           reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    STRING          reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    true            reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    false           reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    GLOBAL          reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    AT_THE_RATE     reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    MINUS           reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    PLUS            reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    $end            reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    when            reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    end             reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    elsif           reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    else            reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    do              reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    CLOSE_BRACKET   reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    MAP             reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    COMMA           reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    CLOSE_SQUARE    reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    CLOSE_FLOWER    reduce using rule 59 (term5 -> term5 LESS_EQUALS term6 .)
    BIT_XOR         shift and go to state 99


state 181

    (55) term4 -> term5 BANG_TILDE term5 .
    (58) term5 -> term5 . LESS term6
    (59) term5 -> term5 . LESS_EQUALS term6
    (60) term5 -> term5 . GREATER term6
    (61) term5 -> term5 . GREATER_EQUALS term6

    INCL_RANGE      reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    EXCL_RANGE      reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    LOGICAL_OR      reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    BIT_OR          reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    MAP             reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    COMMA           reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    CLOSE_BRACKET   reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    SEMI_COLON      reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    NEWLINE         reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    def             reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    class           reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    break           reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    if              reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    while           reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    until           reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    case            reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    for             reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    return          reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    IDENTIFIER      reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    OPEN_BRACKET    reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    CONSTANT_RESOLUTION reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    OPEN_SQUARE     reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    OPEN_FLOWER     reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    nil             reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    self            reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    NUMBER          reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    FLOAT           reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    STRING          reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    true            reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    false           reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    GLOBAL          reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    AT_THE_RATE     reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    MINUS           reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    PLUS            reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    end             reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    elsif           reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    else            reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    CLOSE_FLOWER    reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    $end            reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    when            reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    do              reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    then            reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    CLOSE_SQUARE    reduce using rule 55 (term4 -> term5 BANG_TILDE term5 .)
    LESS            shift and go to state 104
    LESS_EQUALS     shift and go to state 105
    GREATER         shift and go to state 102
    GREATER_EQUALS  shift and go to state 109


state 182

    (54) term4 -> term5 EQUAL_TILDE term5 .
    (58) term5 -> term5 . LESS term6
    (59) term5 -> term5 . LESS_EQUALS term6
    (60) term5 -> term5 . GREATER term6
    (61) term5 -> term5 . GREATER_EQUALS term6

    INCL_RANGE      reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    EXCL_RANGE      reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    LOGICAL_OR      reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    BIT_OR          reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    MAP             reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    COMMA           reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    CLOSE_BRACKET   reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    SEMI_COLON      reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    NEWLINE         reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    def             reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    class           reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    break           reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    if              reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    while           reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    until           reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    case            reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    for             reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    return          reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    IDENTIFIER      reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    OPEN_BRACKET    reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    CONSTANT_RESOLUTION reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    OPEN_SQUARE     reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    OPEN_FLOWER     reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    nil             reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    self            reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    NUMBER          reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    FLOAT           reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    STRING          reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    true            reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    false           reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    GLOBAL          reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    AT_THE_RATE     reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    MINUS           reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    PLUS            reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    end             reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    elsif           reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    else            reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    CLOSE_FLOWER    reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    $end            reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    when            reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    do              reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    then            reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    CLOSE_SQUARE    reduce using rule 54 (term4 -> term5 EQUAL_TILDE term5 .)
    LESS            shift and go to state 104
    LESS_EQUALS     shift and go to state 105
    GREATER         shift and go to state 102
    GREATER_EQUALS  shift and go to state 109


state 183

    (52) term4 -> term5 TRIPLE_EQUALS term5 .
    (58) term5 -> term5 . LESS term6
    (59) term5 -> term5 . LESS_EQUALS term6
    (60) term5 -> term5 . GREATER term6
    (61) term5 -> term5 . GREATER_EQUALS term6

    INCL_RANGE      reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    EXCL_RANGE      reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    LOGICAL_OR      reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    BIT_OR          reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    MAP             reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    COMMA           reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    CLOSE_BRACKET   reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    SEMI_COLON      reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    NEWLINE         reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    def             reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    class           reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    break           reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    if              reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    while           reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    until           reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    case            reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    for             reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    return          reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    IDENTIFIER      reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    OPEN_BRACKET    reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    CONSTANT_RESOLUTION reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    OPEN_SQUARE     reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    OPEN_FLOWER     reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    nil             reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    self            reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    NUMBER          reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    FLOAT           reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    STRING          reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    true            reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    false           reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    GLOBAL          reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    AT_THE_RATE     reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    MINUS           reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    PLUS            reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    end             reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    elsif           reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    else            reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    CLOSE_FLOWER    reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    $end            reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    when            reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    do              reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    then            reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    CLOSE_SQUARE    reduce using rule 52 (term4 -> term5 TRIPLE_EQUALS term5 .)
    LESS            shift and go to state 104
    LESS_EQUALS     shift and go to state 105
    GREATER         shift and go to state 102
    GREATER_EQUALS  shift and go to state 109


state 184

    (61) term5 -> term5 GREATER_EQUALS term6 .
    (63) term6 -> term6 . BIT_XOR term7

    DOUBLE_EQUALS   reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    TRIPLE_EQUALS   reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    NOT_EQUALS      reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    EQUAL_TILDE     reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    BANG_TILDE      reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    COMPARISON      reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    LESS            reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    LESS_EQUALS     reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    GREATER         reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    GREATER_EQUALS  reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    INCL_RANGE      reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    EXCL_RANGE      reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    LOGICAL_OR      reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    BIT_OR          reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    then            reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    SEMI_COLON      reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    NEWLINE         reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    def             reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    class           reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    break           reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    if              reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    while           reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    until           reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    case            reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    for             reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    return          reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    IDENTIFIER      reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    OPEN_BRACKET    reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    CONSTANT_RESOLUTION reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    OPEN_SQUARE     reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    OPEN_FLOWER     reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    nil             reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    self            reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    NUMBER          reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    FLOAT           reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    STRING          reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    true            reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    false           reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    GLOBAL          reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    AT_THE_RATE     reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    MINUS           reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    PLUS            reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    $end            reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    when            reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    end             reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    elsif           reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    else            reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    do              reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    CLOSE_BRACKET   reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    MAP             reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    COMMA           reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    CLOSE_SQUARE    reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    CLOSE_FLOWER    reduce using rule 61 (term5 -> term5 GREATER_EQUALS term6 .)
    BIT_XOR         shift and go to state 99


state 185

    (46) term2 -> term3 INCL_RANGE term3 .
    (49) term3 -> term3 . LOGICAL_OR term4

    BIT_OR          reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    MAP             reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    COMMA           reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    CLOSE_BRACKET   reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    SEMI_COLON      reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    NEWLINE         reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    def             reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    class           reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    break           reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    if              reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    while           reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    until           reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    case            reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    for             reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    return          reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    IDENTIFIER      reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    OPEN_BRACKET    reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    CONSTANT_RESOLUTION reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    OPEN_SQUARE     reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    OPEN_FLOWER     reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    nil             reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    self            reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    NUMBER          reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    FLOAT           reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    STRING          reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    true            reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    false           reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    GLOBAL          reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    AT_THE_RATE     reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    MINUS           reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    PLUS            reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    $end            reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    when            reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    end             reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    elsif           reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    else            reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    CLOSE_SQUARE    reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    do              reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    then            reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    CLOSE_FLOWER    reduce using rule 46 (term2 -> term3 INCL_RANGE term3 .)
    LOGICAL_OR      shift and go to state 112


state 186

    (47) term2 -> term3 EXCL_RANGE term3 .
    (49) term3 -> term3 . LOGICAL_OR term4

    BIT_OR          reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    MAP             reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    COMMA           reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    CLOSE_BRACKET   reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    SEMI_COLON      reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    NEWLINE         reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    def             reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    class           reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    break           reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    if              reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    while           reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    until           reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    case            reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    for             reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    return          reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    IDENTIFIER      reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    OPEN_BRACKET    reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    CONSTANT_RESOLUTION reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    OPEN_SQUARE     reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    OPEN_FLOWER     reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    nil             reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    self            reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    NUMBER          reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    FLOAT           reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    STRING          reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    true            reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    false           reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    GLOBAL          reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    AT_THE_RATE     reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    MINUS           reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    PLUS            reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    $end            reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    when            reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    end             reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    elsif           reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    else            reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    CLOSE_SQUARE    reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    do              reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    then            reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    CLOSE_FLOWER    reduce using rule 47 (term2 -> term3 EXCL_RANGE term3 .)
    LOGICAL_OR      shift and go to state 112


state 187

    (49) term3 -> term3 LOGICAL_OR term4 .

    INCL_RANGE      reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    EXCL_RANGE      reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    LOGICAL_OR      reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    BIT_OR          reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    SEMI_COLON      reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    NEWLINE         reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    def             reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    class           reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    break           reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    if              reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    while           reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    until           reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    case            reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    for             reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    return          reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    IDENTIFIER      reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    OPEN_BRACKET    reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    CONSTANT_RESOLUTION reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    OPEN_SQUARE     reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    OPEN_FLOWER     reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    nil             reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    self            reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    NUMBER          reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    FLOAT           reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    STRING          reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    true            reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    false           reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    GLOBAL          reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    AT_THE_RATE     reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    MINUS           reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    PLUS            reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    end             reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    CLOSE_BRACKET   reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    COMMA           reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    $end            reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    MAP             reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    when            reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    elsif           reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    else            reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    do              reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    then            reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    CLOSE_SQUARE    reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)
    CLOSE_FLOWER    reduce using rule 49 (term3 -> term3 LOGICAL_OR term4 .)


state 188

    (70) term9 -> term9 PLUS term10 .
    (73) term10 -> term10 . MULTIPLY term11
    (74) term10 -> term10 . DIVIDE term11
    (75) term10 -> term10 . MODULO term11

    PLUS            reduce using rule 70 (term9 -> term9 PLUS term10 .)
    MINUS           reduce using rule 70 (term9 -> term9 PLUS term10 .)
    LEFT_SHIFT      reduce using rule 70 (term9 -> term9 PLUS term10 .)
    RIGHT_SHIFT     reduce using rule 70 (term9 -> term9 PLUS term10 .)
    BIT_AND         reduce using rule 70 (term9 -> term9 PLUS term10 .)
    BIT_XOR         reduce using rule 70 (term9 -> term9 PLUS term10 .)
    DOUBLE_EQUALS   reduce using rule 70 (term9 -> term9 PLUS term10 .)
    TRIPLE_EQUALS   reduce using rule 70 (term9 -> term9 PLUS term10 .)
    NOT_EQUALS      reduce using rule 70 (term9 -> term9 PLUS term10 .)
    EQUAL_TILDE     reduce using rule 70 (term9 -> term9 PLUS term10 .)
    BANG_TILDE      reduce using rule 70 (term9 -> term9 PLUS term10 .)
    COMPARISON      reduce using rule 70 (term9 -> term9 PLUS term10 .)
    LESS            reduce using rule 70 (term9 -> term9 PLUS term10 .)
    LESS_EQUALS     reduce using rule 70 (term9 -> term9 PLUS term10 .)
    GREATER         reduce using rule 70 (term9 -> term9 PLUS term10 .)
    GREATER_EQUALS  reduce using rule 70 (term9 -> term9 PLUS term10 .)
    INCL_RANGE      reduce using rule 70 (term9 -> term9 PLUS term10 .)
    EXCL_RANGE      reduce using rule 70 (term9 -> term9 PLUS term10 .)
    LOGICAL_OR      reduce using rule 70 (term9 -> term9 PLUS term10 .)
    BIT_OR          reduce using rule 70 (term9 -> term9 PLUS term10 .)
    SEMI_COLON      reduce using rule 70 (term9 -> term9 PLUS term10 .)
    NEWLINE         reduce using rule 70 (term9 -> term9 PLUS term10 .)
    def             reduce using rule 70 (term9 -> term9 PLUS term10 .)
    class           reduce using rule 70 (term9 -> term9 PLUS term10 .)
    break           reduce using rule 70 (term9 -> term9 PLUS term10 .)
    if              reduce using rule 70 (term9 -> term9 PLUS term10 .)
    while           reduce using rule 70 (term9 -> term9 PLUS term10 .)
    until           reduce using rule 70 (term9 -> term9 PLUS term10 .)
    case            reduce using rule 70 (term9 -> term9 PLUS term10 .)
    for             reduce using rule 70 (term9 -> term9 PLUS term10 .)
    return          reduce using rule 70 (term9 -> term9 PLUS term10 .)
    IDENTIFIER      reduce using rule 70 (term9 -> term9 PLUS term10 .)
    OPEN_BRACKET    reduce using rule 70 (term9 -> term9 PLUS term10 .)
    CONSTANT_RESOLUTION reduce using rule 70 (term9 -> term9 PLUS term10 .)
    OPEN_SQUARE     reduce using rule 70 (term9 -> term9 PLUS term10 .)
    OPEN_FLOWER     reduce using rule 70 (term9 -> term9 PLUS term10 .)
    nil             reduce using rule 70 (term9 -> term9 PLUS term10 .)
    self            reduce using rule 70 (term9 -> term9 PLUS term10 .)
    NUMBER          reduce using rule 70 (term9 -> term9 PLUS term10 .)
    FLOAT           reduce using rule 70 (term9 -> term9 PLUS term10 .)
    STRING          reduce using rule 70 (term9 -> term9 PLUS term10 .)
    true            reduce using rule 70 (term9 -> term9 PLUS term10 .)
    false           reduce using rule 70 (term9 -> term9 PLUS term10 .)
    GLOBAL          reduce using rule 70 (term9 -> term9 PLUS term10 .)
    AT_THE_RATE     reduce using rule 70 (term9 -> term9 PLUS term10 .)
    $end            reduce using rule 70 (term9 -> term9 PLUS term10 .)
    when            reduce using rule 70 (term9 -> term9 PLUS term10 .)
    end             reduce using rule 70 (term9 -> term9 PLUS term10 .)
    elsif           reduce using rule 70 (term9 -> term9 PLUS term10 .)
    else            reduce using rule 70 (term9 -> term9 PLUS term10 .)
    do              reduce using rule 70 (term9 -> term9 PLUS term10 .)
    then            reduce using rule 70 (term9 -> term9 PLUS term10 .)
    CLOSE_BRACKET   reduce using rule 70 (term9 -> term9 PLUS term10 .)
    MAP             reduce using rule 70 (term9 -> term9 PLUS term10 .)
    COMMA           reduce using rule 70 (term9 -> term9 PLUS term10 .)
    CLOSE_SQUARE    reduce using rule 70 (term9 -> term9 PLUS term10 .)
    CLOSE_FLOWER    reduce using rule 70 (term9 -> term9 PLUS term10 .)
    MULTIPLY        shift and go to state 95
    DIVIDE          shift and go to state 97
    MODULO          shift and go to state 96


state 189

    (71) term9 -> term9 MINUS term10 .
    (73) term10 -> term10 . MULTIPLY term11
    (74) term10 -> term10 . DIVIDE term11
    (75) term10 -> term10 . MODULO term11

    PLUS            reduce using rule 71 (term9 -> term9 MINUS term10 .)
    MINUS           reduce using rule 71 (term9 -> term9 MINUS term10 .)
    LEFT_SHIFT      reduce using rule 71 (term9 -> term9 MINUS term10 .)
    RIGHT_SHIFT     reduce using rule 71 (term9 -> term9 MINUS term10 .)
    BIT_AND         reduce using rule 71 (term9 -> term9 MINUS term10 .)
    BIT_XOR         reduce using rule 71 (term9 -> term9 MINUS term10 .)
    DOUBLE_EQUALS   reduce using rule 71 (term9 -> term9 MINUS term10 .)
    TRIPLE_EQUALS   reduce using rule 71 (term9 -> term9 MINUS term10 .)
    NOT_EQUALS      reduce using rule 71 (term9 -> term9 MINUS term10 .)
    EQUAL_TILDE     reduce using rule 71 (term9 -> term9 MINUS term10 .)
    BANG_TILDE      reduce using rule 71 (term9 -> term9 MINUS term10 .)
    COMPARISON      reduce using rule 71 (term9 -> term9 MINUS term10 .)
    LESS            reduce using rule 71 (term9 -> term9 MINUS term10 .)
    LESS_EQUALS     reduce using rule 71 (term9 -> term9 MINUS term10 .)
    GREATER         reduce using rule 71 (term9 -> term9 MINUS term10 .)
    GREATER_EQUALS  reduce using rule 71 (term9 -> term9 MINUS term10 .)
    INCL_RANGE      reduce using rule 71 (term9 -> term9 MINUS term10 .)
    EXCL_RANGE      reduce using rule 71 (term9 -> term9 MINUS term10 .)
    LOGICAL_OR      reduce using rule 71 (term9 -> term9 MINUS term10 .)
    BIT_OR          reduce using rule 71 (term9 -> term9 MINUS term10 .)
    SEMI_COLON      reduce using rule 71 (term9 -> term9 MINUS term10 .)
    NEWLINE         reduce using rule 71 (term9 -> term9 MINUS term10 .)
    def             reduce using rule 71 (term9 -> term9 MINUS term10 .)
    class           reduce using rule 71 (term9 -> term9 MINUS term10 .)
    break           reduce using rule 71 (term9 -> term9 MINUS term10 .)
    if              reduce using rule 71 (term9 -> term9 MINUS term10 .)
    while           reduce using rule 71 (term9 -> term9 MINUS term10 .)
    until           reduce using rule 71 (term9 -> term9 MINUS term10 .)
    case            reduce using rule 71 (term9 -> term9 MINUS term10 .)
    for             reduce using rule 71 (term9 -> term9 MINUS term10 .)
    return          reduce using rule 71 (term9 -> term9 MINUS term10 .)
    IDENTIFIER      reduce using rule 71 (term9 -> term9 MINUS term10 .)
    OPEN_BRACKET    reduce using rule 71 (term9 -> term9 MINUS term10 .)
    CONSTANT_RESOLUTION reduce using rule 71 (term9 -> term9 MINUS term10 .)
    OPEN_SQUARE     reduce using rule 71 (term9 -> term9 MINUS term10 .)
    OPEN_FLOWER     reduce using rule 71 (term9 -> term9 MINUS term10 .)
    nil             reduce using rule 71 (term9 -> term9 MINUS term10 .)
    self            reduce using rule 71 (term9 -> term9 MINUS term10 .)
    NUMBER          reduce using rule 71 (term9 -> term9 MINUS term10 .)
    FLOAT           reduce using rule 71 (term9 -> term9 MINUS term10 .)
    STRING          reduce using rule 71 (term9 -> term9 MINUS term10 .)
    true            reduce using rule 71 (term9 -> term9 MINUS term10 .)
    false           reduce using rule 71 (term9 -> term9 MINUS term10 .)
    GLOBAL          reduce using rule 71 (term9 -> term9 MINUS term10 .)
    AT_THE_RATE     reduce using rule 71 (term9 -> term9 MINUS term10 .)
    $end            reduce using rule 71 (term9 -> term9 MINUS term10 .)
    when            reduce using rule 71 (term9 -> term9 MINUS term10 .)
    end             reduce using rule 71 (term9 -> term9 MINUS term10 .)
    elsif           reduce using rule 71 (term9 -> term9 MINUS term10 .)
    else            reduce using rule 71 (term9 -> term9 MINUS term10 .)
    do              reduce using rule 71 (term9 -> term9 MINUS term10 .)
    then            reduce using rule 71 (term9 -> term9 MINUS term10 .)
    CLOSE_BRACKET   reduce using rule 71 (term9 -> term9 MINUS term10 .)
    MAP             reduce using rule 71 (term9 -> term9 MINUS term10 .)
    COMMA           reduce using rule 71 (term9 -> term9 MINUS term10 .)
    CLOSE_SQUARE    reduce using rule 71 (term9 -> term9 MINUS term10 .)
    CLOSE_FLOWER    reduce using rule 71 (term9 -> term9 MINUS term10 .)
    MULTIPLY        shift and go to state 95
    DIVIDE          shift and go to state 97
    MODULO          shift and go to state 96


state 190

    (37) arg -> arg BIT_OR term0 .

    BIT_OR          reduce using rule 37 (arg -> arg BIT_OR term0 .)
    SEMI_COLON      reduce using rule 37 (arg -> arg BIT_OR term0 .)
    NEWLINE         reduce using rule 37 (arg -> arg BIT_OR term0 .)
    def             reduce using rule 37 (arg -> arg BIT_OR term0 .)
    class           reduce using rule 37 (arg -> arg BIT_OR term0 .)
    break           reduce using rule 37 (arg -> arg BIT_OR term0 .)
    if              reduce using rule 37 (arg -> arg BIT_OR term0 .)
    while           reduce using rule 37 (arg -> arg BIT_OR term0 .)
    until           reduce using rule 37 (arg -> arg BIT_OR term0 .)
    case            reduce using rule 37 (arg -> arg BIT_OR term0 .)
    for             reduce using rule 37 (arg -> arg BIT_OR term0 .)
    return          reduce using rule 37 (arg -> arg BIT_OR term0 .)
    IDENTIFIER      reduce using rule 37 (arg -> arg BIT_OR term0 .)
    OPEN_BRACKET    reduce using rule 37 (arg -> arg BIT_OR term0 .)
    CONSTANT_RESOLUTION reduce using rule 37 (arg -> arg BIT_OR term0 .)
    OPEN_SQUARE     reduce using rule 37 (arg -> arg BIT_OR term0 .)
    OPEN_FLOWER     reduce using rule 37 (arg -> arg BIT_OR term0 .)
    nil             reduce using rule 37 (arg -> arg BIT_OR term0 .)
    self            reduce using rule 37 (arg -> arg BIT_OR term0 .)
    NUMBER          reduce using rule 37 (arg -> arg BIT_OR term0 .)
    FLOAT           reduce using rule 37 (arg -> arg BIT_OR term0 .)
    STRING          reduce using rule 37 (arg -> arg BIT_OR term0 .)
    true            reduce using rule 37 (arg -> arg BIT_OR term0 .)
    false           reduce using rule 37 (arg -> arg BIT_OR term0 .)
    GLOBAL          reduce using rule 37 (arg -> arg BIT_OR term0 .)
    AT_THE_RATE     reduce using rule 37 (arg -> arg BIT_OR term0 .)
    MINUS           reduce using rule 37 (arg -> arg BIT_OR term0 .)
    PLUS            reduce using rule 37 (arg -> arg BIT_OR term0 .)
    end             reduce using rule 37 (arg -> arg BIT_OR term0 .)
    CLOSE_BRACKET   reduce using rule 37 (arg -> arg BIT_OR term0 .)
    MAP             reduce using rule 37 (arg -> arg BIT_OR term0 .)
    COMMA           reduce using rule 37 (arg -> arg BIT_OR term0 .)
    CLOSE_SQUARE    reduce using rule 37 (arg -> arg BIT_OR term0 .)
    $end            reduce using rule 37 (arg -> arg BIT_OR term0 .)
    when            reduce using rule 37 (arg -> arg BIT_OR term0 .)
    elsif           reduce using rule 37 (arg -> arg BIT_OR term0 .)
    else            reduce using rule 37 (arg -> arg BIT_OR term0 .)
    do              reduce using rule 37 (arg -> arg BIT_OR term0 .)
    then            reduce using rule 37 (arg -> arg BIT_OR term0 .)
    CLOSE_FLOWER    reduce using rule 37 (arg -> arg BIT_OR term0 .)


state 191

    (19) expr -> for mlhs in . expr1 pdo compstmt end
    (21) expr1 -> . return callargs
    (22) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (23) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (24) expr1 -> . return
    (25) expr1 -> . expr2
    (26) expr2 -> . call
    (27) expr2 -> . arg
    (28) call -> . function
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (29) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (30) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) function -> . primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> . primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (33) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> . primary DOT IDENTIFIER
    (36) function -> . primary CONSTANT_RESOLUTION IDENTIFIER
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary

    return          shift and go to state 7
    IDENTIFIER      shift and go to state 35
    OPEN_BRACKET    shift and go to state 5
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 32
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 25
    expr2                          shift and go to state 51
    literal                        shift and go to state 33
    expr1                          shift and go to state 249
    call                           shift and go to state 34
    function                       shift and go to state 38
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 56
    varname                        shift and go to state 30
    lhs                            shift and go to state 59
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 192

    (118) mlhsitem -> OPEN_BRACKET mlhs . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 154


state 193

    (87) primary -> OPEN_SQUARE args CLOSE_SQUARE .

    POWER           reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    MULTIPLY        reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    DIVIDE          reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    MODULO          reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    PLUS            reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    MINUS           reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    LEFT_SHIFT      reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    RIGHT_SHIFT     reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    BIT_AND         reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    BIT_XOR         reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    DOUBLE_EQUALS   reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    TRIPLE_EQUALS   reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    NOT_EQUALS      reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    EQUAL_TILDE     reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    BANG_TILDE      reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    COMPARISON      reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    LESS            reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    LESS_EQUALS     reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    GREATER         reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    GREATER_EQUALS  reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    INCL_RANGE      reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    EXCL_RANGE      reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    LOGICAL_OR      reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    BIT_OR          reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    COMMA           reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    SEMI_COLON      reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    NEWLINE         reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    def             reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    class           reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    break           reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    if              reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    while           reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    until           reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    case            reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    for             reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    return          reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    OPEN_BRACKET    reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    CONSTANT_RESOLUTION reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    OPEN_FLOWER     reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    nil             reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    self            reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    NUMBER          reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    FLOAT           reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    STRING          reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    true            reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    false           reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    GLOBAL          reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    AT_THE_RATE     reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    $end            reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    CLOSE_BRACKET   reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    MAP             reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    when            reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    end             reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    elsif           reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    else            reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    do              reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    then            reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    CLOSE_FLOWER    reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)
    DOT             reduce using rule 87 (primary -> OPEN_SQUARE args CLOSE_SQUARE .)


state 194

    (86) primary -> OPEN_SQUARE args COMMA . CLOSE_SQUARE

    CLOSE_SQUARE    shift and go to state 250


state 195

    (33) function -> primary CONSTANT_RESOLUTION IDENTIFIER . OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> primary CONSTANT_RESOLUTION IDENTIFIER . OPEN_BRACKET CLOSE_BRACKET
    (36) function -> primary CONSTANT_RESOLUTION IDENTIFIER .

  ! shift/reduce conflict for OPEN_BRACKET resolved as shift
    OPEN_BRACKET    shift and go to state 251
    do              reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    SEMI_COLON      reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    NEWLINE         reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    def             reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    class           reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    break           reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    if              reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    while           reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    until           reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    case            reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    for             reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    return          reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    IDENTIFIER      reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    CONSTANT_RESOLUTION reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    OPEN_SQUARE     reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    OPEN_FLOWER     reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    nil             reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    self            reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    NUMBER          reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    FLOAT           reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    STRING          reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    true            reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    false           reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    GLOBAL          reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    AT_THE_RATE     reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    MINUS           reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    PLUS            reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    end             reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    $end            reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    when            reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    elsif           reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    else            reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)
    then            reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .)

  ! OPEN_BRACKET    [ reduce using rule 36 (function -> primary CONSTANT_RESOLUTION IDENTIFIER .) ]


state 196

    (81) term13 -> primary POWER term13 .

    MULTIPLY        reduce using rule 81 (term13 -> primary POWER term13 .)
    DIVIDE          reduce using rule 81 (term13 -> primary POWER term13 .)
    MODULO          reduce using rule 81 (term13 -> primary POWER term13 .)
    PLUS            reduce using rule 81 (term13 -> primary POWER term13 .)
    MINUS           reduce using rule 81 (term13 -> primary POWER term13 .)
    LEFT_SHIFT      reduce using rule 81 (term13 -> primary POWER term13 .)
    RIGHT_SHIFT     reduce using rule 81 (term13 -> primary POWER term13 .)
    BIT_AND         reduce using rule 81 (term13 -> primary POWER term13 .)
    BIT_XOR         reduce using rule 81 (term13 -> primary POWER term13 .)
    DOUBLE_EQUALS   reduce using rule 81 (term13 -> primary POWER term13 .)
    TRIPLE_EQUALS   reduce using rule 81 (term13 -> primary POWER term13 .)
    NOT_EQUALS      reduce using rule 81 (term13 -> primary POWER term13 .)
    EQUAL_TILDE     reduce using rule 81 (term13 -> primary POWER term13 .)
    BANG_TILDE      reduce using rule 81 (term13 -> primary POWER term13 .)
    COMPARISON      reduce using rule 81 (term13 -> primary POWER term13 .)
    LESS            reduce using rule 81 (term13 -> primary POWER term13 .)
    LESS_EQUALS     reduce using rule 81 (term13 -> primary POWER term13 .)
    GREATER         reduce using rule 81 (term13 -> primary POWER term13 .)
    GREATER_EQUALS  reduce using rule 81 (term13 -> primary POWER term13 .)
    INCL_RANGE      reduce using rule 81 (term13 -> primary POWER term13 .)
    EXCL_RANGE      reduce using rule 81 (term13 -> primary POWER term13 .)
    LOGICAL_OR      reduce using rule 81 (term13 -> primary POWER term13 .)
    BIT_OR          reduce using rule 81 (term13 -> primary POWER term13 .)
    do              reduce using rule 81 (term13 -> primary POWER term13 .)
    SEMI_COLON      reduce using rule 81 (term13 -> primary POWER term13 .)
    NEWLINE         reduce using rule 81 (term13 -> primary POWER term13 .)
    def             reduce using rule 81 (term13 -> primary POWER term13 .)
    class           reduce using rule 81 (term13 -> primary POWER term13 .)
    break           reduce using rule 81 (term13 -> primary POWER term13 .)
    if              reduce using rule 81 (term13 -> primary POWER term13 .)
    while           reduce using rule 81 (term13 -> primary POWER term13 .)
    until           reduce using rule 81 (term13 -> primary POWER term13 .)
    case            reduce using rule 81 (term13 -> primary POWER term13 .)
    for             reduce using rule 81 (term13 -> primary POWER term13 .)
    return          reduce using rule 81 (term13 -> primary POWER term13 .)
    IDENTIFIER      reduce using rule 81 (term13 -> primary POWER term13 .)
    OPEN_BRACKET    reduce using rule 81 (term13 -> primary POWER term13 .)
    CONSTANT_RESOLUTION reduce using rule 81 (term13 -> primary POWER term13 .)
    OPEN_SQUARE     reduce using rule 81 (term13 -> primary POWER term13 .)
    OPEN_FLOWER     reduce using rule 81 (term13 -> primary POWER term13 .)
    nil             reduce using rule 81 (term13 -> primary POWER term13 .)
    self            reduce using rule 81 (term13 -> primary POWER term13 .)
    NUMBER          reduce using rule 81 (term13 -> primary POWER term13 .)
    FLOAT           reduce using rule 81 (term13 -> primary POWER term13 .)
    STRING          reduce using rule 81 (term13 -> primary POWER term13 .)
    true            reduce using rule 81 (term13 -> primary POWER term13 .)
    false           reduce using rule 81 (term13 -> primary POWER term13 .)
    GLOBAL          reduce using rule 81 (term13 -> primary POWER term13 .)
    AT_THE_RATE     reduce using rule 81 (term13 -> primary POWER term13 .)
    $end            reduce using rule 81 (term13 -> primary POWER term13 .)
    when            reduce using rule 81 (term13 -> primary POWER term13 .)
    end             reduce using rule 81 (term13 -> primary POWER term13 .)
    elsif           reduce using rule 81 (term13 -> primary POWER term13 .)
    else            reduce using rule 81 (term13 -> primary POWER term13 .)
    MAP             reduce using rule 81 (term13 -> primary POWER term13 .)
    COMMA           reduce using rule 81 (term13 -> primary POWER term13 .)
    CLOSE_FLOWER    reduce using rule 81 (term13 -> primary POWER term13 .)
    CLOSE_BRACKET   reduce using rule 81 (term13 -> primary POWER term13 .)
    then            reduce using rule 81 (term13 -> primary POWER term13 .)
    CLOSE_SQUARE    reduce using rule 81 (term13 -> primary POWER term13 .)


state 197

    (31) function -> primary DOT IDENTIFIER . OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> primary DOT IDENTIFIER . OPEN_BRACKET CLOSE_BRACKET
    (35) function -> primary DOT IDENTIFIER .

  ! shift/reduce conflict for OPEN_BRACKET resolved as shift
    OPEN_BRACKET    shift and go to state 252
    do              reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    SEMI_COLON      reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    NEWLINE         reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    def             reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    class           reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    break           reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    if              reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    while           reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    until           reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    case            reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    for             reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    return          reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    CONSTANT_RESOLUTION reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    OPEN_SQUARE     reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    OPEN_FLOWER     reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    nil             reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    self            reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    NUMBER          reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    FLOAT           reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    STRING          reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    true            reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    false           reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    GLOBAL          reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    AT_THE_RATE     reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    MINUS           reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    PLUS            reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    end             reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    $end            reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    when            reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    elsif           reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    else            reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 35 (function -> primary DOT IDENTIFIER .)
    then            reduce using rule 35 (function -> primary DOT IDENTIFIER .)

  ! OPEN_BRACKET    [ reduce using rule 35 (function -> primary DOT IDENTIFIER .) ]


state 198

    (30) function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .

    do              reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    SEMI_COLON      reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    NEWLINE         reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    def             reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    class           reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    break           reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    if              reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    while           reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    until           reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    case            reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    for             reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    return          reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    CONSTANT_RESOLUTION reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    OPEN_SQUARE     reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    OPEN_FLOWER     reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    nil             reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    self            reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    NUMBER          reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    FLOAT           reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    STRING          reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    true            reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    false           reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    GLOBAL          reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    MINUS           reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    PLUS            reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    end             reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    $end            reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    when            reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    elsif           reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    else            reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    then            reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)


state 199

    (29) function -> IDENTIFIER OPEN_BRACKET callargs . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 253


state 200

    (170) pdo -> do .

    SEMI_COLON      reduce using rule 170 (pdo -> do .)
    NEWLINE         reduce using rule 170 (pdo -> do .)
    def             reduce using rule 170 (pdo -> do .)
    class           reduce using rule 170 (pdo -> do .)
    break           reduce using rule 170 (pdo -> do .)
    if              reduce using rule 170 (pdo -> do .)
    while           reduce using rule 170 (pdo -> do .)
    until           reduce using rule 170 (pdo -> do .)
    case            reduce using rule 170 (pdo -> do .)
    for             reduce using rule 170 (pdo -> do .)
    return          reduce using rule 170 (pdo -> do .)
    IDENTIFIER      reduce using rule 170 (pdo -> do .)
    OPEN_BRACKET    reduce using rule 170 (pdo -> do .)
    CONSTANT_RESOLUTION reduce using rule 170 (pdo -> do .)
    OPEN_SQUARE     reduce using rule 170 (pdo -> do .)
    OPEN_FLOWER     reduce using rule 170 (pdo -> do .)
    nil             reduce using rule 170 (pdo -> do .)
    self            reduce using rule 170 (pdo -> do .)
    NUMBER          reduce using rule 170 (pdo -> do .)
    FLOAT           reduce using rule 170 (pdo -> do .)
    STRING          reduce using rule 170 (pdo -> do .)
    true            reduce using rule 170 (pdo -> do .)
    false           reduce using rule 170 (pdo -> do .)
    GLOBAL          reduce using rule 170 (pdo -> do .)
    AT_THE_RATE     reduce using rule 170 (pdo -> do .)
    MINUS           reduce using rule 170 (pdo -> do .)
    PLUS            reduce using rule 170 (pdo -> do .)
    end             reduce using rule 170 (pdo -> do .)


state 201

    (169) pdo -> newline .
    (171) pdo -> newline . do

    SEMI_COLON      reduce using rule 169 (pdo -> newline .)
    NEWLINE         reduce using rule 169 (pdo -> newline .)
    def             reduce using rule 169 (pdo -> newline .)
    class           reduce using rule 169 (pdo -> newline .)
    break           reduce using rule 169 (pdo -> newline .)
    if              reduce using rule 169 (pdo -> newline .)
    while           reduce using rule 169 (pdo -> newline .)
    until           reduce using rule 169 (pdo -> newline .)
    case            reduce using rule 169 (pdo -> newline .)
    for             reduce using rule 169 (pdo -> newline .)
    return          reduce using rule 169 (pdo -> newline .)
    IDENTIFIER      reduce using rule 169 (pdo -> newline .)
    OPEN_BRACKET    reduce using rule 169 (pdo -> newline .)
    CONSTANT_RESOLUTION reduce using rule 169 (pdo -> newline .)
    OPEN_SQUARE     reduce using rule 169 (pdo -> newline .)
    OPEN_FLOWER     reduce using rule 169 (pdo -> newline .)
    nil             reduce using rule 169 (pdo -> newline .)
    self            reduce using rule 169 (pdo -> newline .)
    NUMBER          reduce using rule 169 (pdo -> newline .)
    FLOAT           reduce using rule 169 (pdo -> newline .)
    STRING          reduce using rule 169 (pdo -> newline .)
    true            reduce using rule 169 (pdo -> newline .)
    false           reduce using rule 169 (pdo -> newline .)
    GLOBAL          reduce using rule 169 (pdo -> newline .)
    AT_THE_RATE     reduce using rule 169 (pdo -> newline .)
    MINUS           reduce using rule 169 (pdo -> newline .)
    PLUS            reduce using rule 169 (pdo -> newline .)
    end             reduce using rule 169 (pdo -> newline .)
    do              shift and go to state 254


state 202

    (16) expr -> until expr1 pdo . compstmt end
    (1) compstmt -> . multcompstmt
    (2) multcompstmt -> . newline stmt multcompstmt
    (3) multcompstmt -> . stmt multcompstmt
    (4) multcompstmt -> . newline
    (5) multcompstmt -> . empty
    (188) newline -> . SEMI_COLON
    (189) newline -> . NEWLINE
    (6) stmt -> . def IDENTIFIER argdecl compstmt end
    (7) stmt -> . def singleton DOT IDENTIFIER argdecl compstmt end
    (8) stmt -> . def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end
    (9) stmt -> . class IDENTIFIER LESS IDENTIFIER compstmt end
    (10) stmt -> . class IDENTIFIER compstmt end
    (11) stmt -> . break
    (12) stmt -> . expr
    (190) empty -> .
    (13) expr -> . if expr1 pthen compstmt end
    (14) expr -> . if expr1 pthen compstmt multelsif else compstmt end
    (15) expr -> . while expr1 pdo compstmt end
    (16) expr -> . until expr1 pdo compstmt end
    (17) expr -> . case compstmt multcase else compstmt end
    (18) expr -> . case compstmt multcase end
    (19) expr -> . for mlhs in expr1 pdo compstmt end
    (20) expr -> . expr1
    (21) expr1 -> . return callargs
    (22) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (23) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (24) expr1 -> . return
    (25) expr1 -> . expr2
    (26) expr2 -> . call
    (27) expr2 -> . arg
    (28) call -> . function
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (29) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (30) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) function -> . primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> . primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (33) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> . primary DOT IDENTIFIER
    (36) function -> . primary CONSTANT_RESOLUTION IDENTIFIER
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary

    SEMI_COLON      shift and go to state 24
    NEWLINE         shift and go to state 4
    def             shift and go to state 45
    class           shift and go to state 57
    break           shift and go to state 9
    end             reduce using rule 190 (empty -> .)
    if              shift and go to state 49
    while           shift and go to state 44
    until           shift and go to state 36
    case            shift and go to state 42
    for             shift and go to state 26
    return          shift and go to state 7
    IDENTIFIER      shift and go to state 35
    OPEN_BRACKET    shift and go to state 5
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 32
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 25
    expr2                          shift and go to state 51
    literal                        shift and go to state 33
    expr1                          shift and go to state 52
    call                           shift and go to state 34
    varname                        shift and go to state 30
    empty                          shift and go to state 37
    function                       shift and go to state 38
    newline                        shift and go to state 55
    multcompstmt                   shift and go to state 8
    stmt                           shift and go to state 27
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 56
    compstmt                       shift and go to state 255
    term5                          shift and go to state 16
    expr                           shift and go to state 43
    lhs                            shift and go to state 59
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 203

    (108) mlhs -> mlhsitem COMMA mlhsitem . multmlhs MULTIPLY lhs
    (109) mlhs -> mlhsitem COMMA mlhsitem . multmlhs MULTIPLY
    (110) mlhs -> mlhsitem COMMA mlhsitem . multmlhs
    (115) multmlhs -> . COMMA mlhsitem multmlhs
    (116) multmlhs -> . empty
    (190) empty -> .

    COMMA           shift and go to state 257
    MULTIPLY        reduce using rule 190 (empty -> .)
    EQUALS          reduce using rule 190 (empty -> .)
    MODULO_EQUALS   reduce using rule 190 (empty -> .)
    DIVIDE_EQUALS   reduce using rule 190 (empty -> .)
    MINUS_EQUALS    reduce using rule 190 (empty -> .)
    PLUS_EQUALS     reduce using rule 190 (empty -> .)
    OR_EQUALS       reduce using rule 190 (empty -> .)
    AND_EQUALS      reduce using rule 190 (empty -> .)
    XOR_EQUALS      reduce using rule 190 (empty -> .)
    RIGHT_SHIFT_EQUALS reduce using rule 190 (empty -> .)
    LEFT_SHIFT_EQUALS reduce using rule 190 (empty -> .)
    MULTIPLY_EQUALS reduce using rule 190 (empty -> .)
    LOGICAL_AND_EQUALS reduce using rule 190 (empty -> .)
    LOGICAL_OR_EQUALS reduce using rule 190 (empty -> .)
    POWER_EQUALS    reduce using rule 190 (empty -> .)
    CLOSE_BRACKET   reduce using rule 190 (empty -> .)
    in              reduce using rule 190 (empty -> .)

    empty                          shift and go to state 258
    multmlhs                       shift and go to state 256

state 204

    (111) mlhs -> mlhsitem COMMA MULTIPLY . lhs
    (112) mlhs -> mlhsitem COMMA MULTIPLY .
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    CLOSE_BRACKET   reduce using rule 112 (mlhs -> mlhsitem COMMA MULTIPLY .)
    EQUALS          reduce using rule 112 (mlhs -> mlhsitem COMMA MULTIPLY .)
    MODULO_EQUALS   reduce using rule 112 (mlhs -> mlhsitem COMMA MULTIPLY .)
    DIVIDE_EQUALS   reduce using rule 112 (mlhs -> mlhsitem COMMA MULTIPLY .)
    MINUS_EQUALS    reduce using rule 112 (mlhs -> mlhsitem COMMA MULTIPLY .)
    PLUS_EQUALS     reduce using rule 112 (mlhs -> mlhsitem COMMA MULTIPLY .)
    OR_EQUALS       reduce using rule 112 (mlhs -> mlhsitem COMMA MULTIPLY .)
    AND_EQUALS      reduce using rule 112 (mlhs -> mlhsitem COMMA MULTIPLY .)
    XOR_EQUALS      reduce using rule 112 (mlhs -> mlhsitem COMMA MULTIPLY .)
    RIGHT_SHIFT_EQUALS reduce using rule 112 (mlhs -> mlhsitem COMMA MULTIPLY .)
    LEFT_SHIFT_EQUALS reduce using rule 112 (mlhs -> mlhsitem COMMA MULTIPLY .)
    MULTIPLY_EQUALS reduce using rule 112 (mlhs -> mlhsitem COMMA MULTIPLY .)
    LOGICAL_AND_EQUALS reduce using rule 112 (mlhs -> mlhsitem COMMA MULTIPLY .)
    LOGICAL_OR_EQUALS reduce using rule 112 (mlhs -> mlhsitem COMMA MULTIPLY .)
    POWER_EQUALS    reduce using rule 112 (mlhs -> mlhsitem COMMA MULTIPLY .)
    in              reduce using rule 112 (mlhs -> mlhsitem COMMA MULTIPLY .)
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    variable                       shift and go to state 119
    varname                        shift and go to state 30
    lhs                            shift and go to state 259

state 205

    (68) term8 -> term8 RIGHT_SHIFT term9 .
    (70) term9 -> term9 . PLUS term10
    (71) term9 -> term9 . MINUS term10

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LEFT_SHIFT      reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    RIGHT_SHIFT     reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    BIT_AND         reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    BIT_XOR         reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    LESS            reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    LESS_EQUALS     reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    GREATER         reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    GREATER_EQUALS  reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    INCL_RANGE      reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    EXCL_RANGE      reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    LOGICAL_OR      reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    BIT_OR          reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    SEMI_COLON      reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    NEWLINE         reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    def             reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    class           reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    break           reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    if              reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    while           reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    until           reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    case            reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    for             reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    return          reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    IDENTIFIER      reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    OPEN_BRACKET    reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    CONSTANT_RESOLUTION reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    OPEN_SQUARE     reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    OPEN_FLOWER     reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    nil             reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    self            reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    NUMBER          reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    FLOAT           reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    STRING          reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    true            reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    false           reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    GLOBAL          reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    AT_THE_RATE     reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    $end            reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    CLOSE_BRACKET   reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    MAP             reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    COMMA           reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    when            reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    end             reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    elsif           reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    else            reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    do              reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    then            reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    CLOSE_SQUARE    reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    CLOSE_FLOWER    reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    DOUBLE_EQUALS   reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    TRIPLE_EQUALS   reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    NOT_EQUALS      reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    EQUAL_TILDE     reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    BANG_TILDE      reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    COMPARISON      reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .)
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114

  ! MINUS           [ reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .) ]
  ! PLUS            [ reduce using rule 68 (term8 -> term8 RIGHT_SHIFT term9 .) ]


state 206

    (67) term8 -> term8 LEFT_SHIFT term9 .
    (70) term9 -> term9 . PLUS term10
    (71) term9 -> term9 . MINUS term10

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LEFT_SHIFT      reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    RIGHT_SHIFT     reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    BIT_AND         reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    BIT_XOR         reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    LESS            reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    LESS_EQUALS     reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    GREATER         reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    GREATER_EQUALS  reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    INCL_RANGE      reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    EXCL_RANGE      reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    LOGICAL_OR      reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    BIT_OR          reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    SEMI_COLON      reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    NEWLINE         reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    def             reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    class           reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    break           reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    if              reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    while           reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    until           reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    case            reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    for             reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    return          reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    IDENTIFIER      reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    OPEN_BRACKET    reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    CONSTANT_RESOLUTION reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    OPEN_SQUARE     reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    OPEN_FLOWER     reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    nil             reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    self            reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    NUMBER          reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    FLOAT           reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    STRING          reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    true            reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    false           reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    GLOBAL          reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    AT_THE_RATE     reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    $end            reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    CLOSE_BRACKET   reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    MAP             reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    COMMA           reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    when            reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    end             reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    elsif           reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    else            reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    do              reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    then            reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    CLOSE_SQUARE    reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    CLOSE_FLOWER    reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    DOUBLE_EQUALS   reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    TRIPLE_EQUALS   reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    NOT_EQUALS      reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    EQUAL_TILDE     reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    BANG_TILDE      reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    COMPARISON      reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .)
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114

  ! MINUS           [ reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .) ]
  ! PLUS            [ reduce using rule 67 (term8 -> term8 LEFT_SHIFT term9 .) ]


state 207

    (96) multcase -> when . whenargs pthen compstmt multcase
    (97) multcase -> when . whenargs pthen compstmt
    (105) whenargs -> . args COMMA MULTIPLY arg
    (106) whenargs -> . args
    (107) whenargs -> . MULTIPLY arg
    (140) args -> . arg multargs
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    MULTIPLY        shift and go to state 260
    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 122
    whenargs                       shift and go to state 261
    literal                        shift and go to state 33
    args                           shift and go to state 262
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 208

    (17) expr -> case compstmt multcase . else compstmt end
    (18) expr -> case compstmt multcase . end

    else            shift and go to state 264
    end             shift and go to state 263


state 209

    (15) expr -> while expr1 pdo . compstmt end
    (1) compstmt -> . multcompstmt
    (2) multcompstmt -> . newline stmt multcompstmt
    (3) multcompstmt -> . stmt multcompstmt
    (4) multcompstmt -> . newline
    (5) multcompstmt -> . empty
    (188) newline -> . SEMI_COLON
    (189) newline -> . NEWLINE
    (6) stmt -> . def IDENTIFIER argdecl compstmt end
    (7) stmt -> . def singleton DOT IDENTIFIER argdecl compstmt end
    (8) stmt -> . def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end
    (9) stmt -> . class IDENTIFIER LESS IDENTIFIER compstmt end
    (10) stmt -> . class IDENTIFIER compstmt end
    (11) stmt -> . break
    (12) stmt -> . expr
    (190) empty -> .
    (13) expr -> . if expr1 pthen compstmt end
    (14) expr -> . if expr1 pthen compstmt multelsif else compstmt end
    (15) expr -> . while expr1 pdo compstmt end
    (16) expr -> . until expr1 pdo compstmt end
    (17) expr -> . case compstmt multcase else compstmt end
    (18) expr -> . case compstmt multcase end
    (19) expr -> . for mlhs in expr1 pdo compstmt end
    (20) expr -> . expr1
    (21) expr1 -> . return callargs
    (22) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (23) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (24) expr1 -> . return
    (25) expr1 -> . expr2
    (26) expr2 -> . call
    (27) expr2 -> . arg
    (28) call -> . function
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (29) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (30) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) function -> . primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> . primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (33) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> . primary DOT IDENTIFIER
    (36) function -> . primary CONSTANT_RESOLUTION IDENTIFIER
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary

    SEMI_COLON      shift and go to state 24
    NEWLINE         shift and go to state 4
    def             shift and go to state 45
    class           shift and go to state 57
    break           shift and go to state 9
    end             reduce using rule 190 (empty -> .)
    if              shift and go to state 49
    while           shift and go to state 44
    until           shift and go to state 36
    case            shift and go to state 42
    for             shift and go to state 26
    return          shift and go to state 7
    IDENTIFIER      shift and go to state 35
    OPEN_BRACKET    shift and go to state 5
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 32
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 25
    expr2                          shift and go to state 51
    literal                        shift and go to state 33
    expr1                          shift and go to state 52
    call                           shift and go to state 34
    varname                        shift and go to state 30
    empty                          shift and go to state 37
    function                       shift and go to state 38
    newline                        shift and go to state 55
    multcompstmt                   shift and go to state 8
    stmt                           shift and go to state 27
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 56
    compstmt                       shift and go to state 265
    term5                          shift and go to state 16
    expr                           shift and go to state 43
    lhs                            shift and go to state 59
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 210

    (8) stmt -> def singleton CONSTANT_RESOLUTION . IDENTIFIER argdecl compstmt end

    IDENTIFIER      shift and go to state 266


state 211

    (7) stmt -> def singleton DOT . IDENTIFIER argdecl compstmt end

    IDENTIFIER      shift and go to state 267


state 212

    (158) singleton -> OPEN_BRACKET expr . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 268


state 213

    (6) stmt -> def IDENTIFIER argdecl . compstmt end
    (1) compstmt -> . multcompstmt
    (2) multcompstmt -> . newline stmt multcompstmt
    (3) multcompstmt -> . stmt multcompstmt
    (4) multcompstmt -> . newline
    (5) multcompstmt -> . empty
    (188) newline -> . SEMI_COLON
    (189) newline -> . NEWLINE
    (6) stmt -> . def IDENTIFIER argdecl compstmt end
    (7) stmt -> . def singleton DOT IDENTIFIER argdecl compstmt end
    (8) stmt -> . def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end
    (9) stmt -> . class IDENTIFIER LESS IDENTIFIER compstmt end
    (10) stmt -> . class IDENTIFIER compstmt end
    (11) stmt -> . break
    (12) stmt -> . expr
    (190) empty -> .
    (13) expr -> . if expr1 pthen compstmt end
    (14) expr -> . if expr1 pthen compstmt multelsif else compstmt end
    (15) expr -> . while expr1 pdo compstmt end
    (16) expr -> . until expr1 pdo compstmt end
    (17) expr -> . case compstmt multcase else compstmt end
    (18) expr -> . case compstmt multcase end
    (19) expr -> . for mlhs in expr1 pdo compstmt end
    (20) expr -> . expr1
    (21) expr1 -> . return callargs
    (22) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (23) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (24) expr1 -> . return
    (25) expr1 -> . expr2
    (26) expr2 -> . call
    (27) expr2 -> . arg
    (28) call -> . function
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (29) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (30) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) function -> . primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> . primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (33) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> . primary DOT IDENTIFIER
    (36) function -> . primary CONSTANT_RESOLUTION IDENTIFIER
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary

    SEMI_COLON      shift and go to state 24
    NEWLINE         shift and go to state 4
    def             shift and go to state 45
    class           shift and go to state 57
    break           shift and go to state 9
    end             reduce using rule 190 (empty -> .)
    if              shift and go to state 49
    while           shift and go to state 44
    until           shift and go to state 36
    case            shift and go to state 42
    for             shift and go to state 26
    return          shift and go to state 7
    IDENTIFIER      shift and go to state 35
    OPEN_BRACKET    shift and go to state 5
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 32
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 25
    expr2                          shift and go to state 51
    literal                        shift and go to state 33
    expr1                          shift and go to state 52
    call                           shift and go to state 34
    varname                        shift and go to state 30
    empty                          shift and go to state 37
    function                       shift and go to state 38
    newline                        shift and go to state 55
    multcompstmt                   shift and go to state 8
    stmt                           shift and go to state 27
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 56
    compstmt                       shift and go to state 269
    term5                          shift and go to state 16
    expr                           shift and go to state 43
    lhs                            shift and go to state 59
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 214

    (153) arglist -> BIT_AND . IDENTIFIER

    IDENTIFIER      shift and go to state 270


state 215

    (143) argdecl -> OPEN_BRACKET . arglist CLOSE_BRACKET
    (145) arglist -> . IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER
    (146) arglist -> . IDENTIFIER multarglist COMMA MULTIPLY COMMA BIT_AND IDENTIFIER
    (147) arglist -> . IDENTIFIER multarglist COMMA BIT_AND IDENTIFIER
    (148) arglist -> . IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER
    (149) arglist -> . IDENTIFIER multarglist COMMA MULTIPLY
    (150) arglist -> . IDENTIFIER multarglist
    (151) arglist -> . MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER
    (152) arglist -> . MULTIPLY IDENTIFIER
    (153) arglist -> . BIT_AND IDENTIFIER
    (154) arglist -> . empty
    (190) empty -> .

    IDENTIFIER      shift and go to state 219
    MULTIPLY        shift and go to state 218
    BIT_AND         shift and go to state 214
    CLOSE_BRACKET   reduce using rule 190 (empty -> .)

    arglist                        shift and go to state 271
    empty                          shift and go to state 217

state 216

    (144) argdecl -> arglist . newline
    (188) newline -> . SEMI_COLON
    (189) newline -> . NEWLINE

    SEMI_COLON      shift and go to state 24
    NEWLINE         shift and go to state 4

    newline                        shift and go to state 272

state 217

    (154) arglist -> empty .

    SEMI_COLON      reduce using rule 154 (arglist -> empty .)
    NEWLINE         reduce using rule 154 (arglist -> empty .)
    CLOSE_BRACKET   reduce using rule 154 (arglist -> empty .)


state 218

    (151) arglist -> MULTIPLY . IDENTIFIER COMMA BIT_AND IDENTIFIER
    (152) arglist -> MULTIPLY . IDENTIFIER

    IDENTIFIER      shift and go to state 273


state 219

    (145) arglist -> IDENTIFIER . multarglist COMMA MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER
    (146) arglist -> IDENTIFIER . multarglist COMMA MULTIPLY COMMA BIT_AND IDENTIFIER
    (147) arglist -> IDENTIFIER . multarglist COMMA BIT_AND IDENTIFIER
    (148) arglist -> IDENTIFIER . multarglist COMMA MULTIPLY IDENTIFIER
    (149) arglist -> IDENTIFIER . multarglist COMMA MULTIPLY
    (150) arglist -> IDENTIFIER . multarglist
    (155) multarglist -> . COMMA IDENTIFIER multarglist
    (156) multarglist -> . empty
    (190) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 275
    SEMI_COLON      reduce using rule 190 (empty -> .)
    NEWLINE         reduce using rule 190 (empty -> .)
    CLOSE_BRACKET   reduce using rule 190 (empty -> .)

  ! COMMA           [ reduce using rule 190 (empty -> .) ]

    multarglist                    shift and go to state 274
    empty                          shift and go to state 276

state 220

    (93) primary -> OPEN_FLOWER assocs CLOSE_FLOWER .

    POWER           reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    MULTIPLY        reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    DIVIDE          reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    MODULO          reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    PLUS            reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    MINUS           reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    LEFT_SHIFT      reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    RIGHT_SHIFT     reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    BIT_AND         reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    BIT_XOR         reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    DOUBLE_EQUALS   reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    TRIPLE_EQUALS   reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    NOT_EQUALS      reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    EQUAL_TILDE     reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    BANG_TILDE      reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    COMPARISON      reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    LESS            reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    LESS_EQUALS     reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    GREATER         reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    GREATER_EQUALS  reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    INCL_RANGE      reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    EXCL_RANGE      reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    LOGICAL_OR      reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    BIT_OR          reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    COMMA           reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    SEMI_COLON      reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    NEWLINE         reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    def             reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    class           reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    break           reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    if              reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    while           reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    until           reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    case            reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    for             reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    return          reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    IDENTIFIER      reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    OPEN_BRACKET    reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    CONSTANT_RESOLUTION reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    OPEN_SQUARE     reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    OPEN_FLOWER     reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    nil             reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    self            reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    NUMBER          reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    FLOAT           reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    STRING          reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    true            reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    false           reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    GLOBAL          reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    AT_THE_RATE     reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    $end            reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    CLOSE_BRACKET   reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    MAP             reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    when            reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    end             reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    elsif           reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    else            reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    do              reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    then            reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    CLOSE_SQUARE    reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    CLOSE_FLOWER    reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)
    DOT             reduce using rule 93 (primary -> OPEN_FLOWER assocs CLOSE_FLOWER .)


state 221

    (92) primary -> OPEN_FLOWER assocs COMMA . CLOSE_FLOWER

    CLOSE_FLOWER    shift and go to state 277


state 222

    (90) primary -> OPEN_FLOWER args CLOSE_FLOWER .

    POWER           reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    MULTIPLY        reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    DIVIDE          reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    MODULO          reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    PLUS            reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    MINUS           reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    LEFT_SHIFT      reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    RIGHT_SHIFT     reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    BIT_AND         reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    BIT_XOR         reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    DOUBLE_EQUALS   reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    TRIPLE_EQUALS   reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    NOT_EQUALS      reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    EQUAL_TILDE     reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    BANG_TILDE      reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    COMPARISON      reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    LESS            reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    LESS_EQUALS     reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    GREATER         reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    GREATER_EQUALS  reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    INCL_RANGE      reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    EXCL_RANGE      reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    LOGICAL_OR      reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    BIT_OR          reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    COMMA           reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    SEMI_COLON      reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    NEWLINE         reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    def             reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    class           reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    break           reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    if              reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    while           reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    until           reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    case            reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    for             reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    return          reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    IDENTIFIER      reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    OPEN_BRACKET    reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    CONSTANT_RESOLUTION reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    OPEN_SQUARE     reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    OPEN_FLOWER     reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    nil             reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    self            reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    NUMBER          reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    FLOAT           reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    STRING          reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    true            reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    false           reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    GLOBAL          reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    AT_THE_RATE     reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    $end            reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    CLOSE_BRACKET   reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    MAP             reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    when            reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    end             reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    elsif           reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    else            reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    do              reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    then            reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    CLOSE_SQUARE    reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    CLOSE_FLOWER    reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)
    DOT             reduce using rule 90 (primary -> OPEN_FLOWER args CLOSE_FLOWER .)


state 223

    (89) primary -> OPEN_FLOWER args COMMA . CLOSE_FLOWER

    CLOSE_FLOWER    shift and go to state 278


state 224

    (167) pthen -> then .

    SEMI_COLON      reduce using rule 167 (pthen -> then .)
    NEWLINE         reduce using rule 167 (pthen -> then .)
    def             reduce using rule 167 (pthen -> then .)
    class           reduce using rule 167 (pthen -> then .)
    break           reduce using rule 167 (pthen -> then .)
    if              reduce using rule 167 (pthen -> then .)
    while           reduce using rule 167 (pthen -> then .)
    until           reduce using rule 167 (pthen -> then .)
    case            reduce using rule 167 (pthen -> then .)
    for             reduce using rule 167 (pthen -> then .)
    return          reduce using rule 167 (pthen -> then .)
    IDENTIFIER      reduce using rule 167 (pthen -> then .)
    OPEN_BRACKET    reduce using rule 167 (pthen -> then .)
    CONSTANT_RESOLUTION reduce using rule 167 (pthen -> then .)
    OPEN_SQUARE     reduce using rule 167 (pthen -> then .)
    OPEN_FLOWER     reduce using rule 167 (pthen -> then .)
    nil             reduce using rule 167 (pthen -> then .)
    self            reduce using rule 167 (pthen -> then .)
    NUMBER          reduce using rule 167 (pthen -> then .)
    FLOAT           reduce using rule 167 (pthen -> then .)
    STRING          reduce using rule 167 (pthen -> then .)
    true            reduce using rule 167 (pthen -> then .)
    false           reduce using rule 167 (pthen -> then .)
    GLOBAL          reduce using rule 167 (pthen -> then .)
    AT_THE_RATE     reduce using rule 167 (pthen -> then .)
    MINUS           reduce using rule 167 (pthen -> then .)
    PLUS            reduce using rule 167 (pthen -> then .)
    elsif           reduce using rule 167 (pthen -> then .)
    else            reduce using rule 167 (pthen -> then .)
    end             reduce using rule 167 (pthen -> then .)
    when            reduce using rule 167 (pthen -> then .)


state 225

    (166) pthen -> newline .
    (168) pthen -> newline . then

    SEMI_COLON      reduce using rule 166 (pthen -> newline .)
    NEWLINE         reduce using rule 166 (pthen -> newline .)
    def             reduce using rule 166 (pthen -> newline .)
    class           reduce using rule 166 (pthen -> newline .)
    break           reduce using rule 166 (pthen -> newline .)
    if              reduce using rule 166 (pthen -> newline .)
    while           reduce using rule 166 (pthen -> newline .)
    until           reduce using rule 166 (pthen -> newline .)
    case            reduce using rule 166 (pthen -> newline .)
    for             reduce using rule 166 (pthen -> newline .)
    return          reduce using rule 166 (pthen -> newline .)
    IDENTIFIER      reduce using rule 166 (pthen -> newline .)
    OPEN_BRACKET    reduce using rule 166 (pthen -> newline .)
    CONSTANT_RESOLUTION reduce using rule 166 (pthen -> newline .)
    OPEN_SQUARE     reduce using rule 166 (pthen -> newline .)
    OPEN_FLOWER     reduce using rule 166 (pthen -> newline .)
    nil             reduce using rule 166 (pthen -> newline .)
    self            reduce using rule 166 (pthen -> newline .)
    NUMBER          reduce using rule 166 (pthen -> newline .)
    FLOAT           reduce using rule 166 (pthen -> newline .)
    STRING          reduce using rule 166 (pthen -> newline .)
    true            reduce using rule 166 (pthen -> newline .)
    false           reduce using rule 166 (pthen -> newline .)
    GLOBAL          reduce using rule 166 (pthen -> newline .)
    AT_THE_RATE     reduce using rule 166 (pthen -> newline .)
    MINUS           reduce using rule 166 (pthen -> newline .)
    PLUS            reduce using rule 166 (pthen -> newline .)
    elsif           reduce using rule 166 (pthen -> newline .)
    else            reduce using rule 166 (pthen -> newline .)
    end             reduce using rule 166 (pthen -> newline .)
    when            reduce using rule 166 (pthen -> newline .)
    then            shift and go to state 279


state 226

    (13) expr -> if expr1 pthen . compstmt end
    (14) expr -> if expr1 pthen . compstmt multelsif else compstmt end
    (1) compstmt -> . multcompstmt
    (2) multcompstmt -> . newline stmt multcompstmt
    (3) multcompstmt -> . stmt multcompstmt
    (4) multcompstmt -> . newline
    (5) multcompstmt -> . empty
    (188) newline -> . SEMI_COLON
    (189) newline -> . NEWLINE
    (6) stmt -> . def IDENTIFIER argdecl compstmt end
    (7) stmt -> . def singleton DOT IDENTIFIER argdecl compstmt end
    (8) stmt -> . def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end
    (9) stmt -> . class IDENTIFIER LESS IDENTIFIER compstmt end
    (10) stmt -> . class IDENTIFIER compstmt end
    (11) stmt -> . break
    (12) stmt -> . expr
    (190) empty -> .
    (13) expr -> . if expr1 pthen compstmt end
    (14) expr -> . if expr1 pthen compstmt multelsif else compstmt end
    (15) expr -> . while expr1 pdo compstmt end
    (16) expr -> . until expr1 pdo compstmt end
    (17) expr -> . case compstmt multcase else compstmt end
    (18) expr -> . case compstmt multcase end
    (19) expr -> . for mlhs in expr1 pdo compstmt end
    (20) expr -> . expr1
    (21) expr1 -> . return callargs
    (22) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (23) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (24) expr1 -> . return
    (25) expr1 -> . expr2
    (26) expr2 -> . call
    (27) expr2 -> . arg
    (28) call -> . function
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (29) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (30) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) function -> . primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> . primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (33) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> . primary DOT IDENTIFIER
    (36) function -> . primary CONSTANT_RESOLUTION IDENTIFIER
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary

    SEMI_COLON      shift and go to state 24
    NEWLINE         shift and go to state 4
    def             shift and go to state 45
    class           shift and go to state 57
    break           shift and go to state 9
    end             reduce using rule 190 (empty -> .)
    elsif           reduce using rule 190 (empty -> .)
    else            reduce using rule 190 (empty -> .)
    if              shift and go to state 49
    while           shift and go to state 44
    until           shift and go to state 36
    case            shift and go to state 42
    for             shift and go to state 26
    return          shift and go to state 7
    IDENTIFIER      shift and go to state 35
    OPEN_BRACKET    shift and go to state 5
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 32
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 25
    expr2                          shift and go to state 51
    literal                        shift and go to state 33
    expr1                          shift and go to state 52
    call                           shift and go to state 34
    varname                        shift and go to state 30
    empty                          shift and go to state 37
    function                       shift and go to state 38
    newline                        shift and go to state 55
    multcompstmt                   shift and go to state 8
    stmt                           shift and go to state 27
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 56
    compstmt                       shift and go to state 280
    term5                          shift and go to state 16
    expr                           shift and go to state 43
    lhs                            shift and go to state 59
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 227

    (2) multcompstmt -> newline stmt multcompstmt .

    end             reduce using rule 2 (multcompstmt -> newline stmt multcompstmt .)
    elsif           reduce using rule 2 (multcompstmt -> newline stmt multcompstmt .)
    else            reduce using rule 2 (multcompstmt -> newline stmt multcompstmt .)
    $end            reduce using rule 2 (multcompstmt -> newline stmt multcompstmt .)
    when            reduce using rule 2 (multcompstmt -> newline stmt multcompstmt .)


state 228

    (84) primary -> variable CONSTANT_RESOLUTION IDENTIFIER .

    POWER           reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    MULTIPLY        reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    DIVIDE          reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    MODULO          reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    PLUS            reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    MINUS           reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    BIT_AND         reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    BIT_XOR         reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    DOUBLE_EQUALS   reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    TRIPLE_EQUALS   reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    NOT_EQUALS      reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    EQUAL_TILDE     reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    BANG_TILDE      reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    COMPARISON      reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    LESS            reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    LESS_EQUALS     reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    GREATER         reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    INCL_RANGE      reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    EXCL_RANGE      reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    LOGICAL_OR      reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    BIT_OR          reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    COMMA           reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    SEMI_COLON      reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    NEWLINE         reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    def             reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    class           reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    break           reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    if              reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    while           reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    until           reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    case            reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    for             reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    return          reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    IDENTIFIER      reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    OPEN_BRACKET    reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    CONSTANT_RESOLUTION reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    OPEN_SQUARE     reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    OPEN_FLOWER     reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    nil             reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    self            reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    NUMBER          reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    FLOAT           reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    STRING          reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    true            reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    false           reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    GLOBAL          reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    AT_THE_RATE     reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    $end            reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    MAP             reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    when            reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    end             reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    elsif           reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    else            reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    do              reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    then            reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    CLOSE_SQUARE    reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    CLOSE_FLOWER    reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    DOT             reduce using rule 84 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)


state 229

    (121) lhs -> variable OPEN_SQUARE CLOSE_SQUARE .

    POWER           reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    MULTIPLY        reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    DIVIDE          reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    MODULO          reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    PLUS            reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    MINUS           reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    LEFT_SHIFT      reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    RIGHT_SHIFT     reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    BIT_AND         reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    BIT_XOR         reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    DOUBLE_EQUALS   reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    TRIPLE_EQUALS   reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    NOT_EQUALS      reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    EQUAL_TILDE     reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    BANG_TILDE      reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    COMPARISON      reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    LESS            reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    LESS_EQUALS     reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    GREATER         reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    GREATER_EQUALS  reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    LOGICAL_OR      reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    BIT_OR          reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    SEMI_COLON      reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    NEWLINE         reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    def             reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    class           reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    break           reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    if              reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    while           reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    until           reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    case            reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    for             reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    return          reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    OPEN_BRACKET    reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    CONSTANT_RESOLUTION reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    OPEN_FLOWER     reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    nil             reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    self            reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    NUMBER          reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    FLOAT           reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    STRING          reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    true            reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    false           reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    GLOBAL          reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    AT_THE_RATE     reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    $end            reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    CLOSE_BRACKET   reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    MAP             reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    COMMA           reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    when            reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    end             reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    elsif           reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    else            reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    do              reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    then            reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    CLOSE_FLOWER    reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    INCL_RANGE      reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    EXCL_RANGE      reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    EQUALS          reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    MODULO_EQUALS   reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    DIVIDE_EQUALS   reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    MINUS_EQUALS    reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    PLUS_EQUALS     reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    OR_EQUALS       reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    AND_EQUALS      reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    XOR_EQUALS      reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    RIGHT_SHIFT_EQUALS reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    LEFT_SHIFT_EQUALS reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    MULTIPLY_EQUALS reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    LOGICAL_AND_EQUALS reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    LOGICAL_OR_EQUALS reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    POWER_EQUALS    reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    DOT             reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)
    in              reduce using rule 121 (lhs -> variable OPEN_SQUARE CLOSE_SQUARE .)


state 230

    (120) lhs -> variable OPEN_SQUARE args . CLOSE_SQUARE

    CLOSE_SQUARE    shift and go to state 281


state 231

    (122) lhs -> variable DOT IDENTIFIER .

    POWER           reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    MULTIPLY        reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    DIVIDE          reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    MODULO          reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    PLUS            reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    MINUS           reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    BIT_AND         reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    BIT_XOR         reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    DOUBLE_EQUALS   reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    TRIPLE_EQUALS   reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    NOT_EQUALS      reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    EQUAL_TILDE     reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    BANG_TILDE      reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    COMPARISON      reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    LESS            reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    LESS_EQUALS     reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    GREATER         reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    LOGICAL_OR      reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    BIT_OR          reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    SEMI_COLON      reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    NEWLINE         reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    def             reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    class           reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    break           reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    if              reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    while           reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    until           reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    case            reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    for             reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    return          reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    OPEN_BRACKET    reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    CONSTANT_RESOLUTION reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    OPEN_SQUARE     reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    OPEN_FLOWER     reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    nil             reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    self            reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    NUMBER          reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    FLOAT           reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    STRING          reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    true            reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    false           reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    GLOBAL          reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    AT_THE_RATE     reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    $end            reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    MAP             reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    COMMA           reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    when            reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    end             reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    elsif           reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    else            reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    do              reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    then            reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    CLOSE_SQUARE    reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    CLOSE_FLOWER    reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    INCL_RANGE      reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    EXCL_RANGE      reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    EQUALS          reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    MODULO_EQUALS   reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    DIVIDE_EQUALS   reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    MINUS_EQUALS    reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    PLUS_EQUALS     reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    OR_EQUALS       reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    AND_EQUALS      reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    XOR_EQUALS      reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    RIGHT_SHIFT_EQUALS reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    LEFT_SHIFT_EQUALS reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    MULTIPLY_EQUALS reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    LOGICAL_AND_EQUALS reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    LOGICAL_OR_EQUALS reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    POWER_EQUALS    reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    DOT             reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)
    in              reduce using rule 122 (lhs -> variable DOT IDENTIFIER .)


state 232

    (9) stmt -> class IDENTIFIER LESS . IDENTIFIER compstmt end

    IDENTIFIER      shift and go to state 282


state 233

    (10) stmt -> class IDENTIFIER compstmt . end

    end             shift and go to state 283


state 234

    (125) mrhs -> MULTIPLY arg .
    (37) arg -> arg . BIT_OR term0

  ! shift/reduce conflict for BIT_OR resolved as shift
    COMMA           reduce using rule 125 (mrhs -> MULTIPLY arg .)
    SEMI_COLON      reduce using rule 125 (mrhs -> MULTIPLY arg .)
    NEWLINE         reduce using rule 125 (mrhs -> MULTIPLY arg .)
    def             reduce using rule 125 (mrhs -> MULTIPLY arg .)
    class           reduce using rule 125 (mrhs -> MULTIPLY arg .)
    break           reduce using rule 125 (mrhs -> MULTIPLY arg .)
    if              reduce using rule 125 (mrhs -> MULTIPLY arg .)
    while           reduce using rule 125 (mrhs -> MULTIPLY arg .)
    until           reduce using rule 125 (mrhs -> MULTIPLY arg .)
    case            reduce using rule 125 (mrhs -> MULTIPLY arg .)
    for             reduce using rule 125 (mrhs -> MULTIPLY arg .)
    return          reduce using rule 125 (mrhs -> MULTIPLY arg .)
    IDENTIFIER      reduce using rule 125 (mrhs -> MULTIPLY arg .)
    OPEN_BRACKET    reduce using rule 125 (mrhs -> MULTIPLY arg .)
    CONSTANT_RESOLUTION reduce using rule 125 (mrhs -> MULTIPLY arg .)
    OPEN_SQUARE     reduce using rule 125 (mrhs -> MULTIPLY arg .)
    OPEN_FLOWER     reduce using rule 125 (mrhs -> MULTIPLY arg .)
    nil             reduce using rule 125 (mrhs -> MULTIPLY arg .)
    self            reduce using rule 125 (mrhs -> MULTIPLY arg .)
    NUMBER          reduce using rule 125 (mrhs -> MULTIPLY arg .)
    FLOAT           reduce using rule 125 (mrhs -> MULTIPLY arg .)
    STRING          reduce using rule 125 (mrhs -> MULTIPLY arg .)
    true            reduce using rule 125 (mrhs -> MULTIPLY arg .)
    false           reduce using rule 125 (mrhs -> MULTIPLY arg .)
    GLOBAL          reduce using rule 125 (mrhs -> MULTIPLY arg .)
    AT_THE_RATE     reduce using rule 125 (mrhs -> MULTIPLY arg .)
    MINUS           reduce using rule 125 (mrhs -> MULTIPLY arg .)
    PLUS            reduce using rule 125 (mrhs -> MULTIPLY arg .)
    $end            reduce using rule 125 (mrhs -> MULTIPLY arg .)
    CLOSE_BRACKET   reduce using rule 125 (mrhs -> MULTIPLY arg .)
    MAP             reduce using rule 125 (mrhs -> MULTIPLY arg .)
    when            reduce using rule 125 (mrhs -> MULTIPLY arg .)
    end             reduce using rule 125 (mrhs -> MULTIPLY arg .)
    elsif           reduce using rule 125 (mrhs -> MULTIPLY arg .)
    else            reduce using rule 125 (mrhs -> MULTIPLY arg .)
    do              reduce using rule 125 (mrhs -> MULTIPLY arg .)
    then            reduce using rule 125 (mrhs -> MULTIPLY arg .)
    CLOSE_SQUARE    reduce using rule 125 (mrhs -> MULTIPLY arg .)
    CLOSE_FLOWER    reduce using rule 125 (mrhs -> MULTIPLY arg .)
    BIT_OR          shift and go to state 116

  ! BIT_OR          [ reduce using rule 125 (mrhs -> MULTIPLY arg .) ]


state 235

    (39) term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET . CLOSE_BRACKET
    (40) term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET . callargs CLOSE_BRACKET
    (126) callargs -> . args
    (127) callargs -> . args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg
    (128) callargs -> . args COMMA MULTIPLY arg COMMA BIT_AND arg
    (129) callargs -> . args COMMA assocs COMMA BIT_AND arg
    (130) callargs -> . args COMMA assocs COMMA MULTIPLY arg
    (131) callargs -> . args COMMA assocs
    (132) callargs -> . args COMMA MULTIPLY arg
    (133) callargs -> . args COMMA BIT_AND arg
    (134) callargs -> . assocs COMMA MULTIPLY arg COMMA BIT_AND arg
    (135) callargs -> . assocs COMMA MULTIPLY arg
    (136) callargs -> . assocs COMMA BIT_AND arg
    (137) callargs -> . assocs
    (138) callargs -> . MULTIPLY arg COMMA BIT_AND arg
    (139) callargs -> . BIT_AND arg
    (140) args -> . arg multargs
    (159) assocs -> . assoc multassocs
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (162) assoc -> . arg MAP arg
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    CLOSE_BRACKET   shift and go to state 284
    MULTIPLY        shift and go to state 88
    BIT_AND         shift and go to state 91
    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 87
    literal                        shift and go to state 33
    assocs                         shift and go to state 90
    args                           shift and go to state 92
    assoc                          shift and go to state 93
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    callargs                       shift and go to state 285
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 236

    (124) mrhs -> args COMMA . MULTIPLY arg

    MULTIPLY        shift and go to state 286


state 237

    (41) term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET . callargs CLOSE_BRACKET
    (126) callargs -> . args
    (127) callargs -> . args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg
    (128) callargs -> . args COMMA MULTIPLY arg COMMA BIT_AND arg
    (129) callargs -> . args COMMA assocs COMMA BIT_AND arg
    (130) callargs -> . args COMMA assocs COMMA MULTIPLY arg
    (131) callargs -> . args COMMA assocs
    (132) callargs -> . args COMMA MULTIPLY arg
    (133) callargs -> . args COMMA BIT_AND arg
    (134) callargs -> . assocs COMMA MULTIPLY arg COMMA BIT_AND arg
    (135) callargs -> . assocs COMMA MULTIPLY arg
    (136) callargs -> . assocs COMMA BIT_AND arg
    (137) callargs -> . assocs
    (138) callargs -> . MULTIPLY arg COMMA BIT_AND arg
    (139) callargs -> . BIT_AND arg
    (140) args -> . arg multargs
    (159) assocs -> . assoc multassocs
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (162) assoc -> . arg MAP arg
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    MULTIPLY        shift and go to state 88
    BIT_AND         shift and go to state 91
    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 87
    literal                        shift and go to state 33
    assocs                         shift and go to state 90
    args                           shift and go to state 92
    assoc                          shift and go to state 93
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    callargs                       shift and go to state 287
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 238

    (162) assoc -> arg MAP arg .
    (37) arg -> arg . BIT_OR term0

    COMMA           reduce using rule 162 (assoc -> arg MAP arg .)
    CLOSE_BRACKET   reduce using rule 162 (assoc -> arg MAP arg .)
    CLOSE_FLOWER    reduce using rule 162 (assoc -> arg MAP arg .)
    SEMI_COLON      reduce using rule 162 (assoc -> arg MAP arg .)
    NEWLINE         reduce using rule 162 (assoc -> arg MAP arg .)
    def             reduce using rule 162 (assoc -> arg MAP arg .)
    class           reduce using rule 162 (assoc -> arg MAP arg .)
    break           reduce using rule 162 (assoc -> arg MAP arg .)
    if              reduce using rule 162 (assoc -> arg MAP arg .)
    while           reduce using rule 162 (assoc -> arg MAP arg .)
    until           reduce using rule 162 (assoc -> arg MAP arg .)
    case            reduce using rule 162 (assoc -> arg MAP arg .)
    for             reduce using rule 162 (assoc -> arg MAP arg .)
    return          reduce using rule 162 (assoc -> arg MAP arg .)
    IDENTIFIER      reduce using rule 162 (assoc -> arg MAP arg .)
    OPEN_BRACKET    reduce using rule 162 (assoc -> arg MAP arg .)
    CONSTANT_RESOLUTION reduce using rule 162 (assoc -> arg MAP arg .)
    OPEN_SQUARE     reduce using rule 162 (assoc -> arg MAP arg .)
    OPEN_FLOWER     reduce using rule 162 (assoc -> arg MAP arg .)
    nil             reduce using rule 162 (assoc -> arg MAP arg .)
    self            reduce using rule 162 (assoc -> arg MAP arg .)
    NUMBER          reduce using rule 162 (assoc -> arg MAP arg .)
    FLOAT           reduce using rule 162 (assoc -> arg MAP arg .)
    STRING          reduce using rule 162 (assoc -> arg MAP arg .)
    true            reduce using rule 162 (assoc -> arg MAP arg .)
    false           reduce using rule 162 (assoc -> arg MAP arg .)
    GLOBAL          reduce using rule 162 (assoc -> arg MAP arg .)
    AT_THE_RATE     reduce using rule 162 (assoc -> arg MAP arg .)
    MINUS           reduce using rule 162 (assoc -> arg MAP arg .)
    PLUS            reduce using rule 162 (assoc -> arg MAP arg .)
    $end            reduce using rule 162 (assoc -> arg MAP arg .)
    when            reduce using rule 162 (assoc -> arg MAP arg .)
    end             reduce using rule 162 (assoc -> arg MAP arg .)
    elsif           reduce using rule 162 (assoc -> arg MAP arg .)
    else            reduce using rule 162 (assoc -> arg MAP arg .)
    do              reduce using rule 162 (assoc -> arg MAP arg .)
    then            reduce using rule 162 (assoc -> arg MAP arg .)
    BIT_OR          shift and go to state 116


state 239

    (141) multargs -> COMMA arg . multargs
    (37) arg -> arg . BIT_OR term0
    (141) multargs -> . COMMA arg multargs
    (142) multargs -> . empty
    (190) empty -> .

  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    BIT_OR          shift and go to state 116
    COMMA           shift and go to state 157
    SEMI_COLON      reduce using rule 190 (empty -> .)
    NEWLINE         reduce using rule 190 (empty -> .)
    def             reduce using rule 190 (empty -> .)
    class           reduce using rule 190 (empty -> .)
    break           reduce using rule 190 (empty -> .)
    if              reduce using rule 190 (empty -> .)
    while           reduce using rule 190 (empty -> .)
    until           reduce using rule 190 (empty -> .)
    case            reduce using rule 190 (empty -> .)
    for             reduce using rule 190 (empty -> .)
    return          reduce using rule 190 (empty -> .)
    IDENTIFIER      reduce using rule 190 (empty -> .)
    OPEN_BRACKET    reduce using rule 190 (empty -> .)
    CONSTANT_RESOLUTION reduce using rule 190 (empty -> .)
    OPEN_SQUARE     reduce using rule 190 (empty -> .)
    OPEN_FLOWER     reduce using rule 190 (empty -> .)
    nil             reduce using rule 190 (empty -> .)
    self            reduce using rule 190 (empty -> .)
    NUMBER          reduce using rule 190 (empty -> .)
    FLOAT           reduce using rule 190 (empty -> .)
    STRING          reduce using rule 190 (empty -> .)
    true            reduce using rule 190 (empty -> .)
    false           reduce using rule 190 (empty -> .)
    GLOBAL          reduce using rule 190 (empty -> .)
    AT_THE_RATE     reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    PLUS            reduce using rule 190 (empty -> .)
    $end            reduce using rule 190 (empty -> .)
    CLOSE_BRACKET   reduce using rule 190 (empty -> .)
    MAP             reduce using rule 190 (empty -> .)
    when            reduce using rule 190 (empty -> .)
    end             reduce using rule 190 (empty -> .)
    elsif           reduce using rule 190 (empty -> .)
    else            reduce using rule 190 (empty -> .)
    do              reduce using rule 190 (empty -> .)
    then            reduce using rule 190 (empty -> .)
    CLOSE_SQUARE    reduce using rule 190 (empty -> .)
    CLOSE_FLOWER    reduce using rule 190 (empty -> .)

  ! BIT_OR          [ reduce using rule 190 (empty -> .) ]
  ! COMMA           [ reduce using rule 190 (empty -> .) ]

    multargs                       shift and go to state 288
    empty                          shift and go to state 159

state 240

    (138) callargs -> MULTIPLY arg COMMA . BIT_AND arg

    BIT_AND         shift and go to state 289


state 241

    (22) expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .

    SEMI_COLON      reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    NEWLINE         reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    def             reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    class           reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    break           reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    if              reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    while           reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    until           reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    case            reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    for             reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    return          reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    CONSTANT_RESOLUTION reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    OPEN_SQUARE     reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    OPEN_FLOWER     reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    nil             reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    self            reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    NUMBER          reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    FLOAT           reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    STRING          reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    true            reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    false           reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    GLOBAL          reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    MINUS           reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    PLUS            reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    end             reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    $end            reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    when            reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    elsif           reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    else            reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    do              reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    then            reduce using rule 22 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)


state 242

    (134) callargs -> assocs COMMA MULTIPLY . arg COMMA BIT_AND arg
    (135) callargs -> assocs COMMA MULTIPLY . arg
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 290
    literal                        shift and go to state 33
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 243

    (136) callargs -> assocs COMMA BIT_AND . arg
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 291
    literal                        shift and go to state 33
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 244

    (162) assoc -> arg . MAP arg
    (37) arg -> arg . BIT_OR term0

    MAP             shift and go to state 156
    BIT_OR          shift and go to state 116


state 245

    (128) callargs -> args COMMA MULTIPLY . arg COMMA BIT_AND arg
    (132) callargs -> args COMMA MULTIPLY . arg
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 292
    literal                        shift and go to state 33
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 246

    (127) callargs -> args COMMA assocs . COMMA MULTIPLY arg COMMA BIT_AND arg
    (129) callargs -> args COMMA assocs . COMMA BIT_AND arg
    (130) callargs -> args COMMA assocs . COMMA MULTIPLY arg
    (131) callargs -> args COMMA assocs .

    COMMA           shift and go to state 293
    CLOSE_BRACKET   reduce using rule 131 (callargs -> args COMMA assocs .)
    SEMI_COLON      reduce using rule 131 (callargs -> args COMMA assocs .)
    NEWLINE         reduce using rule 131 (callargs -> args COMMA assocs .)
    def             reduce using rule 131 (callargs -> args COMMA assocs .)
    class           reduce using rule 131 (callargs -> args COMMA assocs .)
    break           reduce using rule 131 (callargs -> args COMMA assocs .)
    if              reduce using rule 131 (callargs -> args COMMA assocs .)
    while           reduce using rule 131 (callargs -> args COMMA assocs .)
    until           reduce using rule 131 (callargs -> args COMMA assocs .)
    case            reduce using rule 131 (callargs -> args COMMA assocs .)
    for             reduce using rule 131 (callargs -> args COMMA assocs .)
    return          reduce using rule 131 (callargs -> args COMMA assocs .)
    IDENTIFIER      reduce using rule 131 (callargs -> args COMMA assocs .)
    OPEN_BRACKET    reduce using rule 131 (callargs -> args COMMA assocs .)
    CONSTANT_RESOLUTION reduce using rule 131 (callargs -> args COMMA assocs .)
    OPEN_SQUARE     reduce using rule 131 (callargs -> args COMMA assocs .)
    OPEN_FLOWER     reduce using rule 131 (callargs -> args COMMA assocs .)
    nil             reduce using rule 131 (callargs -> args COMMA assocs .)
    self            reduce using rule 131 (callargs -> args COMMA assocs .)
    NUMBER          reduce using rule 131 (callargs -> args COMMA assocs .)
    FLOAT           reduce using rule 131 (callargs -> args COMMA assocs .)
    STRING          reduce using rule 131 (callargs -> args COMMA assocs .)
    true            reduce using rule 131 (callargs -> args COMMA assocs .)
    false           reduce using rule 131 (callargs -> args COMMA assocs .)
    GLOBAL          reduce using rule 131 (callargs -> args COMMA assocs .)
    AT_THE_RATE     reduce using rule 131 (callargs -> args COMMA assocs .)
    MINUS           reduce using rule 131 (callargs -> args COMMA assocs .)
    PLUS            reduce using rule 131 (callargs -> args COMMA assocs .)
    $end            reduce using rule 131 (callargs -> args COMMA assocs .)
    when            reduce using rule 131 (callargs -> args COMMA assocs .)
    end             reduce using rule 131 (callargs -> args COMMA assocs .)
    elsif           reduce using rule 131 (callargs -> args COMMA assocs .)
    else            reduce using rule 131 (callargs -> args COMMA assocs .)
    do              reduce using rule 131 (callargs -> args COMMA assocs .)
    then            reduce using rule 131 (callargs -> args COMMA assocs .)


state 247

    (133) callargs -> args COMMA BIT_AND . arg
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 294
    literal                        shift and go to state 33
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 248

    (160) multassocs -> COMMA assoc . multassocs
    (160) multassocs -> . COMMA assoc multassocs
    (161) multassocs -> . empty
    (190) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 168
    SEMI_COLON      reduce using rule 190 (empty -> .)
    NEWLINE         reduce using rule 190 (empty -> .)
    def             reduce using rule 190 (empty -> .)
    class           reduce using rule 190 (empty -> .)
    break           reduce using rule 190 (empty -> .)
    if              reduce using rule 190 (empty -> .)
    while           reduce using rule 190 (empty -> .)
    until           reduce using rule 190 (empty -> .)
    case            reduce using rule 190 (empty -> .)
    for             reduce using rule 190 (empty -> .)
    return          reduce using rule 190 (empty -> .)
    IDENTIFIER      reduce using rule 190 (empty -> .)
    OPEN_BRACKET    reduce using rule 190 (empty -> .)
    CONSTANT_RESOLUTION reduce using rule 190 (empty -> .)
    OPEN_SQUARE     reduce using rule 190 (empty -> .)
    OPEN_FLOWER     reduce using rule 190 (empty -> .)
    nil             reduce using rule 190 (empty -> .)
    self            reduce using rule 190 (empty -> .)
    NUMBER          reduce using rule 190 (empty -> .)
    FLOAT           reduce using rule 190 (empty -> .)
    STRING          reduce using rule 190 (empty -> .)
    true            reduce using rule 190 (empty -> .)
    false           reduce using rule 190 (empty -> .)
    GLOBAL          reduce using rule 190 (empty -> .)
    AT_THE_RATE     reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    PLUS            reduce using rule 190 (empty -> .)
    $end            reduce using rule 190 (empty -> .)
    when            reduce using rule 190 (empty -> .)
    end             reduce using rule 190 (empty -> .)
    elsif           reduce using rule 190 (empty -> .)
    else            reduce using rule 190 (empty -> .)
    do              reduce using rule 190 (empty -> .)
    then            reduce using rule 190 (empty -> .)
    CLOSE_BRACKET   reduce using rule 190 (empty -> .)
    CLOSE_FLOWER    reduce using rule 190 (empty -> .)

  ! COMMA           [ reduce using rule 190 (empty -> .) ]

    multassocs                     shift and go to state 295
    empty                          shift and go to state 169

state 249

    (19) expr -> for mlhs in expr1 . pdo compstmt end
    (169) pdo -> . newline
    (170) pdo -> . do
    (171) pdo -> . newline do
    (188) newline -> . SEMI_COLON
    (189) newline -> . NEWLINE

    do              shift and go to state 200
    SEMI_COLON      shift and go to state 24
    NEWLINE         shift and go to state 4

    pdo                            shift and go to state 296
    newline                        shift and go to state 201

state 250

    (86) primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .

    POWER           reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    MULTIPLY        reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    DIVIDE          reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    MODULO          reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    PLUS            reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    MINUS           reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    LEFT_SHIFT      reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    RIGHT_SHIFT     reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    BIT_AND         reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    BIT_XOR         reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    DOUBLE_EQUALS   reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    TRIPLE_EQUALS   reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    NOT_EQUALS      reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    EQUAL_TILDE     reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    BANG_TILDE      reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    COMPARISON      reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    LESS            reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    LESS_EQUALS     reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    GREATER         reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    GREATER_EQUALS  reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    INCL_RANGE      reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    EXCL_RANGE      reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    LOGICAL_OR      reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    BIT_OR          reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    COMMA           reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    SEMI_COLON      reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    NEWLINE         reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    def             reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    class           reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    break           reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    if              reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    while           reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    until           reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    case            reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    for             reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    return          reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    OPEN_BRACKET    reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    CONSTANT_RESOLUTION reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    OPEN_FLOWER     reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    nil             reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    self            reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    NUMBER          reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    FLOAT           reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    STRING          reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    true            reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    false           reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    GLOBAL          reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    AT_THE_RATE     reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    $end            reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    CLOSE_BRACKET   reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    MAP             reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    when            reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    end             reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    elsif           reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    else            reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    do              reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    then            reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    CLOSE_FLOWER    reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)
    DOT             reduce using rule 86 (primary -> OPEN_SQUARE args COMMA CLOSE_SQUARE .)


state 251

    (33) function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET . callargs CLOSE_BRACKET
    (34) function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET . CLOSE_BRACKET
    (126) callargs -> . args
    (127) callargs -> . args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg
    (128) callargs -> . args COMMA MULTIPLY arg COMMA BIT_AND arg
    (129) callargs -> . args COMMA assocs COMMA BIT_AND arg
    (130) callargs -> . args COMMA assocs COMMA MULTIPLY arg
    (131) callargs -> . args COMMA assocs
    (132) callargs -> . args COMMA MULTIPLY arg
    (133) callargs -> . args COMMA BIT_AND arg
    (134) callargs -> . assocs COMMA MULTIPLY arg COMMA BIT_AND arg
    (135) callargs -> . assocs COMMA MULTIPLY arg
    (136) callargs -> . assocs COMMA BIT_AND arg
    (137) callargs -> . assocs
    (138) callargs -> . MULTIPLY arg COMMA BIT_AND arg
    (139) callargs -> . BIT_AND arg
    (140) args -> . arg multargs
    (159) assocs -> . assoc multassocs
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (162) assoc -> . arg MAP arg
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    CLOSE_BRACKET   shift and go to state 297
    MULTIPLY        shift and go to state 88
    BIT_AND         shift and go to state 91
    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 87
    literal                        shift and go to state 33
    assocs                         shift and go to state 90
    args                           shift and go to state 92
    assoc                          shift and go to state 93
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    callargs                       shift and go to state 298
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 252

    (31) function -> primary DOT IDENTIFIER OPEN_BRACKET . callargs CLOSE_BRACKET
    (32) function -> primary DOT IDENTIFIER OPEN_BRACKET . CLOSE_BRACKET
    (126) callargs -> . args
    (127) callargs -> . args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg
    (128) callargs -> . args COMMA MULTIPLY arg COMMA BIT_AND arg
    (129) callargs -> . args COMMA assocs COMMA BIT_AND arg
    (130) callargs -> . args COMMA assocs COMMA MULTIPLY arg
    (131) callargs -> . args COMMA assocs
    (132) callargs -> . args COMMA MULTIPLY arg
    (133) callargs -> . args COMMA BIT_AND arg
    (134) callargs -> . assocs COMMA MULTIPLY arg COMMA BIT_AND arg
    (135) callargs -> . assocs COMMA MULTIPLY arg
    (136) callargs -> . assocs COMMA BIT_AND arg
    (137) callargs -> . assocs
    (138) callargs -> . MULTIPLY arg COMMA BIT_AND arg
    (139) callargs -> . BIT_AND arg
    (140) args -> . arg multargs
    (159) assocs -> . assoc multassocs
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (162) assoc -> . arg MAP arg
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    CLOSE_BRACKET   shift and go to state 299
    MULTIPLY        shift and go to state 88
    BIT_AND         shift and go to state 91
    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 87
    literal                        shift and go to state 33
    assocs                         shift and go to state 90
    args                           shift and go to state 92
    assoc                          shift and go to state 93
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    callargs                       shift and go to state 300
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 253

    (29) function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .

    do              reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    SEMI_COLON      reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    NEWLINE         reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    def             reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    class           reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    break           reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    if              reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    while           reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    until           reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    case            reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    for             reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    return          reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    CONSTANT_RESOLUTION reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    OPEN_SQUARE     reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    OPEN_FLOWER     reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    nil             reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    self            reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    NUMBER          reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    FLOAT           reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    STRING          reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    true            reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    false           reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    GLOBAL          reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    MINUS           reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    PLUS            reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    end             reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    $end            reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    when            reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    elsif           reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    else            reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    then            reduce using rule 29 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)


state 254

    (171) pdo -> newline do .

    SEMI_COLON      reduce using rule 171 (pdo -> newline do .)
    NEWLINE         reduce using rule 171 (pdo -> newline do .)
    def             reduce using rule 171 (pdo -> newline do .)
    class           reduce using rule 171 (pdo -> newline do .)
    break           reduce using rule 171 (pdo -> newline do .)
    if              reduce using rule 171 (pdo -> newline do .)
    while           reduce using rule 171 (pdo -> newline do .)
    until           reduce using rule 171 (pdo -> newline do .)
    case            reduce using rule 171 (pdo -> newline do .)
    for             reduce using rule 171 (pdo -> newline do .)
    return          reduce using rule 171 (pdo -> newline do .)
    IDENTIFIER      reduce using rule 171 (pdo -> newline do .)
    OPEN_BRACKET    reduce using rule 171 (pdo -> newline do .)
    CONSTANT_RESOLUTION reduce using rule 171 (pdo -> newline do .)
    OPEN_SQUARE     reduce using rule 171 (pdo -> newline do .)
    OPEN_FLOWER     reduce using rule 171 (pdo -> newline do .)
    nil             reduce using rule 171 (pdo -> newline do .)
    self            reduce using rule 171 (pdo -> newline do .)
    NUMBER          reduce using rule 171 (pdo -> newline do .)
    FLOAT           reduce using rule 171 (pdo -> newline do .)
    STRING          reduce using rule 171 (pdo -> newline do .)
    true            reduce using rule 171 (pdo -> newline do .)
    false           reduce using rule 171 (pdo -> newline do .)
    GLOBAL          reduce using rule 171 (pdo -> newline do .)
    AT_THE_RATE     reduce using rule 171 (pdo -> newline do .)
    MINUS           reduce using rule 171 (pdo -> newline do .)
    PLUS            reduce using rule 171 (pdo -> newline do .)
    end             reduce using rule 171 (pdo -> newline do .)


state 255

    (16) expr -> until expr1 pdo compstmt . end

    end             shift and go to state 301


state 256

    (108) mlhs -> mlhsitem COMMA mlhsitem multmlhs . MULTIPLY lhs
    (109) mlhs -> mlhsitem COMMA mlhsitem multmlhs . MULTIPLY
    (110) mlhs -> mlhsitem COMMA mlhsitem multmlhs .

    MULTIPLY        shift and go to state 302
    CLOSE_BRACKET   reduce using rule 110 (mlhs -> mlhsitem COMMA mlhsitem multmlhs .)
    EQUALS          reduce using rule 110 (mlhs -> mlhsitem COMMA mlhsitem multmlhs .)
    MODULO_EQUALS   reduce using rule 110 (mlhs -> mlhsitem COMMA mlhsitem multmlhs .)
    DIVIDE_EQUALS   reduce using rule 110 (mlhs -> mlhsitem COMMA mlhsitem multmlhs .)
    MINUS_EQUALS    reduce using rule 110 (mlhs -> mlhsitem COMMA mlhsitem multmlhs .)
    PLUS_EQUALS     reduce using rule 110 (mlhs -> mlhsitem COMMA mlhsitem multmlhs .)
    OR_EQUALS       reduce using rule 110 (mlhs -> mlhsitem COMMA mlhsitem multmlhs .)
    AND_EQUALS      reduce using rule 110 (mlhs -> mlhsitem COMMA mlhsitem multmlhs .)
    XOR_EQUALS      reduce using rule 110 (mlhs -> mlhsitem COMMA mlhsitem multmlhs .)
    RIGHT_SHIFT_EQUALS reduce using rule 110 (mlhs -> mlhsitem COMMA mlhsitem multmlhs .)
    LEFT_SHIFT_EQUALS reduce using rule 110 (mlhs -> mlhsitem COMMA mlhsitem multmlhs .)
    MULTIPLY_EQUALS reduce using rule 110 (mlhs -> mlhsitem COMMA mlhsitem multmlhs .)
    LOGICAL_AND_EQUALS reduce using rule 110 (mlhs -> mlhsitem COMMA mlhsitem multmlhs .)
    LOGICAL_OR_EQUALS reduce using rule 110 (mlhs -> mlhsitem COMMA mlhsitem multmlhs .)
    POWER_EQUALS    reduce using rule 110 (mlhs -> mlhsitem COMMA mlhsitem multmlhs .)
    in              reduce using rule 110 (mlhs -> mlhsitem COMMA mlhsitem multmlhs .)


state 257

    (115) multmlhs -> COMMA . mlhsitem multmlhs
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    OPEN_BRACKET    shift and go to state 118
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    varname                        shift and go to state 30
    lhs                            shift and go to state 120
    mlhsitem                       shift and go to state 303
    variable                       shift and go to state 119

state 258

    (116) multmlhs -> empty .

    MULTIPLY        reduce using rule 116 (multmlhs -> empty .)
    EQUALS          reduce using rule 116 (multmlhs -> empty .)
    MODULO_EQUALS   reduce using rule 116 (multmlhs -> empty .)
    DIVIDE_EQUALS   reduce using rule 116 (multmlhs -> empty .)
    MINUS_EQUALS    reduce using rule 116 (multmlhs -> empty .)
    PLUS_EQUALS     reduce using rule 116 (multmlhs -> empty .)
    OR_EQUALS       reduce using rule 116 (multmlhs -> empty .)
    AND_EQUALS      reduce using rule 116 (multmlhs -> empty .)
    XOR_EQUALS      reduce using rule 116 (multmlhs -> empty .)
    RIGHT_SHIFT_EQUALS reduce using rule 116 (multmlhs -> empty .)
    LEFT_SHIFT_EQUALS reduce using rule 116 (multmlhs -> empty .)
    MULTIPLY_EQUALS reduce using rule 116 (multmlhs -> empty .)
    LOGICAL_AND_EQUALS reduce using rule 116 (multmlhs -> empty .)
    LOGICAL_OR_EQUALS reduce using rule 116 (multmlhs -> empty .)
    POWER_EQUALS    reduce using rule 116 (multmlhs -> empty .)
    CLOSE_BRACKET   reduce using rule 116 (multmlhs -> empty .)
    in              reduce using rule 116 (multmlhs -> empty .)


state 259

    (111) mlhs -> mlhsitem COMMA MULTIPLY lhs .

    CLOSE_BRACKET   reduce using rule 111 (mlhs -> mlhsitem COMMA MULTIPLY lhs .)
    EQUALS          reduce using rule 111 (mlhs -> mlhsitem COMMA MULTIPLY lhs .)
    MODULO_EQUALS   reduce using rule 111 (mlhs -> mlhsitem COMMA MULTIPLY lhs .)
    DIVIDE_EQUALS   reduce using rule 111 (mlhs -> mlhsitem COMMA MULTIPLY lhs .)
    MINUS_EQUALS    reduce using rule 111 (mlhs -> mlhsitem COMMA MULTIPLY lhs .)
    PLUS_EQUALS     reduce using rule 111 (mlhs -> mlhsitem COMMA MULTIPLY lhs .)
    OR_EQUALS       reduce using rule 111 (mlhs -> mlhsitem COMMA MULTIPLY lhs .)
    AND_EQUALS      reduce using rule 111 (mlhs -> mlhsitem COMMA MULTIPLY lhs .)
    XOR_EQUALS      reduce using rule 111 (mlhs -> mlhsitem COMMA MULTIPLY lhs .)
    RIGHT_SHIFT_EQUALS reduce using rule 111 (mlhs -> mlhsitem COMMA MULTIPLY lhs .)
    LEFT_SHIFT_EQUALS reduce using rule 111 (mlhs -> mlhsitem COMMA MULTIPLY lhs .)
    MULTIPLY_EQUALS reduce using rule 111 (mlhs -> mlhsitem COMMA MULTIPLY lhs .)
    LOGICAL_AND_EQUALS reduce using rule 111 (mlhs -> mlhsitem COMMA MULTIPLY lhs .)
    LOGICAL_OR_EQUALS reduce using rule 111 (mlhs -> mlhsitem COMMA MULTIPLY lhs .)
    POWER_EQUALS    reduce using rule 111 (mlhs -> mlhsitem COMMA MULTIPLY lhs .)
    in              reduce using rule 111 (mlhs -> mlhsitem COMMA MULTIPLY lhs .)


state 260

    (107) whenargs -> MULTIPLY . arg
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 304
    literal                        shift and go to state 33
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 261

    (96) multcase -> when whenargs . pthen compstmt multcase
    (97) multcase -> when whenargs . pthen compstmt
    (166) pthen -> . newline
    (167) pthen -> . then
    (168) pthen -> . newline then
    (188) newline -> . SEMI_COLON
    (189) newline -> . NEWLINE

    then            shift and go to state 224
    SEMI_COLON      shift and go to state 24
    NEWLINE         shift and go to state 4

    pthen                          shift and go to state 305
    newline                        shift and go to state 225

state 262

    (105) whenargs -> args . COMMA MULTIPLY arg
    (106) whenargs -> args .

    COMMA           shift and go to state 306
    then            reduce using rule 106 (whenargs -> args .)
    SEMI_COLON      reduce using rule 106 (whenargs -> args .)
    NEWLINE         reduce using rule 106 (whenargs -> args .)


state 263

    (18) expr -> case compstmt multcase end .

    SEMI_COLON      reduce using rule 18 (expr -> case compstmt multcase end .)
    NEWLINE         reduce using rule 18 (expr -> case compstmt multcase end .)
    def             reduce using rule 18 (expr -> case compstmt multcase end .)
    class           reduce using rule 18 (expr -> case compstmt multcase end .)
    break           reduce using rule 18 (expr -> case compstmt multcase end .)
    if              reduce using rule 18 (expr -> case compstmt multcase end .)
    while           reduce using rule 18 (expr -> case compstmt multcase end .)
    until           reduce using rule 18 (expr -> case compstmt multcase end .)
    case            reduce using rule 18 (expr -> case compstmt multcase end .)
    for             reduce using rule 18 (expr -> case compstmt multcase end .)
    return          reduce using rule 18 (expr -> case compstmt multcase end .)
    IDENTIFIER      reduce using rule 18 (expr -> case compstmt multcase end .)
    OPEN_BRACKET    reduce using rule 18 (expr -> case compstmt multcase end .)
    CONSTANT_RESOLUTION reduce using rule 18 (expr -> case compstmt multcase end .)
    OPEN_SQUARE     reduce using rule 18 (expr -> case compstmt multcase end .)
    OPEN_FLOWER     reduce using rule 18 (expr -> case compstmt multcase end .)
    nil             reduce using rule 18 (expr -> case compstmt multcase end .)
    self            reduce using rule 18 (expr -> case compstmt multcase end .)
    NUMBER          reduce using rule 18 (expr -> case compstmt multcase end .)
    FLOAT           reduce using rule 18 (expr -> case compstmt multcase end .)
    STRING          reduce using rule 18 (expr -> case compstmt multcase end .)
    true            reduce using rule 18 (expr -> case compstmt multcase end .)
    false           reduce using rule 18 (expr -> case compstmt multcase end .)
    GLOBAL          reduce using rule 18 (expr -> case compstmt multcase end .)
    AT_THE_RATE     reduce using rule 18 (expr -> case compstmt multcase end .)
    MINUS           reduce using rule 18 (expr -> case compstmt multcase end .)
    PLUS            reduce using rule 18 (expr -> case compstmt multcase end .)
    $end            reduce using rule 18 (expr -> case compstmt multcase end .)
    when            reduce using rule 18 (expr -> case compstmt multcase end .)
    end             reduce using rule 18 (expr -> case compstmt multcase end .)
    elsif           reduce using rule 18 (expr -> case compstmt multcase end .)
    else            reduce using rule 18 (expr -> case compstmt multcase end .)
    then            reduce using rule 18 (expr -> case compstmt multcase end .)
    CLOSE_BRACKET   reduce using rule 18 (expr -> case compstmt multcase end .)


state 264

    (17) expr -> case compstmt multcase else . compstmt end
    (1) compstmt -> . multcompstmt
    (2) multcompstmt -> . newline stmt multcompstmt
    (3) multcompstmt -> . stmt multcompstmt
    (4) multcompstmt -> . newline
    (5) multcompstmt -> . empty
    (188) newline -> . SEMI_COLON
    (189) newline -> . NEWLINE
    (6) stmt -> . def IDENTIFIER argdecl compstmt end
    (7) stmt -> . def singleton DOT IDENTIFIER argdecl compstmt end
    (8) stmt -> . def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end
    (9) stmt -> . class IDENTIFIER LESS IDENTIFIER compstmt end
    (10) stmt -> . class IDENTIFIER compstmt end
    (11) stmt -> . break
    (12) stmt -> . expr
    (190) empty -> .
    (13) expr -> . if expr1 pthen compstmt end
    (14) expr -> . if expr1 pthen compstmt multelsif else compstmt end
    (15) expr -> . while expr1 pdo compstmt end
    (16) expr -> . until expr1 pdo compstmt end
    (17) expr -> . case compstmt multcase else compstmt end
    (18) expr -> . case compstmt multcase end
    (19) expr -> . for mlhs in expr1 pdo compstmt end
    (20) expr -> . expr1
    (21) expr1 -> . return callargs
    (22) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (23) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (24) expr1 -> . return
    (25) expr1 -> . expr2
    (26) expr2 -> . call
    (27) expr2 -> . arg
    (28) call -> . function
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (29) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (30) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) function -> . primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> . primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (33) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> . primary DOT IDENTIFIER
    (36) function -> . primary CONSTANT_RESOLUTION IDENTIFIER
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary

    SEMI_COLON      shift and go to state 24
    NEWLINE         shift and go to state 4
    def             shift and go to state 45
    class           shift and go to state 57
    break           shift and go to state 9
    end             reduce using rule 190 (empty -> .)
    if              shift and go to state 49
    while           shift and go to state 44
    until           shift and go to state 36
    case            shift and go to state 42
    for             shift and go to state 26
    return          shift and go to state 7
    IDENTIFIER      shift and go to state 35
    OPEN_BRACKET    shift and go to state 5
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 32
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 25
    expr2                          shift and go to state 51
    literal                        shift and go to state 33
    expr1                          shift and go to state 52
    call                           shift and go to state 34
    varname                        shift and go to state 30
    empty                          shift and go to state 37
    function                       shift and go to state 38
    newline                        shift and go to state 55
    multcompstmt                   shift and go to state 8
    stmt                           shift and go to state 27
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 56
    compstmt                       shift and go to state 307
    term5                          shift and go to state 16
    expr                           shift and go to state 43
    lhs                            shift and go to state 59
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 265

    (15) expr -> while expr1 pdo compstmt . end

    end             shift and go to state 308


state 266

    (8) stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER . argdecl compstmt end
    (143) argdecl -> . OPEN_BRACKET arglist CLOSE_BRACKET
    (144) argdecl -> . arglist newline
    (145) arglist -> . IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER
    (146) arglist -> . IDENTIFIER multarglist COMMA MULTIPLY COMMA BIT_AND IDENTIFIER
    (147) arglist -> . IDENTIFIER multarglist COMMA BIT_AND IDENTIFIER
    (148) arglist -> . IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER
    (149) arglist -> . IDENTIFIER multarglist COMMA MULTIPLY
    (150) arglist -> . IDENTIFIER multarglist
    (151) arglist -> . MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER
    (152) arglist -> . MULTIPLY IDENTIFIER
    (153) arglist -> . BIT_AND IDENTIFIER
    (154) arglist -> . empty
    (190) empty -> .

    OPEN_BRACKET    shift and go to state 215
    IDENTIFIER      shift and go to state 219
    MULTIPLY        shift and go to state 218
    BIT_AND         shift and go to state 214
    SEMI_COLON      reduce using rule 190 (empty -> .)
    NEWLINE         reduce using rule 190 (empty -> .)

    argdecl                        shift and go to state 309
    arglist                        shift and go to state 216
    empty                          shift and go to state 217

state 267

    (7) stmt -> def singleton DOT IDENTIFIER . argdecl compstmt end
    (143) argdecl -> . OPEN_BRACKET arglist CLOSE_BRACKET
    (144) argdecl -> . arglist newline
    (145) arglist -> . IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER
    (146) arglist -> . IDENTIFIER multarglist COMMA MULTIPLY COMMA BIT_AND IDENTIFIER
    (147) arglist -> . IDENTIFIER multarglist COMMA BIT_AND IDENTIFIER
    (148) arglist -> . IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER
    (149) arglist -> . IDENTIFIER multarglist COMMA MULTIPLY
    (150) arglist -> . IDENTIFIER multarglist
    (151) arglist -> . MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER
    (152) arglist -> . MULTIPLY IDENTIFIER
    (153) arglist -> . BIT_AND IDENTIFIER
    (154) arglist -> . empty
    (190) empty -> .

    OPEN_BRACKET    shift and go to state 215
    IDENTIFIER      shift and go to state 219
    MULTIPLY        shift and go to state 218
    BIT_AND         shift and go to state 214
    SEMI_COLON      reduce using rule 190 (empty -> .)
    NEWLINE         reduce using rule 190 (empty -> .)

    argdecl                        shift and go to state 310
    arglist                        shift and go to state 216
    empty                          shift and go to state 217

state 268

    (158) singleton -> OPEN_BRACKET expr CLOSE_BRACKET .

    DOT             reduce using rule 158 (singleton -> OPEN_BRACKET expr CLOSE_BRACKET .)
    CONSTANT_RESOLUTION reduce using rule 158 (singleton -> OPEN_BRACKET expr CLOSE_BRACKET .)


state 269

    (6) stmt -> def IDENTIFIER argdecl compstmt . end

    end             shift and go to state 311


state 270

    (153) arglist -> BIT_AND IDENTIFIER .

    SEMI_COLON      reduce using rule 153 (arglist -> BIT_AND IDENTIFIER .)
    NEWLINE         reduce using rule 153 (arglist -> BIT_AND IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 153 (arglist -> BIT_AND IDENTIFIER .)


state 271

    (143) argdecl -> OPEN_BRACKET arglist . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 312


state 272

    (144) argdecl -> arglist newline .

    SEMI_COLON      reduce using rule 144 (argdecl -> arglist newline .)
    NEWLINE         reduce using rule 144 (argdecl -> arglist newline .)
    def             reduce using rule 144 (argdecl -> arglist newline .)
    class           reduce using rule 144 (argdecl -> arglist newline .)
    break           reduce using rule 144 (argdecl -> arglist newline .)
    if              reduce using rule 144 (argdecl -> arglist newline .)
    while           reduce using rule 144 (argdecl -> arglist newline .)
    until           reduce using rule 144 (argdecl -> arglist newline .)
    case            reduce using rule 144 (argdecl -> arglist newline .)
    for             reduce using rule 144 (argdecl -> arglist newline .)
    return          reduce using rule 144 (argdecl -> arglist newline .)
    IDENTIFIER      reduce using rule 144 (argdecl -> arglist newline .)
    OPEN_BRACKET    reduce using rule 144 (argdecl -> arglist newline .)
    CONSTANT_RESOLUTION reduce using rule 144 (argdecl -> arglist newline .)
    OPEN_SQUARE     reduce using rule 144 (argdecl -> arglist newline .)
    OPEN_FLOWER     reduce using rule 144 (argdecl -> arglist newline .)
    nil             reduce using rule 144 (argdecl -> arglist newline .)
    self            reduce using rule 144 (argdecl -> arglist newline .)
    NUMBER          reduce using rule 144 (argdecl -> arglist newline .)
    FLOAT           reduce using rule 144 (argdecl -> arglist newline .)
    STRING          reduce using rule 144 (argdecl -> arglist newline .)
    true            reduce using rule 144 (argdecl -> arglist newline .)
    false           reduce using rule 144 (argdecl -> arglist newline .)
    GLOBAL          reduce using rule 144 (argdecl -> arglist newline .)
    AT_THE_RATE     reduce using rule 144 (argdecl -> arglist newline .)
    MINUS           reduce using rule 144 (argdecl -> arglist newline .)
    PLUS            reduce using rule 144 (argdecl -> arglist newline .)
    end             reduce using rule 144 (argdecl -> arglist newline .)


state 273

    (151) arglist -> MULTIPLY IDENTIFIER . COMMA BIT_AND IDENTIFIER
    (152) arglist -> MULTIPLY IDENTIFIER .

    COMMA           shift and go to state 313
    SEMI_COLON      reduce using rule 152 (arglist -> MULTIPLY IDENTIFIER .)
    NEWLINE         reduce using rule 152 (arglist -> MULTIPLY IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 152 (arglist -> MULTIPLY IDENTIFIER .)


state 274

    (145) arglist -> IDENTIFIER multarglist . COMMA MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER
    (146) arglist -> IDENTIFIER multarglist . COMMA MULTIPLY COMMA BIT_AND IDENTIFIER
    (147) arglist -> IDENTIFIER multarglist . COMMA BIT_AND IDENTIFIER
    (148) arglist -> IDENTIFIER multarglist . COMMA MULTIPLY IDENTIFIER
    (149) arglist -> IDENTIFIER multarglist . COMMA MULTIPLY
    (150) arglist -> IDENTIFIER multarglist .

    COMMA           shift and go to state 314
    SEMI_COLON      reduce using rule 150 (arglist -> IDENTIFIER multarglist .)
    NEWLINE         reduce using rule 150 (arglist -> IDENTIFIER multarglist .)
    CLOSE_BRACKET   reduce using rule 150 (arglist -> IDENTIFIER multarglist .)


state 275

    (155) multarglist -> COMMA . IDENTIFIER multarglist

    IDENTIFIER      shift and go to state 315


state 276

    (156) multarglist -> empty .

    COMMA           reduce using rule 156 (multarglist -> empty .)
    SEMI_COLON      reduce using rule 156 (multarglist -> empty .)
    NEWLINE         reduce using rule 156 (multarglist -> empty .)
    CLOSE_BRACKET   reduce using rule 156 (multarglist -> empty .)


state 277

    (92) primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .

    POWER           reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    MULTIPLY        reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    DIVIDE          reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    MODULO          reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    PLUS            reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    MINUS           reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    LEFT_SHIFT      reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    RIGHT_SHIFT     reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    BIT_AND         reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    BIT_XOR         reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    DOUBLE_EQUALS   reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    TRIPLE_EQUALS   reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    NOT_EQUALS      reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    EQUAL_TILDE     reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    BANG_TILDE      reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    COMPARISON      reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    LESS            reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    LESS_EQUALS     reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    GREATER         reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    GREATER_EQUALS  reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    INCL_RANGE      reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    EXCL_RANGE      reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    LOGICAL_OR      reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    BIT_OR          reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    COMMA           reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    SEMI_COLON      reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    NEWLINE         reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    def             reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    class           reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    break           reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    if              reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    while           reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    until           reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    case            reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    for             reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    return          reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    IDENTIFIER      reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    OPEN_BRACKET    reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    CONSTANT_RESOLUTION reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    OPEN_SQUARE     reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    OPEN_FLOWER     reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    nil             reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    self            reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    NUMBER          reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    FLOAT           reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    STRING          reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    true            reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    false           reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    GLOBAL          reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    AT_THE_RATE     reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    $end            reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    CLOSE_BRACKET   reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    MAP             reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    when            reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    end             reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    elsif           reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    else            reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    do              reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    then            reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    CLOSE_SQUARE    reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    CLOSE_FLOWER    reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)
    DOT             reduce using rule 92 (primary -> OPEN_FLOWER assocs COMMA CLOSE_FLOWER .)


state 278

    (89) primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .

    POWER           reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    MULTIPLY        reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    DIVIDE          reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    MODULO          reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    PLUS            reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    MINUS           reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    LEFT_SHIFT      reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    RIGHT_SHIFT     reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    BIT_AND         reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    BIT_XOR         reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    DOUBLE_EQUALS   reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    TRIPLE_EQUALS   reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    NOT_EQUALS      reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    EQUAL_TILDE     reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    BANG_TILDE      reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    COMPARISON      reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    LESS            reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    LESS_EQUALS     reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    GREATER         reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    GREATER_EQUALS  reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    INCL_RANGE      reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    EXCL_RANGE      reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    LOGICAL_OR      reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    BIT_OR          reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    COMMA           reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    SEMI_COLON      reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    NEWLINE         reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    def             reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    class           reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    break           reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    if              reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    while           reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    until           reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    case            reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    for             reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    return          reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    IDENTIFIER      reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    OPEN_BRACKET    reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    CONSTANT_RESOLUTION reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    OPEN_SQUARE     reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    OPEN_FLOWER     reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    nil             reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    self            reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    NUMBER          reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    FLOAT           reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    STRING          reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    true            reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    false           reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    GLOBAL          reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    AT_THE_RATE     reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    $end            reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    CLOSE_BRACKET   reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    MAP             reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    when            reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    end             reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    elsif           reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    else            reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    do              reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    then            reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    CLOSE_SQUARE    reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    CLOSE_FLOWER    reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)
    DOT             reduce using rule 89 (primary -> OPEN_FLOWER args COMMA CLOSE_FLOWER .)


state 279

    (168) pthen -> newline then .

    SEMI_COLON      reduce using rule 168 (pthen -> newline then .)
    NEWLINE         reduce using rule 168 (pthen -> newline then .)
    def             reduce using rule 168 (pthen -> newline then .)
    class           reduce using rule 168 (pthen -> newline then .)
    break           reduce using rule 168 (pthen -> newline then .)
    if              reduce using rule 168 (pthen -> newline then .)
    while           reduce using rule 168 (pthen -> newline then .)
    until           reduce using rule 168 (pthen -> newline then .)
    case            reduce using rule 168 (pthen -> newline then .)
    for             reduce using rule 168 (pthen -> newline then .)
    return          reduce using rule 168 (pthen -> newline then .)
    IDENTIFIER      reduce using rule 168 (pthen -> newline then .)
    OPEN_BRACKET    reduce using rule 168 (pthen -> newline then .)
    CONSTANT_RESOLUTION reduce using rule 168 (pthen -> newline then .)
    OPEN_SQUARE     reduce using rule 168 (pthen -> newline then .)
    OPEN_FLOWER     reduce using rule 168 (pthen -> newline then .)
    nil             reduce using rule 168 (pthen -> newline then .)
    self            reduce using rule 168 (pthen -> newline then .)
    NUMBER          reduce using rule 168 (pthen -> newline then .)
    FLOAT           reduce using rule 168 (pthen -> newline then .)
    STRING          reduce using rule 168 (pthen -> newline then .)
    true            reduce using rule 168 (pthen -> newline then .)
    false           reduce using rule 168 (pthen -> newline then .)
    GLOBAL          reduce using rule 168 (pthen -> newline then .)
    AT_THE_RATE     reduce using rule 168 (pthen -> newline then .)
    MINUS           reduce using rule 168 (pthen -> newline then .)
    PLUS            reduce using rule 168 (pthen -> newline then .)
    elsif           reduce using rule 168 (pthen -> newline then .)
    else            reduce using rule 168 (pthen -> newline then .)
    end             reduce using rule 168 (pthen -> newline then .)
    when            reduce using rule 168 (pthen -> newline then .)


state 280

    (13) expr -> if expr1 pthen compstmt . end
    (14) expr -> if expr1 pthen compstmt . multelsif else compstmt end
    (98) multelsif -> . elsif expr pthen compstmt multelsif
    (99) multelsif -> . empty
    (190) empty -> .

    end             shift and go to state 317
    elsif           shift and go to state 318
    else            reduce using rule 190 (empty -> .)

    multelsif                      shift and go to state 316
    empty                          shift and go to state 319

state 281

    (120) lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .

    POWER           reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    MULTIPLY        reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    DIVIDE          reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    MODULO          reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    PLUS            reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    MINUS           reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    LEFT_SHIFT      reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    RIGHT_SHIFT     reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    BIT_AND         reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    BIT_XOR         reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    DOUBLE_EQUALS   reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    TRIPLE_EQUALS   reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    NOT_EQUALS      reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    EQUAL_TILDE     reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    BANG_TILDE      reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    COMPARISON      reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    LESS            reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    LESS_EQUALS     reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    GREATER         reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    GREATER_EQUALS  reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    LOGICAL_OR      reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    BIT_OR          reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    SEMI_COLON      reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    NEWLINE         reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    def             reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    class           reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    break           reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    if              reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    while           reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    until           reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    case            reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    for             reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    return          reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    OPEN_BRACKET    reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    CONSTANT_RESOLUTION reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    OPEN_FLOWER     reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    nil             reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    self            reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    NUMBER          reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    FLOAT           reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    STRING          reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    true            reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    false           reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    GLOBAL          reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    AT_THE_RATE     reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    $end            reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    CLOSE_BRACKET   reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    MAP             reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    COMMA           reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    when            reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    end             reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    elsif           reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    else            reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    do              reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    then            reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    CLOSE_FLOWER    reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    INCL_RANGE      reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    EXCL_RANGE      reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    EQUALS          reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    MODULO_EQUALS   reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    DIVIDE_EQUALS   reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    MINUS_EQUALS    reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    PLUS_EQUALS     reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    OR_EQUALS       reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    AND_EQUALS      reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    XOR_EQUALS      reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    RIGHT_SHIFT_EQUALS reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    LEFT_SHIFT_EQUALS reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    MULTIPLY_EQUALS reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    LOGICAL_AND_EQUALS reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    LOGICAL_OR_EQUALS reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    POWER_EQUALS    reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    DOT             reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)
    in              reduce using rule 120 (lhs -> variable OPEN_SQUARE args CLOSE_SQUARE .)


state 282

    (9) stmt -> class IDENTIFIER LESS IDENTIFIER . compstmt end
    (1) compstmt -> . multcompstmt
    (2) multcompstmt -> . newline stmt multcompstmt
    (3) multcompstmt -> . stmt multcompstmt
    (4) multcompstmt -> . newline
    (5) multcompstmt -> . empty
    (188) newline -> . SEMI_COLON
    (189) newline -> . NEWLINE
    (6) stmt -> . def IDENTIFIER argdecl compstmt end
    (7) stmt -> . def singleton DOT IDENTIFIER argdecl compstmt end
    (8) stmt -> . def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end
    (9) stmt -> . class IDENTIFIER LESS IDENTIFIER compstmt end
    (10) stmt -> . class IDENTIFIER compstmt end
    (11) stmt -> . break
    (12) stmt -> . expr
    (190) empty -> .
    (13) expr -> . if expr1 pthen compstmt end
    (14) expr -> . if expr1 pthen compstmt multelsif else compstmt end
    (15) expr -> . while expr1 pdo compstmt end
    (16) expr -> . until expr1 pdo compstmt end
    (17) expr -> . case compstmt multcase else compstmt end
    (18) expr -> . case compstmt multcase end
    (19) expr -> . for mlhs in expr1 pdo compstmt end
    (20) expr -> . expr1
    (21) expr1 -> . return callargs
    (22) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (23) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (24) expr1 -> . return
    (25) expr1 -> . expr2
    (26) expr2 -> . call
    (27) expr2 -> . arg
    (28) call -> . function
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (29) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (30) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) function -> . primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> . primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (33) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> . primary DOT IDENTIFIER
    (36) function -> . primary CONSTANT_RESOLUTION IDENTIFIER
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary

    SEMI_COLON      shift and go to state 24
    NEWLINE         shift and go to state 4
    def             shift and go to state 45
    class           shift and go to state 57
    break           shift and go to state 9
    end             reduce using rule 190 (empty -> .)
    if              shift and go to state 49
    while           shift and go to state 44
    until           shift and go to state 36
    case            shift and go to state 42
    for             shift and go to state 26
    return          shift and go to state 7
    IDENTIFIER      shift and go to state 35
    OPEN_BRACKET    shift and go to state 5
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 32
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 25
    expr2                          shift and go to state 51
    literal                        shift and go to state 33
    expr1                          shift and go to state 52
    call                           shift and go to state 34
    varname                        shift and go to state 30
    empty                          shift and go to state 37
    function                       shift and go to state 38
    newline                        shift and go to state 55
    multcompstmt                   shift and go to state 8
    stmt                           shift and go to state 27
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 56
    compstmt                       shift and go to state 320
    term5                          shift and go to state 16
    expr                           shift and go to state 43
    lhs                            shift and go to state 59
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 283

    (10) stmt -> class IDENTIFIER compstmt end .

    SEMI_COLON      reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    NEWLINE         reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    def             reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    class           reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    break           reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    if              reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    while           reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    until           reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    case            reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    for             reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    return          reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    IDENTIFIER      reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    OPEN_BRACKET    reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    CONSTANT_RESOLUTION reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    OPEN_SQUARE     reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    OPEN_FLOWER     reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    nil             reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    self            reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    NUMBER          reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    FLOAT           reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    STRING          reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    true            reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    false           reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    GLOBAL          reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    AT_THE_RATE     reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    MINUS           reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    PLUS            reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    $end            reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    when            reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    end             reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    elsif           reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)
    else            reduce using rule 10 (stmt -> class IDENTIFIER compstmt end .)


state 284

    (39) term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .

    BIT_OR          reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    COMMA           reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    SEMI_COLON      reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    NEWLINE         reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    def             reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    class           reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    break           reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    if              reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    while           reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    until           reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    case            reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    for             reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    return          reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    CONSTANT_RESOLUTION reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    OPEN_SQUARE     reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    OPEN_FLOWER     reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    nil             reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    self            reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    NUMBER          reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    FLOAT           reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    STRING          reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    true            reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    false           reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    GLOBAL          reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    MINUS           reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    PLUS            reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    $end            reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    when            reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    end             reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    elsif           reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    else            reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    do              reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    then            reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    CLOSE_FLOWER    reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    MAP             reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    CLOSE_SQUARE    reduce using rule 39 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)


state 285

    (40) term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 321


state 286

    (124) mrhs -> args COMMA MULTIPLY . arg
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 322
    literal                        shift and go to state 33
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 287

    (41) term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 323


state 288

    (141) multargs -> COMMA arg multargs .

    BIT_OR          reduce using rule 141 (multargs -> COMMA arg multargs .)
    COMMA           reduce using rule 141 (multargs -> COMMA arg multargs .)
    SEMI_COLON      reduce using rule 141 (multargs -> COMMA arg multargs .)
    NEWLINE         reduce using rule 141 (multargs -> COMMA arg multargs .)
    def             reduce using rule 141 (multargs -> COMMA arg multargs .)
    class           reduce using rule 141 (multargs -> COMMA arg multargs .)
    break           reduce using rule 141 (multargs -> COMMA arg multargs .)
    if              reduce using rule 141 (multargs -> COMMA arg multargs .)
    while           reduce using rule 141 (multargs -> COMMA arg multargs .)
    until           reduce using rule 141 (multargs -> COMMA arg multargs .)
    case            reduce using rule 141 (multargs -> COMMA arg multargs .)
    for             reduce using rule 141 (multargs -> COMMA arg multargs .)
    return          reduce using rule 141 (multargs -> COMMA arg multargs .)
    IDENTIFIER      reduce using rule 141 (multargs -> COMMA arg multargs .)
    OPEN_BRACKET    reduce using rule 141 (multargs -> COMMA arg multargs .)
    CONSTANT_RESOLUTION reduce using rule 141 (multargs -> COMMA arg multargs .)
    OPEN_SQUARE     reduce using rule 141 (multargs -> COMMA arg multargs .)
    OPEN_FLOWER     reduce using rule 141 (multargs -> COMMA arg multargs .)
    nil             reduce using rule 141 (multargs -> COMMA arg multargs .)
    self            reduce using rule 141 (multargs -> COMMA arg multargs .)
    NUMBER          reduce using rule 141 (multargs -> COMMA arg multargs .)
    FLOAT           reduce using rule 141 (multargs -> COMMA arg multargs .)
    STRING          reduce using rule 141 (multargs -> COMMA arg multargs .)
    true            reduce using rule 141 (multargs -> COMMA arg multargs .)
    false           reduce using rule 141 (multargs -> COMMA arg multargs .)
    GLOBAL          reduce using rule 141 (multargs -> COMMA arg multargs .)
    AT_THE_RATE     reduce using rule 141 (multargs -> COMMA arg multargs .)
    MINUS           reduce using rule 141 (multargs -> COMMA arg multargs .)
    PLUS            reduce using rule 141 (multargs -> COMMA arg multargs .)
    $end            reduce using rule 141 (multargs -> COMMA arg multargs .)
    CLOSE_BRACKET   reduce using rule 141 (multargs -> COMMA arg multargs .)
    MAP             reduce using rule 141 (multargs -> COMMA arg multargs .)
    when            reduce using rule 141 (multargs -> COMMA arg multargs .)
    end             reduce using rule 141 (multargs -> COMMA arg multargs .)
    elsif           reduce using rule 141 (multargs -> COMMA arg multargs .)
    else            reduce using rule 141 (multargs -> COMMA arg multargs .)
    do              reduce using rule 141 (multargs -> COMMA arg multargs .)
    then            reduce using rule 141 (multargs -> COMMA arg multargs .)
    CLOSE_SQUARE    reduce using rule 141 (multargs -> COMMA arg multargs .)
    CLOSE_FLOWER    reduce using rule 141 (multargs -> COMMA arg multargs .)


state 289

    (138) callargs -> MULTIPLY arg COMMA BIT_AND . arg
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 324
    literal                        shift and go to state 33
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 290

    (134) callargs -> assocs COMMA MULTIPLY arg . COMMA BIT_AND arg
    (135) callargs -> assocs COMMA MULTIPLY arg .
    (37) arg -> arg . BIT_OR term0

    COMMA           shift and go to state 325
    CLOSE_BRACKET   reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    SEMI_COLON      reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    NEWLINE         reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    def             reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    class           reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    break           reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    if              reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    while           reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    until           reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    case            reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    for             reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    return          reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    IDENTIFIER      reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    OPEN_BRACKET    reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    CONSTANT_RESOLUTION reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    OPEN_SQUARE     reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    OPEN_FLOWER     reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    nil             reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    self            reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    NUMBER          reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    FLOAT           reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    STRING          reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    true            reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    false           reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    GLOBAL          reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    AT_THE_RATE     reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    MINUS           reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    PLUS            reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    $end            reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    when            reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    end             reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    elsif           reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    else            reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    do              reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    then            reduce using rule 135 (callargs -> assocs COMMA MULTIPLY arg .)
    BIT_OR          shift and go to state 116


state 291

    (136) callargs -> assocs COMMA BIT_AND arg .
    (37) arg -> arg . BIT_OR term0

    CLOSE_BRACKET   reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    SEMI_COLON      reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    NEWLINE         reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    def             reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    class           reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    break           reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    if              reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    while           reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    until           reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    case            reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    for             reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    return          reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    IDENTIFIER      reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    OPEN_BRACKET    reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    CONSTANT_RESOLUTION reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    OPEN_SQUARE     reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    OPEN_FLOWER     reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    nil             reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    self            reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    NUMBER          reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    FLOAT           reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    STRING          reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    true            reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    false           reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    GLOBAL          reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    AT_THE_RATE     reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    MINUS           reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    PLUS            reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    $end            reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    when            reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    end             reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    elsif           reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    else            reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    do              reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    then            reduce using rule 136 (callargs -> assocs COMMA BIT_AND arg .)
    BIT_OR          shift and go to state 116


state 292

    (128) callargs -> args COMMA MULTIPLY arg . COMMA BIT_AND arg
    (132) callargs -> args COMMA MULTIPLY arg .
    (37) arg -> arg . BIT_OR term0

    COMMA           shift and go to state 326
    CLOSE_BRACKET   reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    SEMI_COLON      reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    NEWLINE         reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    def             reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    class           reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    break           reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    if              reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    while           reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    until           reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    case            reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    for             reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    return          reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    IDENTIFIER      reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    OPEN_BRACKET    reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    CONSTANT_RESOLUTION reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    OPEN_SQUARE     reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    OPEN_FLOWER     reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    nil             reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    self            reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    NUMBER          reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    FLOAT           reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    STRING          reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    true            reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    false           reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    GLOBAL          reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    AT_THE_RATE     reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    MINUS           reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    PLUS            reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    $end            reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    when            reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    end             reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    elsif           reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    else            reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    do              reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    then            reduce using rule 132 (callargs -> args COMMA MULTIPLY arg .)
    BIT_OR          shift and go to state 116


state 293

    (127) callargs -> args COMMA assocs COMMA . MULTIPLY arg COMMA BIT_AND arg
    (129) callargs -> args COMMA assocs COMMA . BIT_AND arg
    (130) callargs -> args COMMA assocs COMMA . MULTIPLY arg

    MULTIPLY        shift and go to state 328
    BIT_AND         shift and go to state 327


state 294

    (133) callargs -> args COMMA BIT_AND arg .
    (37) arg -> arg . BIT_OR term0

    CLOSE_BRACKET   reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    SEMI_COLON      reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    NEWLINE         reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    def             reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    class           reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    break           reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    if              reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    while           reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    until           reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    case            reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    for             reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    return          reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    IDENTIFIER      reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    OPEN_BRACKET    reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    CONSTANT_RESOLUTION reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    OPEN_SQUARE     reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    OPEN_FLOWER     reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    nil             reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    self            reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    NUMBER          reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    FLOAT           reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    STRING          reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    true            reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    false           reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    GLOBAL          reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    AT_THE_RATE     reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    MINUS           reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    PLUS            reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    $end            reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    when            reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    end             reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    elsif           reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    else            reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    do              reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    then            reduce using rule 133 (callargs -> args COMMA BIT_AND arg .)
    BIT_OR          shift and go to state 116


state 295

    (160) multassocs -> COMMA assoc multassocs .

    COMMA           reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    SEMI_COLON      reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    NEWLINE         reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    def             reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    class           reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    break           reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    if              reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    while           reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    until           reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    case            reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    for             reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    return          reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    IDENTIFIER      reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    OPEN_BRACKET    reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    CONSTANT_RESOLUTION reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    OPEN_SQUARE     reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    OPEN_FLOWER     reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    nil             reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    self            reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    NUMBER          reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    FLOAT           reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    STRING          reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    true            reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    false           reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    GLOBAL          reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    AT_THE_RATE     reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    MINUS           reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    PLUS            reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    $end            reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    when            reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    end             reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    elsif           reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    else            reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    do              reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    then            reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    CLOSE_BRACKET   reduce using rule 160 (multassocs -> COMMA assoc multassocs .)
    CLOSE_FLOWER    reduce using rule 160 (multassocs -> COMMA assoc multassocs .)


state 296

    (19) expr -> for mlhs in expr1 pdo . compstmt end
    (1) compstmt -> . multcompstmt
    (2) multcompstmt -> . newline stmt multcompstmt
    (3) multcompstmt -> . stmt multcompstmt
    (4) multcompstmt -> . newline
    (5) multcompstmt -> . empty
    (188) newline -> . SEMI_COLON
    (189) newline -> . NEWLINE
    (6) stmt -> . def IDENTIFIER argdecl compstmt end
    (7) stmt -> . def singleton DOT IDENTIFIER argdecl compstmt end
    (8) stmt -> . def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end
    (9) stmt -> . class IDENTIFIER LESS IDENTIFIER compstmt end
    (10) stmt -> . class IDENTIFIER compstmt end
    (11) stmt -> . break
    (12) stmt -> . expr
    (190) empty -> .
    (13) expr -> . if expr1 pthen compstmt end
    (14) expr -> . if expr1 pthen compstmt multelsif else compstmt end
    (15) expr -> . while expr1 pdo compstmt end
    (16) expr -> . until expr1 pdo compstmt end
    (17) expr -> . case compstmt multcase else compstmt end
    (18) expr -> . case compstmt multcase end
    (19) expr -> . for mlhs in expr1 pdo compstmt end
    (20) expr -> . expr1
    (21) expr1 -> . return callargs
    (22) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (23) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (24) expr1 -> . return
    (25) expr1 -> . expr2
    (26) expr2 -> . call
    (27) expr2 -> . arg
    (28) call -> . function
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (29) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (30) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) function -> . primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> . primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (33) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> . primary DOT IDENTIFIER
    (36) function -> . primary CONSTANT_RESOLUTION IDENTIFIER
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary

    SEMI_COLON      shift and go to state 24
    NEWLINE         shift and go to state 4
    def             shift and go to state 45
    class           shift and go to state 57
    break           shift and go to state 9
    end             reduce using rule 190 (empty -> .)
    if              shift and go to state 49
    while           shift and go to state 44
    until           shift and go to state 36
    case            shift and go to state 42
    for             shift and go to state 26
    return          shift and go to state 7
    IDENTIFIER      shift and go to state 35
    OPEN_BRACKET    shift and go to state 5
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 32
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 25
    expr2                          shift and go to state 51
    literal                        shift and go to state 33
    expr1                          shift and go to state 52
    call                           shift and go to state 34
    varname                        shift and go to state 30
    empty                          shift and go to state 37
    function                       shift and go to state 38
    newline                        shift and go to state 55
    multcompstmt                   shift and go to state 8
    stmt                           shift and go to state 27
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 56
    compstmt                       shift and go to state 329
    term5                          shift and go to state 16
    expr                           shift and go to state 43
    lhs                            shift and go to state 59
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 297

    (34) function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .

    do              reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    SEMI_COLON      reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    NEWLINE         reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    def             reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    class           reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    break           reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    if              reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    while           reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    until           reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    case            reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    for             reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    return          reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    CONSTANT_RESOLUTION reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    OPEN_SQUARE     reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    OPEN_FLOWER     reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    nil             reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    self            reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    NUMBER          reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    FLOAT           reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    STRING          reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    true            reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    false           reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    GLOBAL          reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    MINUS           reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    PLUS            reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    end             reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    $end            reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    when            reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    elsif           reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    else            reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    then            reduce using rule 34 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)


state 298

    (33) function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 330


state 299

    (32) function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .

    do              reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    SEMI_COLON      reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    NEWLINE         reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    def             reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    class           reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    break           reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    if              reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    while           reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    until           reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    case            reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    for             reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    return          reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    CONSTANT_RESOLUTION reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    OPEN_SQUARE     reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    OPEN_FLOWER     reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    nil             reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    self            reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    NUMBER          reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    FLOAT           reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    STRING          reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    true            reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    false           reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    GLOBAL          reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    MINUS           reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    PLUS            reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    end             reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    $end            reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    when            reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    elsif           reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    else            reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    then            reduce using rule 32 (function -> primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)


state 300

    (31) function -> primary DOT IDENTIFIER OPEN_BRACKET callargs . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 331


state 301

    (16) expr -> until expr1 pdo compstmt end .

    SEMI_COLON      reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    NEWLINE         reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    def             reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    class           reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    break           reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    if              reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    while           reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    until           reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    case            reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    for             reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    return          reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    IDENTIFIER      reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    OPEN_BRACKET    reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    CONSTANT_RESOLUTION reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    OPEN_SQUARE     reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    OPEN_FLOWER     reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    nil             reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    self            reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    NUMBER          reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    FLOAT           reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    STRING          reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    true            reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    false           reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    GLOBAL          reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    AT_THE_RATE     reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    MINUS           reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    PLUS            reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    $end            reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    when            reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    end             reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    elsif           reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    else            reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    then            reduce using rule 16 (expr -> until expr1 pdo compstmt end .)
    CLOSE_BRACKET   reduce using rule 16 (expr -> until expr1 pdo compstmt end .)


state 302

    (108) mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY . lhs
    (109) mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY .
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER

    CLOSE_BRACKET   reduce using rule 109 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY .)
    EQUALS          reduce using rule 109 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY .)
    MODULO_EQUALS   reduce using rule 109 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY .)
    DIVIDE_EQUALS   reduce using rule 109 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY .)
    MINUS_EQUALS    reduce using rule 109 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY .)
    PLUS_EQUALS     reduce using rule 109 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY .)
    OR_EQUALS       reduce using rule 109 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY .)
    AND_EQUALS      reduce using rule 109 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY .)
    XOR_EQUALS      reduce using rule 109 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY .)
    RIGHT_SHIFT_EQUALS reduce using rule 109 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY .)
    LEFT_SHIFT_EQUALS reduce using rule 109 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY .)
    MULTIPLY_EQUALS reduce using rule 109 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY .)
    LOGICAL_AND_EQUALS reduce using rule 109 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY .)
    LOGICAL_OR_EQUALS reduce using rule 109 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY .)
    POWER_EQUALS    reduce using rule 109 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY .)
    in              reduce using rule 109 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY .)
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78

    varname                        shift and go to state 30
    lhs                            shift and go to state 332
    variable                       shift and go to state 119

state 303

    (115) multmlhs -> COMMA mlhsitem . multmlhs
    (115) multmlhs -> . COMMA mlhsitem multmlhs
    (116) multmlhs -> . empty
    (190) empty -> .

    COMMA           shift and go to state 257
    MULTIPLY        reduce using rule 190 (empty -> .)
    EQUALS          reduce using rule 190 (empty -> .)
    MODULO_EQUALS   reduce using rule 190 (empty -> .)
    DIVIDE_EQUALS   reduce using rule 190 (empty -> .)
    MINUS_EQUALS    reduce using rule 190 (empty -> .)
    PLUS_EQUALS     reduce using rule 190 (empty -> .)
    OR_EQUALS       reduce using rule 190 (empty -> .)
    AND_EQUALS      reduce using rule 190 (empty -> .)
    XOR_EQUALS      reduce using rule 190 (empty -> .)
    RIGHT_SHIFT_EQUALS reduce using rule 190 (empty -> .)
    LEFT_SHIFT_EQUALS reduce using rule 190 (empty -> .)
    MULTIPLY_EQUALS reduce using rule 190 (empty -> .)
    LOGICAL_AND_EQUALS reduce using rule 190 (empty -> .)
    LOGICAL_OR_EQUALS reduce using rule 190 (empty -> .)
    POWER_EQUALS    reduce using rule 190 (empty -> .)
    CLOSE_BRACKET   reduce using rule 190 (empty -> .)
    in              reduce using rule 190 (empty -> .)

    empty                          shift and go to state 258
    multmlhs                       shift and go to state 333

state 304

    (107) whenargs -> MULTIPLY arg .
    (37) arg -> arg . BIT_OR term0

    then            reduce using rule 107 (whenargs -> MULTIPLY arg .)
    SEMI_COLON      reduce using rule 107 (whenargs -> MULTIPLY arg .)
    NEWLINE         reduce using rule 107 (whenargs -> MULTIPLY arg .)
    BIT_OR          shift and go to state 116


state 305

    (96) multcase -> when whenargs pthen . compstmt multcase
    (97) multcase -> when whenargs pthen . compstmt
    (1) compstmt -> . multcompstmt
    (2) multcompstmt -> . newline stmt multcompstmt
    (3) multcompstmt -> . stmt multcompstmt
    (4) multcompstmt -> . newline
    (5) multcompstmt -> . empty
    (188) newline -> . SEMI_COLON
    (189) newline -> . NEWLINE
    (6) stmt -> . def IDENTIFIER argdecl compstmt end
    (7) stmt -> . def singleton DOT IDENTIFIER argdecl compstmt end
    (8) stmt -> . def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end
    (9) stmt -> . class IDENTIFIER LESS IDENTIFIER compstmt end
    (10) stmt -> . class IDENTIFIER compstmt end
    (11) stmt -> . break
    (12) stmt -> . expr
    (190) empty -> .
    (13) expr -> . if expr1 pthen compstmt end
    (14) expr -> . if expr1 pthen compstmt multelsif else compstmt end
    (15) expr -> . while expr1 pdo compstmt end
    (16) expr -> . until expr1 pdo compstmt end
    (17) expr -> . case compstmt multcase else compstmt end
    (18) expr -> . case compstmt multcase end
    (19) expr -> . for mlhs in expr1 pdo compstmt end
    (20) expr -> . expr1
    (21) expr1 -> . return callargs
    (22) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (23) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (24) expr1 -> . return
    (25) expr1 -> . expr2
    (26) expr2 -> . call
    (27) expr2 -> . arg
    (28) call -> . function
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (29) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (30) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) function -> . primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> . primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (33) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> . primary DOT IDENTIFIER
    (36) function -> . primary CONSTANT_RESOLUTION IDENTIFIER
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary

    SEMI_COLON      shift and go to state 24
    NEWLINE         shift and go to state 4
    def             shift and go to state 45
    class           shift and go to state 57
    break           shift and go to state 9
    when            reduce using rule 190 (empty -> .)
    else            reduce using rule 190 (empty -> .)
    end             reduce using rule 190 (empty -> .)
    if              shift and go to state 49
    while           shift and go to state 44
    until           shift and go to state 36
    case            shift and go to state 42
    for             shift and go to state 26
    return          shift and go to state 7
    IDENTIFIER      shift and go to state 35
    OPEN_BRACKET    shift and go to state 5
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 32
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 25
    expr2                          shift and go to state 51
    literal                        shift and go to state 33
    expr1                          shift and go to state 52
    call                           shift and go to state 34
    varname                        shift and go to state 30
    empty                          shift and go to state 37
    function                       shift and go to state 38
    newline                        shift and go to state 55
    multcompstmt                   shift and go to state 8
    stmt                           shift and go to state 27
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 56
    compstmt                       shift and go to state 334
    term5                          shift and go to state 16
    expr                           shift and go to state 43
    lhs                            shift and go to state 59
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 306

    (105) whenargs -> args COMMA . MULTIPLY arg

    MULTIPLY        shift and go to state 335


state 307

    (17) expr -> case compstmt multcase else compstmt . end

    end             shift and go to state 336


state 308

    (15) expr -> while expr1 pdo compstmt end .

    SEMI_COLON      reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    NEWLINE         reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    def             reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    class           reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    break           reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    if              reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    while           reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    until           reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    case            reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    for             reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    return          reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    IDENTIFIER      reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    OPEN_BRACKET    reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    CONSTANT_RESOLUTION reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    OPEN_SQUARE     reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    OPEN_FLOWER     reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    nil             reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    self            reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    NUMBER          reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    FLOAT           reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    STRING          reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    true            reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    false           reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    GLOBAL          reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    AT_THE_RATE     reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    MINUS           reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    PLUS            reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    $end            reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    when            reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    end             reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    elsif           reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    else            reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    then            reduce using rule 15 (expr -> while expr1 pdo compstmt end .)
    CLOSE_BRACKET   reduce using rule 15 (expr -> while expr1 pdo compstmt end .)


state 309

    (8) stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl . compstmt end
    (1) compstmt -> . multcompstmt
    (2) multcompstmt -> . newline stmt multcompstmt
    (3) multcompstmt -> . stmt multcompstmt
    (4) multcompstmt -> . newline
    (5) multcompstmt -> . empty
    (188) newline -> . SEMI_COLON
    (189) newline -> . NEWLINE
    (6) stmt -> . def IDENTIFIER argdecl compstmt end
    (7) stmt -> . def singleton DOT IDENTIFIER argdecl compstmt end
    (8) stmt -> . def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end
    (9) stmt -> . class IDENTIFIER LESS IDENTIFIER compstmt end
    (10) stmt -> . class IDENTIFIER compstmt end
    (11) stmt -> . break
    (12) stmt -> . expr
    (190) empty -> .
    (13) expr -> . if expr1 pthen compstmt end
    (14) expr -> . if expr1 pthen compstmt multelsif else compstmt end
    (15) expr -> . while expr1 pdo compstmt end
    (16) expr -> . until expr1 pdo compstmt end
    (17) expr -> . case compstmt multcase else compstmt end
    (18) expr -> . case compstmt multcase end
    (19) expr -> . for mlhs in expr1 pdo compstmt end
    (20) expr -> . expr1
    (21) expr1 -> . return callargs
    (22) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (23) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (24) expr1 -> . return
    (25) expr1 -> . expr2
    (26) expr2 -> . call
    (27) expr2 -> . arg
    (28) call -> . function
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (29) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (30) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) function -> . primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> . primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (33) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> . primary DOT IDENTIFIER
    (36) function -> . primary CONSTANT_RESOLUTION IDENTIFIER
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary

    SEMI_COLON      shift and go to state 24
    NEWLINE         shift and go to state 4
    def             shift and go to state 45
    class           shift and go to state 57
    break           shift and go to state 9
    end             reduce using rule 190 (empty -> .)
    if              shift and go to state 49
    while           shift and go to state 44
    until           shift and go to state 36
    case            shift and go to state 42
    for             shift and go to state 26
    return          shift and go to state 7
    IDENTIFIER      shift and go to state 35
    OPEN_BRACKET    shift and go to state 5
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 32
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 25
    expr2                          shift and go to state 51
    literal                        shift and go to state 33
    expr1                          shift and go to state 52
    call                           shift and go to state 34
    varname                        shift and go to state 30
    empty                          shift and go to state 37
    function                       shift and go to state 38
    newline                        shift and go to state 55
    multcompstmt                   shift and go to state 8
    stmt                           shift and go to state 27
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 56
    compstmt                       shift and go to state 337
    term5                          shift and go to state 16
    expr                           shift and go to state 43
    lhs                            shift and go to state 59
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 310

    (7) stmt -> def singleton DOT IDENTIFIER argdecl . compstmt end
    (1) compstmt -> . multcompstmt
    (2) multcompstmt -> . newline stmt multcompstmt
    (3) multcompstmt -> . stmt multcompstmt
    (4) multcompstmt -> . newline
    (5) multcompstmt -> . empty
    (188) newline -> . SEMI_COLON
    (189) newline -> . NEWLINE
    (6) stmt -> . def IDENTIFIER argdecl compstmt end
    (7) stmt -> . def singleton DOT IDENTIFIER argdecl compstmt end
    (8) stmt -> . def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end
    (9) stmt -> . class IDENTIFIER LESS IDENTIFIER compstmt end
    (10) stmt -> . class IDENTIFIER compstmt end
    (11) stmt -> . break
    (12) stmt -> . expr
    (190) empty -> .
    (13) expr -> . if expr1 pthen compstmt end
    (14) expr -> . if expr1 pthen compstmt multelsif else compstmt end
    (15) expr -> . while expr1 pdo compstmt end
    (16) expr -> . until expr1 pdo compstmt end
    (17) expr -> . case compstmt multcase else compstmt end
    (18) expr -> . case compstmt multcase end
    (19) expr -> . for mlhs in expr1 pdo compstmt end
    (20) expr -> . expr1
    (21) expr1 -> . return callargs
    (22) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (23) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (24) expr1 -> . return
    (25) expr1 -> . expr2
    (26) expr2 -> . call
    (27) expr2 -> . arg
    (28) call -> . function
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (29) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (30) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) function -> . primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> . primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (33) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> . primary DOT IDENTIFIER
    (36) function -> . primary CONSTANT_RESOLUTION IDENTIFIER
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary

    SEMI_COLON      shift and go to state 24
    NEWLINE         shift and go to state 4
    def             shift and go to state 45
    class           shift and go to state 57
    break           shift and go to state 9
    end             reduce using rule 190 (empty -> .)
    if              shift and go to state 49
    while           shift and go to state 44
    until           shift and go to state 36
    case            shift and go to state 42
    for             shift and go to state 26
    return          shift and go to state 7
    IDENTIFIER      shift and go to state 35
    OPEN_BRACKET    shift and go to state 5
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 32
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 25
    expr2                          shift and go to state 51
    literal                        shift and go to state 33
    expr1                          shift and go to state 52
    call                           shift and go to state 34
    varname                        shift and go to state 30
    empty                          shift and go to state 37
    function                       shift and go to state 38
    newline                        shift and go to state 55
    multcompstmt                   shift and go to state 8
    stmt                           shift and go to state 27
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 56
    compstmt                       shift and go to state 338
    term5                          shift and go to state 16
    expr                           shift and go to state 43
    lhs                            shift and go to state 59
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 311

    (6) stmt -> def IDENTIFIER argdecl compstmt end .

    SEMI_COLON      reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    NEWLINE         reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    def             reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    class           reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    break           reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    if              reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    while           reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    until           reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    case            reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    for             reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    return          reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    IDENTIFIER      reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    OPEN_BRACKET    reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    CONSTANT_RESOLUTION reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    OPEN_SQUARE     reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    OPEN_FLOWER     reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    nil             reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    self            reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    NUMBER          reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    FLOAT           reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    STRING          reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    true            reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    false           reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    GLOBAL          reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    AT_THE_RATE     reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    MINUS           reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    PLUS            reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    $end            reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    when            reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    end             reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    elsif           reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)
    else            reduce using rule 6 (stmt -> def IDENTIFIER argdecl compstmt end .)


state 312

    (143) argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .

    SEMI_COLON      reduce using rule 143 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    NEWLINE         reduce using rule 143 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    def             reduce using rule 143 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    class           reduce using rule 143 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    break           reduce using rule 143 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    if              reduce using rule 143 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    while           reduce using rule 143 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    until           reduce using rule 143 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    case            reduce using rule 143 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    for             reduce using rule 143 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    return          reduce using rule 143 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 143 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 143 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    CONSTANT_RESOLUTION reduce using rule 143 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    OPEN_SQUARE     reduce using rule 143 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    OPEN_FLOWER     reduce using rule 143 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    nil             reduce using rule 143 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    self            reduce using rule 143 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    NUMBER          reduce using rule 143 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    FLOAT           reduce using rule 143 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    STRING          reduce using rule 143 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    true            reduce using rule 143 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    false           reduce using rule 143 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    GLOBAL          reduce using rule 143 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 143 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    MINUS           reduce using rule 143 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    PLUS            reduce using rule 143 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    end             reduce using rule 143 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)


state 313

    (151) arglist -> MULTIPLY IDENTIFIER COMMA . BIT_AND IDENTIFIER

    BIT_AND         shift and go to state 339


state 314

    (145) arglist -> IDENTIFIER multarglist COMMA . MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER
    (146) arglist -> IDENTIFIER multarglist COMMA . MULTIPLY COMMA BIT_AND IDENTIFIER
    (147) arglist -> IDENTIFIER multarglist COMMA . BIT_AND IDENTIFIER
    (148) arglist -> IDENTIFIER multarglist COMMA . MULTIPLY IDENTIFIER
    (149) arglist -> IDENTIFIER multarglist COMMA . MULTIPLY

    MULTIPLY        shift and go to state 340
    BIT_AND         shift and go to state 341


state 315

    (155) multarglist -> COMMA IDENTIFIER . multarglist
    (155) multarglist -> . COMMA IDENTIFIER multarglist
    (156) multarglist -> . empty
    (190) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 275
    SEMI_COLON      reduce using rule 190 (empty -> .)
    NEWLINE         reduce using rule 190 (empty -> .)
    CLOSE_BRACKET   reduce using rule 190 (empty -> .)

  ! COMMA           [ reduce using rule 190 (empty -> .) ]

    multarglist                    shift and go to state 342
    empty                          shift and go to state 276

state 316

    (14) expr -> if expr1 pthen compstmt multelsif . else compstmt end

    else            shift and go to state 343


state 317

    (13) expr -> if expr1 pthen compstmt end .

    SEMI_COLON      reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    NEWLINE         reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    def             reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    class           reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    break           reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    if              reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    while           reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    until           reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    case            reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    for             reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    return          reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    IDENTIFIER      reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    OPEN_BRACKET    reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    CONSTANT_RESOLUTION reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    OPEN_SQUARE     reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    OPEN_FLOWER     reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    nil             reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    self            reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    NUMBER          reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    FLOAT           reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    STRING          reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    true            reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    false           reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    GLOBAL          reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    AT_THE_RATE     reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    MINUS           reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    PLUS            reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    $end            reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    when            reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    end             reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    elsif           reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    else            reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    then            reduce using rule 13 (expr -> if expr1 pthen compstmt end .)
    CLOSE_BRACKET   reduce using rule 13 (expr -> if expr1 pthen compstmt end .)


state 318

    (98) multelsif -> elsif . expr pthen compstmt multelsif
    (13) expr -> . if expr1 pthen compstmt end
    (14) expr -> . if expr1 pthen compstmt multelsif else compstmt end
    (15) expr -> . while expr1 pdo compstmt end
    (16) expr -> . until expr1 pdo compstmt end
    (17) expr -> . case compstmt multcase else compstmt end
    (18) expr -> . case compstmt multcase end
    (19) expr -> . for mlhs in expr1 pdo compstmt end
    (20) expr -> . expr1
    (21) expr1 -> . return callargs
    (22) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (23) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (24) expr1 -> . return
    (25) expr1 -> . expr2
    (26) expr2 -> . call
    (27) expr2 -> . arg
    (28) call -> . function
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (29) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (30) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) function -> . primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> . primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (33) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> . primary DOT IDENTIFIER
    (36) function -> . primary CONSTANT_RESOLUTION IDENTIFIER
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary

    if              shift and go to state 49
    while           shift and go to state 44
    until           shift and go to state 36
    case            shift and go to state 42
    for             shift and go to state 26
    return          shift and go to state 7
    IDENTIFIER      shift and go to state 35
    OPEN_BRACKET    shift and go to state 5
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 32
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 25
    expr2                          shift and go to state 51
    literal                        shift and go to state 33
    expr1                          shift and go to state 52
    call                           shift and go to state 34
    varname                        shift and go to state 30
    function                       shift and go to state 38
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 56
    expr                           shift and go to state 344
    lhs                            shift and go to state 59
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 319

    (99) multelsif -> empty .

    else            reduce using rule 99 (multelsif -> empty .)


state 320

    (9) stmt -> class IDENTIFIER LESS IDENTIFIER compstmt . end

    end             shift and go to state 345


state 321

    (40) term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .

    BIT_OR          reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    COMMA           reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    SEMI_COLON      reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    NEWLINE         reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    def             reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    class           reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    break           reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    if              reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    while           reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    until           reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    case            reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    for             reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    return          reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    CONSTANT_RESOLUTION reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    OPEN_SQUARE     reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    OPEN_FLOWER     reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    nil             reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    self            reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    NUMBER          reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    FLOAT           reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    STRING          reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    true            reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    false           reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    GLOBAL          reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    MINUS           reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    PLUS            reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    $end            reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    when            reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    end             reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    elsif           reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    else            reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    do              reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    then            reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    CLOSE_FLOWER    reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    MAP             reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    CLOSE_SQUARE    reduce using rule 40 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)


state 322

    (124) mrhs -> args COMMA MULTIPLY arg .
    (37) arg -> arg . BIT_OR term0

  ! shift/reduce conflict for BIT_OR resolved as shift
    COMMA           reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    SEMI_COLON      reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    NEWLINE         reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    def             reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    class           reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    break           reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    if              reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    while           reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    until           reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    case            reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    for             reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    return          reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    IDENTIFIER      reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    OPEN_BRACKET    reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    CONSTANT_RESOLUTION reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    OPEN_SQUARE     reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    OPEN_FLOWER     reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    nil             reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    self            reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    NUMBER          reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    FLOAT           reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    STRING          reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    true            reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    false           reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    GLOBAL          reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    AT_THE_RATE     reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    MINUS           reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    PLUS            reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    $end            reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    CLOSE_BRACKET   reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    MAP             reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    when            reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    end             reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    elsif           reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    else            reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    do              reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    then            reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    CLOSE_SQUARE    reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    CLOSE_FLOWER    reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .)
    BIT_OR          shift and go to state 116

  ! BIT_OR          [ reduce using rule 124 (mrhs -> args COMMA MULTIPLY arg .) ]


state 323

    (41) term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .

    BIT_OR          reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    COMMA           reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    SEMI_COLON      reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    NEWLINE         reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    def             reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    class           reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    break           reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    if              reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    while           reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    until           reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    case            reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    for             reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    return          reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    CONSTANT_RESOLUTION reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    OPEN_SQUARE     reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    OPEN_FLOWER     reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    nil             reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    self            reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    NUMBER          reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    FLOAT           reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    STRING          reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    true            reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    false           reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    GLOBAL          reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    MINUS           reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    PLUS            reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    $end            reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    when            reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    end             reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    elsif           reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    else            reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    do              reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    then            reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    CLOSE_FLOWER    reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    MAP             reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    CLOSE_SQUARE    reduce using rule 41 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)


state 324

    (138) callargs -> MULTIPLY arg COMMA BIT_AND arg .
    (37) arg -> arg . BIT_OR term0

    CLOSE_BRACKET   reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    SEMI_COLON      reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    NEWLINE         reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    def             reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    class           reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    break           reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    if              reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    while           reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    until           reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    case            reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    for             reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    return          reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    IDENTIFIER      reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    OPEN_BRACKET    reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    CONSTANT_RESOLUTION reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    OPEN_SQUARE     reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    OPEN_FLOWER     reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    nil             reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    self            reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    NUMBER          reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    FLOAT           reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    STRING          reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    true            reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    false           reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    GLOBAL          reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    AT_THE_RATE     reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    MINUS           reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    PLUS            reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    $end            reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    when            reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    end             reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    elsif           reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    else            reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    do              reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    then            reduce using rule 138 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    BIT_OR          shift and go to state 116


state 325

    (134) callargs -> assocs COMMA MULTIPLY arg COMMA . BIT_AND arg

    BIT_AND         shift and go to state 346


state 326

    (128) callargs -> args COMMA MULTIPLY arg COMMA . BIT_AND arg

    BIT_AND         shift and go to state 347


state 327

    (129) callargs -> args COMMA assocs COMMA BIT_AND . arg
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 348
    literal                        shift and go to state 33
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 328

    (127) callargs -> args COMMA assocs COMMA MULTIPLY . arg COMMA BIT_AND arg
    (130) callargs -> args COMMA assocs COMMA MULTIPLY . arg
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 349
    literal                        shift and go to state 33
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 329

    (19) expr -> for mlhs in expr1 pdo compstmt . end

    end             shift and go to state 350


state 330

    (33) function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .

    do              reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    SEMI_COLON      reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    NEWLINE         reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    def             reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    class           reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    break           reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    if              reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    while           reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    until           reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    case            reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    for             reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    return          reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    CONSTANT_RESOLUTION reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    OPEN_SQUARE     reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    OPEN_FLOWER     reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    nil             reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    self            reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    NUMBER          reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    FLOAT           reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    STRING          reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    true            reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    false           reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    GLOBAL          reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    MINUS           reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    PLUS            reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    end             reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    $end            reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    when            reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    elsif           reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    else            reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    then            reduce using rule 33 (function -> primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)


state 331

    (31) function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .

    do              reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    SEMI_COLON      reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    NEWLINE         reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    def             reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    class           reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    break           reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    if              reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    while           reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    until           reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    case            reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    for             reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    return          reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    CONSTANT_RESOLUTION reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    OPEN_SQUARE     reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    OPEN_FLOWER     reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    nil             reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    self            reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    NUMBER          reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    FLOAT           reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    STRING          reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    true            reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    false           reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    GLOBAL          reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    MINUS           reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    PLUS            reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    end             reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    $end            reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    when            reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    elsif           reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    else            reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    then            reduce using rule 31 (function -> primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)


state 332

    (108) mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs .

    CLOSE_BRACKET   reduce using rule 108 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs .)
    EQUALS          reduce using rule 108 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs .)
    MODULO_EQUALS   reduce using rule 108 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs .)
    DIVIDE_EQUALS   reduce using rule 108 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs .)
    MINUS_EQUALS    reduce using rule 108 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs .)
    PLUS_EQUALS     reduce using rule 108 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs .)
    OR_EQUALS       reduce using rule 108 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs .)
    AND_EQUALS      reduce using rule 108 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs .)
    XOR_EQUALS      reduce using rule 108 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs .)
    RIGHT_SHIFT_EQUALS reduce using rule 108 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs .)
    LEFT_SHIFT_EQUALS reduce using rule 108 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs .)
    MULTIPLY_EQUALS reduce using rule 108 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs .)
    LOGICAL_AND_EQUALS reduce using rule 108 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs .)
    LOGICAL_OR_EQUALS reduce using rule 108 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs .)
    POWER_EQUALS    reduce using rule 108 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs .)
    in              reduce using rule 108 (mlhs -> mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs .)


state 333

    (115) multmlhs -> COMMA mlhsitem multmlhs .

    MULTIPLY        reduce using rule 115 (multmlhs -> COMMA mlhsitem multmlhs .)
    EQUALS          reduce using rule 115 (multmlhs -> COMMA mlhsitem multmlhs .)
    MODULO_EQUALS   reduce using rule 115 (multmlhs -> COMMA mlhsitem multmlhs .)
    DIVIDE_EQUALS   reduce using rule 115 (multmlhs -> COMMA mlhsitem multmlhs .)
    MINUS_EQUALS    reduce using rule 115 (multmlhs -> COMMA mlhsitem multmlhs .)
    PLUS_EQUALS     reduce using rule 115 (multmlhs -> COMMA mlhsitem multmlhs .)
    OR_EQUALS       reduce using rule 115 (multmlhs -> COMMA mlhsitem multmlhs .)
    AND_EQUALS      reduce using rule 115 (multmlhs -> COMMA mlhsitem multmlhs .)
    XOR_EQUALS      reduce using rule 115 (multmlhs -> COMMA mlhsitem multmlhs .)
    RIGHT_SHIFT_EQUALS reduce using rule 115 (multmlhs -> COMMA mlhsitem multmlhs .)
    LEFT_SHIFT_EQUALS reduce using rule 115 (multmlhs -> COMMA mlhsitem multmlhs .)
    MULTIPLY_EQUALS reduce using rule 115 (multmlhs -> COMMA mlhsitem multmlhs .)
    LOGICAL_AND_EQUALS reduce using rule 115 (multmlhs -> COMMA mlhsitem multmlhs .)
    LOGICAL_OR_EQUALS reduce using rule 115 (multmlhs -> COMMA mlhsitem multmlhs .)
    POWER_EQUALS    reduce using rule 115 (multmlhs -> COMMA mlhsitem multmlhs .)
    CLOSE_BRACKET   reduce using rule 115 (multmlhs -> COMMA mlhsitem multmlhs .)
    in              reduce using rule 115 (multmlhs -> COMMA mlhsitem multmlhs .)


state 334

    (96) multcase -> when whenargs pthen compstmt . multcase
    (97) multcase -> when whenargs pthen compstmt .
    (96) multcase -> . when whenargs pthen compstmt multcase
    (97) multcase -> . when whenargs pthen compstmt

    else            reduce using rule 97 (multcase -> when whenargs pthen compstmt .)
    end             reduce using rule 97 (multcase -> when whenargs pthen compstmt .)
    when            shift and go to state 207

    multcase                       shift and go to state 351

state 335

    (105) whenargs -> args COMMA MULTIPLY . arg
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 352
    literal                        shift and go to state 33
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 336

    (17) expr -> case compstmt multcase else compstmt end .

    SEMI_COLON      reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    NEWLINE         reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    def             reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    class           reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    break           reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    if              reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    while           reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    until           reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    case            reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    for             reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    return          reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    IDENTIFIER      reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    OPEN_BRACKET    reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    CONSTANT_RESOLUTION reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    OPEN_SQUARE     reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    OPEN_FLOWER     reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    nil             reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    self            reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    NUMBER          reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    FLOAT           reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    STRING          reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    true            reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    false           reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    GLOBAL          reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    AT_THE_RATE     reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    MINUS           reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    PLUS            reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    $end            reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    when            reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    end             reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    elsif           reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    else            reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    then            reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)
    CLOSE_BRACKET   reduce using rule 17 (expr -> case compstmt multcase else compstmt end .)


state 337

    (8) stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt . end

    end             shift and go to state 353


state 338

    (7) stmt -> def singleton DOT IDENTIFIER argdecl compstmt . end

    end             shift and go to state 354


state 339

    (151) arglist -> MULTIPLY IDENTIFIER COMMA BIT_AND . IDENTIFIER

    IDENTIFIER      shift and go to state 355


state 340

    (145) arglist -> IDENTIFIER multarglist COMMA MULTIPLY . IDENTIFIER COMMA BIT_AND IDENTIFIER
    (146) arglist -> IDENTIFIER multarglist COMMA MULTIPLY . COMMA BIT_AND IDENTIFIER
    (148) arglist -> IDENTIFIER multarglist COMMA MULTIPLY . IDENTIFIER
    (149) arglist -> IDENTIFIER multarglist COMMA MULTIPLY .

    IDENTIFIER      shift and go to state 356
    COMMA           shift and go to state 357
    SEMI_COLON      reduce using rule 149 (arglist -> IDENTIFIER multarglist COMMA MULTIPLY .)
    NEWLINE         reduce using rule 149 (arglist -> IDENTIFIER multarglist COMMA MULTIPLY .)
    CLOSE_BRACKET   reduce using rule 149 (arglist -> IDENTIFIER multarglist COMMA MULTIPLY .)


state 341

    (147) arglist -> IDENTIFIER multarglist COMMA BIT_AND . IDENTIFIER

    IDENTIFIER      shift and go to state 358


state 342

    (155) multarglist -> COMMA IDENTIFIER multarglist .

    COMMA           reduce using rule 155 (multarglist -> COMMA IDENTIFIER multarglist .)
    SEMI_COLON      reduce using rule 155 (multarglist -> COMMA IDENTIFIER multarglist .)
    NEWLINE         reduce using rule 155 (multarglist -> COMMA IDENTIFIER multarglist .)
    CLOSE_BRACKET   reduce using rule 155 (multarglist -> COMMA IDENTIFIER multarglist .)


state 343

    (14) expr -> if expr1 pthen compstmt multelsif else . compstmt end
    (1) compstmt -> . multcompstmt
    (2) multcompstmt -> . newline stmt multcompstmt
    (3) multcompstmt -> . stmt multcompstmt
    (4) multcompstmt -> . newline
    (5) multcompstmt -> . empty
    (188) newline -> . SEMI_COLON
    (189) newline -> . NEWLINE
    (6) stmt -> . def IDENTIFIER argdecl compstmt end
    (7) stmt -> . def singleton DOT IDENTIFIER argdecl compstmt end
    (8) stmt -> . def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end
    (9) stmt -> . class IDENTIFIER LESS IDENTIFIER compstmt end
    (10) stmt -> . class IDENTIFIER compstmt end
    (11) stmt -> . break
    (12) stmt -> . expr
    (190) empty -> .
    (13) expr -> . if expr1 pthen compstmt end
    (14) expr -> . if expr1 pthen compstmt multelsif else compstmt end
    (15) expr -> . while expr1 pdo compstmt end
    (16) expr -> . until expr1 pdo compstmt end
    (17) expr -> . case compstmt multcase else compstmt end
    (18) expr -> . case compstmt multcase end
    (19) expr -> . for mlhs in expr1 pdo compstmt end
    (20) expr -> . expr1
    (21) expr1 -> . return callargs
    (22) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (23) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (24) expr1 -> . return
    (25) expr1 -> . expr2
    (26) expr2 -> . call
    (27) expr2 -> . arg
    (28) call -> . function
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (29) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (30) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) function -> . primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> . primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (33) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> . primary DOT IDENTIFIER
    (36) function -> . primary CONSTANT_RESOLUTION IDENTIFIER
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary

    SEMI_COLON      shift and go to state 24
    NEWLINE         shift and go to state 4
    def             shift and go to state 45
    class           shift and go to state 57
    break           shift and go to state 9
    end             reduce using rule 190 (empty -> .)
    if              shift and go to state 49
    while           shift and go to state 44
    until           shift and go to state 36
    case            shift and go to state 42
    for             shift and go to state 26
    return          shift and go to state 7
    IDENTIFIER      shift and go to state 35
    OPEN_BRACKET    shift and go to state 5
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 32
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 25
    expr2                          shift and go to state 51
    literal                        shift and go to state 33
    expr1                          shift and go to state 52
    call                           shift and go to state 34
    varname                        shift and go to state 30
    empty                          shift and go to state 37
    function                       shift and go to state 38
    newline                        shift and go to state 55
    multcompstmt                   shift and go to state 8
    stmt                           shift and go to state 27
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 56
    compstmt                       shift and go to state 359
    term5                          shift and go to state 16
    expr                           shift and go to state 43
    lhs                            shift and go to state 59
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 344

    (98) multelsif -> elsif expr . pthen compstmt multelsif
    (166) pthen -> . newline
    (167) pthen -> . then
    (168) pthen -> . newline then
    (188) newline -> . SEMI_COLON
    (189) newline -> . NEWLINE

    then            shift and go to state 224
    SEMI_COLON      shift and go to state 24
    NEWLINE         shift and go to state 4

    pthen                          shift and go to state 360
    newline                        shift and go to state 225

state 345

    (9) stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .

    SEMI_COLON      reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    NEWLINE         reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    def             reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    class           reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    break           reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    if              reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    while           reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    until           reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    case            reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    for             reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    return          reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    IDENTIFIER      reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    OPEN_BRACKET    reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    CONSTANT_RESOLUTION reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    OPEN_SQUARE     reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    OPEN_FLOWER     reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    nil             reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    self            reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    NUMBER          reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    FLOAT           reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    STRING          reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    true            reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    false           reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    GLOBAL          reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    AT_THE_RATE     reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    MINUS           reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    PLUS            reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    $end            reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    when            reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    end             reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    elsif           reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)
    else            reduce using rule 9 (stmt -> class IDENTIFIER LESS IDENTIFIER compstmt end .)


state 346

    (134) callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND . arg
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 361
    literal                        shift and go to state 33
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 347

    (128) callargs -> args COMMA MULTIPLY arg COMMA BIT_AND . arg
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 362
    literal                        shift and go to state 33
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 348

    (129) callargs -> args COMMA assocs COMMA BIT_AND arg .
    (37) arg -> arg . BIT_OR term0

    CLOSE_BRACKET   reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    SEMI_COLON      reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    NEWLINE         reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    def             reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    class           reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    break           reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    if              reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    while           reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    until           reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    case            reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    for             reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    return          reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    IDENTIFIER      reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    OPEN_BRACKET    reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    CONSTANT_RESOLUTION reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    OPEN_SQUARE     reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    OPEN_FLOWER     reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    nil             reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    self            reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    NUMBER          reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    FLOAT           reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    STRING          reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    true            reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    false           reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    GLOBAL          reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    AT_THE_RATE     reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    MINUS           reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    PLUS            reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    $end            reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    when            reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    end             reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    elsif           reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    else            reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    do              reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    then            reduce using rule 129 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    BIT_OR          shift and go to state 116


state 349

    (127) callargs -> args COMMA assocs COMMA MULTIPLY arg . COMMA BIT_AND arg
    (130) callargs -> args COMMA assocs COMMA MULTIPLY arg .
    (37) arg -> arg . BIT_OR term0

    COMMA           shift and go to state 363
    CLOSE_BRACKET   reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    SEMI_COLON      reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    NEWLINE         reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    def             reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    class           reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    break           reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    if              reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    while           reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    until           reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    case            reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    for             reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    return          reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    IDENTIFIER      reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    OPEN_BRACKET    reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    CONSTANT_RESOLUTION reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    OPEN_SQUARE     reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    OPEN_FLOWER     reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    nil             reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    self            reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    NUMBER          reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    FLOAT           reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    STRING          reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    true            reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    false           reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    GLOBAL          reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    AT_THE_RATE     reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    MINUS           reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    PLUS            reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    $end            reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    when            reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    end             reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    elsif           reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    else            reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    do              reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    then            reduce using rule 130 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    BIT_OR          shift and go to state 116


state 350

    (19) expr -> for mlhs in expr1 pdo compstmt end .

    SEMI_COLON      reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    NEWLINE         reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    def             reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    class           reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    break           reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    if              reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    while           reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    until           reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    case            reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    for             reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    return          reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    IDENTIFIER      reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    OPEN_BRACKET    reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    CONSTANT_RESOLUTION reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    OPEN_SQUARE     reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    OPEN_FLOWER     reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    nil             reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    self            reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    NUMBER          reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    FLOAT           reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    STRING          reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    true            reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    false           reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    GLOBAL          reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    AT_THE_RATE     reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    MINUS           reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    PLUS            reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    $end            reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    when            reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    end             reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    elsif           reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    else            reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    then            reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)
    CLOSE_BRACKET   reduce using rule 19 (expr -> for mlhs in expr1 pdo compstmt end .)


state 351

    (96) multcase -> when whenargs pthen compstmt multcase .

    else            reduce using rule 96 (multcase -> when whenargs pthen compstmt multcase .)
    end             reduce using rule 96 (multcase -> when whenargs pthen compstmt multcase .)


state 352

    (105) whenargs -> args COMMA MULTIPLY arg .
    (37) arg -> arg . BIT_OR term0

    then            reduce using rule 105 (whenargs -> args COMMA MULTIPLY arg .)
    SEMI_COLON      reduce using rule 105 (whenargs -> args COMMA MULTIPLY arg .)
    NEWLINE         reduce using rule 105 (whenargs -> args COMMA MULTIPLY arg .)
    BIT_OR          shift and go to state 116


state 353

    (8) stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .

    SEMI_COLON      reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    NEWLINE         reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    def             reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    class           reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    break           reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    if              reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    while           reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    until           reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    case            reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    for             reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    return          reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    IDENTIFIER      reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    OPEN_BRACKET    reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    CONSTANT_RESOLUTION reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    OPEN_SQUARE     reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    OPEN_FLOWER     reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    nil             reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    self            reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    NUMBER          reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    FLOAT           reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    STRING          reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    true            reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    false           reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    GLOBAL          reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    AT_THE_RATE     reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    MINUS           reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    PLUS            reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    $end            reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    when            reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    end             reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    elsif           reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)
    else            reduce using rule 8 (stmt -> def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end .)


state 354

    (7) stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .

    SEMI_COLON      reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    NEWLINE         reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    def             reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    class           reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    break           reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    if              reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    while           reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    until           reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    case            reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    for             reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    return          reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    IDENTIFIER      reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    OPEN_BRACKET    reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    CONSTANT_RESOLUTION reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    OPEN_SQUARE     reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    OPEN_FLOWER     reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    nil             reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    self            reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    NUMBER          reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    FLOAT           reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    STRING          reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    true            reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    false           reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    GLOBAL          reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    AT_THE_RATE     reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    MINUS           reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    PLUS            reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    $end            reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    when            reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    end             reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    elsif           reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)
    else            reduce using rule 7 (stmt -> def singleton DOT IDENTIFIER argdecl compstmt end .)


state 355

    (151) arglist -> MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER .

    SEMI_COLON      reduce using rule 151 (arglist -> MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER .)
    NEWLINE         reduce using rule 151 (arglist -> MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 151 (arglist -> MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER .)


state 356

    (145) arglist -> IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER . COMMA BIT_AND IDENTIFIER
    (148) arglist -> IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER .

    COMMA           shift and go to state 364
    SEMI_COLON      reduce using rule 148 (arglist -> IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER .)
    NEWLINE         reduce using rule 148 (arglist -> IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 148 (arglist -> IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER .)


state 357

    (146) arglist -> IDENTIFIER multarglist COMMA MULTIPLY COMMA . BIT_AND IDENTIFIER

    BIT_AND         shift and go to state 365


state 358

    (147) arglist -> IDENTIFIER multarglist COMMA BIT_AND IDENTIFIER .

    SEMI_COLON      reduce using rule 147 (arglist -> IDENTIFIER multarglist COMMA BIT_AND IDENTIFIER .)
    NEWLINE         reduce using rule 147 (arglist -> IDENTIFIER multarglist COMMA BIT_AND IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 147 (arglist -> IDENTIFIER multarglist COMMA BIT_AND IDENTIFIER .)


state 359

    (14) expr -> if expr1 pthen compstmt multelsif else compstmt . end

    end             shift and go to state 366


state 360

    (98) multelsif -> elsif expr pthen . compstmt multelsif
    (1) compstmt -> . multcompstmt
    (2) multcompstmt -> . newline stmt multcompstmt
    (3) multcompstmt -> . stmt multcompstmt
    (4) multcompstmt -> . newline
    (5) multcompstmt -> . empty
    (188) newline -> . SEMI_COLON
    (189) newline -> . NEWLINE
    (6) stmt -> . def IDENTIFIER argdecl compstmt end
    (7) stmt -> . def singleton DOT IDENTIFIER argdecl compstmt end
    (8) stmt -> . def singleton CONSTANT_RESOLUTION IDENTIFIER argdecl compstmt end
    (9) stmt -> . class IDENTIFIER LESS IDENTIFIER compstmt end
    (10) stmt -> . class IDENTIFIER compstmt end
    (11) stmt -> . break
    (12) stmt -> . expr
    (190) empty -> .
    (13) expr -> . if expr1 pthen compstmt end
    (14) expr -> . if expr1 pthen compstmt multelsif else compstmt end
    (15) expr -> . while expr1 pdo compstmt end
    (16) expr -> . until expr1 pdo compstmt end
    (17) expr -> . case compstmt multcase else compstmt end
    (18) expr -> . case compstmt multcase end
    (19) expr -> . for mlhs in expr1 pdo compstmt end
    (20) expr -> . expr1
    (21) expr1 -> . return callargs
    (22) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (23) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (24) expr1 -> . return
    (25) expr1 -> . expr2
    (26) expr2 -> . call
    (27) expr2 -> . arg
    (28) call -> . function
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (29) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (30) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) function -> . primary DOT IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (32) function -> . primary DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (33) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) function -> . primary CONSTANT_RESOLUTION IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) function -> . primary DOT IDENTIFIER
    (36) function -> . primary CONSTANT_RESOLUTION IDENTIFIER
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary

    SEMI_COLON      shift and go to state 24
    NEWLINE         shift and go to state 4
    def             shift and go to state 45
    class           shift and go to state 57
    break           shift and go to state 9
    elsif           reduce using rule 190 (empty -> .)
    else            reduce using rule 190 (empty -> .)
    if              shift and go to state 49
    while           shift and go to state 44
    until           shift and go to state 36
    case            shift and go to state 42
    for             shift and go to state 26
    return          shift and go to state 7
    IDENTIFIER      shift and go to state 35
    OPEN_BRACKET    shift and go to state 5
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    nil             shift and go to state 54
    self            shift and go to state 50
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 32
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 25
    expr2                          shift and go to state 51
    literal                        shift and go to state 33
    expr1                          shift and go to state 52
    call                           shift and go to state 34
    varname                        shift and go to state 30
    empty                          shift and go to state 37
    function                       shift and go to state 38
    newline                        shift and go to state 55
    multcompstmt                   shift and go to state 8
    stmt                           shift and go to state 27
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 56
    compstmt                       shift and go to state 367
    term5                          shift and go to state 16
    expr                           shift and go to state 43
    lhs                            shift and go to state 59
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 361

    (134) callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .
    (37) arg -> arg . BIT_OR term0

    CLOSE_BRACKET   reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    SEMI_COLON      reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    NEWLINE         reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    def             reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    class           reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    break           reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    if              reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    while           reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    until           reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    case            reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    for             reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    return          reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    IDENTIFIER      reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    OPEN_BRACKET    reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    CONSTANT_RESOLUTION reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    OPEN_SQUARE     reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    OPEN_FLOWER     reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    nil             reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    self            reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    NUMBER          reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    FLOAT           reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    STRING          reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    true            reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    false           reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    GLOBAL          reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    AT_THE_RATE     reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    MINUS           reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    PLUS            reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    $end            reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    when            reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    end             reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    elsif           reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    else            reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    do              reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    then            reduce using rule 134 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    BIT_OR          shift and go to state 116


state 362

    (128) callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .
    (37) arg -> arg . BIT_OR term0

    CLOSE_BRACKET   reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    SEMI_COLON      reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    NEWLINE         reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    def             reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    class           reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    break           reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    if              reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    while           reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    until           reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    case            reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    for             reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    return          reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    IDENTIFIER      reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    OPEN_BRACKET    reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    CONSTANT_RESOLUTION reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    OPEN_SQUARE     reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    OPEN_FLOWER     reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    nil             reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    self            reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    NUMBER          reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    FLOAT           reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    STRING          reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    true            reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    false           reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    GLOBAL          reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    AT_THE_RATE     reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    MINUS           reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    PLUS            reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    $end            reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    when            reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    end             reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    elsif           reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    else            reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    do              reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    then            reduce using rule 128 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    BIT_OR          shift and go to state 116


state 363

    (127) callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA . BIT_AND arg

    BIT_AND         shift and go to state 368


state 364

    (145) arglist -> IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER COMMA . BIT_AND IDENTIFIER

    BIT_AND         shift and go to state 369


state 365

    (146) arglist -> IDENTIFIER multarglist COMMA MULTIPLY COMMA BIT_AND . IDENTIFIER

    IDENTIFIER      shift and go to state 370


state 366

    (14) expr -> if expr1 pthen compstmt multelsif else compstmt end .

    SEMI_COLON      reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    NEWLINE         reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    def             reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    class           reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    break           reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    if              reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    while           reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    until           reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    case            reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    for             reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    return          reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    IDENTIFIER      reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    OPEN_BRACKET    reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    CONSTANT_RESOLUTION reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    OPEN_SQUARE     reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    OPEN_FLOWER     reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    nil             reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    self            reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    NUMBER          reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    FLOAT           reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    STRING          reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    true            reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    false           reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    GLOBAL          reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    AT_THE_RATE     reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    MINUS           reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    PLUS            reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    $end            reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    when            reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    end             reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    elsif           reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    else            reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    then            reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)
    CLOSE_BRACKET   reduce using rule 14 (expr -> if expr1 pthen compstmt multelsif else compstmt end .)


state 367

    (98) multelsif -> elsif expr pthen compstmt . multelsif
    (98) multelsif -> . elsif expr pthen compstmt multelsif
    (99) multelsif -> . empty
    (190) empty -> .

    elsif           shift and go to state 318
    else            reduce using rule 190 (empty -> .)

    empty                          shift and go to state 319
    multelsif                      shift and go to state 371

state 368

    (127) callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND . arg
    (37) arg -> . arg BIT_OR term0
    (38) arg -> . term0
    (39) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (40) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (41) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (42) term0 -> . term1
    (108) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY lhs
    (109) mlhs -> . mlhsitem COMMA mlhsitem multmlhs MULTIPLY
    (110) mlhs -> . mlhsitem COMMA mlhsitem multmlhs
    (111) mlhs -> . mlhsitem COMMA MULTIPLY lhs
    (112) mlhs -> . mlhsitem COMMA MULTIPLY
    (113) mlhs -> . mlhsitem COMMA
    (114) mlhs -> . mlhsitem
    (43) term1 -> . mlhs EQUALS mrhs
    (44) term1 -> . mlhs opasgn mrhs
    (45) term1 -> . term2
    (117) mlhsitem -> . lhs
    (118) mlhsitem -> . OPEN_BRACKET mlhs CLOSE_BRACKET
    (46) term2 -> . term3 INCL_RANGE term3
    (47) term2 -> . term3 EXCL_RANGE term3
    (48) term2 -> . term3
    (119) lhs -> . variable
    (120) lhs -> . variable OPEN_SQUARE args CLOSE_SQUARE
    (121) lhs -> . variable OPEN_SQUARE CLOSE_SQUARE
    (122) lhs -> . variable DOT IDENTIFIER
    (49) term3 -> . term3 LOGICAL_OR term4
    (50) term3 -> . term4
    (163) variable -> . varname
    (164) variable -> . nil
    (165) variable -> . self
    (51) term4 -> . term5 DOUBLE_EQUALS term5
    (52) term4 -> . term5 TRIPLE_EQUALS term5
    (53) term4 -> . term5 NOT_EQUALS term5
    (54) term4 -> . term5 EQUAL_TILDE term5
    (55) term4 -> . term5 BANG_TILDE term5
    (56) term4 -> . term5 COMPARISON term5
    (57) term4 -> . term5
    (185) varname -> . GLOBAL
    (186) varname -> . AT_THE_RATE IDENTIFIER
    (187) varname -> . IDENTIFIER
    (58) term5 -> . term5 LESS term6
    (59) term5 -> . term5 LESS_EQUALS term6
    (60) term5 -> . term5 GREATER term6
    (61) term5 -> . term5 GREATER_EQUALS term6
    (62) term5 -> . term6
    (63) term6 -> . term6 BIT_XOR term7
    (64) term6 -> . term7
    (65) term7 -> . term7 BIT_AND term8
    (66) term7 -> . term8
    (67) term8 -> . term8 LEFT_SHIFT term9
    (68) term8 -> . term8 RIGHT_SHIFT term9
    (69) term8 -> . term9
    (70) term9 -> . term9 PLUS term10
    (71) term9 -> . term9 MINUS term10
    (72) term9 -> . term10
    (73) term10 -> . term10 MULTIPLY term11
    (74) term10 -> . term10 DIVIDE term11
    (75) term10 -> . term10 MODULO term11
    (76) term10 -> . term11
    (77) term11 -> . MINUS term11
    (78) term11 -> . term12
    (79) term12 -> . PLUS term12
    (80) term12 -> . term13
    (81) term13 -> . primary POWER term13
    (82) term13 -> . primary
    (83) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (84) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (85) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (86) primary -> . OPEN_SQUARE args COMMA CLOSE_SQUARE
    (87) primary -> . OPEN_SQUARE args CLOSE_SQUARE
    (88) primary -> . OPEN_SQUARE CLOSE_SQUARE
    (89) primary -> . OPEN_FLOWER args COMMA CLOSE_FLOWER
    (90) primary -> . OPEN_FLOWER args CLOSE_FLOWER
    (91) primary -> . OPEN_FLOWER CLOSE_FLOWER
    (92) primary -> . OPEN_FLOWER assocs COMMA CLOSE_FLOWER
    (93) primary -> . OPEN_FLOWER assocs CLOSE_FLOWER
    (94) primary -> . literal
    (95) primary -> . lhs
    (100) literal -> . NUMBER
    (101) literal -> . FLOAT
    (102) literal -> . STRING
    (103) literal -> . true
    (104) literal -> . false

    OPEN_BRACKET    shift and go to state 82
    nil             shift and go to state 54
    self            shift and go to state 50
    GLOBAL          shift and go to state 31
    AT_THE_RATE     shift and go to state 23
    IDENTIFIER      shift and go to state 78
    MINUS           shift and go to state 3
    PLUS            shift and go to state 6
    CONSTANT_RESOLUTION shift and go to state 1
    OPEN_SQUARE     shift and go to state 28
    OPEN_FLOWER     shift and go to state 48
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 58
    STRING          shift and go to state 53
    true            shift and go to state 41
    false           shift and go to state 46

    term7                          shift and go to state 14
    term6                          shift and go to state 15
    term5                          shift and go to state 16
    term4                          shift and go to state 17
    term3                          shift and go to state 18
    term2                          shift and go to state 19
    term1                          shift and go to state 20
    term0                          shift and go to state 21
    mlhs                           shift and go to state 2
    primary                        shift and go to state 76
    term9                          shift and go to state 22
    term8                          shift and go to state 40
    arg                            shift and go to state 372
    literal                        shift and go to state 33
    mlhsitem                       shift and go to state 39
    variable                       shift and go to state 84
    varname                        shift and go to state 30
    lhs                            shift and go to state 85
    term13                         shift and go to state 10
    term12                         shift and go to state 11
    term11                         shift and go to state 12
    term10                         shift and go to state 13

state 369

    (145) arglist -> IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER COMMA BIT_AND . IDENTIFIER

    IDENTIFIER      shift and go to state 373


state 370

    (146) arglist -> IDENTIFIER multarglist COMMA MULTIPLY COMMA BIT_AND IDENTIFIER .

    SEMI_COLON      reduce using rule 146 (arglist -> IDENTIFIER multarglist COMMA MULTIPLY COMMA BIT_AND IDENTIFIER .)
    NEWLINE         reduce using rule 146 (arglist -> IDENTIFIER multarglist COMMA MULTIPLY COMMA BIT_AND IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 146 (arglist -> IDENTIFIER multarglist COMMA MULTIPLY COMMA BIT_AND IDENTIFIER .)


state 371

    (98) multelsif -> elsif expr pthen compstmt multelsif .

    else            reduce using rule 98 (multelsif -> elsif expr pthen compstmt multelsif .)


state 372

    (127) callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .
    (37) arg -> arg . BIT_OR term0

    CLOSE_BRACKET   reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    SEMI_COLON      reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    NEWLINE         reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    def             reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    class           reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    break           reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    if              reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    while           reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    until           reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    case            reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    for             reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    return          reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    IDENTIFIER      reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    OPEN_BRACKET    reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    CONSTANT_RESOLUTION reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    OPEN_SQUARE     reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    OPEN_FLOWER     reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    nil             reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    self            reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    NUMBER          reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    FLOAT           reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    STRING          reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    true            reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    false           reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    GLOBAL          reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    AT_THE_RATE     reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    MINUS           reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    PLUS            reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    $end            reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    when            reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    end             reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    elsif           reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    else            reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    do              reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    then            reduce using rule 127 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    BIT_OR          shift and go to state 116


state 373

    (145) arglist -> IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER .

    SEMI_COLON      reduce using rule 145 (arglist -> IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER .)
    NEWLINE         reduce using rule 145 (arglist -> IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 145 (arglist -> IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OPEN_BRACKET in state 7 resolved as shift
WARNING: shift/reduce conflict for nil in state 7 resolved as shift
WARNING: shift/reduce conflict for self in state 7 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 7 resolved as shift
WARNING: shift/reduce conflict for AT_THE_RATE in state 7 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 7 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 7 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 7 resolved as shift
WARNING: shift/reduce conflict for CONSTANT_RESOLUTION in state 7 resolved as shift
WARNING: shift/reduce conflict for OPEN_SQUARE in state 7 resolved as shift
WARNING: shift/reduce conflict for OPEN_FLOWER in state 7 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 7 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 7 resolved as shift
WARNING: shift/reduce conflict for STRING in state 7 resolved as shift
WARNING: shift/reduce conflict for true in state 7 resolved as shift
WARNING: shift/reduce conflict for false in state 7 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 22 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 22 resolved as shift
WARNING: shift/reduce conflict for CONSTANT_RESOLUTION in state 32 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKET in state 35 resolved as shift
WARNING: shift/reduce conflict for CONSTANT_RESOLUTION in state 56 resolved as shift
WARNING: shift/reduce conflict for OPEN_SQUARE in state 56 resolved as shift
WARNING: shift/reduce conflict for DOT in state 56 resolved as shift
WARNING: shift/reduce conflict for OPEN_SQUARE in state 84 resolved as shift
WARNING: shift/reduce conflict for DOT in state 84 resolved as shift
WARNING: shift/reduce conflict for CONSTANT_RESOLUTION in state 84 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 87 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 93 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 122 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 122 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKET in state 149 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 150 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKET in state 152 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 162 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKET in state 195 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKET in state 197 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 205 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 205 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 206 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 206 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 219 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 234 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 239 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 239 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 248 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 315 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 322 resolved as shift
WARNING: reduce/reduce conflict in state 85 resolved using rule (primary -> lhs)
WARNING: rejected rule (mlhsitem -> lhs) in state 85
WARNING: reduce/reduce conflict in state 162 resolved using rule (expr2 -> arg)
WARNING: rejected rule (empty -> <empty>) in state 162

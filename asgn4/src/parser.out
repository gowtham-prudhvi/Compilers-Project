Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    BEGIN
    class
    ensure
    END
    not
    super
    alias
    defined
    or
    yield
    and
    redo
    begin
    rescue
    undef
    module
    retry
    unless
    next
    until
    ELEMENT_REFERENCE
    ELEMENT_SET
    SYMBOL_NOT
    COMPLEMENT
    LOGICAL_AND
    WORD_NOT
    WORD_AND
    WORD_OR
    PLUS_AT
    MINUS_AT
    STRING2
    HEREDOC
    REGEXP
    DOUBLE_QUOTE
    DOLLAR
    COLON
    QUESTION_MARK
    OPEN_FLOWER
    CLOSE_FLOWER
    DOT

Grammar

Rule 0     S' -> compstmt
Rule 1     compstmt -> multcompstmt
Rule 2     multcompstmt -> newline stmt1 multcompstmt
Rule 3     multcompstmt -> stmt1 multcompstmt
Rule 4     multcompstmt -> newline
Rule 5     multcompstmt -> empty
Rule 6     stmt1 -> stmt
Rule 7     stmt -> def IDENTIFIER argdecl compstmt end
Rule 8     stmt -> break
Rule 9     stmt -> expr
Rule 10    multstmt -> stmt newline multstmt
Rule 11    multstmt -> empty
Rule 12    expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
Rule 13    expr -> if expr1 pthen M_1 multstmt end M_1
Rule 14    expr -> while M_1 expr1 pdo M_1 multstmt end M_1
Rule 15    expr -> case multstmt M_1 multcase end M_1
Rule 16    expr -> for mlhs in expr1 pdo compstmt end
Rule 17    expr -> expr1
Rule 18    M_1 -> empty
Rule 19    expr1 -> return callargs
Rule 20    expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET
Rule 21    expr1 -> return OPEN_BRACKET CLOSE_BRACKET
Rule 22    expr1 -> return
Rule 23    expr1 -> expr2
Rule 24    expr2 -> call
Rule 25    expr2 -> arg
Rule 26    call -> function
Rule 27    function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
Rule 28    function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
Rule 29    arg -> arg BIT_OR term0
Rule 30    arg -> term0
Rule 31    term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
Rule 32    term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
Rule 33    term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
Rule 34    term0 -> term1
Rule 35    term1 -> mlhs EQUALS mrhs
Rule 36    term1 -> mlhs opasgn mrhs
Rule 37    term1 -> term2
Rule 38    term2 -> term3 INCL_RANGE term3
Rule 39    term2 -> term3 EXCL_RANGE term3
Rule 40    term2 -> term3
Rule 41    term3 -> term3 LOGICAL_OR term4
Rule 42    term3 -> term4
Rule 43    term4 -> term5 DOUBLE_EQUALS term5
Rule 44    term4 -> term5 TRIPLE_EQUALS term5
Rule 45    term4 -> term5 NOT_EQUALS term5
Rule 46    term4 -> term5 EQUAL_TILDE term5
Rule 47    term4 -> term5 BANG_TILDE term5
Rule 48    term4 -> term5 COMPARISON term5
Rule 49    term4 -> term5
Rule 50    term5 -> term5 LESS term6
Rule 51    term5 -> term5 LESS_EQUALS term6
Rule 52    term5 -> term5 GREATER term6
Rule 53    term5 -> term5 GREATER_EQUALS term6
Rule 54    term5 -> term6
Rule 55    term6 -> term6 BIT_XOR term7
Rule 56    term6 -> term7
Rule 57    term7 -> term7 BIT_AND term8
Rule 58    term7 -> term8
Rule 59    term8 -> term8 LEFT_SHIFT term9
Rule 60    term8 -> term8 RIGHT_SHIFT term9
Rule 61    term8 -> term9
Rule 62    term9 -> term9 PLUS term10
Rule 63    term9 -> term9 MINUS term10
Rule 64    term9 -> term10
Rule 65    term10 -> term10 MULTIPLY term11
Rule 66    term10 -> term10 DIVIDE term11
Rule 67    term10 -> term10 MODULO term11
Rule 68    term10 -> term11
Rule 69    term11 -> MINUS term11
Rule 70    term11 -> term12
Rule 71    term12 -> PLUS term12
Rule 72    term12 -> term13
Rule 73    term13 -> primary POWER term13
Rule 74    term13 -> primary
Rule 75    primary -> OPEN_BRACKET expr2 CLOSE_BRACKET
Rule 76    primary -> variable CONSTANT_RESOLUTION IDENTIFIER
Rule 77    primary -> CONSTANT_RESOLUTION IDENTIFIER
Rule 78    primary -> arrayd
Rule 79    primary -> arraya
Rule 80    primary -> literal
Rule 81    primary -> varname
Rule 82    arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET
Rule 83    array_size -> primary COMMA array_size
Rule 84    array_size -> primary
Rule 85    arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE
Rule 86    array_args -> primary COMMA array_args
Rule 87    array_args -> primary
Rule 88    multcase -> when whenargs pthen M_1 multstmt multcase M_1
Rule 89    multcase -> when whenargs pthen M_1 multstmt M_1
Rule 90    multelsif -> elsif expr pthen compstmt multelsif
Rule 91    multelsif -> empty
Rule 92    literal -> NUMBER
Rule 93    literal -> FLOAT
Rule 94    literal -> STRING
Rule 95    literal -> true
Rule 96    literal -> false
Rule 97    whenargs -> args COMMA MULTIPLY arg
Rule 98    whenargs -> args
Rule 99    whenargs -> MULTIPLY arg
Rule 100   mlhs -> mlhsitem
Rule 101   mlhsitem -> IDENTIFIER
Rule 102   mlhsitem -> arraya
Rule 103   arrayl -> primary2 OPEN_SQUARE array_argsl CLOSE_SQUARE
Rule 104   array_argsl -> primary2 COMMA array_argsl
Rule 105   array_argsl -> primary2
Rule 106   primary2 -> IDENTIFIER
Rule 107   primary2 -> literal
Rule 108   lhs -> variable
Rule 109   lhs -> variable OPEN_SQUARE args CLOSE_SQUARE
Rule 110   lhs -> variable OPEN_SQUARE CLOSE_SQUARE
Rule 111   mrhs -> term2
Rule 112   mrhs -> args COMMA MULTIPLY arg
Rule 113   mrhs -> MULTIPLY arg
Rule 114   callargs -> args
Rule 115   callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg
Rule 116   callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg
Rule 117   callargs -> args COMMA assocs COMMA BIT_AND arg
Rule 118   callargs -> args COMMA assocs COMMA MULTIPLY arg
Rule 119   callargs -> args COMMA assocs
Rule 120   callargs -> args COMMA MULTIPLY arg
Rule 121   callargs -> args COMMA BIT_AND arg
Rule 122   callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg
Rule 123   callargs -> assocs COMMA MULTIPLY arg
Rule 124   callargs -> assocs COMMA BIT_AND arg
Rule 125   callargs -> assocs
Rule 126   callargs -> MULTIPLY arg COMMA BIT_AND arg
Rule 127   callargs -> BIT_AND arg
Rule 128   args -> arg multargs
Rule 129   multargs -> COMMA arg multargs
Rule 130   multargs -> empty
Rule 131   argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET
Rule 132   argdecl -> arglist newline
Rule 133   arglist -> IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER
Rule 134   arglist -> IDENTIFIER multarglist COMMA MULTIPLY COMMA BIT_AND IDENTIFIER
Rule 135   arglist -> IDENTIFIER multarglist COMMA BIT_AND IDENTIFIER
Rule 136   arglist -> IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER
Rule 137   arglist -> IDENTIFIER multarglist COMMA MULTIPLY
Rule 138   arglist -> IDENTIFIER multarglist
Rule 139   arglist -> MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER
Rule 140   arglist -> MULTIPLY IDENTIFIER
Rule 141   arglist -> BIT_AND IDENTIFIER
Rule 142   arglist -> empty
Rule 143   multarglist -> COMMA IDENTIFIER multarglist
Rule 144   multarglist -> empty
Rule 145   singleton -> variable
Rule 146   singleton -> OPEN_BRACKET expr CLOSE_BRACKET
Rule 147   assocs -> assoc multassocs
Rule 148   multassocs -> COMMA assoc multassocs
Rule 149   multassocs -> empty
Rule 150   assoc -> arg MAP arg
Rule 151   variable -> varname
Rule 152   variable -> nil
Rule 153   variable -> self
Rule 154   pthen -> newline
Rule 155   pthen -> then
Rule 156   pthen -> newline then
Rule 157   pdo -> newline
Rule 158   pdo -> do
Rule 159   pdo -> newline do
Rule 160   opasgn -> MODULO_EQUALS
Rule 161   opasgn -> DIVIDE_EQUALS
Rule 162   opasgn -> MINUS_EQUALS
Rule 163   opasgn -> PLUS_EQUALS
Rule 164   opasgn -> OR_EQUALS
Rule 165   opasgn -> AND_EQUALS
Rule 166   opasgn -> XOR_EQUALS
Rule 167   opasgn -> RIGHT_SHIFT_EQUALS
Rule 168   opasgn -> LEFT_SHIFT_EQUALS
Rule 169   opasgn -> MULTIPLY_EQUALS
Rule 170   opasgn -> LOGICAL_AND_EQUALS
Rule 171   opasgn -> LOGICAL_OR_EQUALS
Rule 172   opasgn -> POWER_EQUALS
Rule 173   varname -> GLOBAL
Rule 174   varname -> AT_THE_RATE IDENTIFIER
Rule 175   varname -> IDENTIFIER
Rule 176   newline -> SEMI_COLON
Rule 177   newline -> NEWLINE
Rule 178   empty -> <empty>

Terminals, with rules where they appear

AND_EQUALS           : 165
AT_THE_RATE          : 174
Array                : 82
BANG_TILDE           : 47
BEGIN                : 
BIT_AND              : 57 115 116 117 121 122 124 126 127 133 134 135 139 141
BIT_OR               : 29
BIT_XOR              : 55
CLOSE_BRACKET        : 20 21 27 28 31 32 33 75 82 131 146
CLOSE_FLOWER         : 
CLOSE_SQUARE         : 85 103 109 110
COLON                : 
COMMA                : 83 86 97 104 112 115 115 115 116 116 117 117 118 118 119 120 121 122 122 123 124 126 129 133 133 134 134 135 136 137 139 143 148
COMPARISON           : 48
COMPLEMENT           : 
CONSTANT_RESOLUTION  : 76 77
DIVIDE               : 66
DIVIDE_EQUALS        : 161
DOLLAR               : 
DOT                  : 
DOUBLE_EQUALS        : 43
DOUBLE_QUOTE         : 
ELEMENT_REFERENCE    : 
ELEMENT_SET          : 
END                  : 
EQUALS               : 31 32 35
EQUAL_TILDE          : 46
EXCL_RANGE           : 39
FLOAT                : 93
GLOBAL               : 173
GREATER              : 52
GREATER_EQUALS       : 53
HEREDOC              : 
IDENTIFIER           : 7 27 28 31 32 33 76 77 101 106 133 133 133 134 134 135 135 136 136 137 138 139 139 140 141 143 174 175
INCL_RANGE           : 38
LEFT_SHIFT           : 59
LEFT_SHIFT_EQUALS    : 168
LESS                 : 50
LESS_EQUALS          : 51
LOGICAL_AND          : 
LOGICAL_AND_EQUALS   : 170
LOGICAL_OR           : 41
LOGICAL_OR_EQUALS    : 171
MAP                  : 150
MINUS                : 63 69
MINUS_AT             : 
MINUS_EQUALS         : 162
MODULO               : 67
MODULO_EQUALS        : 160
MULTIPLY             : 65 97 99 112 113 115 116 118 120 122 123 126 133 134 136 137 139 140
MULTIPLY_EQUALS      : 169
NEWLINE              : 177
NOT_EQUALS           : 45
NUMBER               : 92
OPEN_BRACKET         : 20 21 27 28 31 32 33 75 82 131 146
OPEN_FLOWER          : 
OPEN_SQUARE          : 85 103 109 110
OR_EQUALS            : 164
PLUS                 : 62 71
PLUS_AT              : 
PLUS_EQUALS          : 163
POWER                : 73
POWER_EQUALS         : 172
QUESTION_MARK        : 
REGEXP               : 
RIGHT_SHIFT          : 60
RIGHT_SHIFT_EQUALS   : 167
SEMI_COLON           : 176
STRING               : 94
STRING2              : 
SYMBOL_NOT           : 
TRIPLE_EQUALS        : 44
WORD_AND             : 
WORD_NOT             : 
WORD_OR              : 
XOR_EQUALS           : 166
alias                : 
and                  : 
begin                : 
break                : 8
case                 : 15
class                : 
def                  : 7
defined              : 
do                   : 158 159
else                 : 12
elsif                : 90
end                  : 7 12 13 14 15 16
ensure               : 
error                : 
false                : 96
for                  : 16
if                   : 12 13
in                   : 16
module               : 
next                 : 
nil                  : 152
not                  : 
or                   : 
redo                 : 
rescue               : 
retry                : 
return               : 19 20 21 22
self                 : 153
super                : 
then                 : 155 156
true                 : 95
undef                : 
unless               : 
until                : 
when                 : 88 89
while                : 14
yield                : 

Nonterminals, with rules where they appear

M_1                  : 12 12 12 13 13 14 14 14 15 15 88 88 89 89
arg                  : 25 29 97 99 112 113 115 115 116 116 117 118 120 121 122 122 123 124 126 126 127 128 129 150 150
argdecl              : 7
arglist              : 131 132
args                 : 97 98 109 112 114 115 116 117 118 119 120 121
array_args           : 85 86
array_argsl          : 103 104
array_size           : 82 83
arraya               : 79 102
arrayd               : 78
arrayl               : 
assoc                : 147 148
assocs               : 115 117 118 119 122 123 124 125
call                 : 24
callargs             : 19 20 27 32 33
compstmt             : 7 16 90 0
empty                : 5 11 18 91 130 142 144 149
expr                 : 9 90 146
expr1                : 12 13 14 16 17
expr2                : 23 75
function             : 26
lhs                  : 
literal              : 80 107
mlhs                 : 16 31 32 33 35 36
mlhsitem             : 100
mrhs                 : 35 36
multarglist          : 133 134 135 136 137 138 143
multargs             : 128 129
multassocs           : 147 148
multcase             : 15 88
multcompstmt         : 1 2 3
multelsif            : 90
multstmt             : 10 12 12 13 14 15 88 89
newline              : 2 4 10 12 132 154 156 157 159
opasgn               : 33 36
pdo                  : 14 16
primary              : 73 74 83 84 86 87
primary2             : 103 104 105
pthen                : 12 13 88 89 90
singleton            : 
stmt                 : 6 10
stmt1                : 2 3
term0                : 29 30
term1                : 34
term10               : 62 63 64 65 66 67
term11               : 65 66 67 68 69
term12               : 70 71
term13               : 72 73
term2                : 37 111
term3                : 38 38 39 39 40 41
term4                : 41 42
term5                : 43 43 44 44 45 45 46 46 47 47 48 48 49 50 51 52 53
term6                : 50 51 52 53 54 55
term7                : 55 56 57
term8                : 57 58 59 60
term9                : 59 60 61 62 63
variable             : 76 85 108 109 110 145
varname              : 81 151
whenargs             : 88 89

Parsing method: LALR

state 0

    (0) S' -> . compstmt
    (1) compstmt -> . multcompstmt
    (2) multcompstmt -> . newline stmt1 multcompstmt
    (3) multcompstmt -> . stmt1 multcompstmt
    (4) multcompstmt -> . newline
    (5) multcompstmt -> . empty
    (176) newline -> . SEMI_COLON
    (177) newline -> . NEWLINE
    (6) stmt1 -> . stmt
    (178) empty -> .
    (7) stmt -> . def IDENTIFIER argdecl compstmt end
    (8) stmt -> . break
    (9) stmt -> . expr
    (12) expr -> . if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
    (13) expr -> . if expr1 pthen M_1 multstmt end M_1
    (14) expr -> . while M_1 expr1 pdo M_1 multstmt end M_1
    (15) expr -> . case multstmt M_1 multcase end M_1
    (16) expr -> . for mlhs in expr1 pdo compstmt end
    (17) expr -> . expr1
    (19) expr1 -> . return callargs
    (20) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (21) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (22) expr1 -> . return
    (23) expr1 -> . expr2
    (24) expr2 -> . call
    (25) expr2 -> . arg
    (26) call -> . function
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (27) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (28) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    SEMI_COLON      shift and go to state 6
    NEWLINE         shift and go to state 7
    $end            reduce using rule 178 (empty -> .)
    def             shift and go to state 9
    break           shift and go to state 11
    if              shift and go to state 13
    while           shift and go to state 15
    case            shift and go to state 16
    for             shift and go to state 17
    return          shift and go to state 19
    IDENTIFIER      shift and go to state 10
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    compstmt                       shift and go to state 1
    multcompstmt                   shift and go to state 2
    newline                        shift and go to state 3
    stmt1                          shift and go to state 4
    empty                          shift and go to state 5
    stmt                           shift and go to state 8
    expr                           shift and go to state 12
    expr1                          shift and go to state 14
    mlhs                           shift and go to state 18
    expr2                          shift and go to state 21
    call                           shift and go to state 22
    arg                            shift and go to state 23
    function                       shift and go to state 24
    term0                          shift and go to state 25
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 1

    (0) S' -> compstmt .



state 2

    (1) compstmt -> multcompstmt .

    $end            reduce using rule 1 (compstmt -> multcompstmt .)
    end             reduce using rule 1 (compstmt -> multcompstmt .)


state 3

    (2) multcompstmt -> newline . stmt1 multcompstmt
    (4) multcompstmt -> newline .
    (6) stmt1 -> . stmt
    (7) stmt -> . def IDENTIFIER argdecl compstmt end
    (8) stmt -> . break
    (9) stmt -> . expr
    (12) expr -> . if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
    (13) expr -> . if expr1 pthen M_1 multstmt end M_1
    (14) expr -> . while M_1 expr1 pdo M_1 multstmt end M_1
    (15) expr -> . case multstmt M_1 multcase end M_1
    (16) expr -> . for mlhs in expr1 pdo compstmt end
    (17) expr -> . expr1
    (19) expr1 -> . return callargs
    (20) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (21) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (22) expr1 -> . return
    (23) expr1 -> . expr2
    (24) expr2 -> . call
    (25) expr2 -> . arg
    (26) call -> . function
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (27) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (28) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    $end            reduce using rule 4 (multcompstmt -> newline .)
    end             reduce using rule 4 (multcompstmt -> newline .)
    def             shift and go to state 9
    break           shift and go to state 11
    if              shift and go to state 13
    while           shift and go to state 15
    case            shift and go to state 16
    for             shift and go to state 17
    return          shift and go to state 19
    IDENTIFIER      shift and go to state 10
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    stmt1                          shift and go to state 59
    stmt                           shift and go to state 8
    expr                           shift and go to state 12
    expr1                          shift and go to state 14
    mlhs                           shift and go to state 18
    expr2                          shift and go to state 21
    call                           shift and go to state 22
    arg                            shift and go to state 23
    function                       shift and go to state 24
    term0                          shift and go to state 25
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 4

    (3) multcompstmt -> stmt1 . multcompstmt
    (2) multcompstmt -> . newline stmt1 multcompstmt
    (3) multcompstmt -> . stmt1 multcompstmt
    (4) multcompstmt -> . newline
    (5) multcompstmt -> . empty
    (176) newline -> . SEMI_COLON
    (177) newline -> . NEWLINE
    (6) stmt1 -> . stmt
    (178) empty -> .
    (7) stmt -> . def IDENTIFIER argdecl compstmt end
    (8) stmt -> . break
    (9) stmt -> . expr
    (12) expr -> . if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
    (13) expr -> . if expr1 pthen M_1 multstmt end M_1
    (14) expr -> . while M_1 expr1 pdo M_1 multstmt end M_1
    (15) expr -> . case multstmt M_1 multcase end M_1
    (16) expr -> . for mlhs in expr1 pdo compstmt end
    (17) expr -> . expr1
    (19) expr1 -> . return callargs
    (20) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (21) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (22) expr1 -> . return
    (23) expr1 -> . expr2
    (24) expr2 -> . call
    (25) expr2 -> . arg
    (26) call -> . function
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (27) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (28) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    SEMI_COLON      shift and go to state 6
    NEWLINE         shift and go to state 7
    $end            reduce using rule 178 (empty -> .)
    end             reduce using rule 178 (empty -> .)
    def             shift and go to state 9
    break           shift and go to state 11
    if              shift and go to state 13
    while           shift and go to state 15
    case            shift and go to state 16
    for             shift and go to state 17
    return          shift and go to state 19
    IDENTIFIER      shift and go to state 10
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    stmt1                          shift and go to state 4
    multcompstmt                   shift and go to state 60
    newline                        shift and go to state 3
    empty                          shift and go to state 5
    stmt                           shift and go to state 8
    expr                           shift and go to state 12
    expr1                          shift and go to state 14
    mlhs                           shift and go to state 18
    expr2                          shift and go to state 21
    call                           shift and go to state 22
    arg                            shift and go to state 23
    function                       shift and go to state 24
    term0                          shift and go to state 25
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 5

    (5) multcompstmt -> empty .

    $end            reduce using rule 5 (multcompstmt -> empty .)
    end             reduce using rule 5 (multcompstmt -> empty .)


state 6

    (176) newline -> SEMI_COLON .

    def             reduce using rule 176 (newline -> SEMI_COLON .)
    break           reduce using rule 176 (newline -> SEMI_COLON .)
    if              reduce using rule 176 (newline -> SEMI_COLON .)
    while           reduce using rule 176 (newline -> SEMI_COLON .)
    case            reduce using rule 176 (newline -> SEMI_COLON .)
    for             reduce using rule 176 (newline -> SEMI_COLON .)
    return          reduce using rule 176 (newline -> SEMI_COLON .)
    IDENTIFIER      reduce using rule 176 (newline -> SEMI_COLON .)
    nil             reduce using rule 176 (newline -> SEMI_COLON .)
    self            reduce using rule 176 (newline -> SEMI_COLON .)
    GLOBAL          reduce using rule 176 (newline -> SEMI_COLON .)
    AT_THE_RATE     reduce using rule 176 (newline -> SEMI_COLON .)
    MINUS           reduce using rule 176 (newline -> SEMI_COLON .)
    PLUS            reduce using rule 176 (newline -> SEMI_COLON .)
    OPEN_BRACKET    reduce using rule 176 (newline -> SEMI_COLON .)
    CONSTANT_RESOLUTION reduce using rule 176 (newline -> SEMI_COLON .)
    Array           reduce using rule 176 (newline -> SEMI_COLON .)
    NUMBER          reduce using rule 176 (newline -> SEMI_COLON .)
    FLOAT           reduce using rule 176 (newline -> SEMI_COLON .)
    STRING          reduce using rule 176 (newline -> SEMI_COLON .)
    true            reduce using rule 176 (newline -> SEMI_COLON .)
    false           reduce using rule 176 (newline -> SEMI_COLON .)
    $end            reduce using rule 176 (newline -> SEMI_COLON .)
    end             reduce using rule 176 (newline -> SEMI_COLON .)
    then            reduce using rule 176 (newline -> SEMI_COLON .)
    else            reduce using rule 176 (newline -> SEMI_COLON .)
    when            reduce using rule 176 (newline -> SEMI_COLON .)
    SEMI_COLON      reduce using rule 176 (newline -> SEMI_COLON .)
    NEWLINE         reduce using rule 176 (newline -> SEMI_COLON .)
    do              reduce using rule 176 (newline -> SEMI_COLON .)


state 7

    (177) newline -> NEWLINE .

    def             reduce using rule 177 (newline -> NEWLINE .)
    break           reduce using rule 177 (newline -> NEWLINE .)
    if              reduce using rule 177 (newline -> NEWLINE .)
    while           reduce using rule 177 (newline -> NEWLINE .)
    case            reduce using rule 177 (newline -> NEWLINE .)
    for             reduce using rule 177 (newline -> NEWLINE .)
    return          reduce using rule 177 (newline -> NEWLINE .)
    IDENTIFIER      reduce using rule 177 (newline -> NEWLINE .)
    nil             reduce using rule 177 (newline -> NEWLINE .)
    self            reduce using rule 177 (newline -> NEWLINE .)
    GLOBAL          reduce using rule 177 (newline -> NEWLINE .)
    AT_THE_RATE     reduce using rule 177 (newline -> NEWLINE .)
    MINUS           reduce using rule 177 (newline -> NEWLINE .)
    PLUS            reduce using rule 177 (newline -> NEWLINE .)
    OPEN_BRACKET    reduce using rule 177 (newline -> NEWLINE .)
    CONSTANT_RESOLUTION reduce using rule 177 (newline -> NEWLINE .)
    Array           reduce using rule 177 (newline -> NEWLINE .)
    NUMBER          reduce using rule 177 (newline -> NEWLINE .)
    FLOAT           reduce using rule 177 (newline -> NEWLINE .)
    STRING          reduce using rule 177 (newline -> NEWLINE .)
    true            reduce using rule 177 (newline -> NEWLINE .)
    false           reduce using rule 177 (newline -> NEWLINE .)
    $end            reduce using rule 177 (newline -> NEWLINE .)
    end             reduce using rule 177 (newline -> NEWLINE .)
    then            reduce using rule 177 (newline -> NEWLINE .)
    else            reduce using rule 177 (newline -> NEWLINE .)
    when            reduce using rule 177 (newline -> NEWLINE .)
    SEMI_COLON      reduce using rule 177 (newline -> NEWLINE .)
    NEWLINE         reduce using rule 177 (newline -> NEWLINE .)
    do              reduce using rule 177 (newline -> NEWLINE .)


state 8

    (6) stmt1 -> stmt .

    SEMI_COLON      reduce using rule 6 (stmt1 -> stmt .)
    NEWLINE         reduce using rule 6 (stmt1 -> stmt .)
    def             reduce using rule 6 (stmt1 -> stmt .)
    break           reduce using rule 6 (stmt1 -> stmt .)
    if              reduce using rule 6 (stmt1 -> stmt .)
    while           reduce using rule 6 (stmt1 -> stmt .)
    case            reduce using rule 6 (stmt1 -> stmt .)
    for             reduce using rule 6 (stmt1 -> stmt .)
    return          reduce using rule 6 (stmt1 -> stmt .)
    IDENTIFIER      reduce using rule 6 (stmt1 -> stmt .)
    nil             reduce using rule 6 (stmt1 -> stmt .)
    self            reduce using rule 6 (stmt1 -> stmt .)
    GLOBAL          reduce using rule 6 (stmt1 -> stmt .)
    AT_THE_RATE     reduce using rule 6 (stmt1 -> stmt .)
    MINUS           reduce using rule 6 (stmt1 -> stmt .)
    PLUS            reduce using rule 6 (stmt1 -> stmt .)
    OPEN_BRACKET    reduce using rule 6 (stmt1 -> stmt .)
    CONSTANT_RESOLUTION reduce using rule 6 (stmt1 -> stmt .)
    Array           reduce using rule 6 (stmt1 -> stmt .)
    NUMBER          reduce using rule 6 (stmt1 -> stmt .)
    FLOAT           reduce using rule 6 (stmt1 -> stmt .)
    STRING          reduce using rule 6 (stmt1 -> stmt .)
    true            reduce using rule 6 (stmt1 -> stmt .)
    false           reduce using rule 6 (stmt1 -> stmt .)
    $end            reduce using rule 6 (stmt1 -> stmt .)
    end             reduce using rule 6 (stmt1 -> stmt .)


state 9

    (7) stmt -> def . IDENTIFIER argdecl compstmt end

    IDENTIFIER      shift and go to state 61


state 10

    (27) function -> IDENTIFIER . OPEN_BRACKET callargs CLOSE_BRACKET
    (28) function -> IDENTIFIER . OPEN_BRACKET CLOSE_BRACKET
    (101) mlhsitem -> IDENTIFIER .
    (175) varname -> IDENTIFIER .

  ! shift/reduce conflict for OPEN_BRACKET resolved as shift
    OPEN_BRACKET    shift and go to state 62
    EQUALS          reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    MODULO_EQUALS   reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    DIVIDE_EQUALS   reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    MINUS_EQUALS    reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    PLUS_EQUALS     reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    OR_EQUALS       reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    AND_EQUALS      reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    XOR_EQUALS      reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    RIGHT_SHIFT_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    LEFT_SHIFT_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    MULTIPLY_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    LOGICAL_AND_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    LOGICAL_OR_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    POWER_EQUALS    reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    OPEN_SQUARE     reduce using rule 175 (varname -> IDENTIFIER .)
    CONSTANT_RESOLUTION reduce using rule 175 (varname -> IDENTIFIER .)
    POWER           reduce using rule 175 (varname -> IDENTIFIER .)
    MULTIPLY        reduce using rule 175 (varname -> IDENTIFIER .)
    DIVIDE          reduce using rule 175 (varname -> IDENTIFIER .)
    MODULO          reduce using rule 175 (varname -> IDENTIFIER .)
    PLUS            reduce using rule 175 (varname -> IDENTIFIER .)
    MINUS           reduce using rule 175 (varname -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 175 (varname -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 175 (varname -> IDENTIFIER .)
    BIT_AND         reduce using rule 175 (varname -> IDENTIFIER .)
    BIT_XOR         reduce using rule 175 (varname -> IDENTIFIER .)
    DOUBLE_EQUALS   reduce using rule 175 (varname -> IDENTIFIER .)
    TRIPLE_EQUALS   reduce using rule 175 (varname -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 175 (varname -> IDENTIFIER .)
    EQUAL_TILDE     reduce using rule 175 (varname -> IDENTIFIER .)
    BANG_TILDE      reduce using rule 175 (varname -> IDENTIFIER .)
    COMPARISON      reduce using rule 175 (varname -> IDENTIFIER .)
    LESS            reduce using rule 175 (varname -> IDENTIFIER .)
    LESS_EQUALS     reduce using rule 175 (varname -> IDENTIFIER .)
    GREATER         reduce using rule 175 (varname -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 175 (varname -> IDENTIFIER .)
    INCL_RANGE      reduce using rule 175 (varname -> IDENTIFIER .)
    EXCL_RANGE      reduce using rule 175 (varname -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 175 (varname -> IDENTIFIER .)
    BIT_OR          reduce using rule 175 (varname -> IDENTIFIER .)
    SEMI_COLON      reduce using rule 175 (varname -> IDENTIFIER .)
    NEWLINE         reduce using rule 175 (varname -> IDENTIFIER .)
    def             reduce using rule 175 (varname -> IDENTIFIER .)
    break           reduce using rule 175 (varname -> IDENTIFIER .)
    if              reduce using rule 175 (varname -> IDENTIFIER .)
    while           reduce using rule 175 (varname -> IDENTIFIER .)
    case            reduce using rule 175 (varname -> IDENTIFIER .)
    for             reduce using rule 175 (varname -> IDENTIFIER .)
    return          reduce using rule 175 (varname -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 175 (varname -> IDENTIFIER .)
    nil             reduce using rule 175 (varname -> IDENTIFIER .)
    self            reduce using rule 175 (varname -> IDENTIFIER .)
    GLOBAL          reduce using rule 175 (varname -> IDENTIFIER .)
    AT_THE_RATE     reduce using rule 175 (varname -> IDENTIFIER .)
    Array           reduce using rule 175 (varname -> IDENTIFIER .)
    NUMBER          reduce using rule 175 (varname -> IDENTIFIER .)
    FLOAT           reduce using rule 175 (varname -> IDENTIFIER .)
    STRING          reduce using rule 175 (varname -> IDENTIFIER .)
    true            reduce using rule 175 (varname -> IDENTIFIER .)
    false           reduce using rule 175 (varname -> IDENTIFIER .)
    $end            reduce using rule 175 (varname -> IDENTIFIER .)
    end             reduce using rule 175 (varname -> IDENTIFIER .)
    then            reduce using rule 175 (varname -> IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 175 (varname -> IDENTIFIER .)
    do              reduce using rule 175 (varname -> IDENTIFIER .)
    MAP             reduce using rule 175 (varname -> IDENTIFIER .)
    COMMA           reduce using rule 175 (varname -> IDENTIFIER .)

  ! OPEN_BRACKET    [ reduce using rule 175 (varname -> IDENTIFIER .) ]


state 11

    (8) stmt -> break .

    SEMI_COLON      reduce using rule 8 (stmt -> break .)
    NEWLINE         reduce using rule 8 (stmt -> break .)
    def             reduce using rule 8 (stmt -> break .)
    break           reduce using rule 8 (stmt -> break .)
    if              reduce using rule 8 (stmt -> break .)
    while           reduce using rule 8 (stmt -> break .)
    case            reduce using rule 8 (stmt -> break .)
    for             reduce using rule 8 (stmt -> break .)
    return          reduce using rule 8 (stmt -> break .)
    IDENTIFIER      reduce using rule 8 (stmt -> break .)
    nil             reduce using rule 8 (stmt -> break .)
    self            reduce using rule 8 (stmt -> break .)
    GLOBAL          reduce using rule 8 (stmt -> break .)
    AT_THE_RATE     reduce using rule 8 (stmt -> break .)
    MINUS           reduce using rule 8 (stmt -> break .)
    PLUS            reduce using rule 8 (stmt -> break .)
    OPEN_BRACKET    reduce using rule 8 (stmt -> break .)
    CONSTANT_RESOLUTION reduce using rule 8 (stmt -> break .)
    Array           reduce using rule 8 (stmt -> break .)
    NUMBER          reduce using rule 8 (stmt -> break .)
    FLOAT           reduce using rule 8 (stmt -> break .)
    STRING          reduce using rule 8 (stmt -> break .)
    true            reduce using rule 8 (stmt -> break .)
    false           reduce using rule 8 (stmt -> break .)
    $end            reduce using rule 8 (stmt -> break .)
    end             reduce using rule 8 (stmt -> break .)


state 12

    (9) stmt -> expr .

    SEMI_COLON      reduce using rule 9 (stmt -> expr .)
    NEWLINE         reduce using rule 9 (stmt -> expr .)
    def             reduce using rule 9 (stmt -> expr .)
    break           reduce using rule 9 (stmt -> expr .)
    if              reduce using rule 9 (stmt -> expr .)
    while           reduce using rule 9 (stmt -> expr .)
    case            reduce using rule 9 (stmt -> expr .)
    for             reduce using rule 9 (stmt -> expr .)
    return          reduce using rule 9 (stmt -> expr .)
    IDENTIFIER      reduce using rule 9 (stmt -> expr .)
    nil             reduce using rule 9 (stmt -> expr .)
    self            reduce using rule 9 (stmt -> expr .)
    GLOBAL          reduce using rule 9 (stmt -> expr .)
    AT_THE_RATE     reduce using rule 9 (stmt -> expr .)
    MINUS           reduce using rule 9 (stmt -> expr .)
    PLUS            reduce using rule 9 (stmt -> expr .)
    OPEN_BRACKET    reduce using rule 9 (stmt -> expr .)
    CONSTANT_RESOLUTION reduce using rule 9 (stmt -> expr .)
    Array           reduce using rule 9 (stmt -> expr .)
    NUMBER          reduce using rule 9 (stmt -> expr .)
    FLOAT           reduce using rule 9 (stmt -> expr .)
    STRING          reduce using rule 9 (stmt -> expr .)
    true            reduce using rule 9 (stmt -> expr .)
    false           reduce using rule 9 (stmt -> expr .)
    $end            reduce using rule 9 (stmt -> expr .)
    end             reduce using rule 9 (stmt -> expr .)


state 13

    (12) expr -> if . expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
    (13) expr -> if . expr1 pthen M_1 multstmt end M_1
    (19) expr1 -> . return callargs
    (20) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (21) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (22) expr1 -> . return
    (23) expr1 -> . expr2
    (24) expr2 -> . call
    (25) expr2 -> . arg
    (26) call -> . function
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (27) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (28) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    return          shift and go to state 19
    IDENTIFIER      shift and go to state 10
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    expr1                          shift and go to state 63
    expr2                          shift and go to state 21
    call                           shift and go to state 22
    arg                            shift and go to state 23
    function                       shift and go to state 24
    term0                          shift and go to state 25
    mlhs                           shift and go to state 18
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 14

    (17) expr -> expr1 .

    SEMI_COLON      reduce using rule 17 (expr -> expr1 .)
    NEWLINE         reduce using rule 17 (expr -> expr1 .)
    def             reduce using rule 17 (expr -> expr1 .)
    break           reduce using rule 17 (expr -> expr1 .)
    if              reduce using rule 17 (expr -> expr1 .)
    while           reduce using rule 17 (expr -> expr1 .)
    case            reduce using rule 17 (expr -> expr1 .)
    for             reduce using rule 17 (expr -> expr1 .)
    return          reduce using rule 17 (expr -> expr1 .)
    IDENTIFIER      reduce using rule 17 (expr -> expr1 .)
    nil             reduce using rule 17 (expr -> expr1 .)
    self            reduce using rule 17 (expr -> expr1 .)
    GLOBAL          reduce using rule 17 (expr -> expr1 .)
    AT_THE_RATE     reduce using rule 17 (expr -> expr1 .)
    MINUS           reduce using rule 17 (expr -> expr1 .)
    PLUS            reduce using rule 17 (expr -> expr1 .)
    OPEN_BRACKET    reduce using rule 17 (expr -> expr1 .)
    CONSTANT_RESOLUTION reduce using rule 17 (expr -> expr1 .)
    Array           reduce using rule 17 (expr -> expr1 .)
    NUMBER          reduce using rule 17 (expr -> expr1 .)
    FLOAT           reduce using rule 17 (expr -> expr1 .)
    STRING          reduce using rule 17 (expr -> expr1 .)
    true            reduce using rule 17 (expr -> expr1 .)
    false           reduce using rule 17 (expr -> expr1 .)
    $end            reduce using rule 17 (expr -> expr1 .)
    end             reduce using rule 17 (expr -> expr1 .)


state 15

    (14) expr -> while . M_1 expr1 pdo M_1 multstmt end M_1
    (18) M_1 -> . empty
    (178) empty -> .

    return          reduce using rule 178 (empty -> .)
    IDENTIFIER      reduce using rule 178 (empty -> .)
    nil             reduce using rule 178 (empty -> .)
    self            reduce using rule 178 (empty -> .)
    GLOBAL          reduce using rule 178 (empty -> .)
    AT_THE_RATE     reduce using rule 178 (empty -> .)
    MINUS           reduce using rule 178 (empty -> .)
    PLUS            reduce using rule 178 (empty -> .)
    OPEN_BRACKET    reduce using rule 178 (empty -> .)
    CONSTANT_RESOLUTION reduce using rule 178 (empty -> .)
    Array           reduce using rule 178 (empty -> .)
    NUMBER          reduce using rule 178 (empty -> .)
    FLOAT           reduce using rule 178 (empty -> .)
    STRING          reduce using rule 178 (empty -> .)
    true            reduce using rule 178 (empty -> .)
    false           reduce using rule 178 (empty -> .)

    M_1                            shift and go to state 64
    empty                          shift and go to state 65

state 16

    (15) expr -> case . multstmt M_1 multcase end M_1
    (10) multstmt -> . stmt newline multstmt
    (11) multstmt -> . empty
    (7) stmt -> . def IDENTIFIER argdecl compstmt end
    (8) stmt -> . break
    (9) stmt -> . expr
    (178) empty -> .
    (12) expr -> . if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
    (13) expr -> . if expr1 pthen M_1 multstmt end M_1
    (14) expr -> . while M_1 expr1 pdo M_1 multstmt end M_1
    (15) expr -> . case multstmt M_1 multcase end M_1
    (16) expr -> . for mlhs in expr1 pdo compstmt end
    (17) expr -> . expr1
    (19) expr1 -> . return callargs
    (20) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (21) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (22) expr1 -> . return
    (23) expr1 -> . expr2
    (24) expr2 -> . call
    (25) expr2 -> . arg
    (26) call -> . function
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (27) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (28) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    def             shift and go to state 9
    break           shift and go to state 11
    when            reduce using rule 178 (empty -> .)
    if              shift and go to state 13
    while           shift and go to state 15
    case            shift and go to state 16
    for             shift and go to state 17
    return          shift and go to state 19
    IDENTIFIER      shift and go to state 10
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    multstmt                       shift and go to state 66
    stmt                           shift and go to state 67
    empty                          shift and go to state 68
    expr                           shift and go to state 12
    expr1                          shift and go to state 14
    mlhs                           shift and go to state 18
    expr2                          shift and go to state 21
    call                           shift and go to state 22
    arg                            shift and go to state 23
    function                       shift and go to state 24
    term0                          shift and go to state 25
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 17

    (16) expr -> for . mlhs in expr1 pdo compstmt end
    (100) mlhs -> . mlhsitem
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    IDENTIFIER      shift and go to state 70
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38

    mlhs                           shift and go to state 69
    mlhsitem                       shift and go to state 27
    arraya                         shift and go to state 71
    variable                       shift and go to state 72
    varname                        shift and go to state 73

state 18

    (31) term0 -> mlhs . EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> mlhs . EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> mlhs . opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (35) term1 -> mlhs . EQUALS mrhs
    (36) term1 -> mlhs . opasgn mrhs
    (160) opasgn -> . MODULO_EQUALS
    (161) opasgn -> . DIVIDE_EQUALS
    (162) opasgn -> . MINUS_EQUALS
    (163) opasgn -> . PLUS_EQUALS
    (164) opasgn -> . OR_EQUALS
    (165) opasgn -> . AND_EQUALS
    (166) opasgn -> . XOR_EQUALS
    (167) opasgn -> . RIGHT_SHIFT_EQUALS
    (168) opasgn -> . LEFT_SHIFT_EQUALS
    (169) opasgn -> . MULTIPLY_EQUALS
    (170) opasgn -> . LOGICAL_AND_EQUALS
    (171) opasgn -> . LOGICAL_OR_EQUALS
    (172) opasgn -> . POWER_EQUALS

    EQUALS          shift and go to state 74
    MODULO_EQUALS   shift and go to state 76
    DIVIDE_EQUALS   shift and go to state 77
    MINUS_EQUALS    shift and go to state 78
    PLUS_EQUALS     shift and go to state 79
    OR_EQUALS       shift and go to state 80
    AND_EQUALS      shift and go to state 81
    XOR_EQUALS      shift and go to state 82
    RIGHT_SHIFT_EQUALS shift and go to state 83
    LEFT_SHIFT_EQUALS shift and go to state 84
    MULTIPLY_EQUALS shift and go to state 85
    LOGICAL_AND_EQUALS shift and go to state 86
    LOGICAL_OR_EQUALS shift and go to state 87
    POWER_EQUALS    shift and go to state 88

    opasgn                         shift and go to state 75

state 19

    (19) expr1 -> return . callargs
    (20) expr1 -> return . OPEN_BRACKET callargs CLOSE_BRACKET
    (21) expr1 -> return . OPEN_BRACKET CLOSE_BRACKET
    (22) expr1 -> return .
    (114) callargs -> . args
    (115) callargs -> . args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg
    (116) callargs -> . args COMMA MULTIPLY arg COMMA BIT_AND arg
    (117) callargs -> . args COMMA assocs COMMA BIT_AND arg
    (118) callargs -> . args COMMA assocs COMMA MULTIPLY arg
    (119) callargs -> . args COMMA assocs
    (120) callargs -> . args COMMA MULTIPLY arg
    (121) callargs -> . args COMMA BIT_AND arg
    (122) callargs -> . assocs COMMA MULTIPLY arg COMMA BIT_AND arg
    (123) callargs -> . assocs COMMA MULTIPLY arg
    (124) callargs -> . assocs COMMA BIT_AND arg
    (125) callargs -> . assocs
    (126) callargs -> . MULTIPLY arg COMMA BIT_AND arg
    (127) callargs -> . BIT_AND arg
    (128) args -> . arg multargs
    (147) assocs -> . assoc multassocs
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (150) assoc -> . arg MAP arg
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

  ! shift/reduce conflict for OPEN_BRACKET resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for nil resolved as shift
  ! shift/reduce conflict for self resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for AT_THE_RATE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for CONSTANT_RESOLUTION resolved as shift
  ! shift/reduce conflict for Array resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
    OPEN_BRACKET    shift and go to state 90
    SEMI_COLON      reduce using rule 22 (expr1 -> return .)
    NEWLINE         reduce using rule 22 (expr1 -> return .)
    def             reduce using rule 22 (expr1 -> return .)
    break           reduce using rule 22 (expr1 -> return .)
    if              reduce using rule 22 (expr1 -> return .)
    while           reduce using rule 22 (expr1 -> return .)
    case            reduce using rule 22 (expr1 -> return .)
    for             reduce using rule 22 (expr1 -> return .)
    return          reduce using rule 22 (expr1 -> return .)
    $end            reduce using rule 22 (expr1 -> return .)
    end             reduce using rule 22 (expr1 -> return .)
    then            reduce using rule 22 (expr1 -> return .)
    do              reduce using rule 22 (expr1 -> return .)
    MULTIPLY        shift and go to state 93
    BIT_AND         shift and go to state 95
    IDENTIFIER      shift and go to state 70
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

  ! IDENTIFIER      [ reduce using rule 22 (expr1 -> return .) ]
  ! nil             [ reduce using rule 22 (expr1 -> return .) ]
  ! self            [ reduce using rule 22 (expr1 -> return .) ]
  ! GLOBAL          [ reduce using rule 22 (expr1 -> return .) ]
  ! AT_THE_RATE     [ reduce using rule 22 (expr1 -> return .) ]
  ! MINUS           [ reduce using rule 22 (expr1 -> return .) ]
  ! PLUS            [ reduce using rule 22 (expr1 -> return .) ]
  ! OPEN_BRACKET    [ reduce using rule 22 (expr1 -> return .) ]
  ! CONSTANT_RESOLUTION [ reduce using rule 22 (expr1 -> return .) ]
  ! Array           [ reduce using rule 22 (expr1 -> return .) ]
  ! NUMBER          [ reduce using rule 22 (expr1 -> return .) ]
  ! FLOAT           [ reduce using rule 22 (expr1 -> return .) ]
  ! STRING          [ reduce using rule 22 (expr1 -> return .) ]
  ! true            [ reduce using rule 22 (expr1 -> return .) ]
  ! false           [ reduce using rule 22 (expr1 -> return .) ]

    callargs                       shift and go to state 89
    args                           shift and go to state 91
    assocs                         shift and go to state 92
    arg                            shift and go to state 94
    assoc                          shift and go to state 96
    term0                          shift and go to state 25
    mlhs                           shift and go to state 18
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 20

    (75) primary -> OPEN_BRACKET . expr2 CLOSE_BRACKET
    (24) expr2 -> . call
    (25) expr2 -> . arg
    (26) call -> . function
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (27) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (28) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    IDENTIFIER      shift and go to state 10
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    expr2                          shift and go to state 97
    call                           shift and go to state 22
    arg                            shift and go to state 23
    function                       shift and go to state 24
    term0                          shift and go to state 25
    mlhs                           shift and go to state 18
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 21

    (23) expr1 -> expr2 .

    SEMI_COLON      reduce using rule 23 (expr1 -> expr2 .)
    NEWLINE         reduce using rule 23 (expr1 -> expr2 .)
    def             reduce using rule 23 (expr1 -> expr2 .)
    break           reduce using rule 23 (expr1 -> expr2 .)
    if              reduce using rule 23 (expr1 -> expr2 .)
    while           reduce using rule 23 (expr1 -> expr2 .)
    case            reduce using rule 23 (expr1 -> expr2 .)
    for             reduce using rule 23 (expr1 -> expr2 .)
    return          reduce using rule 23 (expr1 -> expr2 .)
    IDENTIFIER      reduce using rule 23 (expr1 -> expr2 .)
    nil             reduce using rule 23 (expr1 -> expr2 .)
    self            reduce using rule 23 (expr1 -> expr2 .)
    GLOBAL          reduce using rule 23 (expr1 -> expr2 .)
    AT_THE_RATE     reduce using rule 23 (expr1 -> expr2 .)
    MINUS           reduce using rule 23 (expr1 -> expr2 .)
    PLUS            reduce using rule 23 (expr1 -> expr2 .)
    OPEN_BRACKET    reduce using rule 23 (expr1 -> expr2 .)
    CONSTANT_RESOLUTION reduce using rule 23 (expr1 -> expr2 .)
    Array           reduce using rule 23 (expr1 -> expr2 .)
    NUMBER          reduce using rule 23 (expr1 -> expr2 .)
    FLOAT           reduce using rule 23 (expr1 -> expr2 .)
    STRING          reduce using rule 23 (expr1 -> expr2 .)
    true            reduce using rule 23 (expr1 -> expr2 .)
    false           reduce using rule 23 (expr1 -> expr2 .)
    $end            reduce using rule 23 (expr1 -> expr2 .)
    end             reduce using rule 23 (expr1 -> expr2 .)
    then            reduce using rule 23 (expr1 -> expr2 .)
    do              reduce using rule 23 (expr1 -> expr2 .)


state 22

    (24) expr2 -> call .

    SEMI_COLON      reduce using rule 24 (expr2 -> call .)
    NEWLINE         reduce using rule 24 (expr2 -> call .)
    def             reduce using rule 24 (expr2 -> call .)
    break           reduce using rule 24 (expr2 -> call .)
    if              reduce using rule 24 (expr2 -> call .)
    while           reduce using rule 24 (expr2 -> call .)
    case            reduce using rule 24 (expr2 -> call .)
    for             reduce using rule 24 (expr2 -> call .)
    return          reduce using rule 24 (expr2 -> call .)
    IDENTIFIER      reduce using rule 24 (expr2 -> call .)
    nil             reduce using rule 24 (expr2 -> call .)
    self            reduce using rule 24 (expr2 -> call .)
    GLOBAL          reduce using rule 24 (expr2 -> call .)
    AT_THE_RATE     reduce using rule 24 (expr2 -> call .)
    MINUS           reduce using rule 24 (expr2 -> call .)
    PLUS            reduce using rule 24 (expr2 -> call .)
    OPEN_BRACKET    reduce using rule 24 (expr2 -> call .)
    CONSTANT_RESOLUTION reduce using rule 24 (expr2 -> call .)
    Array           reduce using rule 24 (expr2 -> call .)
    NUMBER          reduce using rule 24 (expr2 -> call .)
    FLOAT           reduce using rule 24 (expr2 -> call .)
    STRING          reduce using rule 24 (expr2 -> call .)
    true            reduce using rule 24 (expr2 -> call .)
    false           reduce using rule 24 (expr2 -> call .)
    $end            reduce using rule 24 (expr2 -> call .)
    end             reduce using rule 24 (expr2 -> call .)
    then            reduce using rule 24 (expr2 -> call .)
    CLOSE_BRACKET   reduce using rule 24 (expr2 -> call .)
    do              reduce using rule 24 (expr2 -> call .)


state 23

    (25) expr2 -> arg .
    (29) arg -> arg . BIT_OR term0

    SEMI_COLON      reduce using rule 25 (expr2 -> arg .)
    NEWLINE         reduce using rule 25 (expr2 -> arg .)
    def             reduce using rule 25 (expr2 -> arg .)
    break           reduce using rule 25 (expr2 -> arg .)
    if              reduce using rule 25 (expr2 -> arg .)
    while           reduce using rule 25 (expr2 -> arg .)
    case            reduce using rule 25 (expr2 -> arg .)
    for             reduce using rule 25 (expr2 -> arg .)
    return          reduce using rule 25 (expr2 -> arg .)
    IDENTIFIER      reduce using rule 25 (expr2 -> arg .)
    nil             reduce using rule 25 (expr2 -> arg .)
    self            reduce using rule 25 (expr2 -> arg .)
    GLOBAL          reduce using rule 25 (expr2 -> arg .)
    AT_THE_RATE     reduce using rule 25 (expr2 -> arg .)
    MINUS           reduce using rule 25 (expr2 -> arg .)
    PLUS            reduce using rule 25 (expr2 -> arg .)
    OPEN_BRACKET    reduce using rule 25 (expr2 -> arg .)
    CONSTANT_RESOLUTION reduce using rule 25 (expr2 -> arg .)
    Array           reduce using rule 25 (expr2 -> arg .)
    NUMBER          reduce using rule 25 (expr2 -> arg .)
    FLOAT           reduce using rule 25 (expr2 -> arg .)
    STRING          reduce using rule 25 (expr2 -> arg .)
    true            reduce using rule 25 (expr2 -> arg .)
    false           reduce using rule 25 (expr2 -> arg .)
    $end            reduce using rule 25 (expr2 -> arg .)
    end             reduce using rule 25 (expr2 -> arg .)
    then            reduce using rule 25 (expr2 -> arg .)
    CLOSE_BRACKET   reduce using rule 25 (expr2 -> arg .)
    do              reduce using rule 25 (expr2 -> arg .)
    BIT_OR          shift and go to state 98


state 24

    (26) call -> function .

    SEMI_COLON      reduce using rule 26 (call -> function .)
    NEWLINE         reduce using rule 26 (call -> function .)
    def             reduce using rule 26 (call -> function .)
    break           reduce using rule 26 (call -> function .)
    if              reduce using rule 26 (call -> function .)
    while           reduce using rule 26 (call -> function .)
    case            reduce using rule 26 (call -> function .)
    for             reduce using rule 26 (call -> function .)
    return          reduce using rule 26 (call -> function .)
    IDENTIFIER      reduce using rule 26 (call -> function .)
    nil             reduce using rule 26 (call -> function .)
    self            reduce using rule 26 (call -> function .)
    GLOBAL          reduce using rule 26 (call -> function .)
    AT_THE_RATE     reduce using rule 26 (call -> function .)
    MINUS           reduce using rule 26 (call -> function .)
    PLUS            reduce using rule 26 (call -> function .)
    OPEN_BRACKET    reduce using rule 26 (call -> function .)
    CONSTANT_RESOLUTION reduce using rule 26 (call -> function .)
    Array           reduce using rule 26 (call -> function .)
    NUMBER          reduce using rule 26 (call -> function .)
    FLOAT           reduce using rule 26 (call -> function .)
    STRING          reduce using rule 26 (call -> function .)
    true            reduce using rule 26 (call -> function .)
    false           reduce using rule 26 (call -> function .)
    $end            reduce using rule 26 (call -> function .)
    end             reduce using rule 26 (call -> function .)
    then            reduce using rule 26 (call -> function .)
    CLOSE_BRACKET   reduce using rule 26 (call -> function .)
    do              reduce using rule 26 (call -> function .)


state 25

    (30) arg -> term0 .

    BIT_OR          reduce using rule 30 (arg -> term0 .)
    SEMI_COLON      reduce using rule 30 (arg -> term0 .)
    NEWLINE         reduce using rule 30 (arg -> term0 .)
    def             reduce using rule 30 (arg -> term0 .)
    break           reduce using rule 30 (arg -> term0 .)
    if              reduce using rule 30 (arg -> term0 .)
    while           reduce using rule 30 (arg -> term0 .)
    case            reduce using rule 30 (arg -> term0 .)
    for             reduce using rule 30 (arg -> term0 .)
    return          reduce using rule 30 (arg -> term0 .)
    IDENTIFIER      reduce using rule 30 (arg -> term0 .)
    nil             reduce using rule 30 (arg -> term0 .)
    self            reduce using rule 30 (arg -> term0 .)
    GLOBAL          reduce using rule 30 (arg -> term0 .)
    AT_THE_RATE     reduce using rule 30 (arg -> term0 .)
    MINUS           reduce using rule 30 (arg -> term0 .)
    PLUS            reduce using rule 30 (arg -> term0 .)
    OPEN_BRACKET    reduce using rule 30 (arg -> term0 .)
    CONSTANT_RESOLUTION reduce using rule 30 (arg -> term0 .)
    Array           reduce using rule 30 (arg -> term0 .)
    NUMBER          reduce using rule 30 (arg -> term0 .)
    FLOAT           reduce using rule 30 (arg -> term0 .)
    STRING          reduce using rule 30 (arg -> term0 .)
    true            reduce using rule 30 (arg -> term0 .)
    false           reduce using rule 30 (arg -> term0 .)
    $end            reduce using rule 30 (arg -> term0 .)
    end             reduce using rule 30 (arg -> term0 .)
    then            reduce using rule 30 (arg -> term0 .)
    MAP             reduce using rule 30 (arg -> term0 .)
    COMMA           reduce using rule 30 (arg -> term0 .)
    do              reduce using rule 30 (arg -> term0 .)
    CLOSE_BRACKET   reduce using rule 30 (arg -> term0 .)


state 26

    (34) term0 -> term1 .

    BIT_OR          reduce using rule 34 (term0 -> term1 .)
    SEMI_COLON      reduce using rule 34 (term0 -> term1 .)
    NEWLINE         reduce using rule 34 (term0 -> term1 .)
    def             reduce using rule 34 (term0 -> term1 .)
    break           reduce using rule 34 (term0 -> term1 .)
    if              reduce using rule 34 (term0 -> term1 .)
    while           reduce using rule 34 (term0 -> term1 .)
    case            reduce using rule 34 (term0 -> term1 .)
    for             reduce using rule 34 (term0 -> term1 .)
    return          reduce using rule 34 (term0 -> term1 .)
    IDENTIFIER      reduce using rule 34 (term0 -> term1 .)
    nil             reduce using rule 34 (term0 -> term1 .)
    self            reduce using rule 34 (term0 -> term1 .)
    GLOBAL          reduce using rule 34 (term0 -> term1 .)
    AT_THE_RATE     reduce using rule 34 (term0 -> term1 .)
    MINUS           reduce using rule 34 (term0 -> term1 .)
    PLUS            reduce using rule 34 (term0 -> term1 .)
    OPEN_BRACKET    reduce using rule 34 (term0 -> term1 .)
    CONSTANT_RESOLUTION reduce using rule 34 (term0 -> term1 .)
    Array           reduce using rule 34 (term0 -> term1 .)
    NUMBER          reduce using rule 34 (term0 -> term1 .)
    FLOAT           reduce using rule 34 (term0 -> term1 .)
    STRING          reduce using rule 34 (term0 -> term1 .)
    true            reduce using rule 34 (term0 -> term1 .)
    false           reduce using rule 34 (term0 -> term1 .)
    $end            reduce using rule 34 (term0 -> term1 .)
    end             reduce using rule 34 (term0 -> term1 .)
    then            reduce using rule 34 (term0 -> term1 .)
    MAP             reduce using rule 34 (term0 -> term1 .)
    COMMA           reduce using rule 34 (term0 -> term1 .)
    do              reduce using rule 34 (term0 -> term1 .)
    CLOSE_BRACKET   reduce using rule 34 (term0 -> term1 .)


state 27

    (100) mlhs -> mlhsitem .

    EQUALS          reduce using rule 100 (mlhs -> mlhsitem .)
    MODULO_EQUALS   reduce using rule 100 (mlhs -> mlhsitem .)
    DIVIDE_EQUALS   reduce using rule 100 (mlhs -> mlhsitem .)
    MINUS_EQUALS    reduce using rule 100 (mlhs -> mlhsitem .)
    PLUS_EQUALS     reduce using rule 100 (mlhs -> mlhsitem .)
    OR_EQUALS       reduce using rule 100 (mlhs -> mlhsitem .)
    AND_EQUALS      reduce using rule 100 (mlhs -> mlhsitem .)
    XOR_EQUALS      reduce using rule 100 (mlhs -> mlhsitem .)
    RIGHT_SHIFT_EQUALS reduce using rule 100 (mlhs -> mlhsitem .)
    LEFT_SHIFT_EQUALS reduce using rule 100 (mlhs -> mlhsitem .)
    MULTIPLY_EQUALS reduce using rule 100 (mlhs -> mlhsitem .)
    LOGICAL_AND_EQUALS reduce using rule 100 (mlhs -> mlhsitem .)
    LOGICAL_OR_EQUALS reduce using rule 100 (mlhs -> mlhsitem .)
    POWER_EQUALS    reduce using rule 100 (mlhs -> mlhsitem .)
    in              reduce using rule 100 (mlhs -> mlhsitem .)


state 28

    (37) term1 -> term2 .

    BIT_OR          reduce using rule 37 (term1 -> term2 .)
    SEMI_COLON      reduce using rule 37 (term1 -> term2 .)
    NEWLINE         reduce using rule 37 (term1 -> term2 .)
    def             reduce using rule 37 (term1 -> term2 .)
    break           reduce using rule 37 (term1 -> term2 .)
    if              reduce using rule 37 (term1 -> term2 .)
    while           reduce using rule 37 (term1 -> term2 .)
    case            reduce using rule 37 (term1 -> term2 .)
    for             reduce using rule 37 (term1 -> term2 .)
    return          reduce using rule 37 (term1 -> term2 .)
    IDENTIFIER      reduce using rule 37 (term1 -> term2 .)
    nil             reduce using rule 37 (term1 -> term2 .)
    self            reduce using rule 37 (term1 -> term2 .)
    GLOBAL          reduce using rule 37 (term1 -> term2 .)
    AT_THE_RATE     reduce using rule 37 (term1 -> term2 .)
    MINUS           reduce using rule 37 (term1 -> term2 .)
    PLUS            reduce using rule 37 (term1 -> term2 .)
    OPEN_BRACKET    reduce using rule 37 (term1 -> term2 .)
    CONSTANT_RESOLUTION reduce using rule 37 (term1 -> term2 .)
    Array           reduce using rule 37 (term1 -> term2 .)
    NUMBER          reduce using rule 37 (term1 -> term2 .)
    FLOAT           reduce using rule 37 (term1 -> term2 .)
    STRING          reduce using rule 37 (term1 -> term2 .)
    true            reduce using rule 37 (term1 -> term2 .)
    false           reduce using rule 37 (term1 -> term2 .)
    $end            reduce using rule 37 (term1 -> term2 .)
    end             reduce using rule 37 (term1 -> term2 .)
    then            reduce using rule 37 (term1 -> term2 .)
    MAP             reduce using rule 37 (term1 -> term2 .)
    COMMA           reduce using rule 37 (term1 -> term2 .)
    do              reduce using rule 37 (term1 -> term2 .)
    CLOSE_BRACKET   reduce using rule 37 (term1 -> term2 .)


state 29

    (102) mlhsitem -> arraya .
    (79) primary -> arraya .

    EQUALS          reduce using rule 102 (mlhsitem -> arraya .)
    MODULO_EQUALS   reduce using rule 102 (mlhsitem -> arraya .)
    DIVIDE_EQUALS   reduce using rule 102 (mlhsitem -> arraya .)
    MINUS_EQUALS    reduce using rule 102 (mlhsitem -> arraya .)
    PLUS_EQUALS     reduce using rule 102 (mlhsitem -> arraya .)
    OR_EQUALS       reduce using rule 102 (mlhsitem -> arraya .)
    AND_EQUALS      reduce using rule 102 (mlhsitem -> arraya .)
    XOR_EQUALS      reduce using rule 102 (mlhsitem -> arraya .)
    RIGHT_SHIFT_EQUALS reduce using rule 102 (mlhsitem -> arraya .)
    LEFT_SHIFT_EQUALS reduce using rule 102 (mlhsitem -> arraya .)
    MULTIPLY_EQUALS reduce using rule 102 (mlhsitem -> arraya .)
    LOGICAL_AND_EQUALS reduce using rule 102 (mlhsitem -> arraya .)
    LOGICAL_OR_EQUALS reduce using rule 102 (mlhsitem -> arraya .)
    POWER_EQUALS    reduce using rule 102 (mlhsitem -> arraya .)
    POWER           reduce using rule 79 (primary -> arraya .)
    MULTIPLY        reduce using rule 79 (primary -> arraya .)
    DIVIDE          reduce using rule 79 (primary -> arraya .)
    MODULO          reduce using rule 79 (primary -> arraya .)
    PLUS            reduce using rule 79 (primary -> arraya .)
    MINUS           reduce using rule 79 (primary -> arraya .)
    LEFT_SHIFT      reduce using rule 79 (primary -> arraya .)
    RIGHT_SHIFT     reduce using rule 79 (primary -> arraya .)
    BIT_AND         reduce using rule 79 (primary -> arraya .)
    BIT_XOR         reduce using rule 79 (primary -> arraya .)
    DOUBLE_EQUALS   reduce using rule 79 (primary -> arraya .)
    TRIPLE_EQUALS   reduce using rule 79 (primary -> arraya .)
    NOT_EQUALS      reduce using rule 79 (primary -> arraya .)
    EQUAL_TILDE     reduce using rule 79 (primary -> arraya .)
    BANG_TILDE      reduce using rule 79 (primary -> arraya .)
    COMPARISON      reduce using rule 79 (primary -> arraya .)
    LESS            reduce using rule 79 (primary -> arraya .)
    LESS_EQUALS     reduce using rule 79 (primary -> arraya .)
    GREATER         reduce using rule 79 (primary -> arraya .)
    GREATER_EQUALS  reduce using rule 79 (primary -> arraya .)
    INCL_RANGE      reduce using rule 79 (primary -> arraya .)
    EXCL_RANGE      reduce using rule 79 (primary -> arraya .)
    LOGICAL_OR      reduce using rule 79 (primary -> arraya .)
    BIT_OR          reduce using rule 79 (primary -> arraya .)
    SEMI_COLON      reduce using rule 79 (primary -> arraya .)
    NEWLINE         reduce using rule 79 (primary -> arraya .)
    def             reduce using rule 79 (primary -> arraya .)
    break           reduce using rule 79 (primary -> arraya .)
    if              reduce using rule 79 (primary -> arraya .)
    while           reduce using rule 79 (primary -> arraya .)
    case            reduce using rule 79 (primary -> arraya .)
    for             reduce using rule 79 (primary -> arraya .)
    return          reduce using rule 79 (primary -> arraya .)
    IDENTIFIER      reduce using rule 79 (primary -> arraya .)
    nil             reduce using rule 79 (primary -> arraya .)
    self            reduce using rule 79 (primary -> arraya .)
    GLOBAL          reduce using rule 79 (primary -> arraya .)
    AT_THE_RATE     reduce using rule 79 (primary -> arraya .)
    OPEN_BRACKET    reduce using rule 79 (primary -> arraya .)
    CONSTANT_RESOLUTION reduce using rule 79 (primary -> arraya .)
    Array           reduce using rule 79 (primary -> arraya .)
    NUMBER          reduce using rule 79 (primary -> arraya .)
    FLOAT           reduce using rule 79 (primary -> arraya .)
    STRING          reduce using rule 79 (primary -> arraya .)
    true            reduce using rule 79 (primary -> arraya .)
    false           reduce using rule 79 (primary -> arraya .)
    $end            reduce using rule 79 (primary -> arraya .)
    end             reduce using rule 79 (primary -> arraya .)
    then            reduce using rule 79 (primary -> arraya .)
    MAP             reduce using rule 79 (primary -> arraya .)
    COMMA           reduce using rule 79 (primary -> arraya .)
    do              reduce using rule 79 (primary -> arraya .)
    CLOSE_BRACKET   reduce using rule 79 (primary -> arraya .)


state 30

    (38) term2 -> term3 . INCL_RANGE term3
    (39) term2 -> term3 . EXCL_RANGE term3
    (40) term2 -> term3 .
    (41) term3 -> term3 . LOGICAL_OR term4

    INCL_RANGE      shift and go to state 99
    EXCL_RANGE      shift and go to state 100
    BIT_OR          reduce using rule 40 (term2 -> term3 .)
    SEMI_COLON      reduce using rule 40 (term2 -> term3 .)
    NEWLINE         reduce using rule 40 (term2 -> term3 .)
    def             reduce using rule 40 (term2 -> term3 .)
    break           reduce using rule 40 (term2 -> term3 .)
    if              reduce using rule 40 (term2 -> term3 .)
    while           reduce using rule 40 (term2 -> term3 .)
    case            reduce using rule 40 (term2 -> term3 .)
    for             reduce using rule 40 (term2 -> term3 .)
    return          reduce using rule 40 (term2 -> term3 .)
    IDENTIFIER      reduce using rule 40 (term2 -> term3 .)
    nil             reduce using rule 40 (term2 -> term3 .)
    self            reduce using rule 40 (term2 -> term3 .)
    GLOBAL          reduce using rule 40 (term2 -> term3 .)
    AT_THE_RATE     reduce using rule 40 (term2 -> term3 .)
    MINUS           reduce using rule 40 (term2 -> term3 .)
    PLUS            reduce using rule 40 (term2 -> term3 .)
    OPEN_BRACKET    reduce using rule 40 (term2 -> term3 .)
    CONSTANT_RESOLUTION reduce using rule 40 (term2 -> term3 .)
    Array           reduce using rule 40 (term2 -> term3 .)
    NUMBER          reduce using rule 40 (term2 -> term3 .)
    FLOAT           reduce using rule 40 (term2 -> term3 .)
    STRING          reduce using rule 40 (term2 -> term3 .)
    true            reduce using rule 40 (term2 -> term3 .)
    false           reduce using rule 40 (term2 -> term3 .)
    $end            reduce using rule 40 (term2 -> term3 .)
    end             reduce using rule 40 (term2 -> term3 .)
    then            reduce using rule 40 (term2 -> term3 .)
    MAP             reduce using rule 40 (term2 -> term3 .)
    COMMA           reduce using rule 40 (term2 -> term3 .)
    do              reduce using rule 40 (term2 -> term3 .)
    CLOSE_BRACKET   reduce using rule 40 (term2 -> term3 .)
    LOGICAL_OR      shift and go to state 101


state 31

    (85) arraya -> variable . OPEN_SQUARE array_args CLOSE_SQUARE
    (76) primary -> variable . CONSTANT_RESOLUTION IDENTIFIER

    OPEN_SQUARE     shift and go to state 102
    CONSTANT_RESOLUTION shift and go to state 103


state 32

    (42) term3 -> term4 .

    INCL_RANGE      reduce using rule 42 (term3 -> term4 .)
    EXCL_RANGE      reduce using rule 42 (term3 -> term4 .)
    LOGICAL_OR      reduce using rule 42 (term3 -> term4 .)
    BIT_OR          reduce using rule 42 (term3 -> term4 .)
    SEMI_COLON      reduce using rule 42 (term3 -> term4 .)
    NEWLINE         reduce using rule 42 (term3 -> term4 .)
    def             reduce using rule 42 (term3 -> term4 .)
    break           reduce using rule 42 (term3 -> term4 .)
    if              reduce using rule 42 (term3 -> term4 .)
    while           reduce using rule 42 (term3 -> term4 .)
    case            reduce using rule 42 (term3 -> term4 .)
    for             reduce using rule 42 (term3 -> term4 .)
    return          reduce using rule 42 (term3 -> term4 .)
    IDENTIFIER      reduce using rule 42 (term3 -> term4 .)
    nil             reduce using rule 42 (term3 -> term4 .)
    self            reduce using rule 42 (term3 -> term4 .)
    GLOBAL          reduce using rule 42 (term3 -> term4 .)
    AT_THE_RATE     reduce using rule 42 (term3 -> term4 .)
    MINUS           reduce using rule 42 (term3 -> term4 .)
    PLUS            reduce using rule 42 (term3 -> term4 .)
    OPEN_BRACKET    reduce using rule 42 (term3 -> term4 .)
    CONSTANT_RESOLUTION reduce using rule 42 (term3 -> term4 .)
    Array           reduce using rule 42 (term3 -> term4 .)
    NUMBER          reduce using rule 42 (term3 -> term4 .)
    FLOAT           reduce using rule 42 (term3 -> term4 .)
    STRING          reduce using rule 42 (term3 -> term4 .)
    true            reduce using rule 42 (term3 -> term4 .)
    false           reduce using rule 42 (term3 -> term4 .)
    $end            reduce using rule 42 (term3 -> term4 .)
    end             reduce using rule 42 (term3 -> term4 .)
    then            reduce using rule 42 (term3 -> term4 .)
    MAP             reduce using rule 42 (term3 -> term4 .)
    COMMA           reduce using rule 42 (term3 -> term4 .)
    do              reduce using rule 42 (term3 -> term4 .)
    CLOSE_BRACKET   reduce using rule 42 (term3 -> term4 .)


state 33

    (151) variable -> varname .
    (81) primary -> varname .

  ! reduce/reduce conflict for CONSTANT_RESOLUTION resolved using rule 81 (primary -> varname .)
    OPEN_SQUARE     reduce using rule 151 (variable -> varname .)
    POWER           reduce using rule 81 (primary -> varname .)
    MULTIPLY        reduce using rule 81 (primary -> varname .)
    DIVIDE          reduce using rule 81 (primary -> varname .)
    MODULO          reduce using rule 81 (primary -> varname .)
    PLUS            reduce using rule 81 (primary -> varname .)
    MINUS           reduce using rule 81 (primary -> varname .)
    LEFT_SHIFT      reduce using rule 81 (primary -> varname .)
    RIGHT_SHIFT     reduce using rule 81 (primary -> varname .)
    BIT_AND         reduce using rule 81 (primary -> varname .)
    BIT_XOR         reduce using rule 81 (primary -> varname .)
    DOUBLE_EQUALS   reduce using rule 81 (primary -> varname .)
    TRIPLE_EQUALS   reduce using rule 81 (primary -> varname .)
    NOT_EQUALS      reduce using rule 81 (primary -> varname .)
    EQUAL_TILDE     reduce using rule 81 (primary -> varname .)
    BANG_TILDE      reduce using rule 81 (primary -> varname .)
    COMPARISON      reduce using rule 81 (primary -> varname .)
    LESS            reduce using rule 81 (primary -> varname .)
    LESS_EQUALS     reduce using rule 81 (primary -> varname .)
    GREATER         reduce using rule 81 (primary -> varname .)
    GREATER_EQUALS  reduce using rule 81 (primary -> varname .)
    INCL_RANGE      reduce using rule 81 (primary -> varname .)
    EXCL_RANGE      reduce using rule 81 (primary -> varname .)
    LOGICAL_OR      reduce using rule 81 (primary -> varname .)
    BIT_OR          reduce using rule 81 (primary -> varname .)
    SEMI_COLON      reduce using rule 81 (primary -> varname .)
    NEWLINE         reduce using rule 81 (primary -> varname .)
    def             reduce using rule 81 (primary -> varname .)
    break           reduce using rule 81 (primary -> varname .)
    if              reduce using rule 81 (primary -> varname .)
    while           reduce using rule 81 (primary -> varname .)
    case            reduce using rule 81 (primary -> varname .)
    for             reduce using rule 81 (primary -> varname .)
    return          reduce using rule 81 (primary -> varname .)
    IDENTIFIER      reduce using rule 81 (primary -> varname .)
    nil             reduce using rule 81 (primary -> varname .)
    self            reduce using rule 81 (primary -> varname .)
    GLOBAL          reduce using rule 81 (primary -> varname .)
    AT_THE_RATE     reduce using rule 81 (primary -> varname .)
    OPEN_BRACKET    reduce using rule 81 (primary -> varname .)
    CONSTANT_RESOLUTION reduce using rule 81 (primary -> varname .)
    Array           reduce using rule 81 (primary -> varname .)
    NUMBER          reduce using rule 81 (primary -> varname .)
    FLOAT           reduce using rule 81 (primary -> varname .)
    STRING          reduce using rule 81 (primary -> varname .)
    true            reduce using rule 81 (primary -> varname .)
    false           reduce using rule 81 (primary -> varname .)
    $end            reduce using rule 81 (primary -> varname .)
    end             reduce using rule 81 (primary -> varname .)
    then            reduce using rule 81 (primary -> varname .)
    MAP             reduce using rule 81 (primary -> varname .)
    COMMA           reduce using rule 81 (primary -> varname .)
    do              reduce using rule 81 (primary -> varname .)
    CLOSE_BRACKET   reduce using rule 81 (primary -> varname .)

  ! CONSTANT_RESOLUTION [ reduce using rule 151 (variable -> varname .) ]


state 34

    (152) variable -> nil .

    OPEN_SQUARE     reduce using rule 152 (variable -> nil .)
    CONSTANT_RESOLUTION reduce using rule 152 (variable -> nil .)


state 35

    (153) variable -> self .

    OPEN_SQUARE     reduce using rule 153 (variable -> self .)
    CONSTANT_RESOLUTION reduce using rule 153 (variable -> self .)


state 36

    (43) term4 -> term5 . DOUBLE_EQUALS term5
    (44) term4 -> term5 . TRIPLE_EQUALS term5
    (45) term4 -> term5 . NOT_EQUALS term5
    (46) term4 -> term5 . EQUAL_TILDE term5
    (47) term4 -> term5 . BANG_TILDE term5
    (48) term4 -> term5 . COMPARISON term5
    (49) term4 -> term5 .
    (50) term5 -> term5 . LESS term6
    (51) term5 -> term5 . LESS_EQUALS term6
    (52) term5 -> term5 . GREATER term6
    (53) term5 -> term5 . GREATER_EQUALS term6

    DOUBLE_EQUALS   shift and go to state 104
    TRIPLE_EQUALS   shift and go to state 105
    NOT_EQUALS      shift and go to state 106
    EQUAL_TILDE     shift and go to state 107
    BANG_TILDE      shift and go to state 108
    COMPARISON      shift and go to state 109
    INCL_RANGE      reduce using rule 49 (term4 -> term5 .)
    EXCL_RANGE      reduce using rule 49 (term4 -> term5 .)
    LOGICAL_OR      reduce using rule 49 (term4 -> term5 .)
    BIT_OR          reduce using rule 49 (term4 -> term5 .)
    SEMI_COLON      reduce using rule 49 (term4 -> term5 .)
    NEWLINE         reduce using rule 49 (term4 -> term5 .)
    def             reduce using rule 49 (term4 -> term5 .)
    break           reduce using rule 49 (term4 -> term5 .)
    if              reduce using rule 49 (term4 -> term5 .)
    while           reduce using rule 49 (term4 -> term5 .)
    case            reduce using rule 49 (term4 -> term5 .)
    for             reduce using rule 49 (term4 -> term5 .)
    return          reduce using rule 49 (term4 -> term5 .)
    IDENTIFIER      reduce using rule 49 (term4 -> term5 .)
    nil             reduce using rule 49 (term4 -> term5 .)
    self            reduce using rule 49 (term4 -> term5 .)
    GLOBAL          reduce using rule 49 (term4 -> term5 .)
    AT_THE_RATE     reduce using rule 49 (term4 -> term5 .)
    MINUS           reduce using rule 49 (term4 -> term5 .)
    PLUS            reduce using rule 49 (term4 -> term5 .)
    OPEN_BRACKET    reduce using rule 49 (term4 -> term5 .)
    CONSTANT_RESOLUTION reduce using rule 49 (term4 -> term5 .)
    Array           reduce using rule 49 (term4 -> term5 .)
    NUMBER          reduce using rule 49 (term4 -> term5 .)
    FLOAT           reduce using rule 49 (term4 -> term5 .)
    STRING          reduce using rule 49 (term4 -> term5 .)
    true            reduce using rule 49 (term4 -> term5 .)
    false           reduce using rule 49 (term4 -> term5 .)
    $end            reduce using rule 49 (term4 -> term5 .)
    end             reduce using rule 49 (term4 -> term5 .)
    then            reduce using rule 49 (term4 -> term5 .)
    MAP             reduce using rule 49 (term4 -> term5 .)
    COMMA           reduce using rule 49 (term4 -> term5 .)
    do              reduce using rule 49 (term4 -> term5 .)
    CLOSE_BRACKET   reduce using rule 49 (term4 -> term5 .)
    LESS            shift and go to state 110
    LESS_EQUALS     shift and go to state 111
    GREATER         shift and go to state 112
    GREATER_EQUALS  shift and go to state 113


state 37

    (173) varname -> GLOBAL .

    OPEN_SQUARE     reduce using rule 173 (varname -> GLOBAL .)
    CONSTANT_RESOLUTION reduce using rule 173 (varname -> GLOBAL .)
    POWER           reduce using rule 173 (varname -> GLOBAL .)
    MULTIPLY        reduce using rule 173 (varname -> GLOBAL .)
    DIVIDE          reduce using rule 173 (varname -> GLOBAL .)
    MODULO          reduce using rule 173 (varname -> GLOBAL .)
    PLUS            reduce using rule 173 (varname -> GLOBAL .)
    MINUS           reduce using rule 173 (varname -> GLOBAL .)
    LEFT_SHIFT      reduce using rule 173 (varname -> GLOBAL .)
    RIGHT_SHIFT     reduce using rule 173 (varname -> GLOBAL .)
    BIT_AND         reduce using rule 173 (varname -> GLOBAL .)
    BIT_XOR         reduce using rule 173 (varname -> GLOBAL .)
    DOUBLE_EQUALS   reduce using rule 173 (varname -> GLOBAL .)
    TRIPLE_EQUALS   reduce using rule 173 (varname -> GLOBAL .)
    NOT_EQUALS      reduce using rule 173 (varname -> GLOBAL .)
    EQUAL_TILDE     reduce using rule 173 (varname -> GLOBAL .)
    BANG_TILDE      reduce using rule 173 (varname -> GLOBAL .)
    COMPARISON      reduce using rule 173 (varname -> GLOBAL .)
    LESS            reduce using rule 173 (varname -> GLOBAL .)
    LESS_EQUALS     reduce using rule 173 (varname -> GLOBAL .)
    GREATER         reduce using rule 173 (varname -> GLOBAL .)
    GREATER_EQUALS  reduce using rule 173 (varname -> GLOBAL .)
    INCL_RANGE      reduce using rule 173 (varname -> GLOBAL .)
    EXCL_RANGE      reduce using rule 173 (varname -> GLOBAL .)
    LOGICAL_OR      reduce using rule 173 (varname -> GLOBAL .)
    BIT_OR          reduce using rule 173 (varname -> GLOBAL .)
    SEMI_COLON      reduce using rule 173 (varname -> GLOBAL .)
    NEWLINE         reduce using rule 173 (varname -> GLOBAL .)
    def             reduce using rule 173 (varname -> GLOBAL .)
    break           reduce using rule 173 (varname -> GLOBAL .)
    if              reduce using rule 173 (varname -> GLOBAL .)
    while           reduce using rule 173 (varname -> GLOBAL .)
    case            reduce using rule 173 (varname -> GLOBAL .)
    for             reduce using rule 173 (varname -> GLOBAL .)
    return          reduce using rule 173 (varname -> GLOBAL .)
    IDENTIFIER      reduce using rule 173 (varname -> GLOBAL .)
    nil             reduce using rule 173 (varname -> GLOBAL .)
    self            reduce using rule 173 (varname -> GLOBAL .)
    GLOBAL          reduce using rule 173 (varname -> GLOBAL .)
    AT_THE_RATE     reduce using rule 173 (varname -> GLOBAL .)
    OPEN_BRACKET    reduce using rule 173 (varname -> GLOBAL .)
    Array           reduce using rule 173 (varname -> GLOBAL .)
    NUMBER          reduce using rule 173 (varname -> GLOBAL .)
    FLOAT           reduce using rule 173 (varname -> GLOBAL .)
    STRING          reduce using rule 173 (varname -> GLOBAL .)
    true            reduce using rule 173 (varname -> GLOBAL .)
    false           reduce using rule 173 (varname -> GLOBAL .)
    $end            reduce using rule 173 (varname -> GLOBAL .)
    end             reduce using rule 173 (varname -> GLOBAL .)
    then            reduce using rule 173 (varname -> GLOBAL .)
    MAP             reduce using rule 173 (varname -> GLOBAL .)
    COMMA           reduce using rule 173 (varname -> GLOBAL .)
    do              reduce using rule 173 (varname -> GLOBAL .)
    CLOSE_BRACKET   reduce using rule 173 (varname -> GLOBAL .)
    CLOSE_SQUARE    reduce using rule 173 (varname -> GLOBAL .)


state 38

    (174) varname -> AT_THE_RATE . IDENTIFIER

    IDENTIFIER      shift and go to state 114


state 39

    (54) term5 -> term6 .
    (55) term6 -> term6 . BIT_XOR term7

    DOUBLE_EQUALS   reduce using rule 54 (term5 -> term6 .)
    TRIPLE_EQUALS   reduce using rule 54 (term5 -> term6 .)
    NOT_EQUALS      reduce using rule 54 (term5 -> term6 .)
    EQUAL_TILDE     reduce using rule 54 (term5 -> term6 .)
    BANG_TILDE      reduce using rule 54 (term5 -> term6 .)
    COMPARISON      reduce using rule 54 (term5 -> term6 .)
    LESS            reduce using rule 54 (term5 -> term6 .)
    LESS_EQUALS     reduce using rule 54 (term5 -> term6 .)
    GREATER         reduce using rule 54 (term5 -> term6 .)
    GREATER_EQUALS  reduce using rule 54 (term5 -> term6 .)
    INCL_RANGE      reduce using rule 54 (term5 -> term6 .)
    EXCL_RANGE      reduce using rule 54 (term5 -> term6 .)
    LOGICAL_OR      reduce using rule 54 (term5 -> term6 .)
    BIT_OR          reduce using rule 54 (term5 -> term6 .)
    SEMI_COLON      reduce using rule 54 (term5 -> term6 .)
    NEWLINE         reduce using rule 54 (term5 -> term6 .)
    def             reduce using rule 54 (term5 -> term6 .)
    break           reduce using rule 54 (term5 -> term6 .)
    if              reduce using rule 54 (term5 -> term6 .)
    while           reduce using rule 54 (term5 -> term6 .)
    case            reduce using rule 54 (term5 -> term6 .)
    for             reduce using rule 54 (term5 -> term6 .)
    return          reduce using rule 54 (term5 -> term6 .)
    IDENTIFIER      reduce using rule 54 (term5 -> term6 .)
    nil             reduce using rule 54 (term5 -> term6 .)
    self            reduce using rule 54 (term5 -> term6 .)
    GLOBAL          reduce using rule 54 (term5 -> term6 .)
    AT_THE_RATE     reduce using rule 54 (term5 -> term6 .)
    MINUS           reduce using rule 54 (term5 -> term6 .)
    PLUS            reduce using rule 54 (term5 -> term6 .)
    OPEN_BRACKET    reduce using rule 54 (term5 -> term6 .)
    CONSTANT_RESOLUTION reduce using rule 54 (term5 -> term6 .)
    Array           reduce using rule 54 (term5 -> term6 .)
    NUMBER          reduce using rule 54 (term5 -> term6 .)
    FLOAT           reduce using rule 54 (term5 -> term6 .)
    STRING          reduce using rule 54 (term5 -> term6 .)
    true            reduce using rule 54 (term5 -> term6 .)
    false           reduce using rule 54 (term5 -> term6 .)
    $end            reduce using rule 54 (term5 -> term6 .)
    end             reduce using rule 54 (term5 -> term6 .)
    then            reduce using rule 54 (term5 -> term6 .)
    MAP             reduce using rule 54 (term5 -> term6 .)
    COMMA           reduce using rule 54 (term5 -> term6 .)
    do              reduce using rule 54 (term5 -> term6 .)
    CLOSE_BRACKET   reduce using rule 54 (term5 -> term6 .)
    BIT_XOR         shift and go to state 115


state 40

    (56) term6 -> term7 .
    (57) term7 -> term7 . BIT_AND term8

    BIT_XOR         reduce using rule 56 (term6 -> term7 .)
    DOUBLE_EQUALS   reduce using rule 56 (term6 -> term7 .)
    TRIPLE_EQUALS   reduce using rule 56 (term6 -> term7 .)
    NOT_EQUALS      reduce using rule 56 (term6 -> term7 .)
    EQUAL_TILDE     reduce using rule 56 (term6 -> term7 .)
    BANG_TILDE      reduce using rule 56 (term6 -> term7 .)
    COMPARISON      reduce using rule 56 (term6 -> term7 .)
    LESS            reduce using rule 56 (term6 -> term7 .)
    LESS_EQUALS     reduce using rule 56 (term6 -> term7 .)
    GREATER         reduce using rule 56 (term6 -> term7 .)
    GREATER_EQUALS  reduce using rule 56 (term6 -> term7 .)
    INCL_RANGE      reduce using rule 56 (term6 -> term7 .)
    EXCL_RANGE      reduce using rule 56 (term6 -> term7 .)
    LOGICAL_OR      reduce using rule 56 (term6 -> term7 .)
    BIT_OR          reduce using rule 56 (term6 -> term7 .)
    SEMI_COLON      reduce using rule 56 (term6 -> term7 .)
    NEWLINE         reduce using rule 56 (term6 -> term7 .)
    def             reduce using rule 56 (term6 -> term7 .)
    break           reduce using rule 56 (term6 -> term7 .)
    if              reduce using rule 56 (term6 -> term7 .)
    while           reduce using rule 56 (term6 -> term7 .)
    case            reduce using rule 56 (term6 -> term7 .)
    for             reduce using rule 56 (term6 -> term7 .)
    return          reduce using rule 56 (term6 -> term7 .)
    IDENTIFIER      reduce using rule 56 (term6 -> term7 .)
    nil             reduce using rule 56 (term6 -> term7 .)
    self            reduce using rule 56 (term6 -> term7 .)
    GLOBAL          reduce using rule 56 (term6 -> term7 .)
    AT_THE_RATE     reduce using rule 56 (term6 -> term7 .)
    MINUS           reduce using rule 56 (term6 -> term7 .)
    PLUS            reduce using rule 56 (term6 -> term7 .)
    OPEN_BRACKET    reduce using rule 56 (term6 -> term7 .)
    CONSTANT_RESOLUTION reduce using rule 56 (term6 -> term7 .)
    Array           reduce using rule 56 (term6 -> term7 .)
    NUMBER          reduce using rule 56 (term6 -> term7 .)
    FLOAT           reduce using rule 56 (term6 -> term7 .)
    STRING          reduce using rule 56 (term6 -> term7 .)
    true            reduce using rule 56 (term6 -> term7 .)
    false           reduce using rule 56 (term6 -> term7 .)
    $end            reduce using rule 56 (term6 -> term7 .)
    end             reduce using rule 56 (term6 -> term7 .)
    then            reduce using rule 56 (term6 -> term7 .)
    MAP             reduce using rule 56 (term6 -> term7 .)
    COMMA           reduce using rule 56 (term6 -> term7 .)
    do              reduce using rule 56 (term6 -> term7 .)
    CLOSE_BRACKET   reduce using rule 56 (term6 -> term7 .)
    BIT_AND         shift and go to state 116


state 41

    (58) term7 -> term8 .
    (59) term8 -> term8 . LEFT_SHIFT term9
    (60) term8 -> term8 . RIGHT_SHIFT term9

    BIT_AND         reduce using rule 58 (term7 -> term8 .)
    BIT_XOR         reduce using rule 58 (term7 -> term8 .)
    DOUBLE_EQUALS   reduce using rule 58 (term7 -> term8 .)
    TRIPLE_EQUALS   reduce using rule 58 (term7 -> term8 .)
    NOT_EQUALS      reduce using rule 58 (term7 -> term8 .)
    EQUAL_TILDE     reduce using rule 58 (term7 -> term8 .)
    BANG_TILDE      reduce using rule 58 (term7 -> term8 .)
    COMPARISON      reduce using rule 58 (term7 -> term8 .)
    LESS            reduce using rule 58 (term7 -> term8 .)
    LESS_EQUALS     reduce using rule 58 (term7 -> term8 .)
    GREATER         reduce using rule 58 (term7 -> term8 .)
    GREATER_EQUALS  reduce using rule 58 (term7 -> term8 .)
    INCL_RANGE      reduce using rule 58 (term7 -> term8 .)
    EXCL_RANGE      reduce using rule 58 (term7 -> term8 .)
    LOGICAL_OR      reduce using rule 58 (term7 -> term8 .)
    BIT_OR          reduce using rule 58 (term7 -> term8 .)
    SEMI_COLON      reduce using rule 58 (term7 -> term8 .)
    NEWLINE         reduce using rule 58 (term7 -> term8 .)
    def             reduce using rule 58 (term7 -> term8 .)
    break           reduce using rule 58 (term7 -> term8 .)
    if              reduce using rule 58 (term7 -> term8 .)
    while           reduce using rule 58 (term7 -> term8 .)
    case            reduce using rule 58 (term7 -> term8 .)
    for             reduce using rule 58 (term7 -> term8 .)
    return          reduce using rule 58 (term7 -> term8 .)
    IDENTIFIER      reduce using rule 58 (term7 -> term8 .)
    nil             reduce using rule 58 (term7 -> term8 .)
    self            reduce using rule 58 (term7 -> term8 .)
    GLOBAL          reduce using rule 58 (term7 -> term8 .)
    AT_THE_RATE     reduce using rule 58 (term7 -> term8 .)
    MINUS           reduce using rule 58 (term7 -> term8 .)
    PLUS            reduce using rule 58 (term7 -> term8 .)
    OPEN_BRACKET    reduce using rule 58 (term7 -> term8 .)
    CONSTANT_RESOLUTION reduce using rule 58 (term7 -> term8 .)
    Array           reduce using rule 58 (term7 -> term8 .)
    NUMBER          reduce using rule 58 (term7 -> term8 .)
    FLOAT           reduce using rule 58 (term7 -> term8 .)
    STRING          reduce using rule 58 (term7 -> term8 .)
    true            reduce using rule 58 (term7 -> term8 .)
    false           reduce using rule 58 (term7 -> term8 .)
    $end            reduce using rule 58 (term7 -> term8 .)
    end             reduce using rule 58 (term7 -> term8 .)
    then            reduce using rule 58 (term7 -> term8 .)
    MAP             reduce using rule 58 (term7 -> term8 .)
    COMMA           reduce using rule 58 (term7 -> term8 .)
    do              reduce using rule 58 (term7 -> term8 .)
    CLOSE_BRACKET   reduce using rule 58 (term7 -> term8 .)
    LEFT_SHIFT      shift and go to state 117
    RIGHT_SHIFT     shift and go to state 118


state 42

    (61) term8 -> term9 .
    (62) term9 -> term9 . PLUS term10
    (63) term9 -> term9 . MINUS term10

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LEFT_SHIFT      reduce using rule 61 (term8 -> term9 .)
    RIGHT_SHIFT     reduce using rule 61 (term8 -> term9 .)
    BIT_AND         reduce using rule 61 (term8 -> term9 .)
    BIT_XOR         reduce using rule 61 (term8 -> term9 .)
    DOUBLE_EQUALS   reduce using rule 61 (term8 -> term9 .)
    TRIPLE_EQUALS   reduce using rule 61 (term8 -> term9 .)
    NOT_EQUALS      reduce using rule 61 (term8 -> term9 .)
    EQUAL_TILDE     reduce using rule 61 (term8 -> term9 .)
    BANG_TILDE      reduce using rule 61 (term8 -> term9 .)
    COMPARISON      reduce using rule 61 (term8 -> term9 .)
    LESS            reduce using rule 61 (term8 -> term9 .)
    LESS_EQUALS     reduce using rule 61 (term8 -> term9 .)
    GREATER         reduce using rule 61 (term8 -> term9 .)
    GREATER_EQUALS  reduce using rule 61 (term8 -> term9 .)
    INCL_RANGE      reduce using rule 61 (term8 -> term9 .)
    EXCL_RANGE      reduce using rule 61 (term8 -> term9 .)
    LOGICAL_OR      reduce using rule 61 (term8 -> term9 .)
    BIT_OR          reduce using rule 61 (term8 -> term9 .)
    SEMI_COLON      reduce using rule 61 (term8 -> term9 .)
    NEWLINE         reduce using rule 61 (term8 -> term9 .)
    def             reduce using rule 61 (term8 -> term9 .)
    break           reduce using rule 61 (term8 -> term9 .)
    if              reduce using rule 61 (term8 -> term9 .)
    while           reduce using rule 61 (term8 -> term9 .)
    case            reduce using rule 61 (term8 -> term9 .)
    for             reduce using rule 61 (term8 -> term9 .)
    return          reduce using rule 61 (term8 -> term9 .)
    IDENTIFIER      reduce using rule 61 (term8 -> term9 .)
    nil             reduce using rule 61 (term8 -> term9 .)
    self            reduce using rule 61 (term8 -> term9 .)
    GLOBAL          reduce using rule 61 (term8 -> term9 .)
    AT_THE_RATE     reduce using rule 61 (term8 -> term9 .)
    OPEN_BRACKET    reduce using rule 61 (term8 -> term9 .)
    CONSTANT_RESOLUTION reduce using rule 61 (term8 -> term9 .)
    Array           reduce using rule 61 (term8 -> term9 .)
    NUMBER          reduce using rule 61 (term8 -> term9 .)
    FLOAT           reduce using rule 61 (term8 -> term9 .)
    STRING          reduce using rule 61 (term8 -> term9 .)
    true            reduce using rule 61 (term8 -> term9 .)
    false           reduce using rule 61 (term8 -> term9 .)
    $end            reduce using rule 61 (term8 -> term9 .)
    end             reduce using rule 61 (term8 -> term9 .)
    then            reduce using rule 61 (term8 -> term9 .)
    MAP             reduce using rule 61 (term8 -> term9 .)
    COMMA           reduce using rule 61 (term8 -> term9 .)
    do              reduce using rule 61 (term8 -> term9 .)
    CLOSE_BRACKET   reduce using rule 61 (term8 -> term9 .)
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120

  ! MINUS           [ reduce using rule 61 (term8 -> term9 .) ]
  ! PLUS            [ reduce using rule 61 (term8 -> term9 .) ]


state 43

    (71) term12 -> PLUS . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    nil             shift and go to state 34
    self            shift and go to state 35
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    IDENTIFIER      shift and go to state 123

    term12                         shift and go to state 121
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    variable                       shift and go to state 122
    arrayd                         shift and go to state 51
    arraya                         shift and go to state 124
    literal                        shift and go to state 52
    varname                        shift and go to state 125

state 44

    (64) term9 -> term10 .
    (65) term10 -> term10 . MULTIPLY term11
    (66) term10 -> term10 . DIVIDE term11
    (67) term10 -> term10 . MODULO term11

    PLUS            reduce using rule 64 (term9 -> term10 .)
    MINUS           reduce using rule 64 (term9 -> term10 .)
    LEFT_SHIFT      reduce using rule 64 (term9 -> term10 .)
    RIGHT_SHIFT     reduce using rule 64 (term9 -> term10 .)
    BIT_AND         reduce using rule 64 (term9 -> term10 .)
    BIT_XOR         reduce using rule 64 (term9 -> term10 .)
    DOUBLE_EQUALS   reduce using rule 64 (term9 -> term10 .)
    TRIPLE_EQUALS   reduce using rule 64 (term9 -> term10 .)
    NOT_EQUALS      reduce using rule 64 (term9 -> term10 .)
    EQUAL_TILDE     reduce using rule 64 (term9 -> term10 .)
    BANG_TILDE      reduce using rule 64 (term9 -> term10 .)
    COMPARISON      reduce using rule 64 (term9 -> term10 .)
    LESS            reduce using rule 64 (term9 -> term10 .)
    LESS_EQUALS     reduce using rule 64 (term9 -> term10 .)
    GREATER         reduce using rule 64 (term9 -> term10 .)
    GREATER_EQUALS  reduce using rule 64 (term9 -> term10 .)
    INCL_RANGE      reduce using rule 64 (term9 -> term10 .)
    EXCL_RANGE      reduce using rule 64 (term9 -> term10 .)
    LOGICAL_OR      reduce using rule 64 (term9 -> term10 .)
    BIT_OR          reduce using rule 64 (term9 -> term10 .)
    SEMI_COLON      reduce using rule 64 (term9 -> term10 .)
    NEWLINE         reduce using rule 64 (term9 -> term10 .)
    def             reduce using rule 64 (term9 -> term10 .)
    break           reduce using rule 64 (term9 -> term10 .)
    if              reduce using rule 64 (term9 -> term10 .)
    while           reduce using rule 64 (term9 -> term10 .)
    case            reduce using rule 64 (term9 -> term10 .)
    for             reduce using rule 64 (term9 -> term10 .)
    return          reduce using rule 64 (term9 -> term10 .)
    IDENTIFIER      reduce using rule 64 (term9 -> term10 .)
    nil             reduce using rule 64 (term9 -> term10 .)
    self            reduce using rule 64 (term9 -> term10 .)
    GLOBAL          reduce using rule 64 (term9 -> term10 .)
    AT_THE_RATE     reduce using rule 64 (term9 -> term10 .)
    OPEN_BRACKET    reduce using rule 64 (term9 -> term10 .)
    CONSTANT_RESOLUTION reduce using rule 64 (term9 -> term10 .)
    Array           reduce using rule 64 (term9 -> term10 .)
    NUMBER          reduce using rule 64 (term9 -> term10 .)
    FLOAT           reduce using rule 64 (term9 -> term10 .)
    STRING          reduce using rule 64 (term9 -> term10 .)
    true            reduce using rule 64 (term9 -> term10 .)
    false           reduce using rule 64 (term9 -> term10 .)
    $end            reduce using rule 64 (term9 -> term10 .)
    end             reduce using rule 64 (term9 -> term10 .)
    then            reduce using rule 64 (term9 -> term10 .)
    MAP             reduce using rule 64 (term9 -> term10 .)
    COMMA           reduce using rule 64 (term9 -> term10 .)
    do              reduce using rule 64 (term9 -> term10 .)
    CLOSE_BRACKET   reduce using rule 64 (term9 -> term10 .)
    MULTIPLY        shift and go to state 126
    DIVIDE          shift and go to state 127
    MODULO          shift and go to state 128


state 45

    (69) term11 -> MINUS . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    nil             shift and go to state 34
    self            shift and go to state 35
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    IDENTIFIER      shift and go to state 123

    term11                         shift and go to state 129
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    variable                       shift and go to state 122
    arrayd                         shift and go to state 51
    arraya                         shift and go to state 124
    literal                        shift and go to state 52
    varname                        shift and go to state 125

state 46

    (68) term10 -> term11 .

    MULTIPLY        reduce using rule 68 (term10 -> term11 .)
    DIVIDE          reduce using rule 68 (term10 -> term11 .)
    MODULO          reduce using rule 68 (term10 -> term11 .)
    PLUS            reduce using rule 68 (term10 -> term11 .)
    MINUS           reduce using rule 68 (term10 -> term11 .)
    LEFT_SHIFT      reduce using rule 68 (term10 -> term11 .)
    RIGHT_SHIFT     reduce using rule 68 (term10 -> term11 .)
    BIT_AND         reduce using rule 68 (term10 -> term11 .)
    BIT_XOR         reduce using rule 68 (term10 -> term11 .)
    DOUBLE_EQUALS   reduce using rule 68 (term10 -> term11 .)
    TRIPLE_EQUALS   reduce using rule 68 (term10 -> term11 .)
    NOT_EQUALS      reduce using rule 68 (term10 -> term11 .)
    EQUAL_TILDE     reduce using rule 68 (term10 -> term11 .)
    BANG_TILDE      reduce using rule 68 (term10 -> term11 .)
    COMPARISON      reduce using rule 68 (term10 -> term11 .)
    LESS            reduce using rule 68 (term10 -> term11 .)
    LESS_EQUALS     reduce using rule 68 (term10 -> term11 .)
    GREATER         reduce using rule 68 (term10 -> term11 .)
    GREATER_EQUALS  reduce using rule 68 (term10 -> term11 .)
    INCL_RANGE      reduce using rule 68 (term10 -> term11 .)
    EXCL_RANGE      reduce using rule 68 (term10 -> term11 .)
    LOGICAL_OR      reduce using rule 68 (term10 -> term11 .)
    BIT_OR          reduce using rule 68 (term10 -> term11 .)
    SEMI_COLON      reduce using rule 68 (term10 -> term11 .)
    NEWLINE         reduce using rule 68 (term10 -> term11 .)
    def             reduce using rule 68 (term10 -> term11 .)
    break           reduce using rule 68 (term10 -> term11 .)
    if              reduce using rule 68 (term10 -> term11 .)
    while           reduce using rule 68 (term10 -> term11 .)
    case            reduce using rule 68 (term10 -> term11 .)
    for             reduce using rule 68 (term10 -> term11 .)
    return          reduce using rule 68 (term10 -> term11 .)
    IDENTIFIER      reduce using rule 68 (term10 -> term11 .)
    nil             reduce using rule 68 (term10 -> term11 .)
    self            reduce using rule 68 (term10 -> term11 .)
    GLOBAL          reduce using rule 68 (term10 -> term11 .)
    AT_THE_RATE     reduce using rule 68 (term10 -> term11 .)
    OPEN_BRACKET    reduce using rule 68 (term10 -> term11 .)
    CONSTANT_RESOLUTION reduce using rule 68 (term10 -> term11 .)
    Array           reduce using rule 68 (term10 -> term11 .)
    NUMBER          reduce using rule 68 (term10 -> term11 .)
    FLOAT           reduce using rule 68 (term10 -> term11 .)
    STRING          reduce using rule 68 (term10 -> term11 .)
    true            reduce using rule 68 (term10 -> term11 .)
    false           reduce using rule 68 (term10 -> term11 .)
    $end            reduce using rule 68 (term10 -> term11 .)
    end             reduce using rule 68 (term10 -> term11 .)
    then            reduce using rule 68 (term10 -> term11 .)
    MAP             reduce using rule 68 (term10 -> term11 .)
    COMMA           reduce using rule 68 (term10 -> term11 .)
    do              reduce using rule 68 (term10 -> term11 .)
    CLOSE_BRACKET   reduce using rule 68 (term10 -> term11 .)


state 47

    (70) term11 -> term12 .

    MULTIPLY        reduce using rule 70 (term11 -> term12 .)
    DIVIDE          reduce using rule 70 (term11 -> term12 .)
    MODULO          reduce using rule 70 (term11 -> term12 .)
    PLUS            reduce using rule 70 (term11 -> term12 .)
    MINUS           reduce using rule 70 (term11 -> term12 .)
    LEFT_SHIFT      reduce using rule 70 (term11 -> term12 .)
    RIGHT_SHIFT     reduce using rule 70 (term11 -> term12 .)
    BIT_AND         reduce using rule 70 (term11 -> term12 .)
    BIT_XOR         reduce using rule 70 (term11 -> term12 .)
    DOUBLE_EQUALS   reduce using rule 70 (term11 -> term12 .)
    TRIPLE_EQUALS   reduce using rule 70 (term11 -> term12 .)
    NOT_EQUALS      reduce using rule 70 (term11 -> term12 .)
    EQUAL_TILDE     reduce using rule 70 (term11 -> term12 .)
    BANG_TILDE      reduce using rule 70 (term11 -> term12 .)
    COMPARISON      reduce using rule 70 (term11 -> term12 .)
    LESS            reduce using rule 70 (term11 -> term12 .)
    LESS_EQUALS     reduce using rule 70 (term11 -> term12 .)
    GREATER         reduce using rule 70 (term11 -> term12 .)
    GREATER_EQUALS  reduce using rule 70 (term11 -> term12 .)
    INCL_RANGE      reduce using rule 70 (term11 -> term12 .)
    EXCL_RANGE      reduce using rule 70 (term11 -> term12 .)
    LOGICAL_OR      reduce using rule 70 (term11 -> term12 .)
    BIT_OR          reduce using rule 70 (term11 -> term12 .)
    SEMI_COLON      reduce using rule 70 (term11 -> term12 .)
    NEWLINE         reduce using rule 70 (term11 -> term12 .)
    def             reduce using rule 70 (term11 -> term12 .)
    break           reduce using rule 70 (term11 -> term12 .)
    if              reduce using rule 70 (term11 -> term12 .)
    while           reduce using rule 70 (term11 -> term12 .)
    case            reduce using rule 70 (term11 -> term12 .)
    for             reduce using rule 70 (term11 -> term12 .)
    return          reduce using rule 70 (term11 -> term12 .)
    IDENTIFIER      reduce using rule 70 (term11 -> term12 .)
    nil             reduce using rule 70 (term11 -> term12 .)
    self            reduce using rule 70 (term11 -> term12 .)
    GLOBAL          reduce using rule 70 (term11 -> term12 .)
    AT_THE_RATE     reduce using rule 70 (term11 -> term12 .)
    OPEN_BRACKET    reduce using rule 70 (term11 -> term12 .)
    CONSTANT_RESOLUTION reduce using rule 70 (term11 -> term12 .)
    Array           reduce using rule 70 (term11 -> term12 .)
    NUMBER          reduce using rule 70 (term11 -> term12 .)
    FLOAT           reduce using rule 70 (term11 -> term12 .)
    STRING          reduce using rule 70 (term11 -> term12 .)
    true            reduce using rule 70 (term11 -> term12 .)
    false           reduce using rule 70 (term11 -> term12 .)
    $end            reduce using rule 70 (term11 -> term12 .)
    end             reduce using rule 70 (term11 -> term12 .)
    then            reduce using rule 70 (term11 -> term12 .)
    MAP             reduce using rule 70 (term11 -> term12 .)
    COMMA           reduce using rule 70 (term11 -> term12 .)
    do              reduce using rule 70 (term11 -> term12 .)
    CLOSE_BRACKET   reduce using rule 70 (term11 -> term12 .)


state 48

    (72) term12 -> term13 .

    MULTIPLY        reduce using rule 72 (term12 -> term13 .)
    DIVIDE          reduce using rule 72 (term12 -> term13 .)
    MODULO          reduce using rule 72 (term12 -> term13 .)
    PLUS            reduce using rule 72 (term12 -> term13 .)
    MINUS           reduce using rule 72 (term12 -> term13 .)
    LEFT_SHIFT      reduce using rule 72 (term12 -> term13 .)
    RIGHT_SHIFT     reduce using rule 72 (term12 -> term13 .)
    BIT_AND         reduce using rule 72 (term12 -> term13 .)
    BIT_XOR         reduce using rule 72 (term12 -> term13 .)
    DOUBLE_EQUALS   reduce using rule 72 (term12 -> term13 .)
    TRIPLE_EQUALS   reduce using rule 72 (term12 -> term13 .)
    NOT_EQUALS      reduce using rule 72 (term12 -> term13 .)
    EQUAL_TILDE     reduce using rule 72 (term12 -> term13 .)
    BANG_TILDE      reduce using rule 72 (term12 -> term13 .)
    COMPARISON      reduce using rule 72 (term12 -> term13 .)
    LESS            reduce using rule 72 (term12 -> term13 .)
    LESS_EQUALS     reduce using rule 72 (term12 -> term13 .)
    GREATER         reduce using rule 72 (term12 -> term13 .)
    GREATER_EQUALS  reduce using rule 72 (term12 -> term13 .)
    INCL_RANGE      reduce using rule 72 (term12 -> term13 .)
    EXCL_RANGE      reduce using rule 72 (term12 -> term13 .)
    LOGICAL_OR      reduce using rule 72 (term12 -> term13 .)
    BIT_OR          reduce using rule 72 (term12 -> term13 .)
    SEMI_COLON      reduce using rule 72 (term12 -> term13 .)
    NEWLINE         reduce using rule 72 (term12 -> term13 .)
    def             reduce using rule 72 (term12 -> term13 .)
    break           reduce using rule 72 (term12 -> term13 .)
    if              reduce using rule 72 (term12 -> term13 .)
    while           reduce using rule 72 (term12 -> term13 .)
    case            reduce using rule 72 (term12 -> term13 .)
    for             reduce using rule 72 (term12 -> term13 .)
    return          reduce using rule 72 (term12 -> term13 .)
    IDENTIFIER      reduce using rule 72 (term12 -> term13 .)
    nil             reduce using rule 72 (term12 -> term13 .)
    self            reduce using rule 72 (term12 -> term13 .)
    GLOBAL          reduce using rule 72 (term12 -> term13 .)
    AT_THE_RATE     reduce using rule 72 (term12 -> term13 .)
    OPEN_BRACKET    reduce using rule 72 (term12 -> term13 .)
    CONSTANT_RESOLUTION reduce using rule 72 (term12 -> term13 .)
    Array           reduce using rule 72 (term12 -> term13 .)
    NUMBER          reduce using rule 72 (term12 -> term13 .)
    FLOAT           reduce using rule 72 (term12 -> term13 .)
    STRING          reduce using rule 72 (term12 -> term13 .)
    true            reduce using rule 72 (term12 -> term13 .)
    false           reduce using rule 72 (term12 -> term13 .)
    $end            reduce using rule 72 (term12 -> term13 .)
    end             reduce using rule 72 (term12 -> term13 .)
    then            reduce using rule 72 (term12 -> term13 .)
    MAP             reduce using rule 72 (term12 -> term13 .)
    COMMA           reduce using rule 72 (term12 -> term13 .)
    do              reduce using rule 72 (term12 -> term13 .)
    CLOSE_BRACKET   reduce using rule 72 (term12 -> term13 .)


state 49

    (73) term13 -> primary . POWER term13
    (74) term13 -> primary .

    POWER           shift and go to state 130
    MULTIPLY        reduce using rule 74 (term13 -> primary .)
    DIVIDE          reduce using rule 74 (term13 -> primary .)
    MODULO          reduce using rule 74 (term13 -> primary .)
    PLUS            reduce using rule 74 (term13 -> primary .)
    MINUS           reduce using rule 74 (term13 -> primary .)
    LEFT_SHIFT      reduce using rule 74 (term13 -> primary .)
    RIGHT_SHIFT     reduce using rule 74 (term13 -> primary .)
    BIT_AND         reduce using rule 74 (term13 -> primary .)
    BIT_XOR         reduce using rule 74 (term13 -> primary .)
    DOUBLE_EQUALS   reduce using rule 74 (term13 -> primary .)
    TRIPLE_EQUALS   reduce using rule 74 (term13 -> primary .)
    NOT_EQUALS      reduce using rule 74 (term13 -> primary .)
    EQUAL_TILDE     reduce using rule 74 (term13 -> primary .)
    BANG_TILDE      reduce using rule 74 (term13 -> primary .)
    COMPARISON      reduce using rule 74 (term13 -> primary .)
    LESS            reduce using rule 74 (term13 -> primary .)
    LESS_EQUALS     reduce using rule 74 (term13 -> primary .)
    GREATER         reduce using rule 74 (term13 -> primary .)
    GREATER_EQUALS  reduce using rule 74 (term13 -> primary .)
    INCL_RANGE      reduce using rule 74 (term13 -> primary .)
    EXCL_RANGE      reduce using rule 74 (term13 -> primary .)
    LOGICAL_OR      reduce using rule 74 (term13 -> primary .)
    BIT_OR          reduce using rule 74 (term13 -> primary .)
    SEMI_COLON      reduce using rule 74 (term13 -> primary .)
    NEWLINE         reduce using rule 74 (term13 -> primary .)
    def             reduce using rule 74 (term13 -> primary .)
    break           reduce using rule 74 (term13 -> primary .)
    if              reduce using rule 74 (term13 -> primary .)
    while           reduce using rule 74 (term13 -> primary .)
    case            reduce using rule 74 (term13 -> primary .)
    for             reduce using rule 74 (term13 -> primary .)
    return          reduce using rule 74 (term13 -> primary .)
    IDENTIFIER      reduce using rule 74 (term13 -> primary .)
    nil             reduce using rule 74 (term13 -> primary .)
    self            reduce using rule 74 (term13 -> primary .)
    GLOBAL          reduce using rule 74 (term13 -> primary .)
    AT_THE_RATE     reduce using rule 74 (term13 -> primary .)
    OPEN_BRACKET    reduce using rule 74 (term13 -> primary .)
    CONSTANT_RESOLUTION reduce using rule 74 (term13 -> primary .)
    Array           reduce using rule 74 (term13 -> primary .)
    NUMBER          reduce using rule 74 (term13 -> primary .)
    FLOAT           reduce using rule 74 (term13 -> primary .)
    STRING          reduce using rule 74 (term13 -> primary .)
    true            reduce using rule 74 (term13 -> primary .)
    false           reduce using rule 74 (term13 -> primary .)
    $end            reduce using rule 74 (term13 -> primary .)
    end             reduce using rule 74 (term13 -> primary .)
    then            reduce using rule 74 (term13 -> primary .)
    MAP             reduce using rule 74 (term13 -> primary .)
    COMMA           reduce using rule 74 (term13 -> primary .)
    do              reduce using rule 74 (term13 -> primary .)
    CLOSE_BRACKET   reduce using rule 74 (term13 -> primary .)


state 50

    (77) primary -> CONSTANT_RESOLUTION . IDENTIFIER

    IDENTIFIER      shift and go to state 131


state 51

    (78) primary -> arrayd .

    POWER           reduce using rule 78 (primary -> arrayd .)
    MULTIPLY        reduce using rule 78 (primary -> arrayd .)
    DIVIDE          reduce using rule 78 (primary -> arrayd .)
    MODULO          reduce using rule 78 (primary -> arrayd .)
    PLUS            reduce using rule 78 (primary -> arrayd .)
    MINUS           reduce using rule 78 (primary -> arrayd .)
    LEFT_SHIFT      reduce using rule 78 (primary -> arrayd .)
    RIGHT_SHIFT     reduce using rule 78 (primary -> arrayd .)
    BIT_AND         reduce using rule 78 (primary -> arrayd .)
    BIT_XOR         reduce using rule 78 (primary -> arrayd .)
    DOUBLE_EQUALS   reduce using rule 78 (primary -> arrayd .)
    TRIPLE_EQUALS   reduce using rule 78 (primary -> arrayd .)
    NOT_EQUALS      reduce using rule 78 (primary -> arrayd .)
    EQUAL_TILDE     reduce using rule 78 (primary -> arrayd .)
    BANG_TILDE      reduce using rule 78 (primary -> arrayd .)
    COMPARISON      reduce using rule 78 (primary -> arrayd .)
    LESS            reduce using rule 78 (primary -> arrayd .)
    LESS_EQUALS     reduce using rule 78 (primary -> arrayd .)
    GREATER         reduce using rule 78 (primary -> arrayd .)
    GREATER_EQUALS  reduce using rule 78 (primary -> arrayd .)
    INCL_RANGE      reduce using rule 78 (primary -> arrayd .)
    EXCL_RANGE      reduce using rule 78 (primary -> arrayd .)
    LOGICAL_OR      reduce using rule 78 (primary -> arrayd .)
    BIT_OR          reduce using rule 78 (primary -> arrayd .)
    SEMI_COLON      reduce using rule 78 (primary -> arrayd .)
    NEWLINE         reduce using rule 78 (primary -> arrayd .)
    def             reduce using rule 78 (primary -> arrayd .)
    break           reduce using rule 78 (primary -> arrayd .)
    if              reduce using rule 78 (primary -> arrayd .)
    while           reduce using rule 78 (primary -> arrayd .)
    case            reduce using rule 78 (primary -> arrayd .)
    for             reduce using rule 78 (primary -> arrayd .)
    return          reduce using rule 78 (primary -> arrayd .)
    IDENTIFIER      reduce using rule 78 (primary -> arrayd .)
    nil             reduce using rule 78 (primary -> arrayd .)
    self            reduce using rule 78 (primary -> arrayd .)
    GLOBAL          reduce using rule 78 (primary -> arrayd .)
    AT_THE_RATE     reduce using rule 78 (primary -> arrayd .)
    OPEN_BRACKET    reduce using rule 78 (primary -> arrayd .)
    CONSTANT_RESOLUTION reduce using rule 78 (primary -> arrayd .)
    Array           reduce using rule 78 (primary -> arrayd .)
    NUMBER          reduce using rule 78 (primary -> arrayd .)
    FLOAT           reduce using rule 78 (primary -> arrayd .)
    STRING          reduce using rule 78 (primary -> arrayd .)
    true            reduce using rule 78 (primary -> arrayd .)
    false           reduce using rule 78 (primary -> arrayd .)
    $end            reduce using rule 78 (primary -> arrayd .)
    end             reduce using rule 78 (primary -> arrayd .)
    then            reduce using rule 78 (primary -> arrayd .)
    MAP             reduce using rule 78 (primary -> arrayd .)
    COMMA           reduce using rule 78 (primary -> arrayd .)
    do              reduce using rule 78 (primary -> arrayd .)
    CLOSE_BRACKET   reduce using rule 78 (primary -> arrayd .)
    CLOSE_SQUARE    reduce using rule 78 (primary -> arrayd .)


state 52

    (80) primary -> literal .

    POWER           reduce using rule 80 (primary -> literal .)
    MULTIPLY        reduce using rule 80 (primary -> literal .)
    DIVIDE          reduce using rule 80 (primary -> literal .)
    MODULO          reduce using rule 80 (primary -> literal .)
    PLUS            reduce using rule 80 (primary -> literal .)
    MINUS           reduce using rule 80 (primary -> literal .)
    LEFT_SHIFT      reduce using rule 80 (primary -> literal .)
    RIGHT_SHIFT     reduce using rule 80 (primary -> literal .)
    BIT_AND         reduce using rule 80 (primary -> literal .)
    BIT_XOR         reduce using rule 80 (primary -> literal .)
    DOUBLE_EQUALS   reduce using rule 80 (primary -> literal .)
    TRIPLE_EQUALS   reduce using rule 80 (primary -> literal .)
    NOT_EQUALS      reduce using rule 80 (primary -> literal .)
    EQUAL_TILDE     reduce using rule 80 (primary -> literal .)
    BANG_TILDE      reduce using rule 80 (primary -> literal .)
    COMPARISON      reduce using rule 80 (primary -> literal .)
    LESS            reduce using rule 80 (primary -> literal .)
    LESS_EQUALS     reduce using rule 80 (primary -> literal .)
    GREATER         reduce using rule 80 (primary -> literal .)
    GREATER_EQUALS  reduce using rule 80 (primary -> literal .)
    INCL_RANGE      reduce using rule 80 (primary -> literal .)
    EXCL_RANGE      reduce using rule 80 (primary -> literal .)
    LOGICAL_OR      reduce using rule 80 (primary -> literal .)
    BIT_OR          reduce using rule 80 (primary -> literal .)
    SEMI_COLON      reduce using rule 80 (primary -> literal .)
    NEWLINE         reduce using rule 80 (primary -> literal .)
    def             reduce using rule 80 (primary -> literal .)
    break           reduce using rule 80 (primary -> literal .)
    if              reduce using rule 80 (primary -> literal .)
    while           reduce using rule 80 (primary -> literal .)
    case            reduce using rule 80 (primary -> literal .)
    for             reduce using rule 80 (primary -> literal .)
    return          reduce using rule 80 (primary -> literal .)
    IDENTIFIER      reduce using rule 80 (primary -> literal .)
    nil             reduce using rule 80 (primary -> literal .)
    self            reduce using rule 80 (primary -> literal .)
    GLOBAL          reduce using rule 80 (primary -> literal .)
    AT_THE_RATE     reduce using rule 80 (primary -> literal .)
    OPEN_BRACKET    reduce using rule 80 (primary -> literal .)
    CONSTANT_RESOLUTION reduce using rule 80 (primary -> literal .)
    Array           reduce using rule 80 (primary -> literal .)
    NUMBER          reduce using rule 80 (primary -> literal .)
    FLOAT           reduce using rule 80 (primary -> literal .)
    STRING          reduce using rule 80 (primary -> literal .)
    true            reduce using rule 80 (primary -> literal .)
    false           reduce using rule 80 (primary -> literal .)
    $end            reduce using rule 80 (primary -> literal .)
    end             reduce using rule 80 (primary -> literal .)
    then            reduce using rule 80 (primary -> literal .)
    MAP             reduce using rule 80 (primary -> literal .)
    COMMA           reduce using rule 80 (primary -> literal .)
    do              reduce using rule 80 (primary -> literal .)
    CLOSE_BRACKET   reduce using rule 80 (primary -> literal .)
    CLOSE_SQUARE    reduce using rule 80 (primary -> literal .)


state 53

    (82) arrayd -> Array . OPEN_BRACKET array_size CLOSE_BRACKET

    OPEN_BRACKET    shift and go to state 132


state 54

    (92) literal -> NUMBER .

    POWER           reduce using rule 92 (literal -> NUMBER .)
    MULTIPLY        reduce using rule 92 (literal -> NUMBER .)
    DIVIDE          reduce using rule 92 (literal -> NUMBER .)
    MODULO          reduce using rule 92 (literal -> NUMBER .)
    PLUS            reduce using rule 92 (literal -> NUMBER .)
    MINUS           reduce using rule 92 (literal -> NUMBER .)
    LEFT_SHIFT      reduce using rule 92 (literal -> NUMBER .)
    RIGHT_SHIFT     reduce using rule 92 (literal -> NUMBER .)
    BIT_AND         reduce using rule 92 (literal -> NUMBER .)
    BIT_XOR         reduce using rule 92 (literal -> NUMBER .)
    DOUBLE_EQUALS   reduce using rule 92 (literal -> NUMBER .)
    TRIPLE_EQUALS   reduce using rule 92 (literal -> NUMBER .)
    NOT_EQUALS      reduce using rule 92 (literal -> NUMBER .)
    EQUAL_TILDE     reduce using rule 92 (literal -> NUMBER .)
    BANG_TILDE      reduce using rule 92 (literal -> NUMBER .)
    COMPARISON      reduce using rule 92 (literal -> NUMBER .)
    LESS            reduce using rule 92 (literal -> NUMBER .)
    LESS_EQUALS     reduce using rule 92 (literal -> NUMBER .)
    GREATER         reduce using rule 92 (literal -> NUMBER .)
    GREATER_EQUALS  reduce using rule 92 (literal -> NUMBER .)
    INCL_RANGE      reduce using rule 92 (literal -> NUMBER .)
    EXCL_RANGE      reduce using rule 92 (literal -> NUMBER .)
    LOGICAL_OR      reduce using rule 92 (literal -> NUMBER .)
    BIT_OR          reduce using rule 92 (literal -> NUMBER .)
    SEMI_COLON      reduce using rule 92 (literal -> NUMBER .)
    NEWLINE         reduce using rule 92 (literal -> NUMBER .)
    def             reduce using rule 92 (literal -> NUMBER .)
    break           reduce using rule 92 (literal -> NUMBER .)
    if              reduce using rule 92 (literal -> NUMBER .)
    while           reduce using rule 92 (literal -> NUMBER .)
    case            reduce using rule 92 (literal -> NUMBER .)
    for             reduce using rule 92 (literal -> NUMBER .)
    return          reduce using rule 92 (literal -> NUMBER .)
    IDENTIFIER      reduce using rule 92 (literal -> NUMBER .)
    nil             reduce using rule 92 (literal -> NUMBER .)
    self            reduce using rule 92 (literal -> NUMBER .)
    GLOBAL          reduce using rule 92 (literal -> NUMBER .)
    AT_THE_RATE     reduce using rule 92 (literal -> NUMBER .)
    OPEN_BRACKET    reduce using rule 92 (literal -> NUMBER .)
    CONSTANT_RESOLUTION reduce using rule 92 (literal -> NUMBER .)
    Array           reduce using rule 92 (literal -> NUMBER .)
    NUMBER          reduce using rule 92 (literal -> NUMBER .)
    FLOAT           reduce using rule 92 (literal -> NUMBER .)
    STRING          reduce using rule 92 (literal -> NUMBER .)
    true            reduce using rule 92 (literal -> NUMBER .)
    false           reduce using rule 92 (literal -> NUMBER .)
    $end            reduce using rule 92 (literal -> NUMBER .)
    end             reduce using rule 92 (literal -> NUMBER .)
    then            reduce using rule 92 (literal -> NUMBER .)
    MAP             reduce using rule 92 (literal -> NUMBER .)
    COMMA           reduce using rule 92 (literal -> NUMBER .)
    do              reduce using rule 92 (literal -> NUMBER .)
    CLOSE_BRACKET   reduce using rule 92 (literal -> NUMBER .)
    CLOSE_SQUARE    reduce using rule 92 (literal -> NUMBER .)


state 55

    (93) literal -> FLOAT .

    POWER           reduce using rule 93 (literal -> FLOAT .)
    MULTIPLY        reduce using rule 93 (literal -> FLOAT .)
    DIVIDE          reduce using rule 93 (literal -> FLOAT .)
    MODULO          reduce using rule 93 (literal -> FLOAT .)
    PLUS            reduce using rule 93 (literal -> FLOAT .)
    MINUS           reduce using rule 93 (literal -> FLOAT .)
    LEFT_SHIFT      reduce using rule 93 (literal -> FLOAT .)
    RIGHT_SHIFT     reduce using rule 93 (literal -> FLOAT .)
    BIT_AND         reduce using rule 93 (literal -> FLOAT .)
    BIT_XOR         reduce using rule 93 (literal -> FLOAT .)
    DOUBLE_EQUALS   reduce using rule 93 (literal -> FLOAT .)
    TRIPLE_EQUALS   reduce using rule 93 (literal -> FLOAT .)
    NOT_EQUALS      reduce using rule 93 (literal -> FLOAT .)
    EQUAL_TILDE     reduce using rule 93 (literal -> FLOAT .)
    BANG_TILDE      reduce using rule 93 (literal -> FLOAT .)
    COMPARISON      reduce using rule 93 (literal -> FLOAT .)
    LESS            reduce using rule 93 (literal -> FLOAT .)
    LESS_EQUALS     reduce using rule 93 (literal -> FLOAT .)
    GREATER         reduce using rule 93 (literal -> FLOAT .)
    GREATER_EQUALS  reduce using rule 93 (literal -> FLOAT .)
    INCL_RANGE      reduce using rule 93 (literal -> FLOAT .)
    EXCL_RANGE      reduce using rule 93 (literal -> FLOAT .)
    LOGICAL_OR      reduce using rule 93 (literal -> FLOAT .)
    BIT_OR          reduce using rule 93 (literal -> FLOAT .)
    SEMI_COLON      reduce using rule 93 (literal -> FLOAT .)
    NEWLINE         reduce using rule 93 (literal -> FLOAT .)
    def             reduce using rule 93 (literal -> FLOAT .)
    break           reduce using rule 93 (literal -> FLOAT .)
    if              reduce using rule 93 (literal -> FLOAT .)
    while           reduce using rule 93 (literal -> FLOAT .)
    case            reduce using rule 93 (literal -> FLOAT .)
    for             reduce using rule 93 (literal -> FLOAT .)
    return          reduce using rule 93 (literal -> FLOAT .)
    IDENTIFIER      reduce using rule 93 (literal -> FLOAT .)
    nil             reduce using rule 93 (literal -> FLOAT .)
    self            reduce using rule 93 (literal -> FLOAT .)
    GLOBAL          reduce using rule 93 (literal -> FLOAT .)
    AT_THE_RATE     reduce using rule 93 (literal -> FLOAT .)
    OPEN_BRACKET    reduce using rule 93 (literal -> FLOAT .)
    CONSTANT_RESOLUTION reduce using rule 93 (literal -> FLOAT .)
    Array           reduce using rule 93 (literal -> FLOAT .)
    NUMBER          reduce using rule 93 (literal -> FLOAT .)
    FLOAT           reduce using rule 93 (literal -> FLOAT .)
    STRING          reduce using rule 93 (literal -> FLOAT .)
    true            reduce using rule 93 (literal -> FLOAT .)
    false           reduce using rule 93 (literal -> FLOAT .)
    $end            reduce using rule 93 (literal -> FLOAT .)
    end             reduce using rule 93 (literal -> FLOAT .)
    then            reduce using rule 93 (literal -> FLOAT .)
    MAP             reduce using rule 93 (literal -> FLOAT .)
    COMMA           reduce using rule 93 (literal -> FLOAT .)
    do              reduce using rule 93 (literal -> FLOAT .)
    CLOSE_BRACKET   reduce using rule 93 (literal -> FLOAT .)
    CLOSE_SQUARE    reduce using rule 93 (literal -> FLOAT .)


state 56

    (94) literal -> STRING .

    POWER           reduce using rule 94 (literal -> STRING .)
    MULTIPLY        reduce using rule 94 (literal -> STRING .)
    DIVIDE          reduce using rule 94 (literal -> STRING .)
    MODULO          reduce using rule 94 (literal -> STRING .)
    PLUS            reduce using rule 94 (literal -> STRING .)
    MINUS           reduce using rule 94 (literal -> STRING .)
    LEFT_SHIFT      reduce using rule 94 (literal -> STRING .)
    RIGHT_SHIFT     reduce using rule 94 (literal -> STRING .)
    BIT_AND         reduce using rule 94 (literal -> STRING .)
    BIT_XOR         reduce using rule 94 (literal -> STRING .)
    DOUBLE_EQUALS   reduce using rule 94 (literal -> STRING .)
    TRIPLE_EQUALS   reduce using rule 94 (literal -> STRING .)
    NOT_EQUALS      reduce using rule 94 (literal -> STRING .)
    EQUAL_TILDE     reduce using rule 94 (literal -> STRING .)
    BANG_TILDE      reduce using rule 94 (literal -> STRING .)
    COMPARISON      reduce using rule 94 (literal -> STRING .)
    LESS            reduce using rule 94 (literal -> STRING .)
    LESS_EQUALS     reduce using rule 94 (literal -> STRING .)
    GREATER         reduce using rule 94 (literal -> STRING .)
    GREATER_EQUALS  reduce using rule 94 (literal -> STRING .)
    INCL_RANGE      reduce using rule 94 (literal -> STRING .)
    EXCL_RANGE      reduce using rule 94 (literal -> STRING .)
    LOGICAL_OR      reduce using rule 94 (literal -> STRING .)
    BIT_OR          reduce using rule 94 (literal -> STRING .)
    SEMI_COLON      reduce using rule 94 (literal -> STRING .)
    NEWLINE         reduce using rule 94 (literal -> STRING .)
    def             reduce using rule 94 (literal -> STRING .)
    break           reduce using rule 94 (literal -> STRING .)
    if              reduce using rule 94 (literal -> STRING .)
    while           reduce using rule 94 (literal -> STRING .)
    case            reduce using rule 94 (literal -> STRING .)
    for             reduce using rule 94 (literal -> STRING .)
    return          reduce using rule 94 (literal -> STRING .)
    IDENTIFIER      reduce using rule 94 (literal -> STRING .)
    nil             reduce using rule 94 (literal -> STRING .)
    self            reduce using rule 94 (literal -> STRING .)
    GLOBAL          reduce using rule 94 (literal -> STRING .)
    AT_THE_RATE     reduce using rule 94 (literal -> STRING .)
    OPEN_BRACKET    reduce using rule 94 (literal -> STRING .)
    CONSTANT_RESOLUTION reduce using rule 94 (literal -> STRING .)
    Array           reduce using rule 94 (literal -> STRING .)
    NUMBER          reduce using rule 94 (literal -> STRING .)
    FLOAT           reduce using rule 94 (literal -> STRING .)
    STRING          reduce using rule 94 (literal -> STRING .)
    true            reduce using rule 94 (literal -> STRING .)
    false           reduce using rule 94 (literal -> STRING .)
    $end            reduce using rule 94 (literal -> STRING .)
    end             reduce using rule 94 (literal -> STRING .)
    then            reduce using rule 94 (literal -> STRING .)
    MAP             reduce using rule 94 (literal -> STRING .)
    COMMA           reduce using rule 94 (literal -> STRING .)
    do              reduce using rule 94 (literal -> STRING .)
    CLOSE_BRACKET   reduce using rule 94 (literal -> STRING .)
    CLOSE_SQUARE    reduce using rule 94 (literal -> STRING .)


state 57

    (95) literal -> true .

    POWER           reduce using rule 95 (literal -> true .)
    MULTIPLY        reduce using rule 95 (literal -> true .)
    DIVIDE          reduce using rule 95 (literal -> true .)
    MODULO          reduce using rule 95 (literal -> true .)
    PLUS            reduce using rule 95 (literal -> true .)
    MINUS           reduce using rule 95 (literal -> true .)
    LEFT_SHIFT      reduce using rule 95 (literal -> true .)
    RIGHT_SHIFT     reduce using rule 95 (literal -> true .)
    BIT_AND         reduce using rule 95 (literal -> true .)
    BIT_XOR         reduce using rule 95 (literal -> true .)
    DOUBLE_EQUALS   reduce using rule 95 (literal -> true .)
    TRIPLE_EQUALS   reduce using rule 95 (literal -> true .)
    NOT_EQUALS      reduce using rule 95 (literal -> true .)
    EQUAL_TILDE     reduce using rule 95 (literal -> true .)
    BANG_TILDE      reduce using rule 95 (literal -> true .)
    COMPARISON      reduce using rule 95 (literal -> true .)
    LESS            reduce using rule 95 (literal -> true .)
    LESS_EQUALS     reduce using rule 95 (literal -> true .)
    GREATER         reduce using rule 95 (literal -> true .)
    GREATER_EQUALS  reduce using rule 95 (literal -> true .)
    INCL_RANGE      reduce using rule 95 (literal -> true .)
    EXCL_RANGE      reduce using rule 95 (literal -> true .)
    LOGICAL_OR      reduce using rule 95 (literal -> true .)
    BIT_OR          reduce using rule 95 (literal -> true .)
    SEMI_COLON      reduce using rule 95 (literal -> true .)
    NEWLINE         reduce using rule 95 (literal -> true .)
    def             reduce using rule 95 (literal -> true .)
    break           reduce using rule 95 (literal -> true .)
    if              reduce using rule 95 (literal -> true .)
    while           reduce using rule 95 (literal -> true .)
    case            reduce using rule 95 (literal -> true .)
    for             reduce using rule 95 (literal -> true .)
    return          reduce using rule 95 (literal -> true .)
    IDENTIFIER      reduce using rule 95 (literal -> true .)
    nil             reduce using rule 95 (literal -> true .)
    self            reduce using rule 95 (literal -> true .)
    GLOBAL          reduce using rule 95 (literal -> true .)
    AT_THE_RATE     reduce using rule 95 (literal -> true .)
    OPEN_BRACKET    reduce using rule 95 (literal -> true .)
    CONSTANT_RESOLUTION reduce using rule 95 (literal -> true .)
    Array           reduce using rule 95 (literal -> true .)
    NUMBER          reduce using rule 95 (literal -> true .)
    FLOAT           reduce using rule 95 (literal -> true .)
    STRING          reduce using rule 95 (literal -> true .)
    true            reduce using rule 95 (literal -> true .)
    false           reduce using rule 95 (literal -> true .)
    $end            reduce using rule 95 (literal -> true .)
    end             reduce using rule 95 (literal -> true .)
    then            reduce using rule 95 (literal -> true .)
    MAP             reduce using rule 95 (literal -> true .)
    COMMA           reduce using rule 95 (literal -> true .)
    do              reduce using rule 95 (literal -> true .)
    CLOSE_BRACKET   reduce using rule 95 (literal -> true .)
    CLOSE_SQUARE    reduce using rule 95 (literal -> true .)


state 58

    (96) literal -> false .

    POWER           reduce using rule 96 (literal -> false .)
    MULTIPLY        reduce using rule 96 (literal -> false .)
    DIVIDE          reduce using rule 96 (literal -> false .)
    MODULO          reduce using rule 96 (literal -> false .)
    PLUS            reduce using rule 96 (literal -> false .)
    MINUS           reduce using rule 96 (literal -> false .)
    LEFT_SHIFT      reduce using rule 96 (literal -> false .)
    RIGHT_SHIFT     reduce using rule 96 (literal -> false .)
    BIT_AND         reduce using rule 96 (literal -> false .)
    BIT_XOR         reduce using rule 96 (literal -> false .)
    DOUBLE_EQUALS   reduce using rule 96 (literal -> false .)
    TRIPLE_EQUALS   reduce using rule 96 (literal -> false .)
    NOT_EQUALS      reduce using rule 96 (literal -> false .)
    EQUAL_TILDE     reduce using rule 96 (literal -> false .)
    BANG_TILDE      reduce using rule 96 (literal -> false .)
    COMPARISON      reduce using rule 96 (literal -> false .)
    LESS            reduce using rule 96 (literal -> false .)
    LESS_EQUALS     reduce using rule 96 (literal -> false .)
    GREATER         reduce using rule 96 (literal -> false .)
    GREATER_EQUALS  reduce using rule 96 (literal -> false .)
    INCL_RANGE      reduce using rule 96 (literal -> false .)
    EXCL_RANGE      reduce using rule 96 (literal -> false .)
    LOGICAL_OR      reduce using rule 96 (literal -> false .)
    BIT_OR          reduce using rule 96 (literal -> false .)
    SEMI_COLON      reduce using rule 96 (literal -> false .)
    NEWLINE         reduce using rule 96 (literal -> false .)
    def             reduce using rule 96 (literal -> false .)
    break           reduce using rule 96 (literal -> false .)
    if              reduce using rule 96 (literal -> false .)
    while           reduce using rule 96 (literal -> false .)
    case            reduce using rule 96 (literal -> false .)
    for             reduce using rule 96 (literal -> false .)
    return          reduce using rule 96 (literal -> false .)
    IDENTIFIER      reduce using rule 96 (literal -> false .)
    nil             reduce using rule 96 (literal -> false .)
    self            reduce using rule 96 (literal -> false .)
    GLOBAL          reduce using rule 96 (literal -> false .)
    AT_THE_RATE     reduce using rule 96 (literal -> false .)
    OPEN_BRACKET    reduce using rule 96 (literal -> false .)
    CONSTANT_RESOLUTION reduce using rule 96 (literal -> false .)
    Array           reduce using rule 96 (literal -> false .)
    NUMBER          reduce using rule 96 (literal -> false .)
    FLOAT           reduce using rule 96 (literal -> false .)
    STRING          reduce using rule 96 (literal -> false .)
    true            reduce using rule 96 (literal -> false .)
    false           reduce using rule 96 (literal -> false .)
    $end            reduce using rule 96 (literal -> false .)
    end             reduce using rule 96 (literal -> false .)
    then            reduce using rule 96 (literal -> false .)
    MAP             reduce using rule 96 (literal -> false .)
    COMMA           reduce using rule 96 (literal -> false .)
    do              reduce using rule 96 (literal -> false .)
    CLOSE_BRACKET   reduce using rule 96 (literal -> false .)
    CLOSE_SQUARE    reduce using rule 96 (literal -> false .)


state 59

    (2) multcompstmt -> newline stmt1 . multcompstmt
    (2) multcompstmt -> . newline stmt1 multcompstmt
    (3) multcompstmt -> . stmt1 multcompstmt
    (4) multcompstmt -> . newline
    (5) multcompstmt -> . empty
    (176) newline -> . SEMI_COLON
    (177) newline -> . NEWLINE
    (6) stmt1 -> . stmt
    (178) empty -> .
    (7) stmt -> . def IDENTIFIER argdecl compstmt end
    (8) stmt -> . break
    (9) stmt -> . expr
    (12) expr -> . if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
    (13) expr -> . if expr1 pthen M_1 multstmt end M_1
    (14) expr -> . while M_1 expr1 pdo M_1 multstmt end M_1
    (15) expr -> . case multstmt M_1 multcase end M_1
    (16) expr -> . for mlhs in expr1 pdo compstmt end
    (17) expr -> . expr1
    (19) expr1 -> . return callargs
    (20) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (21) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (22) expr1 -> . return
    (23) expr1 -> . expr2
    (24) expr2 -> . call
    (25) expr2 -> . arg
    (26) call -> . function
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (27) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (28) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    SEMI_COLON      shift and go to state 6
    NEWLINE         shift and go to state 7
    $end            reduce using rule 178 (empty -> .)
    end             reduce using rule 178 (empty -> .)
    def             shift and go to state 9
    break           shift and go to state 11
    if              shift and go to state 13
    while           shift and go to state 15
    case            shift and go to state 16
    for             shift and go to state 17
    return          shift and go to state 19
    IDENTIFIER      shift and go to state 10
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    newline                        shift and go to state 3
    stmt1                          shift and go to state 4
    multcompstmt                   shift and go to state 133
    empty                          shift and go to state 5
    stmt                           shift and go to state 8
    expr                           shift and go to state 12
    expr1                          shift and go to state 14
    mlhs                           shift and go to state 18
    expr2                          shift and go to state 21
    call                           shift and go to state 22
    arg                            shift and go to state 23
    function                       shift and go to state 24
    term0                          shift and go to state 25
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 60

    (3) multcompstmt -> stmt1 multcompstmt .

    $end            reduce using rule 3 (multcompstmt -> stmt1 multcompstmt .)
    end             reduce using rule 3 (multcompstmt -> stmt1 multcompstmt .)


state 61

    (7) stmt -> def IDENTIFIER . argdecl compstmt end
    (131) argdecl -> . OPEN_BRACKET arglist CLOSE_BRACKET
    (132) argdecl -> . arglist newline
    (133) arglist -> . IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER
    (134) arglist -> . IDENTIFIER multarglist COMMA MULTIPLY COMMA BIT_AND IDENTIFIER
    (135) arglist -> . IDENTIFIER multarglist COMMA BIT_AND IDENTIFIER
    (136) arglist -> . IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER
    (137) arglist -> . IDENTIFIER multarglist COMMA MULTIPLY
    (138) arglist -> . IDENTIFIER multarglist
    (139) arglist -> . MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER
    (140) arglist -> . MULTIPLY IDENTIFIER
    (141) arglist -> . BIT_AND IDENTIFIER
    (142) arglist -> . empty
    (178) empty -> .

    OPEN_BRACKET    shift and go to state 136
    IDENTIFIER      shift and go to state 134
    MULTIPLY        shift and go to state 138
    BIT_AND         shift and go to state 139
    SEMI_COLON      reduce using rule 178 (empty -> .)
    NEWLINE         reduce using rule 178 (empty -> .)

    argdecl                        shift and go to state 135
    arglist                        shift and go to state 137
    empty                          shift and go to state 140

state 62

    (27) function -> IDENTIFIER OPEN_BRACKET . callargs CLOSE_BRACKET
    (28) function -> IDENTIFIER OPEN_BRACKET . CLOSE_BRACKET
    (114) callargs -> . args
    (115) callargs -> . args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg
    (116) callargs -> . args COMMA MULTIPLY arg COMMA BIT_AND arg
    (117) callargs -> . args COMMA assocs COMMA BIT_AND arg
    (118) callargs -> . args COMMA assocs COMMA MULTIPLY arg
    (119) callargs -> . args COMMA assocs
    (120) callargs -> . args COMMA MULTIPLY arg
    (121) callargs -> . args COMMA BIT_AND arg
    (122) callargs -> . assocs COMMA MULTIPLY arg COMMA BIT_AND arg
    (123) callargs -> . assocs COMMA MULTIPLY arg
    (124) callargs -> . assocs COMMA BIT_AND arg
    (125) callargs -> . assocs
    (126) callargs -> . MULTIPLY arg COMMA BIT_AND arg
    (127) callargs -> . BIT_AND arg
    (128) args -> . arg multargs
    (147) assocs -> . assoc multassocs
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (150) assoc -> . arg MAP arg
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    CLOSE_BRACKET   shift and go to state 142
    MULTIPLY        shift and go to state 93
    BIT_AND         shift and go to state 95
    IDENTIFIER      shift and go to state 70
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    callargs                       shift and go to state 141
    args                           shift and go to state 91
    assocs                         shift and go to state 92
    arg                            shift and go to state 94
    assoc                          shift and go to state 96
    term0                          shift and go to state 25
    mlhs                           shift and go to state 18
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 63

    (12) expr -> if expr1 . pthen M_1 multstmt else newline M_1 multstmt end M_1
    (13) expr -> if expr1 . pthen M_1 multstmt end M_1
    (154) pthen -> . newline
    (155) pthen -> . then
    (156) pthen -> . newline then
    (176) newline -> . SEMI_COLON
    (177) newline -> . NEWLINE

    then            shift and go to state 145
    SEMI_COLON      shift and go to state 6
    NEWLINE         shift and go to state 7

    pthen                          shift and go to state 143
    newline                        shift and go to state 144

state 64

    (14) expr -> while M_1 . expr1 pdo M_1 multstmt end M_1
    (19) expr1 -> . return callargs
    (20) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (21) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (22) expr1 -> . return
    (23) expr1 -> . expr2
    (24) expr2 -> . call
    (25) expr2 -> . arg
    (26) call -> . function
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (27) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (28) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    return          shift and go to state 19
    IDENTIFIER      shift and go to state 10
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    expr1                          shift and go to state 146
    expr2                          shift and go to state 21
    call                           shift and go to state 22
    arg                            shift and go to state 23
    function                       shift and go to state 24
    term0                          shift and go to state 25
    mlhs                           shift and go to state 18
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 65

    (18) M_1 -> empty .

    return          reduce using rule 18 (M_1 -> empty .)
    IDENTIFIER      reduce using rule 18 (M_1 -> empty .)
    nil             reduce using rule 18 (M_1 -> empty .)
    self            reduce using rule 18 (M_1 -> empty .)
    GLOBAL          reduce using rule 18 (M_1 -> empty .)
    AT_THE_RATE     reduce using rule 18 (M_1 -> empty .)
    MINUS           reduce using rule 18 (M_1 -> empty .)
    PLUS            reduce using rule 18 (M_1 -> empty .)
    OPEN_BRACKET    reduce using rule 18 (M_1 -> empty .)
    CONSTANT_RESOLUTION reduce using rule 18 (M_1 -> empty .)
    Array           reduce using rule 18 (M_1 -> empty .)
    NUMBER          reduce using rule 18 (M_1 -> empty .)
    FLOAT           reduce using rule 18 (M_1 -> empty .)
    STRING          reduce using rule 18 (M_1 -> empty .)
    true            reduce using rule 18 (M_1 -> empty .)
    false           reduce using rule 18 (M_1 -> empty .)
    when            reduce using rule 18 (M_1 -> empty .)
    def             reduce using rule 18 (M_1 -> empty .)
    break           reduce using rule 18 (M_1 -> empty .)
    if              reduce using rule 18 (M_1 -> empty .)
    while           reduce using rule 18 (M_1 -> empty .)
    case            reduce using rule 18 (M_1 -> empty .)
    for             reduce using rule 18 (M_1 -> empty .)
    else            reduce using rule 18 (M_1 -> empty .)
    end             reduce using rule 18 (M_1 -> empty .)
    SEMI_COLON      reduce using rule 18 (M_1 -> empty .)
    NEWLINE         reduce using rule 18 (M_1 -> empty .)
    $end            reduce using rule 18 (M_1 -> empty .)


state 66

    (15) expr -> case multstmt . M_1 multcase end M_1
    (18) M_1 -> . empty
    (178) empty -> .

    when            reduce using rule 178 (empty -> .)

    M_1                            shift and go to state 147
    empty                          shift and go to state 65

state 67

    (10) multstmt -> stmt . newline multstmt
    (176) newline -> . SEMI_COLON
    (177) newline -> . NEWLINE

    SEMI_COLON      shift and go to state 6
    NEWLINE         shift and go to state 7

    newline                        shift and go to state 148

state 68

    (11) multstmt -> empty .

    when            reduce using rule 11 (multstmt -> empty .)
    else            reduce using rule 11 (multstmt -> empty .)
    end             reduce using rule 11 (multstmt -> empty .)


state 69

    (16) expr -> for mlhs . in expr1 pdo compstmt end

    in              shift and go to state 149


state 70

    (101) mlhsitem -> IDENTIFIER .
    (175) varname -> IDENTIFIER .

    in              reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    EQUALS          reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    MODULO_EQUALS   reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    DIVIDE_EQUALS   reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    MINUS_EQUALS    reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    PLUS_EQUALS     reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    OR_EQUALS       reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    AND_EQUALS      reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    XOR_EQUALS      reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    RIGHT_SHIFT_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    LEFT_SHIFT_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    MULTIPLY_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    LOGICAL_AND_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    LOGICAL_OR_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    POWER_EQUALS    reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    OPEN_SQUARE     reduce using rule 175 (varname -> IDENTIFIER .)
    CONSTANT_RESOLUTION reduce using rule 175 (varname -> IDENTIFIER .)
    POWER           reduce using rule 175 (varname -> IDENTIFIER .)
    MULTIPLY        reduce using rule 175 (varname -> IDENTIFIER .)
    DIVIDE          reduce using rule 175 (varname -> IDENTIFIER .)
    MODULO          reduce using rule 175 (varname -> IDENTIFIER .)
    PLUS            reduce using rule 175 (varname -> IDENTIFIER .)
    MINUS           reduce using rule 175 (varname -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 175 (varname -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 175 (varname -> IDENTIFIER .)
    BIT_AND         reduce using rule 175 (varname -> IDENTIFIER .)
    BIT_XOR         reduce using rule 175 (varname -> IDENTIFIER .)
    DOUBLE_EQUALS   reduce using rule 175 (varname -> IDENTIFIER .)
    TRIPLE_EQUALS   reduce using rule 175 (varname -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 175 (varname -> IDENTIFIER .)
    EQUAL_TILDE     reduce using rule 175 (varname -> IDENTIFIER .)
    BANG_TILDE      reduce using rule 175 (varname -> IDENTIFIER .)
    COMPARISON      reduce using rule 175 (varname -> IDENTIFIER .)
    LESS            reduce using rule 175 (varname -> IDENTIFIER .)
    LESS_EQUALS     reduce using rule 175 (varname -> IDENTIFIER .)
    GREATER         reduce using rule 175 (varname -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 175 (varname -> IDENTIFIER .)
    INCL_RANGE      reduce using rule 175 (varname -> IDENTIFIER .)
    EXCL_RANGE      reduce using rule 175 (varname -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 175 (varname -> IDENTIFIER .)
    BIT_OR          reduce using rule 175 (varname -> IDENTIFIER .)
    MAP             reduce using rule 175 (varname -> IDENTIFIER .)
    COMMA           reduce using rule 175 (varname -> IDENTIFIER .)
    SEMI_COLON      reduce using rule 175 (varname -> IDENTIFIER .)
    NEWLINE         reduce using rule 175 (varname -> IDENTIFIER .)
    def             reduce using rule 175 (varname -> IDENTIFIER .)
    break           reduce using rule 175 (varname -> IDENTIFIER .)
    if              reduce using rule 175 (varname -> IDENTIFIER .)
    while           reduce using rule 175 (varname -> IDENTIFIER .)
    case            reduce using rule 175 (varname -> IDENTIFIER .)
    for             reduce using rule 175 (varname -> IDENTIFIER .)
    return          reduce using rule 175 (varname -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 175 (varname -> IDENTIFIER .)
    nil             reduce using rule 175 (varname -> IDENTIFIER .)
    self            reduce using rule 175 (varname -> IDENTIFIER .)
    GLOBAL          reduce using rule 175 (varname -> IDENTIFIER .)
    AT_THE_RATE     reduce using rule 175 (varname -> IDENTIFIER .)
    OPEN_BRACKET    reduce using rule 175 (varname -> IDENTIFIER .)
    Array           reduce using rule 175 (varname -> IDENTIFIER .)
    NUMBER          reduce using rule 175 (varname -> IDENTIFIER .)
    FLOAT           reduce using rule 175 (varname -> IDENTIFIER .)
    STRING          reduce using rule 175 (varname -> IDENTIFIER .)
    true            reduce using rule 175 (varname -> IDENTIFIER .)
    false           reduce using rule 175 (varname -> IDENTIFIER .)
    $end            reduce using rule 175 (varname -> IDENTIFIER .)
    end             reduce using rule 175 (varname -> IDENTIFIER .)
    then            reduce using rule 175 (varname -> IDENTIFIER .)
    do              reduce using rule 175 (varname -> IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 175 (varname -> IDENTIFIER .)


state 71

    (102) mlhsitem -> arraya .

    in              reduce using rule 102 (mlhsitem -> arraya .)


state 72

    (85) arraya -> variable . OPEN_SQUARE array_args CLOSE_SQUARE

    OPEN_SQUARE     shift and go to state 102


state 73

    (151) variable -> varname .

    OPEN_SQUARE     reduce using rule 151 (variable -> varname .)


state 74

    (31) term0 -> mlhs EQUALS . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> mlhs EQUALS . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (35) term1 -> mlhs EQUALS . mrhs
    (111) mrhs -> . term2
    (112) mrhs -> . args COMMA MULTIPLY arg
    (113) mrhs -> . MULTIPLY arg
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (128) args -> . arg multargs
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    IDENTIFIER      shift and go to state 150
    MULTIPLY        shift and go to state 154
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    mlhs                           shift and go to state 18
    mrhs                           shift and go to state 151
    term2                          shift and go to state 152
    args                           shift and go to state 153
    arg                            shift and go to state 155
    term3                          shift and go to state 30
    term4                          shift and go to state 32
    term0                          shift and go to state 25
    term5                          shift and go to state 36
    term1                          shift and go to state 26
    term6                          shift and go to state 39
    mlhsitem                       shift and go to state 27
    term7                          shift and go to state 40
    arraya                         shift and go to state 29
    term8                          shift and go to state 41
    variable                       shift and go to state 31
    term9                          shift and go to state 42
    varname                        shift and go to state 33
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 75

    (33) term0 -> mlhs opasgn . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (36) term1 -> mlhs opasgn . mrhs
    (111) mrhs -> . term2
    (112) mrhs -> . args COMMA MULTIPLY arg
    (113) mrhs -> . MULTIPLY arg
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (128) args -> . arg multargs
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    IDENTIFIER      shift and go to state 156
    MULTIPLY        shift and go to state 154
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    mlhs                           shift and go to state 18
    mrhs                           shift and go to state 157
    term2                          shift and go to state 152
    args                           shift and go to state 153
    arg                            shift and go to state 155
    term3                          shift and go to state 30
    term4                          shift and go to state 32
    term0                          shift and go to state 25
    term5                          shift and go to state 36
    term1                          shift and go to state 26
    term6                          shift and go to state 39
    mlhsitem                       shift and go to state 27
    term7                          shift and go to state 40
    arraya                         shift and go to state 29
    term8                          shift and go to state 41
    variable                       shift and go to state 31
    term9                          shift and go to state 42
    varname                        shift and go to state 33
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 76

    (160) opasgn -> MODULO_EQUALS .

    IDENTIFIER      reduce using rule 160 (opasgn -> MODULO_EQUALS .)
    MULTIPLY        reduce using rule 160 (opasgn -> MODULO_EQUALS .)
    nil             reduce using rule 160 (opasgn -> MODULO_EQUALS .)
    self            reduce using rule 160 (opasgn -> MODULO_EQUALS .)
    GLOBAL          reduce using rule 160 (opasgn -> MODULO_EQUALS .)
    AT_THE_RATE     reduce using rule 160 (opasgn -> MODULO_EQUALS .)
    MINUS           reduce using rule 160 (opasgn -> MODULO_EQUALS .)
    PLUS            reduce using rule 160 (opasgn -> MODULO_EQUALS .)
    OPEN_BRACKET    reduce using rule 160 (opasgn -> MODULO_EQUALS .)
    CONSTANT_RESOLUTION reduce using rule 160 (opasgn -> MODULO_EQUALS .)
    Array           reduce using rule 160 (opasgn -> MODULO_EQUALS .)
    NUMBER          reduce using rule 160 (opasgn -> MODULO_EQUALS .)
    FLOAT           reduce using rule 160 (opasgn -> MODULO_EQUALS .)
    STRING          reduce using rule 160 (opasgn -> MODULO_EQUALS .)
    true            reduce using rule 160 (opasgn -> MODULO_EQUALS .)
    false           reduce using rule 160 (opasgn -> MODULO_EQUALS .)


state 77

    (161) opasgn -> DIVIDE_EQUALS .

    IDENTIFIER      reduce using rule 161 (opasgn -> DIVIDE_EQUALS .)
    MULTIPLY        reduce using rule 161 (opasgn -> DIVIDE_EQUALS .)
    nil             reduce using rule 161 (opasgn -> DIVIDE_EQUALS .)
    self            reduce using rule 161 (opasgn -> DIVIDE_EQUALS .)
    GLOBAL          reduce using rule 161 (opasgn -> DIVIDE_EQUALS .)
    AT_THE_RATE     reduce using rule 161 (opasgn -> DIVIDE_EQUALS .)
    MINUS           reduce using rule 161 (opasgn -> DIVIDE_EQUALS .)
    PLUS            reduce using rule 161 (opasgn -> DIVIDE_EQUALS .)
    OPEN_BRACKET    reduce using rule 161 (opasgn -> DIVIDE_EQUALS .)
    CONSTANT_RESOLUTION reduce using rule 161 (opasgn -> DIVIDE_EQUALS .)
    Array           reduce using rule 161 (opasgn -> DIVIDE_EQUALS .)
    NUMBER          reduce using rule 161 (opasgn -> DIVIDE_EQUALS .)
    FLOAT           reduce using rule 161 (opasgn -> DIVIDE_EQUALS .)
    STRING          reduce using rule 161 (opasgn -> DIVIDE_EQUALS .)
    true            reduce using rule 161 (opasgn -> DIVIDE_EQUALS .)
    false           reduce using rule 161 (opasgn -> DIVIDE_EQUALS .)


state 78

    (162) opasgn -> MINUS_EQUALS .

    IDENTIFIER      reduce using rule 162 (opasgn -> MINUS_EQUALS .)
    MULTIPLY        reduce using rule 162 (opasgn -> MINUS_EQUALS .)
    nil             reduce using rule 162 (opasgn -> MINUS_EQUALS .)
    self            reduce using rule 162 (opasgn -> MINUS_EQUALS .)
    GLOBAL          reduce using rule 162 (opasgn -> MINUS_EQUALS .)
    AT_THE_RATE     reduce using rule 162 (opasgn -> MINUS_EQUALS .)
    MINUS           reduce using rule 162 (opasgn -> MINUS_EQUALS .)
    PLUS            reduce using rule 162 (opasgn -> MINUS_EQUALS .)
    OPEN_BRACKET    reduce using rule 162 (opasgn -> MINUS_EQUALS .)
    CONSTANT_RESOLUTION reduce using rule 162 (opasgn -> MINUS_EQUALS .)
    Array           reduce using rule 162 (opasgn -> MINUS_EQUALS .)
    NUMBER          reduce using rule 162 (opasgn -> MINUS_EQUALS .)
    FLOAT           reduce using rule 162 (opasgn -> MINUS_EQUALS .)
    STRING          reduce using rule 162 (opasgn -> MINUS_EQUALS .)
    true            reduce using rule 162 (opasgn -> MINUS_EQUALS .)
    false           reduce using rule 162 (opasgn -> MINUS_EQUALS .)


state 79

    (163) opasgn -> PLUS_EQUALS .

    IDENTIFIER      reduce using rule 163 (opasgn -> PLUS_EQUALS .)
    MULTIPLY        reduce using rule 163 (opasgn -> PLUS_EQUALS .)
    nil             reduce using rule 163 (opasgn -> PLUS_EQUALS .)
    self            reduce using rule 163 (opasgn -> PLUS_EQUALS .)
    GLOBAL          reduce using rule 163 (opasgn -> PLUS_EQUALS .)
    AT_THE_RATE     reduce using rule 163 (opasgn -> PLUS_EQUALS .)
    MINUS           reduce using rule 163 (opasgn -> PLUS_EQUALS .)
    PLUS            reduce using rule 163 (opasgn -> PLUS_EQUALS .)
    OPEN_BRACKET    reduce using rule 163 (opasgn -> PLUS_EQUALS .)
    CONSTANT_RESOLUTION reduce using rule 163 (opasgn -> PLUS_EQUALS .)
    Array           reduce using rule 163 (opasgn -> PLUS_EQUALS .)
    NUMBER          reduce using rule 163 (opasgn -> PLUS_EQUALS .)
    FLOAT           reduce using rule 163 (opasgn -> PLUS_EQUALS .)
    STRING          reduce using rule 163 (opasgn -> PLUS_EQUALS .)
    true            reduce using rule 163 (opasgn -> PLUS_EQUALS .)
    false           reduce using rule 163 (opasgn -> PLUS_EQUALS .)


state 80

    (164) opasgn -> OR_EQUALS .

    IDENTIFIER      reduce using rule 164 (opasgn -> OR_EQUALS .)
    MULTIPLY        reduce using rule 164 (opasgn -> OR_EQUALS .)
    nil             reduce using rule 164 (opasgn -> OR_EQUALS .)
    self            reduce using rule 164 (opasgn -> OR_EQUALS .)
    GLOBAL          reduce using rule 164 (opasgn -> OR_EQUALS .)
    AT_THE_RATE     reduce using rule 164 (opasgn -> OR_EQUALS .)
    MINUS           reduce using rule 164 (opasgn -> OR_EQUALS .)
    PLUS            reduce using rule 164 (opasgn -> OR_EQUALS .)
    OPEN_BRACKET    reduce using rule 164 (opasgn -> OR_EQUALS .)
    CONSTANT_RESOLUTION reduce using rule 164 (opasgn -> OR_EQUALS .)
    Array           reduce using rule 164 (opasgn -> OR_EQUALS .)
    NUMBER          reduce using rule 164 (opasgn -> OR_EQUALS .)
    FLOAT           reduce using rule 164 (opasgn -> OR_EQUALS .)
    STRING          reduce using rule 164 (opasgn -> OR_EQUALS .)
    true            reduce using rule 164 (opasgn -> OR_EQUALS .)
    false           reduce using rule 164 (opasgn -> OR_EQUALS .)


state 81

    (165) opasgn -> AND_EQUALS .

    IDENTIFIER      reduce using rule 165 (opasgn -> AND_EQUALS .)
    MULTIPLY        reduce using rule 165 (opasgn -> AND_EQUALS .)
    nil             reduce using rule 165 (opasgn -> AND_EQUALS .)
    self            reduce using rule 165 (opasgn -> AND_EQUALS .)
    GLOBAL          reduce using rule 165 (opasgn -> AND_EQUALS .)
    AT_THE_RATE     reduce using rule 165 (opasgn -> AND_EQUALS .)
    MINUS           reduce using rule 165 (opasgn -> AND_EQUALS .)
    PLUS            reduce using rule 165 (opasgn -> AND_EQUALS .)
    OPEN_BRACKET    reduce using rule 165 (opasgn -> AND_EQUALS .)
    CONSTANT_RESOLUTION reduce using rule 165 (opasgn -> AND_EQUALS .)
    Array           reduce using rule 165 (opasgn -> AND_EQUALS .)
    NUMBER          reduce using rule 165 (opasgn -> AND_EQUALS .)
    FLOAT           reduce using rule 165 (opasgn -> AND_EQUALS .)
    STRING          reduce using rule 165 (opasgn -> AND_EQUALS .)
    true            reduce using rule 165 (opasgn -> AND_EQUALS .)
    false           reduce using rule 165 (opasgn -> AND_EQUALS .)


state 82

    (166) opasgn -> XOR_EQUALS .

    IDENTIFIER      reduce using rule 166 (opasgn -> XOR_EQUALS .)
    MULTIPLY        reduce using rule 166 (opasgn -> XOR_EQUALS .)
    nil             reduce using rule 166 (opasgn -> XOR_EQUALS .)
    self            reduce using rule 166 (opasgn -> XOR_EQUALS .)
    GLOBAL          reduce using rule 166 (opasgn -> XOR_EQUALS .)
    AT_THE_RATE     reduce using rule 166 (opasgn -> XOR_EQUALS .)
    MINUS           reduce using rule 166 (opasgn -> XOR_EQUALS .)
    PLUS            reduce using rule 166 (opasgn -> XOR_EQUALS .)
    OPEN_BRACKET    reduce using rule 166 (opasgn -> XOR_EQUALS .)
    CONSTANT_RESOLUTION reduce using rule 166 (opasgn -> XOR_EQUALS .)
    Array           reduce using rule 166 (opasgn -> XOR_EQUALS .)
    NUMBER          reduce using rule 166 (opasgn -> XOR_EQUALS .)
    FLOAT           reduce using rule 166 (opasgn -> XOR_EQUALS .)
    STRING          reduce using rule 166 (opasgn -> XOR_EQUALS .)
    true            reduce using rule 166 (opasgn -> XOR_EQUALS .)
    false           reduce using rule 166 (opasgn -> XOR_EQUALS .)


state 83

    (167) opasgn -> RIGHT_SHIFT_EQUALS .

    IDENTIFIER      reduce using rule 167 (opasgn -> RIGHT_SHIFT_EQUALS .)
    MULTIPLY        reduce using rule 167 (opasgn -> RIGHT_SHIFT_EQUALS .)
    nil             reduce using rule 167 (opasgn -> RIGHT_SHIFT_EQUALS .)
    self            reduce using rule 167 (opasgn -> RIGHT_SHIFT_EQUALS .)
    GLOBAL          reduce using rule 167 (opasgn -> RIGHT_SHIFT_EQUALS .)
    AT_THE_RATE     reduce using rule 167 (opasgn -> RIGHT_SHIFT_EQUALS .)
    MINUS           reduce using rule 167 (opasgn -> RIGHT_SHIFT_EQUALS .)
    PLUS            reduce using rule 167 (opasgn -> RIGHT_SHIFT_EQUALS .)
    OPEN_BRACKET    reduce using rule 167 (opasgn -> RIGHT_SHIFT_EQUALS .)
    CONSTANT_RESOLUTION reduce using rule 167 (opasgn -> RIGHT_SHIFT_EQUALS .)
    Array           reduce using rule 167 (opasgn -> RIGHT_SHIFT_EQUALS .)
    NUMBER          reduce using rule 167 (opasgn -> RIGHT_SHIFT_EQUALS .)
    FLOAT           reduce using rule 167 (opasgn -> RIGHT_SHIFT_EQUALS .)
    STRING          reduce using rule 167 (opasgn -> RIGHT_SHIFT_EQUALS .)
    true            reduce using rule 167 (opasgn -> RIGHT_SHIFT_EQUALS .)
    false           reduce using rule 167 (opasgn -> RIGHT_SHIFT_EQUALS .)


state 84

    (168) opasgn -> LEFT_SHIFT_EQUALS .

    IDENTIFIER      reduce using rule 168 (opasgn -> LEFT_SHIFT_EQUALS .)
    MULTIPLY        reduce using rule 168 (opasgn -> LEFT_SHIFT_EQUALS .)
    nil             reduce using rule 168 (opasgn -> LEFT_SHIFT_EQUALS .)
    self            reduce using rule 168 (opasgn -> LEFT_SHIFT_EQUALS .)
    GLOBAL          reduce using rule 168 (opasgn -> LEFT_SHIFT_EQUALS .)
    AT_THE_RATE     reduce using rule 168 (opasgn -> LEFT_SHIFT_EQUALS .)
    MINUS           reduce using rule 168 (opasgn -> LEFT_SHIFT_EQUALS .)
    PLUS            reduce using rule 168 (opasgn -> LEFT_SHIFT_EQUALS .)
    OPEN_BRACKET    reduce using rule 168 (opasgn -> LEFT_SHIFT_EQUALS .)
    CONSTANT_RESOLUTION reduce using rule 168 (opasgn -> LEFT_SHIFT_EQUALS .)
    Array           reduce using rule 168 (opasgn -> LEFT_SHIFT_EQUALS .)
    NUMBER          reduce using rule 168 (opasgn -> LEFT_SHIFT_EQUALS .)
    FLOAT           reduce using rule 168 (opasgn -> LEFT_SHIFT_EQUALS .)
    STRING          reduce using rule 168 (opasgn -> LEFT_SHIFT_EQUALS .)
    true            reduce using rule 168 (opasgn -> LEFT_SHIFT_EQUALS .)
    false           reduce using rule 168 (opasgn -> LEFT_SHIFT_EQUALS .)


state 85

    (169) opasgn -> MULTIPLY_EQUALS .

    IDENTIFIER      reduce using rule 169 (opasgn -> MULTIPLY_EQUALS .)
    MULTIPLY        reduce using rule 169 (opasgn -> MULTIPLY_EQUALS .)
    nil             reduce using rule 169 (opasgn -> MULTIPLY_EQUALS .)
    self            reduce using rule 169 (opasgn -> MULTIPLY_EQUALS .)
    GLOBAL          reduce using rule 169 (opasgn -> MULTIPLY_EQUALS .)
    AT_THE_RATE     reduce using rule 169 (opasgn -> MULTIPLY_EQUALS .)
    MINUS           reduce using rule 169 (opasgn -> MULTIPLY_EQUALS .)
    PLUS            reduce using rule 169 (opasgn -> MULTIPLY_EQUALS .)
    OPEN_BRACKET    reduce using rule 169 (opasgn -> MULTIPLY_EQUALS .)
    CONSTANT_RESOLUTION reduce using rule 169 (opasgn -> MULTIPLY_EQUALS .)
    Array           reduce using rule 169 (opasgn -> MULTIPLY_EQUALS .)
    NUMBER          reduce using rule 169 (opasgn -> MULTIPLY_EQUALS .)
    FLOAT           reduce using rule 169 (opasgn -> MULTIPLY_EQUALS .)
    STRING          reduce using rule 169 (opasgn -> MULTIPLY_EQUALS .)
    true            reduce using rule 169 (opasgn -> MULTIPLY_EQUALS .)
    false           reduce using rule 169 (opasgn -> MULTIPLY_EQUALS .)


state 86

    (170) opasgn -> LOGICAL_AND_EQUALS .

    IDENTIFIER      reduce using rule 170 (opasgn -> LOGICAL_AND_EQUALS .)
    MULTIPLY        reduce using rule 170 (opasgn -> LOGICAL_AND_EQUALS .)
    nil             reduce using rule 170 (opasgn -> LOGICAL_AND_EQUALS .)
    self            reduce using rule 170 (opasgn -> LOGICAL_AND_EQUALS .)
    GLOBAL          reduce using rule 170 (opasgn -> LOGICAL_AND_EQUALS .)
    AT_THE_RATE     reduce using rule 170 (opasgn -> LOGICAL_AND_EQUALS .)
    MINUS           reduce using rule 170 (opasgn -> LOGICAL_AND_EQUALS .)
    PLUS            reduce using rule 170 (opasgn -> LOGICAL_AND_EQUALS .)
    OPEN_BRACKET    reduce using rule 170 (opasgn -> LOGICAL_AND_EQUALS .)
    CONSTANT_RESOLUTION reduce using rule 170 (opasgn -> LOGICAL_AND_EQUALS .)
    Array           reduce using rule 170 (opasgn -> LOGICAL_AND_EQUALS .)
    NUMBER          reduce using rule 170 (opasgn -> LOGICAL_AND_EQUALS .)
    FLOAT           reduce using rule 170 (opasgn -> LOGICAL_AND_EQUALS .)
    STRING          reduce using rule 170 (opasgn -> LOGICAL_AND_EQUALS .)
    true            reduce using rule 170 (opasgn -> LOGICAL_AND_EQUALS .)
    false           reduce using rule 170 (opasgn -> LOGICAL_AND_EQUALS .)


state 87

    (171) opasgn -> LOGICAL_OR_EQUALS .

    IDENTIFIER      reduce using rule 171 (opasgn -> LOGICAL_OR_EQUALS .)
    MULTIPLY        reduce using rule 171 (opasgn -> LOGICAL_OR_EQUALS .)
    nil             reduce using rule 171 (opasgn -> LOGICAL_OR_EQUALS .)
    self            reduce using rule 171 (opasgn -> LOGICAL_OR_EQUALS .)
    GLOBAL          reduce using rule 171 (opasgn -> LOGICAL_OR_EQUALS .)
    AT_THE_RATE     reduce using rule 171 (opasgn -> LOGICAL_OR_EQUALS .)
    MINUS           reduce using rule 171 (opasgn -> LOGICAL_OR_EQUALS .)
    PLUS            reduce using rule 171 (opasgn -> LOGICAL_OR_EQUALS .)
    OPEN_BRACKET    reduce using rule 171 (opasgn -> LOGICAL_OR_EQUALS .)
    CONSTANT_RESOLUTION reduce using rule 171 (opasgn -> LOGICAL_OR_EQUALS .)
    Array           reduce using rule 171 (opasgn -> LOGICAL_OR_EQUALS .)
    NUMBER          reduce using rule 171 (opasgn -> LOGICAL_OR_EQUALS .)
    FLOAT           reduce using rule 171 (opasgn -> LOGICAL_OR_EQUALS .)
    STRING          reduce using rule 171 (opasgn -> LOGICAL_OR_EQUALS .)
    true            reduce using rule 171 (opasgn -> LOGICAL_OR_EQUALS .)
    false           reduce using rule 171 (opasgn -> LOGICAL_OR_EQUALS .)


state 88

    (172) opasgn -> POWER_EQUALS .

    IDENTIFIER      reduce using rule 172 (opasgn -> POWER_EQUALS .)
    MULTIPLY        reduce using rule 172 (opasgn -> POWER_EQUALS .)
    nil             reduce using rule 172 (opasgn -> POWER_EQUALS .)
    self            reduce using rule 172 (opasgn -> POWER_EQUALS .)
    GLOBAL          reduce using rule 172 (opasgn -> POWER_EQUALS .)
    AT_THE_RATE     reduce using rule 172 (opasgn -> POWER_EQUALS .)
    MINUS           reduce using rule 172 (opasgn -> POWER_EQUALS .)
    PLUS            reduce using rule 172 (opasgn -> POWER_EQUALS .)
    OPEN_BRACKET    reduce using rule 172 (opasgn -> POWER_EQUALS .)
    CONSTANT_RESOLUTION reduce using rule 172 (opasgn -> POWER_EQUALS .)
    Array           reduce using rule 172 (opasgn -> POWER_EQUALS .)
    NUMBER          reduce using rule 172 (opasgn -> POWER_EQUALS .)
    FLOAT           reduce using rule 172 (opasgn -> POWER_EQUALS .)
    STRING          reduce using rule 172 (opasgn -> POWER_EQUALS .)
    true            reduce using rule 172 (opasgn -> POWER_EQUALS .)
    false           reduce using rule 172 (opasgn -> POWER_EQUALS .)


state 89

    (19) expr1 -> return callargs .

    SEMI_COLON      reduce using rule 19 (expr1 -> return callargs .)
    NEWLINE         reduce using rule 19 (expr1 -> return callargs .)
    def             reduce using rule 19 (expr1 -> return callargs .)
    break           reduce using rule 19 (expr1 -> return callargs .)
    if              reduce using rule 19 (expr1 -> return callargs .)
    while           reduce using rule 19 (expr1 -> return callargs .)
    case            reduce using rule 19 (expr1 -> return callargs .)
    for             reduce using rule 19 (expr1 -> return callargs .)
    return          reduce using rule 19 (expr1 -> return callargs .)
    IDENTIFIER      reduce using rule 19 (expr1 -> return callargs .)
    nil             reduce using rule 19 (expr1 -> return callargs .)
    self            reduce using rule 19 (expr1 -> return callargs .)
    GLOBAL          reduce using rule 19 (expr1 -> return callargs .)
    AT_THE_RATE     reduce using rule 19 (expr1 -> return callargs .)
    MINUS           reduce using rule 19 (expr1 -> return callargs .)
    PLUS            reduce using rule 19 (expr1 -> return callargs .)
    OPEN_BRACKET    reduce using rule 19 (expr1 -> return callargs .)
    CONSTANT_RESOLUTION reduce using rule 19 (expr1 -> return callargs .)
    Array           reduce using rule 19 (expr1 -> return callargs .)
    NUMBER          reduce using rule 19 (expr1 -> return callargs .)
    FLOAT           reduce using rule 19 (expr1 -> return callargs .)
    STRING          reduce using rule 19 (expr1 -> return callargs .)
    true            reduce using rule 19 (expr1 -> return callargs .)
    false           reduce using rule 19 (expr1 -> return callargs .)
    $end            reduce using rule 19 (expr1 -> return callargs .)
    end             reduce using rule 19 (expr1 -> return callargs .)
    then            reduce using rule 19 (expr1 -> return callargs .)
    do              reduce using rule 19 (expr1 -> return callargs .)


state 90

    (20) expr1 -> return OPEN_BRACKET . callargs CLOSE_BRACKET
    (21) expr1 -> return OPEN_BRACKET . CLOSE_BRACKET
    (75) primary -> OPEN_BRACKET . expr2 CLOSE_BRACKET
    (114) callargs -> . args
    (115) callargs -> . args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg
    (116) callargs -> . args COMMA MULTIPLY arg COMMA BIT_AND arg
    (117) callargs -> . args COMMA assocs COMMA BIT_AND arg
    (118) callargs -> . args COMMA assocs COMMA MULTIPLY arg
    (119) callargs -> . args COMMA assocs
    (120) callargs -> . args COMMA MULTIPLY arg
    (121) callargs -> . args COMMA BIT_AND arg
    (122) callargs -> . assocs COMMA MULTIPLY arg COMMA BIT_AND arg
    (123) callargs -> . assocs COMMA MULTIPLY arg
    (124) callargs -> . assocs COMMA BIT_AND arg
    (125) callargs -> . assocs
    (126) callargs -> . MULTIPLY arg COMMA BIT_AND arg
    (127) callargs -> . BIT_AND arg
    (24) expr2 -> . call
    (25) expr2 -> . arg
    (128) args -> . arg multargs
    (147) assocs -> . assoc multassocs
    (26) call -> . function
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (150) assoc -> . arg MAP arg
    (27) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (28) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    CLOSE_BRACKET   shift and go to state 159
    MULTIPLY        shift and go to state 93
    BIT_AND         shift and go to state 95
    IDENTIFIER      shift and go to state 10
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    callargs                       shift and go to state 158
    expr2                          shift and go to state 97
    args                           shift and go to state 91
    assocs                         shift and go to state 92
    arg                            shift and go to state 160
    call                           shift and go to state 22
    assoc                          shift and go to state 96
    function                       shift and go to state 24
    term0                          shift and go to state 25
    mlhs                           shift and go to state 18
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 91

    (114) callargs -> args .
    (115) callargs -> args . COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg
    (116) callargs -> args . COMMA MULTIPLY arg COMMA BIT_AND arg
    (117) callargs -> args . COMMA assocs COMMA BIT_AND arg
    (118) callargs -> args . COMMA assocs COMMA MULTIPLY arg
    (119) callargs -> args . COMMA assocs
    (120) callargs -> args . COMMA MULTIPLY arg
    (121) callargs -> args . COMMA BIT_AND arg

    SEMI_COLON      reduce using rule 114 (callargs -> args .)
    NEWLINE         reduce using rule 114 (callargs -> args .)
    def             reduce using rule 114 (callargs -> args .)
    break           reduce using rule 114 (callargs -> args .)
    if              reduce using rule 114 (callargs -> args .)
    while           reduce using rule 114 (callargs -> args .)
    case            reduce using rule 114 (callargs -> args .)
    for             reduce using rule 114 (callargs -> args .)
    return          reduce using rule 114 (callargs -> args .)
    IDENTIFIER      reduce using rule 114 (callargs -> args .)
    nil             reduce using rule 114 (callargs -> args .)
    self            reduce using rule 114 (callargs -> args .)
    GLOBAL          reduce using rule 114 (callargs -> args .)
    AT_THE_RATE     reduce using rule 114 (callargs -> args .)
    MINUS           reduce using rule 114 (callargs -> args .)
    PLUS            reduce using rule 114 (callargs -> args .)
    OPEN_BRACKET    reduce using rule 114 (callargs -> args .)
    CONSTANT_RESOLUTION reduce using rule 114 (callargs -> args .)
    Array           reduce using rule 114 (callargs -> args .)
    NUMBER          reduce using rule 114 (callargs -> args .)
    FLOAT           reduce using rule 114 (callargs -> args .)
    STRING          reduce using rule 114 (callargs -> args .)
    true            reduce using rule 114 (callargs -> args .)
    false           reduce using rule 114 (callargs -> args .)
    $end            reduce using rule 114 (callargs -> args .)
    end             reduce using rule 114 (callargs -> args .)
    then            reduce using rule 114 (callargs -> args .)
    do              reduce using rule 114 (callargs -> args .)
    CLOSE_BRACKET   reduce using rule 114 (callargs -> args .)
    COMMA           shift and go to state 161


state 92

    (122) callargs -> assocs . COMMA MULTIPLY arg COMMA BIT_AND arg
    (123) callargs -> assocs . COMMA MULTIPLY arg
    (124) callargs -> assocs . COMMA BIT_AND arg
    (125) callargs -> assocs .

    COMMA           shift and go to state 162
    SEMI_COLON      reduce using rule 125 (callargs -> assocs .)
    NEWLINE         reduce using rule 125 (callargs -> assocs .)
    def             reduce using rule 125 (callargs -> assocs .)
    break           reduce using rule 125 (callargs -> assocs .)
    if              reduce using rule 125 (callargs -> assocs .)
    while           reduce using rule 125 (callargs -> assocs .)
    case            reduce using rule 125 (callargs -> assocs .)
    for             reduce using rule 125 (callargs -> assocs .)
    return          reduce using rule 125 (callargs -> assocs .)
    IDENTIFIER      reduce using rule 125 (callargs -> assocs .)
    nil             reduce using rule 125 (callargs -> assocs .)
    self            reduce using rule 125 (callargs -> assocs .)
    GLOBAL          reduce using rule 125 (callargs -> assocs .)
    AT_THE_RATE     reduce using rule 125 (callargs -> assocs .)
    MINUS           reduce using rule 125 (callargs -> assocs .)
    PLUS            reduce using rule 125 (callargs -> assocs .)
    OPEN_BRACKET    reduce using rule 125 (callargs -> assocs .)
    CONSTANT_RESOLUTION reduce using rule 125 (callargs -> assocs .)
    Array           reduce using rule 125 (callargs -> assocs .)
    NUMBER          reduce using rule 125 (callargs -> assocs .)
    FLOAT           reduce using rule 125 (callargs -> assocs .)
    STRING          reduce using rule 125 (callargs -> assocs .)
    true            reduce using rule 125 (callargs -> assocs .)
    false           reduce using rule 125 (callargs -> assocs .)
    $end            reduce using rule 125 (callargs -> assocs .)
    end             reduce using rule 125 (callargs -> assocs .)
    then            reduce using rule 125 (callargs -> assocs .)
    do              reduce using rule 125 (callargs -> assocs .)
    CLOSE_BRACKET   reduce using rule 125 (callargs -> assocs .)


state 93

    (126) callargs -> MULTIPLY . arg COMMA BIT_AND arg
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    IDENTIFIER      shift and go to state 70
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    arg                            shift and go to state 163
    term0                          shift and go to state 25
    mlhs                           shift and go to state 18
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 94

    (128) args -> arg . multargs
    (29) arg -> arg . BIT_OR term0
    (150) assoc -> arg . MAP arg
    (129) multargs -> . COMMA arg multargs
    (130) multargs -> . empty
    (178) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    BIT_OR          shift and go to state 98
    MAP             shift and go to state 165
    COMMA           shift and go to state 166
    SEMI_COLON      reduce using rule 178 (empty -> .)
    NEWLINE         reduce using rule 178 (empty -> .)
    def             reduce using rule 178 (empty -> .)
    break           reduce using rule 178 (empty -> .)
    if              reduce using rule 178 (empty -> .)
    while           reduce using rule 178 (empty -> .)
    case            reduce using rule 178 (empty -> .)
    for             reduce using rule 178 (empty -> .)
    return          reduce using rule 178 (empty -> .)
    IDENTIFIER      reduce using rule 178 (empty -> .)
    nil             reduce using rule 178 (empty -> .)
    self            reduce using rule 178 (empty -> .)
    GLOBAL          reduce using rule 178 (empty -> .)
    AT_THE_RATE     reduce using rule 178 (empty -> .)
    MINUS           reduce using rule 178 (empty -> .)
    PLUS            reduce using rule 178 (empty -> .)
    OPEN_BRACKET    reduce using rule 178 (empty -> .)
    CONSTANT_RESOLUTION reduce using rule 178 (empty -> .)
    Array           reduce using rule 178 (empty -> .)
    NUMBER          reduce using rule 178 (empty -> .)
    FLOAT           reduce using rule 178 (empty -> .)
    STRING          reduce using rule 178 (empty -> .)
    true            reduce using rule 178 (empty -> .)
    false           reduce using rule 178 (empty -> .)
    $end            reduce using rule 178 (empty -> .)
    end             reduce using rule 178 (empty -> .)
    then            reduce using rule 178 (empty -> .)
    do              reduce using rule 178 (empty -> .)
    CLOSE_BRACKET   reduce using rule 178 (empty -> .)

  ! COMMA           [ reduce using rule 178 (empty -> .) ]

    multargs                       shift and go to state 164
    empty                          shift and go to state 167

state 95

    (127) callargs -> BIT_AND . arg
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    IDENTIFIER      shift and go to state 70
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    arg                            shift and go to state 168
    term0                          shift and go to state 25
    mlhs                           shift and go to state 18
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 96

    (147) assocs -> assoc . multassocs
    (148) multassocs -> . COMMA assoc multassocs
    (149) multassocs -> . empty
    (178) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 170
    SEMI_COLON      reduce using rule 178 (empty -> .)
    NEWLINE         reduce using rule 178 (empty -> .)
    def             reduce using rule 178 (empty -> .)
    break           reduce using rule 178 (empty -> .)
    if              reduce using rule 178 (empty -> .)
    while           reduce using rule 178 (empty -> .)
    case            reduce using rule 178 (empty -> .)
    for             reduce using rule 178 (empty -> .)
    return          reduce using rule 178 (empty -> .)
    IDENTIFIER      reduce using rule 178 (empty -> .)
    nil             reduce using rule 178 (empty -> .)
    self            reduce using rule 178 (empty -> .)
    GLOBAL          reduce using rule 178 (empty -> .)
    AT_THE_RATE     reduce using rule 178 (empty -> .)
    MINUS           reduce using rule 178 (empty -> .)
    PLUS            reduce using rule 178 (empty -> .)
    OPEN_BRACKET    reduce using rule 178 (empty -> .)
    CONSTANT_RESOLUTION reduce using rule 178 (empty -> .)
    Array           reduce using rule 178 (empty -> .)
    NUMBER          reduce using rule 178 (empty -> .)
    FLOAT           reduce using rule 178 (empty -> .)
    STRING          reduce using rule 178 (empty -> .)
    true            reduce using rule 178 (empty -> .)
    false           reduce using rule 178 (empty -> .)
    $end            reduce using rule 178 (empty -> .)
    end             reduce using rule 178 (empty -> .)
    then            reduce using rule 178 (empty -> .)
    do              reduce using rule 178 (empty -> .)
    CLOSE_BRACKET   reduce using rule 178 (empty -> .)

  ! COMMA           [ reduce using rule 178 (empty -> .) ]

    multassocs                     shift and go to state 169
    empty                          shift and go to state 171

state 97

    (75) primary -> OPEN_BRACKET expr2 . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 172


state 98

    (29) arg -> arg BIT_OR . term0
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    IDENTIFIER      shift and go to state 70
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    term0                          shift and go to state 173
    mlhs                           shift and go to state 18
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 99

    (38) term2 -> term3 INCL_RANGE . term3
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    nil             shift and go to state 34
    self            shift and go to state 35
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    IDENTIFIER      shift and go to state 123

    term3                          shift and go to state 174
    term4                          shift and go to state 32
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    variable                       shift and go to state 122
    arrayd                         shift and go to state 51
    arraya                         shift and go to state 124
    literal                        shift and go to state 52
    varname                        shift and go to state 125

state 100

    (39) term2 -> term3 EXCL_RANGE . term3
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    nil             shift and go to state 34
    self            shift and go to state 35
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    IDENTIFIER      shift and go to state 123

    term3                          shift and go to state 175
    term4                          shift and go to state 32
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    variable                       shift and go to state 122
    arrayd                         shift and go to state 51
    arraya                         shift and go to state 124
    literal                        shift and go to state 52
    varname                        shift and go to state 125

state 101

    (41) term3 -> term3 LOGICAL_OR . term4
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    nil             shift and go to state 34
    self            shift and go to state 35
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    IDENTIFIER      shift and go to state 123

    term4                          shift and go to state 176
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    variable                       shift and go to state 122
    arrayd                         shift and go to state 51
    arraya                         shift and go to state 124
    literal                        shift and go to state 52
    varname                        shift and go to state 125

state 102

    (85) arraya -> variable OPEN_SQUARE . array_args CLOSE_SQUARE
    (86) array_args -> . primary COMMA array_args
    (87) array_args -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    nil             shift and go to state 34
    self            shift and go to state 35
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    IDENTIFIER      shift and go to state 123

    variable                       shift and go to state 122
    array_args                     shift and go to state 177
    primary                        shift and go to state 178
    arrayd                         shift and go to state 51
    arraya                         shift and go to state 124
    literal                        shift and go to state 52
    varname                        shift and go to state 125

state 103

    (76) primary -> variable CONSTANT_RESOLUTION . IDENTIFIER

    IDENTIFIER      shift and go to state 179


state 104

    (43) term4 -> term5 DOUBLE_EQUALS . term5
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    nil             shift and go to state 34
    self            shift and go to state 35
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    IDENTIFIER      shift and go to state 123

    term5                          shift and go to state 180
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    variable                       shift and go to state 122
    arrayd                         shift and go to state 51
    arraya                         shift and go to state 124
    literal                        shift and go to state 52
    varname                        shift and go to state 125

state 105

    (44) term4 -> term5 TRIPLE_EQUALS . term5
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    nil             shift and go to state 34
    self            shift and go to state 35
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    IDENTIFIER      shift and go to state 123

    term5                          shift and go to state 181
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    variable                       shift and go to state 122
    arrayd                         shift and go to state 51
    arraya                         shift and go to state 124
    literal                        shift and go to state 52
    varname                        shift and go to state 125

state 106

    (45) term4 -> term5 NOT_EQUALS . term5
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    nil             shift and go to state 34
    self            shift and go to state 35
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    IDENTIFIER      shift and go to state 123

    term5                          shift and go to state 182
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    variable                       shift and go to state 122
    arrayd                         shift and go to state 51
    arraya                         shift and go to state 124
    literal                        shift and go to state 52
    varname                        shift and go to state 125

state 107

    (46) term4 -> term5 EQUAL_TILDE . term5
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    nil             shift and go to state 34
    self            shift and go to state 35
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    IDENTIFIER      shift and go to state 123

    term5                          shift and go to state 183
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    variable                       shift and go to state 122
    arrayd                         shift and go to state 51
    arraya                         shift and go to state 124
    literal                        shift and go to state 52
    varname                        shift and go to state 125

state 108

    (47) term4 -> term5 BANG_TILDE . term5
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    nil             shift and go to state 34
    self            shift and go to state 35
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    IDENTIFIER      shift and go to state 123

    term5                          shift and go to state 184
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    variable                       shift and go to state 122
    arrayd                         shift and go to state 51
    arraya                         shift and go to state 124
    literal                        shift and go to state 52
    varname                        shift and go to state 125

state 109

    (48) term4 -> term5 COMPARISON . term5
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    nil             shift and go to state 34
    self            shift and go to state 35
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    IDENTIFIER      shift and go to state 123

    term5                          shift and go to state 185
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    variable                       shift and go to state 122
    arrayd                         shift and go to state 51
    arraya                         shift and go to state 124
    literal                        shift and go to state 52
    varname                        shift and go to state 125

state 110

    (50) term5 -> term5 LESS . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    nil             shift and go to state 34
    self            shift and go to state 35
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    IDENTIFIER      shift and go to state 123

    term6                          shift and go to state 186
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    variable                       shift and go to state 122
    arrayd                         shift and go to state 51
    arraya                         shift and go to state 124
    literal                        shift and go to state 52
    varname                        shift and go to state 125

state 111

    (51) term5 -> term5 LESS_EQUALS . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    nil             shift and go to state 34
    self            shift and go to state 35
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    IDENTIFIER      shift and go to state 123

    term6                          shift and go to state 187
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    variable                       shift and go to state 122
    arrayd                         shift and go to state 51
    arraya                         shift and go to state 124
    literal                        shift and go to state 52
    varname                        shift and go to state 125

state 112

    (52) term5 -> term5 GREATER . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    nil             shift and go to state 34
    self            shift and go to state 35
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    IDENTIFIER      shift and go to state 123

    term6                          shift and go to state 188
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    variable                       shift and go to state 122
    arrayd                         shift and go to state 51
    arraya                         shift and go to state 124
    literal                        shift and go to state 52
    varname                        shift and go to state 125

state 113

    (53) term5 -> term5 GREATER_EQUALS . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    nil             shift and go to state 34
    self            shift and go to state 35
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    IDENTIFIER      shift and go to state 123

    term6                          shift and go to state 189
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    variable                       shift and go to state 122
    arrayd                         shift and go to state 51
    arraya                         shift and go to state 124
    literal                        shift and go to state 52
    varname                        shift and go to state 125

state 114

    (174) varname -> AT_THE_RATE IDENTIFIER .

    OPEN_SQUARE     reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    CONSTANT_RESOLUTION reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    POWER           reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    MULTIPLY        reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    DIVIDE          reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    MODULO          reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    PLUS            reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    MINUS           reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    BIT_AND         reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    BIT_XOR         reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    DOUBLE_EQUALS   reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    TRIPLE_EQUALS   reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    NOT_EQUALS      reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    EQUAL_TILDE     reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    BANG_TILDE      reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    COMPARISON      reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    LESS            reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    LESS_EQUALS     reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    GREATER         reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    INCL_RANGE      reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    EXCL_RANGE      reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    LOGICAL_OR      reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    BIT_OR          reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    SEMI_COLON      reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    NEWLINE         reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    def             reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    break           reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    if              reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    while           reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    case            reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    for             reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    return          reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    IDENTIFIER      reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    nil             reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    self            reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    GLOBAL          reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    AT_THE_RATE     reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    OPEN_BRACKET    reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    Array           reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    NUMBER          reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    FLOAT           reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    STRING          reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    true            reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    false           reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    $end            reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    end             reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    then            reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    MAP             reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    COMMA           reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    do              reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)
    CLOSE_SQUARE    reduce using rule 174 (varname -> AT_THE_RATE IDENTIFIER .)


state 115

    (55) term6 -> term6 BIT_XOR . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    nil             shift and go to state 34
    self            shift and go to state 35
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    IDENTIFIER      shift and go to state 123

    term7                          shift and go to state 190
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    variable                       shift and go to state 122
    arrayd                         shift and go to state 51
    arraya                         shift and go to state 124
    literal                        shift and go to state 52
    varname                        shift and go to state 125

state 116

    (57) term7 -> term7 BIT_AND . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    nil             shift and go to state 34
    self            shift and go to state 35
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    IDENTIFIER      shift and go to state 123

    term8                          shift and go to state 191
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    variable                       shift and go to state 122
    arrayd                         shift and go to state 51
    arraya                         shift and go to state 124
    literal                        shift and go to state 52
    varname                        shift and go to state 125

state 117

    (59) term8 -> term8 LEFT_SHIFT . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    nil             shift and go to state 34
    self            shift and go to state 35
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    IDENTIFIER      shift and go to state 123

    term9                          shift and go to state 192
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    variable                       shift and go to state 122
    arrayd                         shift and go to state 51
    arraya                         shift and go to state 124
    literal                        shift and go to state 52
    varname                        shift and go to state 125

state 118

    (60) term8 -> term8 RIGHT_SHIFT . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    nil             shift and go to state 34
    self            shift and go to state 35
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    IDENTIFIER      shift and go to state 123

    term9                          shift and go to state 193
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    variable                       shift and go to state 122
    arrayd                         shift and go to state 51
    arraya                         shift and go to state 124
    literal                        shift and go to state 52
    varname                        shift and go to state 125

state 119

    (62) term9 -> term9 PLUS . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    nil             shift and go to state 34
    self            shift and go to state 35
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    IDENTIFIER      shift and go to state 123

    term10                         shift and go to state 194
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    variable                       shift and go to state 122
    arrayd                         shift and go to state 51
    arraya                         shift and go to state 124
    literal                        shift and go to state 52
    varname                        shift and go to state 125

state 120

    (63) term9 -> term9 MINUS . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    nil             shift and go to state 34
    self            shift and go to state 35
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    IDENTIFIER      shift and go to state 123

    term10                         shift and go to state 195
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    variable                       shift and go to state 122
    arrayd                         shift and go to state 51
    arraya                         shift and go to state 124
    literal                        shift and go to state 52
    varname                        shift and go to state 125

state 121

    (71) term12 -> PLUS term12 .

    MULTIPLY        reduce using rule 71 (term12 -> PLUS term12 .)
    DIVIDE          reduce using rule 71 (term12 -> PLUS term12 .)
    MODULO          reduce using rule 71 (term12 -> PLUS term12 .)
    PLUS            reduce using rule 71 (term12 -> PLUS term12 .)
    MINUS           reduce using rule 71 (term12 -> PLUS term12 .)
    LEFT_SHIFT      reduce using rule 71 (term12 -> PLUS term12 .)
    RIGHT_SHIFT     reduce using rule 71 (term12 -> PLUS term12 .)
    BIT_AND         reduce using rule 71 (term12 -> PLUS term12 .)
    BIT_XOR         reduce using rule 71 (term12 -> PLUS term12 .)
    DOUBLE_EQUALS   reduce using rule 71 (term12 -> PLUS term12 .)
    TRIPLE_EQUALS   reduce using rule 71 (term12 -> PLUS term12 .)
    NOT_EQUALS      reduce using rule 71 (term12 -> PLUS term12 .)
    EQUAL_TILDE     reduce using rule 71 (term12 -> PLUS term12 .)
    BANG_TILDE      reduce using rule 71 (term12 -> PLUS term12 .)
    COMPARISON      reduce using rule 71 (term12 -> PLUS term12 .)
    LESS            reduce using rule 71 (term12 -> PLUS term12 .)
    LESS_EQUALS     reduce using rule 71 (term12 -> PLUS term12 .)
    GREATER         reduce using rule 71 (term12 -> PLUS term12 .)
    GREATER_EQUALS  reduce using rule 71 (term12 -> PLUS term12 .)
    INCL_RANGE      reduce using rule 71 (term12 -> PLUS term12 .)
    EXCL_RANGE      reduce using rule 71 (term12 -> PLUS term12 .)
    LOGICAL_OR      reduce using rule 71 (term12 -> PLUS term12 .)
    BIT_OR          reduce using rule 71 (term12 -> PLUS term12 .)
    SEMI_COLON      reduce using rule 71 (term12 -> PLUS term12 .)
    NEWLINE         reduce using rule 71 (term12 -> PLUS term12 .)
    def             reduce using rule 71 (term12 -> PLUS term12 .)
    break           reduce using rule 71 (term12 -> PLUS term12 .)
    if              reduce using rule 71 (term12 -> PLUS term12 .)
    while           reduce using rule 71 (term12 -> PLUS term12 .)
    case            reduce using rule 71 (term12 -> PLUS term12 .)
    for             reduce using rule 71 (term12 -> PLUS term12 .)
    return          reduce using rule 71 (term12 -> PLUS term12 .)
    IDENTIFIER      reduce using rule 71 (term12 -> PLUS term12 .)
    nil             reduce using rule 71 (term12 -> PLUS term12 .)
    self            reduce using rule 71 (term12 -> PLUS term12 .)
    GLOBAL          reduce using rule 71 (term12 -> PLUS term12 .)
    AT_THE_RATE     reduce using rule 71 (term12 -> PLUS term12 .)
    OPEN_BRACKET    reduce using rule 71 (term12 -> PLUS term12 .)
    CONSTANT_RESOLUTION reduce using rule 71 (term12 -> PLUS term12 .)
    Array           reduce using rule 71 (term12 -> PLUS term12 .)
    NUMBER          reduce using rule 71 (term12 -> PLUS term12 .)
    FLOAT           reduce using rule 71 (term12 -> PLUS term12 .)
    STRING          reduce using rule 71 (term12 -> PLUS term12 .)
    true            reduce using rule 71 (term12 -> PLUS term12 .)
    false           reduce using rule 71 (term12 -> PLUS term12 .)
    $end            reduce using rule 71 (term12 -> PLUS term12 .)
    end             reduce using rule 71 (term12 -> PLUS term12 .)
    then            reduce using rule 71 (term12 -> PLUS term12 .)
    MAP             reduce using rule 71 (term12 -> PLUS term12 .)
    COMMA           reduce using rule 71 (term12 -> PLUS term12 .)
    do              reduce using rule 71 (term12 -> PLUS term12 .)
    CLOSE_BRACKET   reduce using rule 71 (term12 -> PLUS term12 .)


state 122

    (76) primary -> variable . CONSTANT_RESOLUTION IDENTIFIER
    (85) arraya -> variable . OPEN_SQUARE array_args CLOSE_SQUARE

    CONSTANT_RESOLUTION shift and go to state 103
    OPEN_SQUARE     shift and go to state 102


state 123

    (175) varname -> IDENTIFIER .

    POWER           reduce using rule 175 (varname -> IDENTIFIER .)
    MULTIPLY        reduce using rule 175 (varname -> IDENTIFIER .)
    DIVIDE          reduce using rule 175 (varname -> IDENTIFIER .)
    MODULO          reduce using rule 175 (varname -> IDENTIFIER .)
    PLUS            reduce using rule 175 (varname -> IDENTIFIER .)
    MINUS           reduce using rule 175 (varname -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 175 (varname -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 175 (varname -> IDENTIFIER .)
    BIT_AND         reduce using rule 175 (varname -> IDENTIFIER .)
    BIT_XOR         reduce using rule 175 (varname -> IDENTIFIER .)
    DOUBLE_EQUALS   reduce using rule 175 (varname -> IDENTIFIER .)
    TRIPLE_EQUALS   reduce using rule 175 (varname -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 175 (varname -> IDENTIFIER .)
    EQUAL_TILDE     reduce using rule 175 (varname -> IDENTIFIER .)
    BANG_TILDE      reduce using rule 175 (varname -> IDENTIFIER .)
    COMPARISON      reduce using rule 175 (varname -> IDENTIFIER .)
    LESS            reduce using rule 175 (varname -> IDENTIFIER .)
    LESS_EQUALS     reduce using rule 175 (varname -> IDENTIFIER .)
    GREATER         reduce using rule 175 (varname -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 175 (varname -> IDENTIFIER .)
    INCL_RANGE      reduce using rule 175 (varname -> IDENTIFIER .)
    EXCL_RANGE      reduce using rule 175 (varname -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 175 (varname -> IDENTIFIER .)
    BIT_OR          reduce using rule 175 (varname -> IDENTIFIER .)
    SEMI_COLON      reduce using rule 175 (varname -> IDENTIFIER .)
    NEWLINE         reduce using rule 175 (varname -> IDENTIFIER .)
    def             reduce using rule 175 (varname -> IDENTIFIER .)
    break           reduce using rule 175 (varname -> IDENTIFIER .)
    if              reduce using rule 175 (varname -> IDENTIFIER .)
    while           reduce using rule 175 (varname -> IDENTIFIER .)
    case            reduce using rule 175 (varname -> IDENTIFIER .)
    for             reduce using rule 175 (varname -> IDENTIFIER .)
    return          reduce using rule 175 (varname -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 175 (varname -> IDENTIFIER .)
    nil             reduce using rule 175 (varname -> IDENTIFIER .)
    self            reduce using rule 175 (varname -> IDENTIFIER .)
    GLOBAL          reduce using rule 175 (varname -> IDENTIFIER .)
    AT_THE_RATE     reduce using rule 175 (varname -> IDENTIFIER .)
    OPEN_BRACKET    reduce using rule 175 (varname -> IDENTIFIER .)
    CONSTANT_RESOLUTION reduce using rule 175 (varname -> IDENTIFIER .)
    Array           reduce using rule 175 (varname -> IDENTIFIER .)
    NUMBER          reduce using rule 175 (varname -> IDENTIFIER .)
    FLOAT           reduce using rule 175 (varname -> IDENTIFIER .)
    STRING          reduce using rule 175 (varname -> IDENTIFIER .)
    true            reduce using rule 175 (varname -> IDENTIFIER .)
    false           reduce using rule 175 (varname -> IDENTIFIER .)
    $end            reduce using rule 175 (varname -> IDENTIFIER .)
    end             reduce using rule 175 (varname -> IDENTIFIER .)
    then            reduce using rule 175 (varname -> IDENTIFIER .)
    MAP             reduce using rule 175 (varname -> IDENTIFIER .)
    COMMA           reduce using rule 175 (varname -> IDENTIFIER .)
    do              reduce using rule 175 (varname -> IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 175 (varname -> IDENTIFIER .)
    OPEN_SQUARE     reduce using rule 175 (varname -> IDENTIFIER .)
    CLOSE_SQUARE    reduce using rule 175 (varname -> IDENTIFIER .)


state 124

    (79) primary -> arraya .

    POWER           reduce using rule 79 (primary -> arraya .)
    MULTIPLY        reduce using rule 79 (primary -> arraya .)
    DIVIDE          reduce using rule 79 (primary -> arraya .)
    MODULO          reduce using rule 79 (primary -> arraya .)
    PLUS            reduce using rule 79 (primary -> arraya .)
    MINUS           reduce using rule 79 (primary -> arraya .)
    LEFT_SHIFT      reduce using rule 79 (primary -> arraya .)
    RIGHT_SHIFT     reduce using rule 79 (primary -> arraya .)
    BIT_AND         reduce using rule 79 (primary -> arraya .)
    BIT_XOR         reduce using rule 79 (primary -> arraya .)
    DOUBLE_EQUALS   reduce using rule 79 (primary -> arraya .)
    TRIPLE_EQUALS   reduce using rule 79 (primary -> arraya .)
    NOT_EQUALS      reduce using rule 79 (primary -> arraya .)
    EQUAL_TILDE     reduce using rule 79 (primary -> arraya .)
    BANG_TILDE      reduce using rule 79 (primary -> arraya .)
    COMPARISON      reduce using rule 79 (primary -> arraya .)
    LESS            reduce using rule 79 (primary -> arraya .)
    LESS_EQUALS     reduce using rule 79 (primary -> arraya .)
    GREATER         reduce using rule 79 (primary -> arraya .)
    GREATER_EQUALS  reduce using rule 79 (primary -> arraya .)
    INCL_RANGE      reduce using rule 79 (primary -> arraya .)
    EXCL_RANGE      reduce using rule 79 (primary -> arraya .)
    LOGICAL_OR      reduce using rule 79 (primary -> arraya .)
    BIT_OR          reduce using rule 79 (primary -> arraya .)
    SEMI_COLON      reduce using rule 79 (primary -> arraya .)
    NEWLINE         reduce using rule 79 (primary -> arraya .)
    def             reduce using rule 79 (primary -> arraya .)
    break           reduce using rule 79 (primary -> arraya .)
    if              reduce using rule 79 (primary -> arraya .)
    while           reduce using rule 79 (primary -> arraya .)
    case            reduce using rule 79 (primary -> arraya .)
    for             reduce using rule 79 (primary -> arraya .)
    return          reduce using rule 79 (primary -> arraya .)
    IDENTIFIER      reduce using rule 79 (primary -> arraya .)
    nil             reduce using rule 79 (primary -> arraya .)
    self            reduce using rule 79 (primary -> arraya .)
    GLOBAL          reduce using rule 79 (primary -> arraya .)
    AT_THE_RATE     reduce using rule 79 (primary -> arraya .)
    OPEN_BRACKET    reduce using rule 79 (primary -> arraya .)
    CONSTANT_RESOLUTION reduce using rule 79 (primary -> arraya .)
    Array           reduce using rule 79 (primary -> arraya .)
    NUMBER          reduce using rule 79 (primary -> arraya .)
    FLOAT           reduce using rule 79 (primary -> arraya .)
    STRING          reduce using rule 79 (primary -> arraya .)
    true            reduce using rule 79 (primary -> arraya .)
    false           reduce using rule 79 (primary -> arraya .)
    $end            reduce using rule 79 (primary -> arraya .)
    end             reduce using rule 79 (primary -> arraya .)
    then            reduce using rule 79 (primary -> arraya .)
    MAP             reduce using rule 79 (primary -> arraya .)
    COMMA           reduce using rule 79 (primary -> arraya .)
    do              reduce using rule 79 (primary -> arraya .)
    CLOSE_BRACKET   reduce using rule 79 (primary -> arraya .)
    CLOSE_SQUARE    reduce using rule 79 (primary -> arraya .)


state 125

    (81) primary -> varname .
    (151) variable -> varname .

  ! reduce/reduce conflict for CONSTANT_RESOLUTION resolved using rule 81 (primary -> varname .)
    POWER           reduce using rule 81 (primary -> varname .)
    MULTIPLY        reduce using rule 81 (primary -> varname .)
    DIVIDE          reduce using rule 81 (primary -> varname .)
    MODULO          reduce using rule 81 (primary -> varname .)
    PLUS            reduce using rule 81 (primary -> varname .)
    MINUS           reduce using rule 81 (primary -> varname .)
    LEFT_SHIFT      reduce using rule 81 (primary -> varname .)
    RIGHT_SHIFT     reduce using rule 81 (primary -> varname .)
    BIT_AND         reduce using rule 81 (primary -> varname .)
    BIT_XOR         reduce using rule 81 (primary -> varname .)
    DOUBLE_EQUALS   reduce using rule 81 (primary -> varname .)
    TRIPLE_EQUALS   reduce using rule 81 (primary -> varname .)
    NOT_EQUALS      reduce using rule 81 (primary -> varname .)
    EQUAL_TILDE     reduce using rule 81 (primary -> varname .)
    BANG_TILDE      reduce using rule 81 (primary -> varname .)
    COMPARISON      reduce using rule 81 (primary -> varname .)
    LESS            reduce using rule 81 (primary -> varname .)
    LESS_EQUALS     reduce using rule 81 (primary -> varname .)
    GREATER         reduce using rule 81 (primary -> varname .)
    GREATER_EQUALS  reduce using rule 81 (primary -> varname .)
    INCL_RANGE      reduce using rule 81 (primary -> varname .)
    EXCL_RANGE      reduce using rule 81 (primary -> varname .)
    LOGICAL_OR      reduce using rule 81 (primary -> varname .)
    BIT_OR          reduce using rule 81 (primary -> varname .)
    SEMI_COLON      reduce using rule 81 (primary -> varname .)
    NEWLINE         reduce using rule 81 (primary -> varname .)
    def             reduce using rule 81 (primary -> varname .)
    break           reduce using rule 81 (primary -> varname .)
    if              reduce using rule 81 (primary -> varname .)
    while           reduce using rule 81 (primary -> varname .)
    case            reduce using rule 81 (primary -> varname .)
    for             reduce using rule 81 (primary -> varname .)
    return          reduce using rule 81 (primary -> varname .)
    IDENTIFIER      reduce using rule 81 (primary -> varname .)
    nil             reduce using rule 81 (primary -> varname .)
    self            reduce using rule 81 (primary -> varname .)
    GLOBAL          reduce using rule 81 (primary -> varname .)
    AT_THE_RATE     reduce using rule 81 (primary -> varname .)
    OPEN_BRACKET    reduce using rule 81 (primary -> varname .)
    CONSTANT_RESOLUTION reduce using rule 81 (primary -> varname .)
    Array           reduce using rule 81 (primary -> varname .)
    NUMBER          reduce using rule 81 (primary -> varname .)
    FLOAT           reduce using rule 81 (primary -> varname .)
    STRING          reduce using rule 81 (primary -> varname .)
    true            reduce using rule 81 (primary -> varname .)
    false           reduce using rule 81 (primary -> varname .)
    $end            reduce using rule 81 (primary -> varname .)
    end             reduce using rule 81 (primary -> varname .)
    then            reduce using rule 81 (primary -> varname .)
    MAP             reduce using rule 81 (primary -> varname .)
    COMMA           reduce using rule 81 (primary -> varname .)
    do              reduce using rule 81 (primary -> varname .)
    CLOSE_BRACKET   reduce using rule 81 (primary -> varname .)
    CLOSE_SQUARE    reduce using rule 81 (primary -> varname .)
    OPEN_SQUARE     reduce using rule 151 (variable -> varname .)

  ! CONSTANT_RESOLUTION [ reduce using rule 151 (variable -> varname .) ]


state 126

    (65) term10 -> term10 MULTIPLY . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    nil             shift and go to state 34
    self            shift and go to state 35
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    IDENTIFIER      shift and go to state 123

    term11                         shift and go to state 196
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    variable                       shift and go to state 122
    arrayd                         shift and go to state 51
    arraya                         shift and go to state 124
    literal                        shift and go to state 52
    varname                        shift and go to state 125

state 127

    (66) term10 -> term10 DIVIDE . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    nil             shift and go to state 34
    self            shift and go to state 35
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    IDENTIFIER      shift and go to state 123

    term11                         shift and go to state 197
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    variable                       shift and go to state 122
    arrayd                         shift and go to state 51
    arraya                         shift and go to state 124
    literal                        shift and go to state 52
    varname                        shift and go to state 125

state 128

    (67) term10 -> term10 MODULO . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    nil             shift and go to state 34
    self            shift and go to state 35
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    IDENTIFIER      shift and go to state 123

    term11                         shift and go to state 198
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    variable                       shift and go to state 122
    arrayd                         shift and go to state 51
    arraya                         shift and go to state 124
    literal                        shift and go to state 52
    varname                        shift and go to state 125

state 129

    (69) term11 -> MINUS term11 .

    MULTIPLY        reduce using rule 69 (term11 -> MINUS term11 .)
    DIVIDE          reduce using rule 69 (term11 -> MINUS term11 .)
    MODULO          reduce using rule 69 (term11 -> MINUS term11 .)
    PLUS            reduce using rule 69 (term11 -> MINUS term11 .)
    MINUS           reduce using rule 69 (term11 -> MINUS term11 .)
    LEFT_SHIFT      reduce using rule 69 (term11 -> MINUS term11 .)
    RIGHT_SHIFT     reduce using rule 69 (term11 -> MINUS term11 .)
    BIT_AND         reduce using rule 69 (term11 -> MINUS term11 .)
    BIT_XOR         reduce using rule 69 (term11 -> MINUS term11 .)
    DOUBLE_EQUALS   reduce using rule 69 (term11 -> MINUS term11 .)
    TRIPLE_EQUALS   reduce using rule 69 (term11 -> MINUS term11 .)
    NOT_EQUALS      reduce using rule 69 (term11 -> MINUS term11 .)
    EQUAL_TILDE     reduce using rule 69 (term11 -> MINUS term11 .)
    BANG_TILDE      reduce using rule 69 (term11 -> MINUS term11 .)
    COMPARISON      reduce using rule 69 (term11 -> MINUS term11 .)
    LESS            reduce using rule 69 (term11 -> MINUS term11 .)
    LESS_EQUALS     reduce using rule 69 (term11 -> MINUS term11 .)
    GREATER         reduce using rule 69 (term11 -> MINUS term11 .)
    GREATER_EQUALS  reduce using rule 69 (term11 -> MINUS term11 .)
    INCL_RANGE      reduce using rule 69 (term11 -> MINUS term11 .)
    EXCL_RANGE      reduce using rule 69 (term11 -> MINUS term11 .)
    LOGICAL_OR      reduce using rule 69 (term11 -> MINUS term11 .)
    BIT_OR          reduce using rule 69 (term11 -> MINUS term11 .)
    SEMI_COLON      reduce using rule 69 (term11 -> MINUS term11 .)
    NEWLINE         reduce using rule 69 (term11 -> MINUS term11 .)
    def             reduce using rule 69 (term11 -> MINUS term11 .)
    break           reduce using rule 69 (term11 -> MINUS term11 .)
    if              reduce using rule 69 (term11 -> MINUS term11 .)
    while           reduce using rule 69 (term11 -> MINUS term11 .)
    case            reduce using rule 69 (term11 -> MINUS term11 .)
    for             reduce using rule 69 (term11 -> MINUS term11 .)
    return          reduce using rule 69 (term11 -> MINUS term11 .)
    IDENTIFIER      reduce using rule 69 (term11 -> MINUS term11 .)
    nil             reduce using rule 69 (term11 -> MINUS term11 .)
    self            reduce using rule 69 (term11 -> MINUS term11 .)
    GLOBAL          reduce using rule 69 (term11 -> MINUS term11 .)
    AT_THE_RATE     reduce using rule 69 (term11 -> MINUS term11 .)
    OPEN_BRACKET    reduce using rule 69 (term11 -> MINUS term11 .)
    CONSTANT_RESOLUTION reduce using rule 69 (term11 -> MINUS term11 .)
    Array           reduce using rule 69 (term11 -> MINUS term11 .)
    NUMBER          reduce using rule 69 (term11 -> MINUS term11 .)
    FLOAT           reduce using rule 69 (term11 -> MINUS term11 .)
    STRING          reduce using rule 69 (term11 -> MINUS term11 .)
    true            reduce using rule 69 (term11 -> MINUS term11 .)
    false           reduce using rule 69 (term11 -> MINUS term11 .)
    $end            reduce using rule 69 (term11 -> MINUS term11 .)
    end             reduce using rule 69 (term11 -> MINUS term11 .)
    then            reduce using rule 69 (term11 -> MINUS term11 .)
    MAP             reduce using rule 69 (term11 -> MINUS term11 .)
    COMMA           reduce using rule 69 (term11 -> MINUS term11 .)
    do              reduce using rule 69 (term11 -> MINUS term11 .)
    CLOSE_BRACKET   reduce using rule 69 (term11 -> MINUS term11 .)


state 130

    (73) term13 -> primary POWER . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    nil             shift and go to state 34
    self            shift and go to state 35
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    IDENTIFIER      shift and go to state 123

    primary                        shift and go to state 49
    term13                         shift and go to state 199
    variable                       shift and go to state 122
    arrayd                         shift and go to state 51
    arraya                         shift and go to state 124
    literal                        shift and go to state 52
    varname                        shift and go to state 125

state 131

    (77) primary -> CONSTANT_RESOLUTION IDENTIFIER .

    POWER           reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    MULTIPLY        reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    DIVIDE          reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    MODULO          reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    PLUS            reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    MINUS           reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    BIT_AND         reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    BIT_XOR         reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    DOUBLE_EQUALS   reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    TRIPLE_EQUALS   reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    NOT_EQUALS      reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    EQUAL_TILDE     reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    BANG_TILDE      reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    COMPARISON      reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    LESS            reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    LESS_EQUALS     reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    GREATER         reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    INCL_RANGE      reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    EXCL_RANGE      reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    LOGICAL_OR      reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    BIT_OR          reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    SEMI_COLON      reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    NEWLINE         reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    def             reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    break           reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    if              reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    while           reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    case            reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    for             reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    return          reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    IDENTIFIER      reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    nil             reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    self            reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    GLOBAL          reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    AT_THE_RATE     reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    OPEN_BRACKET    reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    CONSTANT_RESOLUTION reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    Array           reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    NUMBER          reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    FLOAT           reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    STRING          reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    true            reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    false           reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    $end            reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    end             reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    then            reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    MAP             reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    COMMA           reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    do              reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)
    CLOSE_SQUARE    reduce using rule 77 (primary -> CONSTANT_RESOLUTION IDENTIFIER .)


state 132

    (82) arrayd -> Array OPEN_BRACKET . array_size CLOSE_BRACKET
    (83) array_size -> . primary COMMA array_size
    (84) array_size -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    nil             shift and go to state 34
    self            shift and go to state 35
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    IDENTIFIER      shift and go to state 123

    array_size                     shift and go to state 200
    primary                        shift and go to state 201
    variable                       shift and go to state 122
    arrayd                         shift and go to state 51
    arraya                         shift and go to state 124
    literal                        shift and go to state 52
    varname                        shift and go to state 125

state 133

    (2) multcompstmt -> newline stmt1 multcompstmt .

    $end            reduce using rule 2 (multcompstmt -> newline stmt1 multcompstmt .)
    end             reduce using rule 2 (multcompstmt -> newline stmt1 multcompstmt .)


state 134

    (133) arglist -> IDENTIFIER . multarglist COMMA MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER
    (134) arglist -> IDENTIFIER . multarglist COMMA MULTIPLY COMMA BIT_AND IDENTIFIER
    (135) arglist -> IDENTIFIER . multarglist COMMA BIT_AND IDENTIFIER
    (136) arglist -> IDENTIFIER . multarglist COMMA MULTIPLY IDENTIFIER
    (137) arglist -> IDENTIFIER . multarglist COMMA MULTIPLY
    (138) arglist -> IDENTIFIER . multarglist
    (143) multarglist -> . COMMA IDENTIFIER multarglist
    (144) multarglist -> . empty
    (178) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 203
    SEMI_COLON      reduce using rule 178 (empty -> .)
    NEWLINE         reduce using rule 178 (empty -> .)
    CLOSE_BRACKET   reduce using rule 178 (empty -> .)

  ! COMMA           [ reduce using rule 178 (empty -> .) ]

    multarglist                    shift and go to state 202
    empty                          shift and go to state 204

state 135

    (7) stmt -> def IDENTIFIER argdecl . compstmt end
    (1) compstmt -> . multcompstmt
    (2) multcompstmt -> . newline stmt1 multcompstmt
    (3) multcompstmt -> . stmt1 multcompstmt
    (4) multcompstmt -> . newline
    (5) multcompstmt -> . empty
    (176) newline -> . SEMI_COLON
    (177) newline -> . NEWLINE
    (6) stmt1 -> . stmt
    (178) empty -> .
    (7) stmt -> . def IDENTIFIER argdecl compstmt end
    (8) stmt -> . break
    (9) stmt -> . expr
    (12) expr -> . if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
    (13) expr -> . if expr1 pthen M_1 multstmt end M_1
    (14) expr -> . while M_1 expr1 pdo M_1 multstmt end M_1
    (15) expr -> . case multstmt M_1 multcase end M_1
    (16) expr -> . for mlhs in expr1 pdo compstmt end
    (17) expr -> . expr1
    (19) expr1 -> . return callargs
    (20) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (21) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (22) expr1 -> . return
    (23) expr1 -> . expr2
    (24) expr2 -> . call
    (25) expr2 -> . arg
    (26) call -> . function
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (27) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (28) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    SEMI_COLON      shift and go to state 6
    NEWLINE         shift and go to state 7
    end             reduce using rule 178 (empty -> .)
    def             shift and go to state 9
    break           shift and go to state 11
    if              shift and go to state 13
    while           shift and go to state 15
    case            shift and go to state 16
    for             shift and go to state 17
    return          shift and go to state 19
    IDENTIFIER      shift and go to state 10
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    compstmt                       shift and go to state 205
    multcompstmt                   shift and go to state 2
    newline                        shift and go to state 3
    stmt1                          shift and go to state 4
    empty                          shift and go to state 5
    stmt                           shift and go to state 8
    expr                           shift and go to state 12
    expr1                          shift and go to state 14
    mlhs                           shift and go to state 18
    expr2                          shift and go to state 21
    call                           shift and go to state 22
    arg                            shift and go to state 23
    function                       shift and go to state 24
    term0                          shift and go to state 25
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 136

    (131) argdecl -> OPEN_BRACKET . arglist CLOSE_BRACKET
    (133) arglist -> . IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER
    (134) arglist -> . IDENTIFIER multarglist COMMA MULTIPLY COMMA BIT_AND IDENTIFIER
    (135) arglist -> . IDENTIFIER multarglist COMMA BIT_AND IDENTIFIER
    (136) arglist -> . IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER
    (137) arglist -> . IDENTIFIER multarglist COMMA MULTIPLY
    (138) arglist -> . IDENTIFIER multarglist
    (139) arglist -> . MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER
    (140) arglist -> . MULTIPLY IDENTIFIER
    (141) arglist -> . BIT_AND IDENTIFIER
    (142) arglist -> . empty
    (178) empty -> .

    IDENTIFIER      shift and go to state 134
    MULTIPLY        shift and go to state 138
    BIT_AND         shift and go to state 139
    CLOSE_BRACKET   reduce using rule 178 (empty -> .)

    arglist                        shift and go to state 206
    empty                          shift and go to state 140

state 137

    (132) argdecl -> arglist . newline
    (176) newline -> . SEMI_COLON
    (177) newline -> . NEWLINE

    SEMI_COLON      shift and go to state 6
    NEWLINE         shift and go to state 7

    newline                        shift and go to state 207

state 138

    (139) arglist -> MULTIPLY . IDENTIFIER COMMA BIT_AND IDENTIFIER
    (140) arglist -> MULTIPLY . IDENTIFIER

    IDENTIFIER      shift and go to state 208


state 139

    (141) arglist -> BIT_AND . IDENTIFIER

    IDENTIFIER      shift and go to state 209


state 140

    (142) arglist -> empty .

    SEMI_COLON      reduce using rule 142 (arglist -> empty .)
    NEWLINE         reduce using rule 142 (arglist -> empty .)
    CLOSE_BRACKET   reduce using rule 142 (arglist -> empty .)


state 141

    (27) function -> IDENTIFIER OPEN_BRACKET callargs . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 210


state 142

    (28) function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .

    SEMI_COLON      reduce using rule 28 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    NEWLINE         reduce using rule 28 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    def             reduce using rule 28 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    break           reduce using rule 28 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    if              reduce using rule 28 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    while           reduce using rule 28 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    case            reduce using rule 28 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    for             reduce using rule 28 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    return          reduce using rule 28 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 28 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    nil             reduce using rule 28 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    self            reduce using rule 28 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    GLOBAL          reduce using rule 28 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 28 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    MINUS           reduce using rule 28 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    PLUS            reduce using rule 28 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 28 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    CONSTANT_RESOLUTION reduce using rule 28 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    Array           reduce using rule 28 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    NUMBER          reduce using rule 28 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    FLOAT           reduce using rule 28 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    STRING          reduce using rule 28 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    true            reduce using rule 28 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    false           reduce using rule 28 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    $end            reduce using rule 28 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    end             reduce using rule 28 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    then            reduce using rule 28 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 28 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    do              reduce using rule 28 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)


state 143

    (12) expr -> if expr1 pthen . M_1 multstmt else newline M_1 multstmt end M_1
    (13) expr -> if expr1 pthen . M_1 multstmt end M_1
    (18) M_1 -> . empty
    (178) empty -> .

    def             reduce using rule 178 (empty -> .)
    break           reduce using rule 178 (empty -> .)
    if              reduce using rule 178 (empty -> .)
    while           reduce using rule 178 (empty -> .)
    case            reduce using rule 178 (empty -> .)
    for             reduce using rule 178 (empty -> .)
    return          reduce using rule 178 (empty -> .)
    IDENTIFIER      reduce using rule 178 (empty -> .)
    nil             reduce using rule 178 (empty -> .)
    self            reduce using rule 178 (empty -> .)
    GLOBAL          reduce using rule 178 (empty -> .)
    AT_THE_RATE     reduce using rule 178 (empty -> .)
    MINUS           reduce using rule 178 (empty -> .)
    PLUS            reduce using rule 178 (empty -> .)
    OPEN_BRACKET    reduce using rule 178 (empty -> .)
    CONSTANT_RESOLUTION reduce using rule 178 (empty -> .)
    Array           reduce using rule 178 (empty -> .)
    NUMBER          reduce using rule 178 (empty -> .)
    FLOAT           reduce using rule 178 (empty -> .)
    STRING          reduce using rule 178 (empty -> .)
    true            reduce using rule 178 (empty -> .)
    false           reduce using rule 178 (empty -> .)
    else            reduce using rule 178 (empty -> .)
    end             reduce using rule 178 (empty -> .)

    M_1                            shift and go to state 211
    empty                          shift and go to state 65

state 144

    (154) pthen -> newline .
    (156) pthen -> newline . then

    def             reduce using rule 154 (pthen -> newline .)
    break           reduce using rule 154 (pthen -> newline .)
    if              reduce using rule 154 (pthen -> newline .)
    while           reduce using rule 154 (pthen -> newline .)
    case            reduce using rule 154 (pthen -> newline .)
    for             reduce using rule 154 (pthen -> newline .)
    return          reduce using rule 154 (pthen -> newline .)
    IDENTIFIER      reduce using rule 154 (pthen -> newline .)
    nil             reduce using rule 154 (pthen -> newline .)
    self            reduce using rule 154 (pthen -> newline .)
    GLOBAL          reduce using rule 154 (pthen -> newline .)
    AT_THE_RATE     reduce using rule 154 (pthen -> newline .)
    MINUS           reduce using rule 154 (pthen -> newline .)
    PLUS            reduce using rule 154 (pthen -> newline .)
    OPEN_BRACKET    reduce using rule 154 (pthen -> newline .)
    CONSTANT_RESOLUTION reduce using rule 154 (pthen -> newline .)
    Array           reduce using rule 154 (pthen -> newline .)
    NUMBER          reduce using rule 154 (pthen -> newline .)
    FLOAT           reduce using rule 154 (pthen -> newline .)
    STRING          reduce using rule 154 (pthen -> newline .)
    true            reduce using rule 154 (pthen -> newline .)
    false           reduce using rule 154 (pthen -> newline .)
    else            reduce using rule 154 (pthen -> newline .)
    end             reduce using rule 154 (pthen -> newline .)
    when            reduce using rule 154 (pthen -> newline .)
    then            shift and go to state 212


state 145

    (155) pthen -> then .

    def             reduce using rule 155 (pthen -> then .)
    break           reduce using rule 155 (pthen -> then .)
    if              reduce using rule 155 (pthen -> then .)
    while           reduce using rule 155 (pthen -> then .)
    case            reduce using rule 155 (pthen -> then .)
    for             reduce using rule 155 (pthen -> then .)
    return          reduce using rule 155 (pthen -> then .)
    IDENTIFIER      reduce using rule 155 (pthen -> then .)
    nil             reduce using rule 155 (pthen -> then .)
    self            reduce using rule 155 (pthen -> then .)
    GLOBAL          reduce using rule 155 (pthen -> then .)
    AT_THE_RATE     reduce using rule 155 (pthen -> then .)
    MINUS           reduce using rule 155 (pthen -> then .)
    PLUS            reduce using rule 155 (pthen -> then .)
    OPEN_BRACKET    reduce using rule 155 (pthen -> then .)
    CONSTANT_RESOLUTION reduce using rule 155 (pthen -> then .)
    Array           reduce using rule 155 (pthen -> then .)
    NUMBER          reduce using rule 155 (pthen -> then .)
    FLOAT           reduce using rule 155 (pthen -> then .)
    STRING          reduce using rule 155 (pthen -> then .)
    true            reduce using rule 155 (pthen -> then .)
    false           reduce using rule 155 (pthen -> then .)
    else            reduce using rule 155 (pthen -> then .)
    end             reduce using rule 155 (pthen -> then .)
    when            reduce using rule 155 (pthen -> then .)


state 146

    (14) expr -> while M_1 expr1 . pdo M_1 multstmt end M_1
    (157) pdo -> . newline
    (158) pdo -> . do
    (159) pdo -> . newline do
    (176) newline -> . SEMI_COLON
    (177) newline -> . NEWLINE

    do              shift and go to state 215
    SEMI_COLON      shift and go to state 6
    NEWLINE         shift and go to state 7

    pdo                            shift and go to state 213
    newline                        shift and go to state 214

state 147

    (15) expr -> case multstmt M_1 . multcase end M_1
    (88) multcase -> . when whenargs pthen M_1 multstmt multcase M_1
    (89) multcase -> . when whenargs pthen M_1 multstmt M_1

    when            shift and go to state 217

    multcase                       shift and go to state 216

state 148

    (10) multstmt -> stmt newline . multstmt
    (10) multstmt -> . stmt newline multstmt
    (11) multstmt -> . empty
    (7) stmt -> . def IDENTIFIER argdecl compstmt end
    (8) stmt -> . break
    (9) stmt -> . expr
    (178) empty -> .
    (12) expr -> . if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
    (13) expr -> . if expr1 pthen M_1 multstmt end M_1
    (14) expr -> . while M_1 expr1 pdo M_1 multstmt end M_1
    (15) expr -> . case multstmt M_1 multcase end M_1
    (16) expr -> . for mlhs in expr1 pdo compstmt end
    (17) expr -> . expr1
    (19) expr1 -> . return callargs
    (20) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (21) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (22) expr1 -> . return
    (23) expr1 -> . expr2
    (24) expr2 -> . call
    (25) expr2 -> . arg
    (26) call -> . function
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (27) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (28) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    def             shift and go to state 9
    break           shift and go to state 11
    when            reduce using rule 178 (empty -> .)
    else            reduce using rule 178 (empty -> .)
    end             reduce using rule 178 (empty -> .)
    if              shift and go to state 13
    while           shift and go to state 15
    case            shift and go to state 16
    for             shift and go to state 17
    return          shift and go to state 19
    IDENTIFIER      shift and go to state 10
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    stmt                           shift and go to state 67
    multstmt                       shift and go to state 218
    empty                          shift and go to state 68
    expr                           shift and go to state 12
    expr1                          shift and go to state 14
    mlhs                           shift and go to state 18
    expr2                          shift and go to state 21
    call                           shift and go to state 22
    arg                            shift and go to state 23
    function                       shift and go to state 24
    term0                          shift and go to state 25
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 149

    (16) expr -> for mlhs in . expr1 pdo compstmt end
    (19) expr1 -> . return callargs
    (20) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (21) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (22) expr1 -> . return
    (23) expr1 -> . expr2
    (24) expr2 -> . call
    (25) expr2 -> . arg
    (26) call -> . function
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (27) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (28) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    return          shift and go to state 19
    IDENTIFIER      shift and go to state 10
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    mlhs                           shift and go to state 18
    expr1                          shift and go to state 219
    expr2                          shift and go to state 21
    call                           shift and go to state 22
    arg                            shift and go to state 23
    function                       shift and go to state 24
    term0                          shift and go to state 25
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 150

    (31) term0 -> mlhs EQUALS IDENTIFIER . OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> mlhs EQUALS IDENTIFIER . OPEN_BRACKET callargs CLOSE_BRACKET
    (101) mlhsitem -> IDENTIFIER .
    (175) varname -> IDENTIFIER .

  ! shift/reduce conflict for OPEN_BRACKET resolved as shift
    OPEN_BRACKET    shift and go to state 220
    EQUALS          reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    MODULO_EQUALS   reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    DIVIDE_EQUALS   reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    MINUS_EQUALS    reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    PLUS_EQUALS     reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    OR_EQUALS       reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    AND_EQUALS      reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    XOR_EQUALS      reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    RIGHT_SHIFT_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    LEFT_SHIFT_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    MULTIPLY_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    LOGICAL_AND_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    LOGICAL_OR_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    POWER_EQUALS    reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    OPEN_SQUARE     reduce using rule 175 (varname -> IDENTIFIER .)
    CONSTANT_RESOLUTION reduce using rule 175 (varname -> IDENTIFIER .)
    POWER           reduce using rule 175 (varname -> IDENTIFIER .)
    MULTIPLY        reduce using rule 175 (varname -> IDENTIFIER .)
    DIVIDE          reduce using rule 175 (varname -> IDENTIFIER .)
    MODULO          reduce using rule 175 (varname -> IDENTIFIER .)
    PLUS            reduce using rule 175 (varname -> IDENTIFIER .)
    MINUS           reduce using rule 175 (varname -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 175 (varname -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 175 (varname -> IDENTIFIER .)
    BIT_AND         reduce using rule 175 (varname -> IDENTIFIER .)
    BIT_XOR         reduce using rule 175 (varname -> IDENTIFIER .)
    DOUBLE_EQUALS   reduce using rule 175 (varname -> IDENTIFIER .)
    TRIPLE_EQUALS   reduce using rule 175 (varname -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 175 (varname -> IDENTIFIER .)
    EQUAL_TILDE     reduce using rule 175 (varname -> IDENTIFIER .)
    BANG_TILDE      reduce using rule 175 (varname -> IDENTIFIER .)
    COMPARISON      reduce using rule 175 (varname -> IDENTIFIER .)
    LESS            reduce using rule 175 (varname -> IDENTIFIER .)
    LESS_EQUALS     reduce using rule 175 (varname -> IDENTIFIER .)
    GREATER         reduce using rule 175 (varname -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 175 (varname -> IDENTIFIER .)
    INCL_RANGE      reduce using rule 175 (varname -> IDENTIFIER .)
    EXCL_RANGE      reduce using rule 175 (varname -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 175 (varname -> IDENTIFIER .)
    BIT_OR          reduce using rule 175 (varname -> IDENTIFIER .)
    SEMI_COLON      reduce using rule 175 (varname -> IDENTIFIER .)
    NEWLINE         reduce using rule 175 (varname -> IDENTIFIER .)
    def             reduce using rule 175 (varname -> IDENTIFIER .)
    break           reduce using rule 175 (varname -> IDENTIFIER .)
    if              reduce using rule 175 (varname -> IDENTIFIER .)
    while           reduce using rule 175 (varname -> IDENTIFIER .)
    case            reduce using rule 175 (varname -> IDENTIFIER .)
    for             reduce using rule 175 (varname -> IDENTIFIER .)
    return          reduce using rule 175 (varname -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 175 (varname -> IDENTIFIER .)
    nil             reduce using rule 175 (varname -> IDENTIFIER .)
    self            reduce using rule 175 (varname -> IDENTIFIER .)
    GLOBAL          reduce using rule 175 (varname -> IDENTIFIER .)
    AT_THE_RATE     reduce using rule 175 (varname -> IDENTIFIER .)
    Array           reduce using rule 175 (varname -> IDENTIFIER .)
    NUMBER          reduce using rule 175 (varname -> IDENTIFIER .)
    FLOAT           reduce using rule 175 (varname -> IDENTIFIER .)
    STRING          reduce using rule 175 (varname -> IDENTIFIER .)
    true            reduce using rule 175 (varname -> IDENTIFIER .)
    false           reduce using rule 175 (varname -> IDENTIFIER .)
    $end            reduce using rule 175 (varname -> IDENTIFIER .)
    end             reduce using rule 175 (varname -> IDENTIFIER .)
    then            reduce using rule 175 (varname -> IDENTIFIER .)
    MAP             reduce using rule 175 (varname -> IDENTIFIER .)
    COMMA           reduce using rule 175 (varname -> IDENTIFIER .)
    do              reduce using rule 175 (varname -> IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 175 (varname -> IDENTIFIER .)

  ! OPEN_BRACKET    [ reduce using rule 175 (varname -> IDENTIFIER .) ]


state 151

    (35) term1 -> mlhs EQUALS mrhs .

    BIT_OR          reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    SEMI_COLON      reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    NEWLINE         reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    def             reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    break           reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    if              reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    while           reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    case            reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    for             reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    return          reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    IDENTIFIER      reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    nil             reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    self            reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    GLOBAL          reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    AT_THE_RATE     reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    MINUS           reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    PLUS            reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    OPEN_BRACKET    reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    CONSTANT_RESOLUTION reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    Array           reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    NUMBER          reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    FLOAT           reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    STRING          reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    true            reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    false           reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    $end            reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    end             reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    then            reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    MAP             reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    COMMA           reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    do              reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)
    CLOSE_BRACKET   reduce using rule 35 (term1 -> mlhs EQUALS mrhs .)


state 152

    (111) mrhs -> term2 .
    (37) term1 -> term2 .

  ! reduce/reduce conflict for BIT_OR resolved using rule 37 (term1 -> term2 .)
  ! reduce/reduce conflict for COMMA resolved using rule 37 (term1 -> term2 .)
    SEMI_COLON      reduce using rule 111 (mrhs -> term2 .)
    NEWLINE         reduce using rule 111 (mrhs -> term2 .)
    def             reduce using rule 111 (mrhs -> term2 .)
    break           reduce using rule 111 (mrhs -> term2 .)
    if              reduce using rule 111 (mrhs -> term2 .)
    while           reduce using rule 111 (mrhs -> term2 .)
    case            reduce using rule 111 (mrhs -> term2 .)
    for             reduce using rule 111 (mrhs -> term2 .)
    return          reduce using rule 111 (mrhs -> term2 .)
    IDENTIFIER      reduce using rule 111 (mrhs -> term2 .)
    nil             reduce using rule 111 (mrhs -> term2 .)
    self            reduce using rule 111 (mrhs -> term2 .)
    GLOBAL          reduce using rule 111 (mrhs -> term2 .)
    AT_THE_RATE     reduce using rule 111 (mrhs -> term2 .)
    MINUS           reduce using rule 111 (mrhs -> term2 .)
    PLUS            reduce using rule 111 (mrhs -> term2 .)
    OPEN_BRACKET    reduce using rule 111 (mrhs -> term2 .)
    CONSTANT_RESOLUTION reduce using rule 111 (mrhs -> term2 .)
    Array           reduce using rule 111 (mrhs -> term2 .)
    NUMBER          reduce using rule 111 (mrhs -> term2 .)
    FLOAT           reduce using rule 111 (mrhs -> term2 .)
    STRING          reduce using rule 111 (mrhs -> term2 .)
    true            reduce using rule 111 (mrhs -> term2 .)
    false           reduce using rule 111 (mrhs -> term2 .)
    $end            reduce using rule 111 (mrhs -> term2 .)
    end             reduce using rule 111 (mrhs -> term2 .)
    then            reduce using rule 111 (mrhs -> term2 .)
    MAP             reduce using rule 111 (mrhs -> term2 .)
    do              reduce using rule 111 (mrhs -> term2 .)
    CLOSE_BRACKET   reduce using rule 111 (mrhs -> term2 .)
    BIT_OR          reduce using rule 37 (term1 -> term2 .)
    COMMA           reduce using rule 37 (term1 -> term2 .)

  ! BIT_OR          [ reduce using rule 111 (mrhs -> term2 .) ]
  ! COMMA           [ reduce using rule 111 (mrhs -> term2 .) ]


state 153

    (112) mrhs -> args . COMMA MULTIPLY arg

    COMMA           shift and go to state 221


state 154

    (113) mrhs -> MULTIPLY . arg
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    IDENTIFIER      shift and go to state 70
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    arg                            shift and go to state 222
    term0                          shift and go to state 25
    mlhs                           shift and go to state 18
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 155

    (128) args -> arg . multargs
    (29) arg -> arg . BIT_OR term0
    (129) multargs -> . COMMA arg multargs
    (130) multargs -> . empty
    (178) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    BIT_OR          shift and go to state 98
    COMMA           shift and go to state 166
    then            reduce using rule 178 (empty -> .)
    SEMI_COLON      reduce using rule 178 (empty -> .)
    NEWLINE         reduce using rule 178 (empty -> .)

  ! COMMA           [ reduce using rule 178 (empty -> .) ]

    multargs                       shift and go to state 164
    empty                          shift and go to state 167

state 156

    (33) term0 -> mlhs opasgn IDENTIFIER . OPEN_BRACKET callargs CLOSE_BRACKET
    (101) mlhsitem -> IDENTIFIER .
    (175) varname -> IDENTIFIER .

  ! shift/reduce conflict for OPEN_BRACKET resolved as shift
    OPEN_BRACKET    shift and go to state 223
    EQUALS          reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    MODULO_EQUALS   reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    DIVIDE_EQUALS   reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    MINUS_EQUALS    reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    PLUS_EQUALS     reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    OR_EQUALS       reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    AND_EQUALS      reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    XOR_EQUALS      reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    RIGHT_SHIFT_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    LEFT_SHIFT_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    MULTIPLY_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    LOGICAL_AND_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    LOGICAL_OR_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    POWER_EQUALS    reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    OPEN_SQUARE     reduce using rule 175 (varname -> IDENTIFIER .)
    CONSTANT_RESOLUTION reduce using rule 175 (varname -> IDENTIFIER .)
    POWER           reduce using rule 175 (varname -> IDENTIFIER .)
    MULTIPLY        reduce using rule 175 (varname -> IDENTIFIER .)
    DIVIDE          reduce using rule 175 (varname -> IDENTIFIER .)
    MODULO          reduce using rule 175 (varname -> IDENTIFIER .)
    PLUS            reduce using rule 175 (varname -> IDENTIFIER .)
    MINUS           reduce using rule 175 (varname -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 175 (varname -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 175 (varname -> IDENTIFIER .)
    BIT_AND         reduce using rule 175 (varname -> IDENTIFIER .)
    BIT_XOR         reduce using rule 175 (varname -> IDENTIFIER .)
    DOUBLE_EQUALS   reduce using rule 175 (varname -> IDENTIFIER .)
    TRIPLE_EQUALS   reduce using rule 175 (varname -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 175 (varname -> IDENTIFIER .)
    EQUAL_TILDE     reduce using rule 175 (varname -> IDENTIFIER .)
    BANG_TILDE      reduce using rule 175 (varname -> IDENTIFIER .)
    COMPARISON      reduce using rule 175 (varname -> IDENTIFIER .)
    LESS            reduce using rule 175 (varname -> IDENTIFIER .)
    LESS_EQUALS     reduce using rule 175 (varname -> IDENTIFIER .)
    GREATER         reduce using rule 175 (varname -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 175 (varname -> IDENTIFIER .)
    INCL_RANGE      reduce using rule 175 (varname -> IDENTIFIER .)
    EXCL_RANGE      reduce using rule 175 (varname -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 175 (varname -> IDENTIFIER .)
    BIT_OR          reduce using rule 175 (varname -> IDENTIFIER .)
    SEMI_COLON      reduce using rule 175 (varname -> IDENTIFIER .)
    NEWLINE         reduce using rule 175 (varname -> IDENTIFIER .)
    def             reduce using rule 175 (varname -> IDENTIFIER .)
    break           reduce using rule 175 (varname -> IDENTIFIER .)
    if              reduce using rule 175 (varname -> IDENTIFIER .)
    while           reduce using rule 175 (varname -> IDENTIFIER .)
    case            reduce using rule 175 (varname -> IDENTIFIER .)
    for             reduce using rule 175 (varname -> IDENTIFIER .)
    return          reduce using rule 175 (varname -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 175 (varname -> IDENTIFIER .)
    nil             reduce using rule 175 (varname -> IDENTIFIER .)
    self            reduce using rule 175 (varname -> IDENTIFIER .)
    GLOBAL          reduce using rule 175 (varname -> IDENTIFIER .)
    AT_THE_RATE     reduce using rule 175 (varname -> IDENTIFIER .)
    Array           reduce using rule 175 (varname -> IDENTIFIER .)
    NUMBER          reduce using rule 175 (varname -> IDENTIFIER .)
    FLOAT           reduce using rule 175 (varname -> IDENTIFIER .)
    STRING          reduce using rule 175 (varname -> IDENTIFIER .)
    true            reduce using rule 175 (varname -> IDENTIFIER .)
    false           reduce using rule 175 (varname -> IDENTIFIER .)
    $end            reduce using rule 175 (varname -> IDENTIFIER .)
    end             reduce using rule 175 (varname -> IDENTIFIER .)
    then            reduce using rule 175 (varname -> IDENTIFIER .)
    MAP             reduce using rule 175 (varname -> IDENTIFIER .)
    COMMA           reduce using rule 175 (varname -> IDENTIFIER .)
    do              reduce using rule 175 (varname -> IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 175 (varname -> IDENTIFIER .)

  ! OPEN_BRACKET    [ reduce using rule 175 (varname -> IDENTIFIER .) ]


state 157

    (36) term1 -> mlhs opasgn mrhs .

    BIT_OR          reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    SEMI_COLON      reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    NEWLINE         reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    def             reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    break           reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    if              reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    while           reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    case            reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    for             reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    return          reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    IDENTIFIER      reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    nil             reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    self            reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    GLOBAL          reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    AT_THE_RATE     reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    MINUS           reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    PLUS            reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    OPEN_BRACKET    reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    CONSTANT_RESOLUTION reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    Array           reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    NUMBER          reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    FLOAT           reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    STRING          reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    true            reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    false           reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    $end            reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    end             reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    then            reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    MAP             reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    COMMA           reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    do              reduce using rule 36 (term1 -> mlhs opasgn mrhs .)
    CLOSE_BRACKET   reduce using rule 36 (term1 -> mlhs opasgn mrhs .)


state 158

    (20) expr1 -> return OPEN_BRACKET callargs . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 224


state 159

    (21) expr1 -> return OPEN_BRACKET CLOSE_BRACKET .

    SEMI_COLON      reduce using rule 21 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    NEWLINE         reduce using rule 21 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    def             reduce using rule 21 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    break           reduce using rule 21 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    if              reduce using rule 21 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    while           reduce using rule 21 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    case            reduce using rule 21 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    for             reduce using rule 21 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    return          reduce using rule 21 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 21 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    nil             reduce using rule 21 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    self            reduce using rule 21 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    GLOBAL          reduce using rule 21 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 21 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    MINUS           reduce using rule 21 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    PLUS            reduce using rule 21 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 21 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    CONSTANT_RESOLUTION reduce using rule 21 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    Array           reduce using rule 21 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    NUMBER          reduce using rule 21 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    FLOAT           reduce using rule 21 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    STRING          reduce using rule 21 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    true            reduce using rule 21 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    false           reduce using rule 21 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    $end            reduce using rule 21 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    end             reduce using rule 21 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    then            reduce using rule 21 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)
    do              reduce using rule 21 (expr1 -> return OPEN_BRACKET CLOSE_BRACKET .)


state 160

    (25) expr2 -> arg .
    (128) args -> arg . multargs
    (29) arg -> arg . BIT_OR term0
    (150) assoc -> arg . MAP arg
    (129) multargs -> . COMMA arg multargs
    (130) multargs -> . empty
    (178) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for CLOSE_BRACKET resolved using rule 25 (expr2 -> arg .)
    CLOSE_BRACKET   reduce using rule 25 (expr2 -> arg .)
    BIT_OR          shift and go to state 98
    MAP             shift and go to state 165
    COMMA           shift and go to state 166

  ! COMMA           [ reduce using rule 178 (empty -> .) ]
  ! CLOSE_BRACKET   [ reduce using rule 178 (empty -> .) ]

    multargs                       shift and go to state 164
    empty                          shift and go to state 167

state 161

    (115) callargs -> args COMMA . assocs COMMA MULTIPLY arg COMMA BIT_AND arg
    (116) callargs -> args COMMA . MULTIPLY arg COMMA BIT_AND arg
    (117) callargs -> args COMMA . assocs COMMA BIT_AND arg
    (118) callargs -> args COMMA . assocs COMMA MULTIPLY arg
    (119) callargs -> args COMMA . assocs
    (120) callargs -> args COMMA . MULTIPLY arg
    (121) callargs -> args COMMA . BIT_AND arg
    (147) assocs -> . assoc multassocs
    (150) assoc -> . arg MAP arg
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    MULTIPLY        shift and go to state 226
    BIT_AND         shift and go to state 228
    IDENTIFIER      shift and go to state 70
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    assocs                         shift and go to state 225
    arg                            shift and go to state 227
    assoc                          shift and go to state 96
    term0                          shift and go to state 25
    mlhs                           shift and go to state 18
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 162

    (122) callargs -> assocs COMMA . MULTIPLY arg COMMA BIT_AND arg
    (123) callargs -> assocs COMMA . MULTIPLY arg
    (124) callargs -> assocs COMMA . BIT_AND arg

    MULTIPLY        shift and go to state 229
    BIT_AND         shift and go to state 230


state 163

    (126) callargs -> MULTIPLY arg . COMMA BIT_AND arg
    (29) arg -> arg . BIT_OR term0

    COMMA           shift and go to state 231
    BIT_OR          shift and go to state 98


state 164

    (128) args -> arg multargs .

    COMMA           reduce using rule 128 (args -> arg multargs .)
    SEMI_COLON      reduce using rule 128 (args -> arg multargs .)
    NEWLINE         reduce using rule 128 (args -> arg multargs .)
    def             reduce using rule 128 (args -> arg multargs .)
    break           reduce using rule 128 (args -> arg multargs .)
    if              reduce using rule 128 (args -> arg multargs .)
    while           reduce using rule 128 (args -> arg multargs .)
    case            reduce using rule 128 (args -> arg multargs .)
    for             reduce using rule 128 (args -> arg multargs .)
    return          reduce using rule 128 (args -> arg multargs .)
    IDENTIFIER      reduce using rule 128 (args -> arg multargs .)
    nil             reduce using rule 128 (args -> arg multargs .)
    self            reduce using rule 128 (args -> arg multargs .)
    GLOBAL          reduce using rule 128 (args -> arg multargs .)
    AT_THE_RATE     reduce using rule 128 (args -> arg multargs .)
    MINUS           reduce using rule 128 (args -> arg multargs .)
    PLUS            reduce using rule 128 (args -> arg multargs .)
    OPEN_BRACKET    reduce using rule 128 (args -> arg multargs .)
    CONSTANT_RESOLUTION reduce using rule 128 (args -> arg multargs .)
    Array           reduce using rule 128 (args -> arg multargs .)
    NUMBER          reduce using rule 128 (args -> arg multargs .)
    FLOAT           reduce using rule 128 (args -> arg multargs .)
    STRING          reduce using rule 128 (args -> arg multargs .)
    true            reduce using rule 128 (args -> arg multargs .)
    false           reduce using rule 128 (args -> arg multargs .)
    $end            reduce using rule 128 (args -> arg multargs .)
    end             reduce using rule 128 (args -> arg multargs .)
    then            reduce using rule 128 (args -> arg multargs .)
    do              reduce using rule 128 (args -> arg multargs .)
    CLOSE_BRACKET   reduce using rule 128 (args -> arg multargs .)


state 165

    (150) assoc -> arg MAP . arg
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    IDENTIFIER      shift and go to state 70
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    arg                            shift and go to state 232
    term0                          shift and go to state 25
    mlhs                           shift and go to state 18
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 166

    (129) multargs -> COMMA . arg multargs
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    IDENTIFIER      shift and go to state 70
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    arg                            shift and go to state 233
    term0                          shift and go to state 25
    mlhs                           shift and go to state 18
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 167

    (130) multargs -> empty .

    COMMA           reduce using rule 130 (multargs -> empty .)
    SEMI_COLON      reduce using rule 130 (multargs -> empty .)
    NEWLINE         reduce using rule 130 (multargs -> empty .)
    def             reduce using rule 130 (multargs -> empty .)
    break           reduce using rule 130 (multargs -> empty .)
    if              reduce using rule 130 (multargs -> empty .)
    while           reduce using rule 130 (multargs -> empty .)
    case            reduce using rule 130 (multargs -> empty .)
    for             reduce using rule 130 (multargs -> empty .)
    return          reduce using rule 130 (multargs -> empty .)
    IDENTIFIER      reduce using rule 130 (multargs -> empty .)
    nil             reduce using rule 130 (multargs -> empty .)
    self            reduce using rule 130 (multargs -> empty .)
    GLOBAL          reduce using rule 130 (multargs -> empty .)
    AT_THE_RATE     reduce using rule 130 (multargs -> empty .)
    MINUS           reduce using rule 130 (multargs -> empty .)
    PLUS            reduce using rule 130 (multargs -> empty .)
    OPEN_BRACKET    reduce using rule 130 (multargs -> empty .)
    CONSTANT_RESOLUTION reduce using rule 130 (multargs -> empty .)
    Array           reduce using rule 130 (multargs -> empty .)
    NUMBER          reduce using rule 130 (multargs -> empty .)
    FLOAT           reduce using rule 130 (multargs -> empty .)
    STRING          reduce using rule 130 (multargs -> empty .)
    true            reduce using rule 130 (multargs -> empty .)
    false           reduce using rule 130 (multargs -> empty .)
    $end            reduce using rule 130 (multargs -> empty .)
    end             reduce using rule 130 (multargs -> empty .)
    then            reduce using rule 130 (multargs -> empty .)
    do              reduce using rule 130 (multargs -> empty .)
    CLOSE_BRACKET   reduce using rule 130 (multargs -> empty .)


state 168

    (127) callargs -> BIT_AND arg .
    (29) arg -> arg . BIT_OR term0

    SEMI_COLON      reduce using rule 127 (callargs -> BIT_AND arg .)
    NEWLINE         reduce using rule 127 (callargs -> BIT_AND arg .)
    def             reduce using rule 127 (callargs -> BIT_AND arg .)
    break           reduce using rule 127 (callargs -> BIT_AND arg .)
    if              reduce using rule 127 (callargs -> BIT_AND arg .)
    while           reduce using rule 127 (callargs -> BIT_AND arg .)
    case            reduce using rule 127 (callargs -> BIT_AND arg .)
    for             reduce using rule 127 (callargs -> BIT_AND arg .)
    return          reduce using rule 127 (callargs -> BIT_AND arg .)
    IDENTIFIER      reduce using rule 127 (callargs -> BIT_AND arg .)
    nil             reduce using rule 127 (callargs -> BIT_AND arg .)
    self            reduce using rule 127 (callargs -> BIT_AND arg .)
    GLOBAL          reduce using rule 127 (callargs -> BIT_AND arg .)
    AT_THE_RATE     reduce using rule 127 (callargs -> BIT_AND arg .)
    MINUS           reduce using rule 127 (callargs -> BIT_AND arg .)
    PLUS            reduce using rule 127 (callargs -> BIT_AND arg .)
    OPEN_BRACKET    reduce using rule 127 (callargs -> BIT_AND arg .)
    CONSTANT_RESOLUTION reduce using rule 127 (callargs -> BIT_AND arg .)
    Array           reduce using rule 127 (callargs -> BIT_AND arg .)
    NUMBER          reduce using rule 127 (callargs -> BIT_AND arg .)
    FLOAT           reduce using rule 127 (callargs -> BIT_AND arg .)
    STRING          reduce using rule 127 (callargs -> BIT_AND arg .)
    true            reduce using rule 127 (callargs -> BIT_AND arg .)
    false           reduce using rule 127 (callargs -> BIT_AND arg .)
    $end            reduce using rule 127 (callargs -> BIT_AND arg .)
    end             reduce using rule 127 (callargs -> BIT_AND arg .)
    then            reduce using rule 127 (callargs -> BIT_AND arg .)
    do              reduce using rule 127 (callargs -> BIT_AND arg .)
    CLOSE_BRACKET   reduce using rule 127 (callargs -> BIT_AND arg .)
    BIT_OR          shift and go to state 98


state 169

    (147) assocs -> assoc multassocs .

    COMMA           reduce using rule 147 (assocs -> assoc multassocs .)
    SEMI_COLON      reduce using rule 147 (assocs -> assoc multassocs .)
    NEWLINE         reduce using rule 147 (assocs -> assoc multassocs .)
    def             reduce using rule 147 (assocs -> assoc multassocs .)
    break           reduce using rule 147 (assocs -> assoc multassocs .)
    if              reduce using rule 147 (assocs -> assoc multassocs .)
    while           reduce using rule 147 (assocs -> assoc multassocs .)
    case            reduce using rule 147 (assocs -> assoc multassocs .)
    for             reduce using rule 147 (assocs -> assoc multassocs .)
    return          reduce using rule 147 (assocs -> assoc multassocs .)
    IDENTIFIER      reduce using rule 147 (assocs -> assoc multassocs .)
    nil             reduce using rule 147 (assocs -> assoc multassocs .)
    self            reduce using rule 147 (assocs -> assoc multassocs .)
    GLOBAL          reduce using rule 147 (assocs -> assoc multassocs .)
    AT_THE_RATE     reduce using rule 147 (assocs -> assoc multassocs .)
    MINUS           reduce using rule 147 (assocs -> assoc multassocs .)
    PLUS            reduce using rule 147 (assocs -> assoc multassocs .)
    OPEN_BRACKET    reduce using rule 147 (assocs -> assoc multassocs .)
    CONSTANT_RESOLUTION reduce using rule 147 (assocs -> assoc multassocs .)
    Array           reduce using rule 147 (assocs -> assoc multassocs .)
    NUMBER          reduce using rule 147 (assocs -> assoc multassocs .)
    FLOAT           reduce using rule 147 (assocs -> assoc multassocs .)
    STRING          reduce using rule 147 (assocs -> assoc multassocs .)
    true            reduce using rule 147 (assocs -> assoc multassocs .)
    false           reduce using rule 147 (assocs -> assoc multassocs .)
    $end            reduce using rule 147 (assocs -> assoc multassocs .)
    end             reduce using rule 147 (assocs -> assoc multassocs .)
    then            reduce using rule 147 (assocs -> assoc multassocs .)
    do              reduce using rule 147 (assocs -> assoc multassocs .)
    CLOSE_BRACKET   reduce using rule 147 (assocs -> assoc multassocs .)


state 170

    (148) multassocs -> COMMA . assoc multassocs
    (150) assoc -> . arg MAP arg
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    IDENTIFIER      shift and go to state 70
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    assoc                          shift and go to state 234
    arg                            shift and go to state 227
    term0                          shift and go to state 25
    mlhs                           shift and go to state 18
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 171

    (149) multassocs -> empty .

    COMMA           reduce using rule 149 (multassocs -> empty .)
    SEMI_COLON      reduce using rule 149 (multassocs -> empty .)
    NEWLINE         reduce using rule 149 (multassocs -> empty .)
    def             reduce using rule 149 (multassocs -> empty .)
    break           reduce using rule 149 (multassocs -> empty .)
    if              reduce using rule 149 (multassocs -> empty .)
    while           reduce using rule 149 (multassocs -> empty .)
    case            reduce using rule 149 (multassocs -> empty .)
    for             reduce using rule 149 (multassocs -> empty .)
    return          reduce using rule 149 (multassocs -> empty .)
    IDENTIFIER      reduce using rule 149 (multassocs -> empty .)
    nil             reduce using rule 149 (multassocs -> empty .)
    self            reduce using rule 149 (multassocs -> empty .)
    GLOBAL          reduce using rule 149 (multassocs -> empty .)
    AT_THE_RATE     reduce using rule 149 (multassocs -> empty .)
    MINUS           reduce using rule 149 (multassocs -> empty .)
    PLUS            reduce using rule 149 (multassocs -> empty .)
    OPEN_BRACKET    reduce using rule 149 (multassocs -> empty .)
    CONSTANT_RESOLUTION reduce using rule 149 (multassocs -> empty .)
    Array           reduce using rule 149 (multassocs -> empty .)
    NUMBER          reduce using rule 149 (multassocs -> empty .)
    FLOAT           reduce using rule 149 (multassocs -> empty .)
    STRING          reduce using rule 149 (multassocs -> empty .)
    true            reduce using rule 149 (multassocs -> empty .)
    false           reduce using rule 149 (multassocs -> empty .)
    $end            reduce using rule 149 (multassocs -> empty .)
    end             reduce using rule 149 (multassocs -> empty .)
    then            reduce using rule 149 (multassocs -> empty .)
    do              reduce using rule 149 (multassocs -> empty .)
    CLOSE_BRACKET   reduce using rule 149 (multassocs -> empty .)


state 172

    (75) primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .

    POWER           reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    MULTIPLY        reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    DIVIDE          reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    MODULO          reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    PLUS            reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    MINUS           reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    LEFT_SHIFT      reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    RIGHT_SHIFT     reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    BIT_AND         reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    BIT_XOR         reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    DOUBLE_EQUALS   reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    TRIPLE_EQUALS   reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    NOT_EQUALS      reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    EQUAL_TILDE     reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    BANG_TILDE      reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    COMPARISON      reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    LESS            reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    LESS_EQUALS     reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    GREATER         reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    GREATER_EQUALS  reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    INCL_RANGE      reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    EXCL_RANGE      reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    LOGICAL_OR      reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    BIT_OR          reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    SEMI_COLON      reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    NEWLINE         reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    def             reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    break           reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    if              reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    while           reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    case            reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    for             reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    return          reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    nil             reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    self            reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    GLOBAL          reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    CONSTANT_RESOLUTION reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    Array           reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    NUMBER          reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    FLOAT           reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    STRING          reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    true            reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    false           reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    $end            reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    end             reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    then            reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    MAP             reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    COMMA           reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    do              reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    CLOSE_SQUARE    reduce using rule 75 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)


state 173

    (29) arg -> arg BIT_OR term0 .

    BIT_OR          reduce using rule 29 (arg -> arg BIT_OR term0 .)
    SEMI_COLON      reduce using rule 29 (arg -> arg BIT_OR term0 .)
    NEWLINE         reduce using rule 29 (arg -> arg BIT_OR term0 .)
    def             reduce using rule 29 (arg -> arg BIT_OR term0 .)
    break           reduce using rule 29 (arg -> arg BIT_OR term0 .)
    if              reduce using rule 29 (arg -> arg BIT_OR term0 .)
    while           reduce using rule 29 (arg -> arg BIT_OR term0 .)
    case            reduce using rule 29 (arg -> arg BIT_OR term0 .)
    for             reduce using rule 29 (arg -> arg BIT_OR term0 .)
    return          reduce using rule 29 (arg -> arg BIT_OR term0 .)
    IDENTIFIER      reduce using rule 29 (arg -> arg BIT_OR term0 .)
    nil             reduce using rule 29 (arg -> arg BIT_OR term0 .)
    self            reduce using rule 29 (arg -> arg BIT_OR term0 .)
    GLOBAL          reduce using rule 29 (arg -> arg BIT_OR term0 .)
    AT_THE_RATE     reduce using rule 29 (arg -> arg BIT_OR term0 .)
    MINUS           reduce using rule 29 (arg -> arg BIT_OR term0 .)
    PLUS            reduce using rule 29 (arg -> arg BIT_OR term0 .)
    OPEN_BRACKET    reduce using rule 29 (arg -> arg BIT_OR term0 .)
    CONSTANT_RESOLUTION reduce using rule 29 (arg -> arg BIT_OR term0 .)
    Array           reduce using rule 29 (arg -> arg BIT_OR term0 .)
    NUMBER          reduce using rule 29 (arg -> arg BIT_OR term0 .)
    FLOAT           reduce using rule 29 (arg -> arg BIT_OR term0 .)
    STRING          reduce using rule 29 (arg -> arg BIT_OR term0 .)
    true            reduce using rule 29 (arg -> arg BIT_OR term0 .)
    false           reduce using rule 29 (arg -> arg BIT_OR term0 .)
    $end            reduce using rule 29 (arg -> arg BIT_OR term0 .)
    end             reduce using rule 29 (arg -> arg BIT_OR term0 .)
    then            reduce using rule 29 (arg -> arg BIT_OR term0 .)
    MAP             reduce using rule 29 (arg -> arg BIT_OR term0 .)
    COMMA           reduce using rule 29 (arg -> arg BIT_OR term0 .)
    do              reduce using rule 29 (arg -> arg BIT_OR term0 .)
    CLOSE_BRACKET   reduce using rule 29 (arg -> arg BIT_OR term0 .)


state 174

    (38) term2 -> term3 INCL_RANGE term3 .
    (41) term3 -> term3 . LOGICAL_OR term4

    BIT_OR          reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    SEMI_COLON      reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    NEWLINE         reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    def             reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    break           reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    if              reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    while           reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    case            reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    for             reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    return          reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    IDENTIFIER      reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    nil             reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    self            reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    GLOBAL          reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    AT_THE_RATE     reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    MINUS           reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    PLUS            reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    OPEN_BRACKET    reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    CONSTANT_RESOLUTION reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    Array           reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    NUMBER          reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    FLOAT           reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    STRING          reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    true            reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    false           reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    $end            reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    end             reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    then            reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    MAP             reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    COMMA           reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    do              reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    CLOSE_BRACKET   reduce using rule 38 (term2 -> term3 INCL_RANGE term3 .)
    LOGICAL_OR      shift and go to state 101


state 175

    (39) term2 -> term3 EXCL_RANGE term3 .
    (41) term3 -> term3 . LOGICAL_OR term4

    BIT_OR          reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    SEMI_COLON      reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    NEWLINE         reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    def             reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    break           reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    if              reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    while           reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    case            reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    for             reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    return          reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    IDENTIFIER      reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    nil             reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    self            reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    GLOBAL          reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    AT_THE_RATE     reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    MINUS           reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    PLUS            reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    OPEN_BRACKET    reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    CONSTANT_RESOLUTION reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    Array           reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    NUMBER          reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    FLOAT           reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    STRING          reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    true            reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    false           reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    $end            reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    end             reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    then            reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    MAP             reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    COMMA           reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    do              reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    CLOSE_BRACKET   reduce using rule 39 (term2 -> term3 EXCL_RANGE term3 .)
    LOGICAL_OR      shift and go to state 101


state 176

    (41) term3 -> term3 LOGICAL_OR term4 .

    INCL_RANGE      reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    EXCL_RANGE      reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    LOGICAL_OR      reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    BIT_OR          reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    SEMI_COLON      reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    NEWLINE         reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    def             reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    break           reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    if              reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    while           reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    case            reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    for             reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    return          reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    IDENTIFIER      reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    nil             reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    self            reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    GLOBAL          reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    AT_THE_RATE     reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    MINUS           reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    PLUS            reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    OPEN_BRACKET    reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    CONSTANT_RESOLUTION reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    Array           reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    NUMBER          reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    FLOAT           reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    STRING          reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    true            reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    false           reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    $end            reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    end             reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    then            reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    MAP             reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    COMMA           reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    do              reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)
    CLOSE_BRACKET   reduce using rule 41 (term3 -> term3 LOGICAL_OR term4 .)


state 177

    (85) arraya -> variable OPEN_SQUARE array_args . CLOSE_SQUARE

    CLOSE_SQUARE    shift and go to state 235


state 178

    (86) array_args -> primary . COMMA array_args
    (87) array_args -> primary .

    COMMA           shift and go to state 236
    CLOSE_SQUARE    reduce using rule 87 (array_args -> primary .)


state 179

    (76) primary -> variable CONSTANT_RESOLUTION IDENTIFIER .

    POWER           reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    MULTIPLY        reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    DIVIDE          reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    MODULO          reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    PLUS            reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    MINUS           reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    BIT_AND         reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    BIT_XOR         reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    DOUBLE_EQUALS   reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    TRIPLE_EQUALS   reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    NOT_EQUALS      reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    EQUAL_TILDE     reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    BANG_TILDE      reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    COMPARISON      reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    LESS            reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    LESS_EQUALS     reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    GREATER         reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    INCL_RANGE      reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    EXCL_RANGE      reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    LOGICAL_OR      reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    BIT_OR          reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    SEMI_COLON      reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    NEWLINE         reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    def             reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    break           reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    if              reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    while           reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    case            reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    for             reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    return          reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    IDENTIFIER      reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    nil             reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    self            reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    GLOBAL          reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    AT_THE_RATE     reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    OPEN_BRACKET    reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    CONSTANT_RESOLUTION reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    Array           reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    NUMBER          reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    FLOAT           reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    STRING          reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    true            reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    false           reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    $end            reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    end             reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    then            reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    MAP             reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    COMMA           reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    do              reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)
    CLOSE_SQUARE    reduce using rule 76 (primary -> variable CONSTANT_RESOLUTION IDENTIFIER .)


state 180

    (43) term4 -> term5 DOUBLE_EQUALS term5 .
    (50) term5 -> term5 . LESS term6
    (51) term5 -> term5 . LESS_EQUALS term6
    (52) term5 -> term5 . GREATER term6
    (53) term5 -> term5 . GREATER_EQUALS term6

    INCL_RANGE      reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    EXCL_RANGE      reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    LOGICAL_OR      reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    BIT_OR          reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    SEMI_COLON      reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    NEWLINE         reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    def             reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    break           reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    if              reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    while           reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    case            reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    for             reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    return          reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    IDENTIFIER      reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    nil             reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    self            reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    GLOBAL          reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    AT_THE_RATE     reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    MINUS           reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    PLUS            reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    OPEN_BRACKET    reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    CONSTANT_RESOLUTION reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    Array           reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    NUMBER          reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    FLOAT           reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    STRING          reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    true            reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    false           reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    $end            reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    end             reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    then            reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    MAP             reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    COMMA           reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    do              reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    CLOSE_BRACKET   reduce using rule 43 (term4 -> term5 DOUBLE_EQUALS term5 .)
    LESS            shift and go to state 110
    LESS_EQUALS     shift and go to state 111
    GREATER         shift and go to state 112
    GREATER_EQUALS  shift and go to state 113


state 181

    (44) term4 -> term5 TRIPLE_EQUALS term5 .
    (50) term5 -> term5 . LESS term6
    (51) term5 -> term5 . LESS_EQUALS term6
    (52) term5 -> term5 . GREATER term6
    (53) term5 -> term5 . GREATER_EQUALS term6

    INCL_RANGE      reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    EXCL_RANGE      reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    LOGICAL_OR      reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    BIT_OR          reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    SEMI_COLON      reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    NEWLINE         reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    def             reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    break           reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    if              reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    while           reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    case            reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    for             reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    return          reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    IDENTIFIER      reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    nil             reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    self            reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    GLOBAL          reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    AT_THE_RATE     reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    MINUS           reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    PLUS            reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    OPEN_BRACKET    reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    CONSTANT_RESOLUTION reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    Array           reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    NUMBER          reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    FLOAT           reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    STRING          reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    true            reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    false           reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    $end            reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    end             reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    then            reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    MAP             reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    COMMA           reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    do              reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    CLOSE_BRACKET   reduce using rule 44 (term4 -> term5 TRIPLE_EQUALS term5 .)
    LESS            shift and go to state 110
    LESS_EQUALS     shift and go to state 111
    GREATER         shift and go to state 112
    GREATER_EQUALS  shift and go to state 113


state 182

    (45) term4 -> term5 NOT_EQUALS term5 .
    (50) term5 -> term5 . LESS term6
    (51) term5 -> term5 . LESS_EQUALS term6
    (52) term5 -> term5 . GREATER term6
    (53) term5 -> term5 . GREATER_EQUALS term6

    INCL_RANGE      reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    EXCL_RANGE      reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    LOGICAL_OR      reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    BIT_OR          reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    SEMI_COLON      reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    NEWLINE         reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    def             reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    break           reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    if              reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    while           reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    case            reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    for             reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    return          reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    IDENTIFIER      reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    nil             reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    self            reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    GLOBAL          reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    AT_THE_RATE     reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    MINUS           reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    PLUS            reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    OPEN_BRACKET    reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    CONSTANT_RESOLUTION reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    Array           reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    NUMBER          reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    FLOAT           reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    STRING          reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    true            reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    false           reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    $end            reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    end             reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    then            reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    MAP             reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    COMMA           reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    do              reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    CLOSE_BRACKET   reduce using rule 45 (term4 -> term5 NOT_EQUALS term5 .)
    LESS            shift and go to state 110
    LESS_EQUALS     shift and go to state 111
    GREATER         shift and go to state 112
    GREATER_EQUALS  shift and go to state 113


state 183

    (46) term4 -> term5 EQUAL_TILDE term5 .
    (50) term5 -> term5 . LESS term6
    (51) term5 -> term5 . LESS_EQUALS term6
    (52) term5 -> term5 . GREATER term6
    (53) term5 -> term5 . GREATER_EQUALS term6

    INCL_RANGE      reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    EXCL_RANGE      reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    LOGICAL_OR      reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    BIT_OR          reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    SEMI_COLON      reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    NEWLINE         reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    def             reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    break           reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    if              reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    while           reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    case            reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    for             reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    return          reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    IDENTIFIER      reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    nil             reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    self            reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    GLOBAL          reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    AT_THE_RATE     reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    MINUS           reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    PLUS            reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    OPEN_BRACKET    reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    CONSTANT_RESOLUTION reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    Array           reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    NUMBER          reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    FLOAT           reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    STRING          reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    true            reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    false           reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    $end            reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    end             reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    then            reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    MAP             reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    COMMA           reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    do              reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    CLOSE_BRACKET   reduce using rule 46 (term4 -> term5 EQUAL_TILDE term5 .)
    LESS            shift and go to state 110
    LESS_EQUALS     shift and go to state 111
    GREATER         shift and go to state 112
    GREATER_EQUALS  shift and go to state 113


state 184

    (47) term4 -> term5 BANG_TILDE term5 .
    (50) term5 -> term5 . LESS term6
    (51) term5 -> term5 . LESS_EQUALS term6
    (52) term5 -> term5 . GREATER term6
    (53) term5 -> term5 . GREATER_EQUALS term6

    INCL_RANGE      reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    EXCL_RANGE      reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    LOGICAL_OR      reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    BIT_OR          reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    SEMI_COLON      reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    NEWLINE         reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    def             reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    break           reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    if              reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    while           reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    case            reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    for             reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    return          reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    IDENTIFIER      reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    nil             reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    self            reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    GLOBAL          reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    AT_THE_RATE     reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    MINUS           reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    PLUS            reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    OPEN_BRACKET    reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    CONSTANT_RESOLUTION reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    Array           reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    NUMBER          reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    FLOAT           reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    STRING          reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    true            reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    false           reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    $end            reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    end             reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    then            reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    MAP             reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    COMMA           reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    do              reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    CLOSE_BRACKET   reduce using rule 47 (term4 -> term5 BANG_TILDE term5 .)
    LESS            shift and go to state 110
    LESS_EQUALS     shift and go to state 111
    GREATER         shift and go to state 112
    GREATER_EQUALS  shift and go to state 113


state 185

    (48) term4 -> term5 COMPARISON term5 .
    (50) term5 -> term5 . LESS term6
    (51) term5 -> term5 . LESS_EQUALS term6
    (52) term5 -> term5 . GREATER term6
    (53) term5 -> term5 . GREATER_EQUALS term6

    INCL_RANGE      reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    EXCL_RANGE      reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    LOGICAL_OR      reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    BIT_OR          reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    SEMI_COLON      reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    NEWLINE         reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    def             reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    break           reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    if              reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    while           reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    case            reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    for             reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    return          reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    IDENTIFIER      reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    nil             reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    self            reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    GLOBAL          reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    AT_THE_RATE     reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    MINUS           reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    PLUS            reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    OPEN_BRACKET    reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    CONSTANT_RESOLUTION reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    Array           reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    NUMBER          reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    FLOAT           reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    STRING          reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    true            reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    false           reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    $end            reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    end             reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    then            reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    MAP             reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    COMMA           reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    do              reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    CLOSE_BRACKET   reduce using rule 48 (term4 -> term5 COMPARISON term5 .)
    LESS            shift and go to state 110
    LESS_EQUALS     shift and go to state 111
    GREATER         shift and go to state 112
    GREATER_EQUALS  shift and go to state 113


state 186

    (50) term5 -> term5 LESS term6 .
    (55) term6 -> term6 . BIT_XOR term7

    DOUBLE_EQUALS   reduce using rule 50 (term5 -> term5 LESS term6 .)
    TRIPLE_EQUALS   reduce using rule 50 (term5 -> term5 LESS term6 .)
    NOT_EQUALS      reduce using rule 50 (term5 -> term5 LESS term6 .)
    EQUAL_TILDE     reduce using rule 50 (term5 -> term5 LESS term6 .)
    BANG_TILDE      reduce using rule 50 (term5 -> term5 LESS term6 .)
    COMPARISON      reduce using rule 50 (term5 -> term5 LESS term6 .)
    LESS            reduce using rule 50 (term5 -> term5 LESS term6 .)
    LESS_EQUALS     reduce using rule 50 (term5 -> term5 LESS term6 .)
    GREATER         reduce using rule 50 (term5 -> term5 LESS term6 .)
    GREATER_EQUALS  reduce using rule 50 (term5 -> term5 LESS term6 .)
    INCL_RANGE      reduce using rule 50 (term5 -> term5 LESS term6 .)
    EXCL_RANGE      reduce using rule 50 (term5 -> term5 LESS term6 .)
    LOGICAL_OR      reduce using rule 50 (term5 -> term5 LESS term6 .)
    BIT_OR          reduce using rule 50 (term5 -> term5 LESS term6 .)
    SEMI_COLON      reduce using rule 50 (term5 -> term5 LESS term6 .)
    NEWLINE         reduce using rule 50 (term5 -> term5 LESS term6 .)
    def             reduce using rule 50 (term5 -> term5 LESS term6 .)
    break           reduce using rule 50 (term5 -> term5 LESS term6 .)
    if              reduce using rule 50 (term5 -> term5 LESS term6 .)
    while           reduce using rule 50 (term5 -> term5 LESS term6 .)
    case            reduce using rule 50 (term5 -> term5 LESS term6 .)
    for             reduce using rule 50 (term5 -> term5 LESS term6 .)
    return          reduce using rule 50 (term5 -> term5 LESS term6 .)
    IDENTIFIER      reduce using rule 50 (term5 -> term5 LESS term6 .)
    nil             reduce using rule 50 (term5 -> term5 LESS term6 .)
    self            reduce using rule 50 (term5 -> term5 LESS term6 .)
    GLOBAL          reduce using rule 50 (term5 -> term5 LESS term6 .)
    AT_THE_RATE     reduce using rule 50 (term5 -> term5 LESS term6 .)
    MINUS           reduce using rule 50 (term5 -> term5 LESS term6 .)
    PLUS            reduce using rule 50 (term5 -> term5 LESS term6 .)
    OPEN_BRACKET    reduce using rule 50 (term5 -> term5 LESS term6 .)
    CONSTANT_RESOLUTION reduce using rule 50 (term5 -> term5 LESS term6 .)
    Array           reduce using rule 50 (term5 -> term5 LESS term6 .)
    NUMBER          reduce using rule 50 (term5 -> term5 LESS term6 .)
    FLOAT           reduce using rule 50 (term5 -> term5 LESS term6 .)
    STRING          reduce using rule 50 (term5 -> term5 LESS term6 .)
    true            reduce using rule 50 (term5 -> term5 LESS term6 .)
    false           reduce using rule 50 (term5 -> term5 LESS term6 .)
    $end            reduce using rule 50 (term5 -> term5 LESS term6 .)
    end             reduce using rule 50 (term5 -> term5 LESS term6 .)
    then            reduce using rule 50 (term5 -> term5 LESS term6 .)
    MAP             reduce using rule 50 (term5 -> term5 LESS term6 .)
    COMMA           reduce using rule 50 (term5 -> term5 LESS term6 .)
    do              reduce using rule 50 (term5 -> term5 LESS term6 .)
    CLOSE_BRACKET   reduce using rule 50 (term5 -> term5 LESS term6 .)
    BIT_XOR         shift and go to state 115


state 187

    (51) term5 -> term5 LESS_EQUALS term6 .
    (55) term6 -> term6 . BIT_XOR term7

    DOUBLE_EQUALS   reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    TRIPLE_EQUALS   reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    NOT_EQUALS      reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    EQUAL_TILDE     reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    BANG_TILDE      reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    COMPARISON      reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    LESS            reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    LESS_EQUALS     reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    GREATER         reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    GREATER_EQUALS  reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    INCL_RANGE      reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    EXCL_RANGE      reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    LOGICAL_OR      reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    BIT_OR          reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    SEMI_COLON      reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    NEWLINE         reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    def             reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    break           reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    if              reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    while           reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    case            reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    for             reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    return          reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    IDENTIFIER      reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    nil             reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    self            reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    GLOBAL          reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    AT_THE_RATE     reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    MINUS           reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    PLUS            reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    OPEN_BRACKET    reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    CONSTANT_RESOLUTION reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    Array           reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    NUMBER          reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    FLOAT           reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    STRING          reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    true            reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    false           reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    $end            reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    end             reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    then            reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    MAP             reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    COMMA           reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    do              reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    CLOSE_BRACKET   reduce using rule 51 (term5 -> term5 LESS_EQUALS term6 .)
    BIT_XOR         shift and go to state 115


state 188

    (52) term5 -> term5 GREATER term6 .
    (55) term6 -> term6 . BIT_XOR term7

    DOUBLE_EQUALS   reduce using rule 52 (term5 -> term5 GREATER term6 .)
    TRIPLE_EQUALS   reduce using rule 52 (term5 -> term5 GREATER term6 .)
    NOT_EQUALS      reduce using rule 52 (term5 -> term5 GREATER term6 .)
    EQUAL_TILDE     reduce using rule 52 (term5 -> term5 GREATER term6 .)
    BANG_TILDE      reduce using rule 52 (term5 -> term5 GREATER term6 .)
    COMPARISON      reduce using rule 52 (term5 -> term5 GREATER term6 .)
    LESS            reduce using rule 52 (term5 -> term5 GREATER term6 .)
    LESS_EQUALS     reduce using rule 52 (term5 -> term5 GREATER term6 .)
    GREATER         reduce using rule 52 (term5 -> term5 GREATER term6 .)
    GREATER_EQUALS  reduce using rule 52 (term5 -> term5 GREATER term6 .)
    INCL_RANGE      reduce using rule 52 (term5 -> term5 GREATER term6 .)
    EXCL_RANGE      reduce using rule 52 (term5 -> term5 GREATER term6 .)
    LOGICAL_OR      reduce using rule 52 (term5 -> term5 GREATER term6 .)
    BIT_OR          reduce using rule 52 (term5 -> term5 GREATER term6 .)
    SEMI_COLON      reduce using rule 52 (term5 -> term5 GREATER term6 .)
    NEWLINE         reduce using rule 52 (term5 -> term5 GREATER term6 .)
    def             reduce using rule 52 (term5 -> term5 GREATER term6 .)
    break           reduce using rule 52 (term5 -> term5 GREATER term6 .)
    if              reduce using rule 52 (term5 -> term5 GREATER term6 .)
    while           reduce using rule 52 (term5 -> term5 GREATER term6 .)
    case            reduce using rule 52 (term5 -> term5 GREATER term6 .)
    for             reduce using rule 52 (term5 -> term5 GREATER term6 .)
    return          reduce using rule 52 (term5 -> term5 GREATER term6 .)
    IDENTIFIER      reduce using rule 52 (term5 -> term5 GREATER term6 .)
    nil             reduce using rule 52 (term5 -> term5 GREATER term6 .)
    self            reduce using rule 52 (term5 -> term5 GREATER term6 .)
    GLOBAL          reduce using rule 52 (term5 -> term5 GREATER term6 .)
    AT_THE_RATE     reduce using rule 52 (term5 -> term5 GREATER term6 .)
    MINUS           reduce using rule 52 (term5 -> term5 GREATER term6 .)
    PLUS            reduce using rule 52 (term5 -> term5 GREATER term6 .)
    OPEN_BRACKET    reduce using rule 52 (term5 -> term5 GREATER term6 .)
    CONSTANT_RESOLUTION reduce using rule 52 (term5 -> term5 GREATER term6 .)
    Array           reduce using rule 52 (term5 -> term5 GREATER term6 .)
    NUMBER          reduce using rule 52 (term5 -> term5 GREATER term6 .)
    FLOAT           reduce using rule 52 (term5 -> term5 GREATER term6 .)
    STRING          reduce using rule 52 (term5 -> term5 GREATER term6 .)
    true            reduce using rule 52 (term5 -> term5 GREATER term6 .)
    false           reduce using rule 52 (term5 -> term5 GREATER term6 .)
    $end            reduce using rule 52 (term5 -> term5 GREATER term6 .)
    end             reduce using rule 52 (term5 -> term5 GREATER term6 .)
    then            reduce using rule 52 (term5 -> term5 GREATER term6 .)
    MAP             reduce using rule 52 (term5 -> term5 GREATER term6 .)
    COMMA           reduce using rule 52 (term5 -> term5 GREATER term6 .)
    do              reduce using rule 52 (term5 -> term5 GREATER term6 .)
    CLOSE_BRACKET   reduce using rule 52 (term5 -> term5 GREATER term6 .)
    BIT_XOR         shift and go to state 115


state 189

    (53) term5 -> term5 GREATER_EQUALS term6 .
    (55) term6 -> term6 . BIT_XOR term7

    DOUBLE_EQUALS   reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    TRIPLE_EQUALS   reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    NOT_EQUALS      reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    EQUAL_TILDE     reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    BANG_TILDE      reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    COMPARISON      reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    LESS            reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    LESS_EQUALS     reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    GREATER         reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    GREATER_EQUALS  reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    INCL_RANGE      reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    EXCL_RANGE      reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    LOGICAL_OR      reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    BIT_OR          reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    SEMI_COLON      reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    NEWLINE         reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    def             reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    break           reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    if              reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    while           reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    case            reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    for             reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    return          reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    IDENTIFIER      reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    nil             reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    self            reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    GLOBAL          reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    AT_THE_RATE     reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    MINUS           reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    PLUS            reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    OPEN_BRACKET    reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    CONSTANT_RESOLUTION reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    Array           reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    NUMBER          reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    FLOAT           reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    STRING          reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    true            reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    false           reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    $end            reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    end             reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    then            reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    MAP             reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    COMMA           reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    do              reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    CLOSE_BRACKET   reduce using rule 53 (term5 -> term5 GREATER_EQUALS term6 .)
    BIT_XOR         shift and go to state 115


state 190

    (55) term6 -> term6 BIT_XOR term7 .
    (57) term7 -> term7 . BIT_AND term8

    BIT_XOR         reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    DOUBLE_EQUALS   reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    TRIPLE_EQUALS   reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    NOT_EQUALS      reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    EQUAL_TILDE     reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    BANG_TILDE      reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    COMPARISON      reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    LESS            reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    LESS_EQUALS     reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    GREATER         reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    GREATER_EQUALS  reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    INCL_RANGE      reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    EXCL_RANGE      reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    LOGICAL_OR      reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    BIT_OR          reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    SEMI_COLON      reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    NEWLINE         reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    def             reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    break           reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    if              reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    while           reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    case            reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    for             reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    return          reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    IDENTIFIER      reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    nil             reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    self            reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    GLOBAL          reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    AT_THE_RATE     reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    MINUS           reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    PLUS            reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    OPEN_BRACKET    reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    CONSTANT_RESOLUTION reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    Array           reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    NUMBER          reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    FLOAT           reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    STRING          reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    true            reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    false           reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    $end            reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    end             reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    then            reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    MAP             reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    COMMA           reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    do              reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    CLOSE_BRACKET   reduce using rule 55 (term6 -> term6 BIT_XOR term7 .)
    BIT_AND         shift and go to state 116


state 191

    (57) term7 -> term7 BIT_AND term8 .
    (59) term8 -> term8 . LEFT_SHIFT term9
    (60) term8 -> term8 . RIGHT_SHIFT term9

    BIT_AND         reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    BIT_XOR         reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    DOUBLE_EQUALS   reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    TRIPLE_EQUALS   reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    NOT_EQUALS      reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    EQUAL_TILDE     reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    BANG_TILDE      reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    COMPARISON      reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    LESS            reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    LESS_EQUALS     reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    GREATER         reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    GREATER_EQUALS  reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    INCL_RANGE      reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    EXCL_RANGE      reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    LOGICAL_OR      reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    BIT_OR          reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    SEMI_COLON      reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    NEWLINE         reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    def             reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    break           reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    if              reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    while           reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    case            reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    for             reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    return          reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    IDENTIFIER      reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    nil             reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    self            reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    GLOBAL          reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    AT_THE_RATE     reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    MINUS           reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    PLUS            reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    OPEN_BRACKET    reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    CONSTANT_RESOLUTION reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    Array           reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    NUMBER          reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    FLOAT           reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    STRING          reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    true            reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    false           reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    $end            reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    end             reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    then            reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    MAP             reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    COMMA           reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    do              reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    CLOSE_BRACKET   reduce using rule 57 (term7 -> term7 BIT_AND term8 .)
    LEFT_SHIFT      shift and go to state 117
    RIGHT_SHIFT     shift and go to state 118


state 192

    (59) term8 -> term8 LEFT_SHIFT term9 .
    (62) term9 -> term9 . PLUS term10
    (63) term9 -> term9 . MINUS term10

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LEFT_SHIFT      reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    RIGHT_SHIFT     reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    BIT_AND         reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    BIT_XOR         reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    DOUBLE_EQUALS   reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    TRIPLE_EQUALS   reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    NOT_EQUALS      reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    EQUAL_TILDE     reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    BANG_TILDE      reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    COMPARISON      reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    LESS            reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    LESS_EQUALS     reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    GREATER         reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    GREATER_EQUALS  reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    INCL_RANGE      reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    EXCL_RANGE      reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    LOGICAL_OR      reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    BIT_OR          reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    SEMI_COLON      reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    NEWLINE         reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    def             reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    break           reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    if              reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    while           reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    case            reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    for             reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    return          reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    IDENTIFIER      reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    nil             reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    self            reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    GLOBAL          reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    AT_THE_RATE     reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    OPEN_BRACKET    reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    CONSTANT_RESOLUTION reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    Array           reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    NUMBER          reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    FLOAT           reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    STRING          reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    true            reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    false           reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    $end            reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    end             reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    then            reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    MAP             reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    COMMA           reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    do              reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    CLOSE_BRACKET   reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .)
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120

  ! MINUS           [ reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .) ]
  ! PLUS            [ reduce using rule 59 (term8 -> term8 LEFT_SHIFT term9 .) ]


state 193

    (60) term8 -> term8 RIGHT_SHIFT term9 .
    (62) term9 -> term9 . PLUS term10
    (63) term9 -> term9 . MINUS term10

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LEFT_SHIFT      reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    RIGHT_SHIFT     reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    BIT_AND         reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    BIT_XOR         reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    DOUBLE_EQUALS   reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    TRIPLE_EQUALS   reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    NOT_EQUALS      reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    EQUAL_TILDE     reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    BANG_TILDE      reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    COMPARISON      reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    LESS            reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    LESS_EQUALS     reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    GREATER         reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    GREATER_EQUALS  reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    INCL_RANGE      reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    EXCL_RANGE      reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    LOGICAL_OR      reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    BIT_OR          reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    SEMI_COLON      reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    NEWLINE         reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    def             reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    break           reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    if              reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    while           reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    case            reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    for             reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    return          reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    IDENTIFIER      reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    nil             reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    self            reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    GLOBAL          reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    AT_THE_RATE     reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    OPEN_BRACKET    reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    CONSTANT_RESOLUTION reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    Array           reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    NUMBER          reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    FLOAT           reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    STRING          reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    true            reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    false           reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    $end            reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    end             reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    then            reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    MAP             reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    COMMA           reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    do              reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    CLOSE_BRACKET   reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .)
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120

  ! MINUS           [ reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .) ]
  ! PLUS            [ reduce using rule 60 (term8 -> term8 RIGHT_SHIFT term9 .) ]


state 194

    (62) term9 -> term9 PLUS term10 .
    (65) term10 -> term10 . MULTIPLY term11
    (66) term10 -> term10 . DIVIDE term11
    (67) term10 -> term10 . MODULO term11

    PLUS            reduce using rule 62 (term9 -> term9 PLUS term10 .)
    MINUS           reduce using rule 62 (term9 -> term9 PLUS term10 .)
    LEFT_SHIFT      reduce using rule 62 (term9 -> term9 PLUS term10 .)
    RIGHT_SHIFT     reduce using rule 62 (term9 -> term9 PLUS term10 .)
    BIT_AND         reduce using rule 62 (term9 -> term9 PLUS term10 .)
    BIT_XOR         reduce using rule 62 (term9 -> term9 PLUS term10 .)
    DOUBLE_EQUALS   reduce using rule 62 (term9 -> term9 PLUS term10 .)
    TRIPLE_EQUALS   reduce using rule 62 (term9 -> term9 PLUS term10 .)
    NOT_EQUALS      reduce using rule 62 (term9 -> term9 PLUS term10 .)
    EQUAL_TILDE     reduce using rule 62 (term9 -> term9 PLUS term10 .)
    BANG_TILDE      reduce using rule 62 (term9 -> term9 PLUS term10 .)
    COMPARISON      reduce using rule 62 (term9 -> term9 PLUS term10 .)
    LESS            reduce using rule 62 (term9 -> term9 PLUS term10 .)
    LESS_EQUALS     reduce using rule 62 (term9 -> term9 PLUS term10 .)
    GREATER         reduce using rule 62 (term9 -> term9 PLUS term10 .)
    GREATER_EQUALS  reduce using rule 62 (term9 -> term9 PLUS term10 .)
    INCL_RANGE      reduce using rule 62 (term9 -> term9 PLUS term10 .)
    EXCL_RANGE      reduce using rule 62 (term9 -> term9 PLUS term10 .)
    LOGICAL_OR      reduce using rule 62 (term9 -> term9 PLUS term10 .)
    BIT_OR          reduce using rule 62 (term9 -> term9 PLUS term10 .)
    SEMI_COLON      reduce using rule 62 (term9 -> term9 PLUS term10 .)
    NEWLINE         reduce using rule 62 (term9 -> term9 PLUS term10 .)
    def             reduce using rule 62 (term9 -> term9 PLUS term10 .)
    break           reduce using rule 62 (term9 -> term9 PLUS term10 .)
    if              reduce using rule 62 (term9 -> term9 PLUS term10 .)
    while           reduce using rule 62 (term9 -> term9 PLUS term10 .)
    case            reduce using rule 62 (term9 -> term9 PLUS term10 .)
    for             reduce using rule 62 (term9 -> term9 PLUS term10 .)
    return          reduce using rule 62 (term9 -> term9 PLUS term10 .)
    IDENTIFIER      reduce using rule 62 (term9 -> term9 PLUS term10 .)
    nil             reduce using rule 62 (term9 -> term9 PLUS term10 .)
    self            reduce using rule 62 (term9 -> term9 PLUS term10 .)
    GLOBAL          reduce using rule 62 (term9 -> term9 PLUS term10 .)
    AT_THE_RATE     reduce using rule 62 (term9 -> term9 PLUS term10 .)
    OPEN_BRACKET    reduce using rule 62 (term9 -> term9 PLUS term10 .)
    CONSTANT_RESOLUTION reduce using rule 62 (term9 -> term9 PLUS term10 .)
    Array           reduce using rule 62 (term9 -> term9 PLUS term10 .)
    NUMBER          reduce using rule 62 (term9 -> term9 PLUS term10 .)
    FLOAT           reduce using rule 62 (term9 -> term9 PLUS term10 .)
    STRING          reduce using rule 62 (term9 -> term9 PLUS term10 .)
    true            reduce using rule 62 (term9 -> term9 PLUS term10 .)
    false           reduce using rule 62 (term9 -> term9 PLUS term10 .)
    $end            reduce using rule 62 (term9 -> term9 PLUS term10 .)
    end             reduce using rule 62 (term9 -> term9 PLUS term10 .)
    then            reduce using rule 62 (term9 -> term9 PLUS term10 .)
    MAP             reduce using rule 62 (term9 -> term9 PLUS term10 .)
    COMMA           reduce using rule 62 (term9 -> term9 PLUS term10 .)
    do              reduce using rule 62 (term9 -> term9 PLUS term10 .)
    CLOSE_BRACKET   reduce using rule 62 (term9 -> term9 PLUS term10 .)
    MULTIPLY        shift and go to state 126
    DIVIDE          shift and go to state 127
    MODULO          shift and go to state 128


state 195

    (63) term9 -> term9 MINUS term10 .
    (65) term10 -> term10 . MULTIPLY term11
    (66) term10 -> term10 . DIVIDE term11
    (67) term10 -> term10 . MODULO term11

    PLUS            reduce using rule 63 (term9 -> term9 MINUS term10 .)
    MINUS           reduce using rule 63 (term9 -> term9 MINUS term10 .)
    LEFT_SHIFT      reduce using rule 63 (term9 -> term9 MINUS term10 .)
    RIGHT_SHIFT     reduce using rule 63 (term9 -> term9 MINUS term10 .)
    BIT_AND         reduce using rule 63 (term9 -> term9 MINUS term10 .)
    BIT_XOR         reduce using rule 63 (term9 -> term9 MINUS term10 .)
    DOUBLE_EQUALS   reduce using rule 63 (term9 -> term9 MINUS term10 .)
    TRIPLE_EQUALS   reduce using rule 63 (term9 -> term9 MINUS term10 .)
    NOT_EQUALS      reduce using rule 63 (term9 -> term9 MINUS term10 .)
    EQUAL_TILDE     reduce using rule 63 (term9 -> term9 MINUS term10 .)
    BANG_TILDE      reduce using rule 63 (term9 -> term9 MINUS term10 .)
    COMPARISON      reduce using rule 63 (term9 -> term9 MINUS term10 .)
    LESS            reduce using rule 63 (term9 -> term9 MINUS term10 .)
    LESS_EQUALS     reduce using rule 63 (term9 -> term9 MINUS term10 .)
    GREATER         reduce using rule 63 (term9 -> term9 MINUS term10 .)
    GREATER_EQUALS  reduce using rule 63 (term9 -> term9 MINUS term10 .)
    INCL_RANGE      reduce using rule 63 (term9 -> term9 MINUS term10 .)
    EXCL_RANGE      reduce using rule 63 (term9 -> term9 MINUS term10 .)
    LOGICAL_OR      reduce using rule 63 (term9 -> term9 MINUS term10 .)
    BIT_OR          reduce using rule 63 (term9 -> term9 MINUS term10 .)
    SEMI_COLON      reduce using rule 63 (term9 -> term9 MINUS term10 .)
    NEWLINE         reduce using rule 63 (term9 -> term9 MINUS term10 .)
    def             reduce using rule 63 (term9 -> term9 MINUS term10 .)
    break           reduce using rule 63 (term9 -> term9 MINUS term10 .)
    if              reduce using rule 63 (term9 -> term9 MINUS term10 .)
    while           reduce using rule 63 (term9 -> term9 MINUS term10 .)
    case            reduce using rule 63 (term9 -> term9 MINUS term10 .)
    for             reduce using rule 63 (term9 -> term9 MINUS term10 .)
    return          reduce using rule 63 (term9 -> term9 MINUS term10 .)
    IDENTIFIER      reduce using rule 63 (term9 -> term9 MINUS term10 .)
    nil             reduce using rule 63 (term9 -> term9 MINUS term10 .)
    self            reduce using rule 63 (term9 -> term9 MINUS term10 .)
    GLOBAL          reduce using rule 63 (term9 -> term9 MINUS term10 .)
    AT_THE_RATE     reduce using rule 63 (term9 -> term9 MINUS term10 .)
    OPEN_BRACKET    reduce using rule 63 (term9 -> term9 MINUS term10 .)
    CONSTANT_RESOLUTION reduce using rule 63 (term9 -> term9 MINUS term10 .)
    Array           reduce using rule 63 (term9 -> term9 MINUS term10 .)
    NUMBER          reduce using rule 63 (term9 -> term9 MINUS term10 .)
    FLOAT           reduce using rule 63 (term9 -> term9 MINUS term10 .)
    STRING          reduce using rule 63 (term9 -> term9 MINUS term10 .)
    true            reduce using rule 63 (term9 -> term9 MINUS term10 .)
    false           reduce using rule 63 (term9 -> term9 MINUS term10 .)
    $end            reduce using rule 63 (term9 -> term9 MINUS term10 .)
    end             reduce using rule 63 (term9 -> term9 MINUS term10 .)
    then            reduce using rule 63 (term9 -> term9 MINUS term10 .)
    MAP             reduce using rule 63 (term9 -> term9 MINUS term10 .)
    COMMA           reduce using rule 63 (term9 -> term9 MINUS term10 .)
    do              reduce using rule 63 (term9 -> term9 MINUS term10 .)
    CLOSE_BRACKET   reduce using rule 63 (term9 -> term9 MINUS term10 .)
    MULTIPLY        shift and go to state 126
    DIVIDE          shift and go to state 127
    MODULO          shift and go to state 128


state 196

    (65) term10 -> term10 MULTIPLY term11 .

    MULTIPLY        reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    DIVIDE          reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    MODULO          reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    PLUS            reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    MINUS           reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    LEFT_SHIFT      reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    RIGHT_SHIFT     reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    BIT_AND         reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    BIT_XOR         reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    DOUBLE_EQUALS   reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    TRIPLE_EQUALS   reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    NOT_EQUALS      reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    EQUAL_TILDE     reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    BANG_TILDE      reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    COMPARISON      reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    LESS            reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    LESS_EQUALS     reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    GREATER         reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    GREATER_EQUALS  reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    INCL_RANGE      reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    EXCL_RANGE      reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    LOGICAL_OR      reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    BIT_OR          reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    SEMI_COLON      reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    NEWLINE         reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    def             reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    break           reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    if              reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    while           reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    case            reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    for             reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    return          reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    IDENTIFIER      reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    nil             reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    self            reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    GLOBAL          reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    AT_THE_RATE     reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    OPEN_BRACKET    reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    CONSTANT_RESOLUTION reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    Array           reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    NUMBER          reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    FLOAT           reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    STRING          reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    true            reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    false           reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    $end            reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    end             reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    then            reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    MAP             reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    COMMA           reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    do              reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)
    CLOSE_BRACKET   reduce using rule 65 (term10 -> term10 MULTIPLY term11 .)


state 197

    (66) term10 -> term10 DIVIDE term11 .

    MULTIPLY        reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    DIVIDE          reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    MODULO          reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    PLUS            reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    MINUS           reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    LEFT_SHIFT      reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    RIGHT_SHIFT     reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    BIT_AND         reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    BIT_XOR         reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    DOUBLE_EQUALS   reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    TRIPLE_EQUALS   reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    NOT_EQUALS      reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    EQUAL_TILDE     reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    BANG_TILDE      reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    COMPARISON      reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    LESS            reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    LESS_EQUALS     reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    GREATER         reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    GREATER_EQUALS  reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    INCL_RANGE      reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    EXCL_RANGE      reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    LOGICAL_OR      reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    BIT_OR          reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    SEMI_COLON      reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    NEWLINE         reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    def             reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    break           reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    if              reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    while           reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    case            reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    for             reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    return          reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    IDENTIFIER      reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    nil             reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    self            reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    GLOBAL          reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    AT_THE_RATE     reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    OPEN_BRACKET    reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    CONSTANT_RESOLUTION reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    Array           reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    NUMBER          reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    FLOAT           reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    STRING          reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    true            reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    false           reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    $end            reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    end             reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    then            reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    MAP             reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    COMMA           reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    do              reduce using rule 66 (term10 -> term10 DIVIDE term11 .)
    CLOSE_BRACKET   reduce using rule 66 (term10 -> term10 DIVIDE term11 .)


state 198

    (67) term10 -> term10 MODULO term11 .

    MULTIPLY        reduce using rule 67 (term10 -> term10 MODULO term11 .)
    DIVIDE          reduce using rule 67 (term10 -> term10 MODULO term11 .)
    MODULO          reduce using rule 67 (term10 -> term10 MODULO term11 .)
    PLUS            reduce using rule 67 (term10 -> term10 MODULO term11 .)
    MINUS           reduce using rule 67 (term10 -> term10 MODULO term11 .)
    LEFT_SHIFT      reduce using rule 67 (term10 -> term10 MODULO term11 .)
    RIGHT_SHIFT     reduce using rule 67 (term10 -> term10 MODULO term11 .)
    BIT_AND         reduce using rule 67 (term10 -> term10 MODULO term11 .)
    BIT_XOR         reduce using rule 67 (term10 -> term10 MODULO term11 .)
    DOUBLE_EQUALS   reduce using rule 67 (term10 -> term10 MODULO term11 .)
    TRIPLE_EQUALS   reduce using rule 67 (term10 -> term10 MODULO term11 .)
    NOT_EQUALS      reduce using rule 67 (term10 -> term10 MODULO term11 .)
    EQUAL_TILDE     reduce using rule 67 (term10 -> term10 MODULO term11 .)
    BANG_TILDE      reduce using rule 67 (term10 -> term10 MODULO term11 .)
    COMPARISON      reduce using rule 67 (term10 -> term10 MODULO term11 .)
    LESS            reduce using rule 67 (term10 -> term10 MODULO term11 .)
    LESS_EQUALS     reduce using rule 67 (term10 -> term10 MODULO term11 .)
    GREATER         reduce using rule 67 (term10 -> term10 MODULO term11 .)
    GREATER_EQUALS  reduce using rule 67 (term10 -> term10 MODULO term11 .)
    INCL_RANGE      reduce using rule 67 (term10 -> term10 MODULO term11 .)
    EXCL_RANGE      reduce using rule 67 (term10 -> term10 MODULO term11 .)
    LOGICAL_OR      reduce using rule 67 (term10 -> term10 MODULO term11 .)
    BIT_OR          reduce using rule 67 (term10 -> term10 MODULO term11 .)
    SEMI_COLON      reduce using rule 67 (term10 -> term10 MODULO term11 .)
    NEWLINE         reduce using rule 67 (term10 -> term10 MODULO term11 .)
    def             reduce using rule 67 (term10 -> term10 MODULO term11 .)
    break           reduce using rule 67 (term10 -> term10 MODULO term11 .)
    if              reduce using rule 67 (term10 -> term10 MODULO term11 .)
    while           reduce using rule 67 (term10 -> term10 MODULO term11 .)
    case            reduce using rule 67 (term10 -> term10 MODULO term11 .)
    for             reduce using rule 67 (term10 -> term10 MODULO term11 .)
    return          reduce using rule 67 (term10 -> term10 MODULO term11 .)
    IDENTIFIER      reduce using rule 67 (term10 -> term10 MODULO term11 .)
    nil             reduce using rule 67 (term10 -> term10 MODULO term11 .)
    self            reduce using rule 67 (term10 -> term10 MODULO term11 .)
    GLOBAL          reduce using rule 67 (term10 -> term10 MODULO term11 .)
    AT_THE_RATE     reduce using rule 67 (term10 -> term10 MODULO term11 .)
    OPEN_BRACKET    reduce using rule 67 (term10 -> term10 MODULO term11 .)
    CONSTANT_RESOLUTION reduce using rule 67 (term10 -> term10 MODULO term11 .)
    Array           reduce using rule 67 (term10 -> term10 MODULO term11 .)
    NUMBER          reduce using rule 67 (term10 -> term10 MODULO term11 .)
    FLOAT           reduce using rule 67 (term10 -> term10 MODULO term11 .)
    STRING          reduce using rule 67 (term10 -> term10 MODULO term11 .)
    true            reduce using rule 67 (term10 -> term10 MODULO term11 .)
    false           reduce using rule 67 (term10 -> term10 MODULO term11 .)
    $end            reduce using rule 67 (term10 -> term10 MODULO term11 .)
    end             reduce using rule 67 (term10 -> term10 MODULO term11 .)
    then            reduce using rule 67 (term10 -> term10 MODULO term11 .)
    MAP             reduce using rule 67 (term10 -> term10 MODULO term11 .)
    COMMA           reduce using rule 67 (term10 -> term10 MODULO term11 .)
    do              reduce using rule 67 (term10 -> term10 MODULO term11 .)
    CLOSE_BRACKET   reduce using rule 67 (term10 -> term10 MODULO term11 .)


state 199

    (73) term13 -> primary POWER term13 .

    MULTIPLY        reduce using rule 73 (term13 -> primary POWER term13 .)
    DIVIDE          reduce using rule 73 (term13 -> primary POWER term13 .)
    MODULO          reduce using rule 73 (term13 -> primary POWER term13 .)
    PLUS            reduce using rule 73 (term13 -> primary POWER term13 .)
    MINUS           reduce using rule 73 (term13 -> primary POWER term13 .)
    LEFT_SHIFT      reduce using rule 73 (term13 -> primary POWER term13 .)
    RIGHT_SHIFT     reduce using rule 73 (term13 -> primary POWER term13 .)
    BIT_AND         reduce using rule 73 (term13 -> primary POWER term13 .)
    BIT_XOR         reduce using rule 73 (term13 -> primary POWER term13 .)
    DOUBLE_EQUALS   reduce using rule 73 (term13 -> primary POWER term13 .)
    TRIPLE_EQUALS   reduce using rule 73 (term13 -> primary POWER term13 .)
    NOT_EQUALS      reduce using rule 73 (term13 -> primary POWER term13 .)
    EQUAL_TILDE     reduce using rule 73 (term13 -> primary POWER term13 .)
    BANG_TILDE      reduce using rule 73 (term13 -> primary POWER term13 .)
    COMPARISON      reduce using rule 73 (term13 -> primary POWER term13 .)
    LESS            reduce using rule 73 (term13 -> primary POWER term13 .)
    LESS_EQUALS     reduce using rule 73 (term13 -> primary POWER term13 .)
    GREATER         reduce using rule 73 (term13 -> primary POWER term13 .)
    GREATER_EQUALS  reduce using rule 73 (term13 -> primary POWER term13 .)
    INCL_RANGE      reduce using rule 73 (term13 -> primary POWER term13 .)
    EXCL_RANGE      reduce using rule 73 (term13 -> primary POWER term13 .)
    LOGICAL_OR      reduce using rule 73 (term13 -> primary POWER term13 .)
    BIT_OR          reduce using rule 73 (term13 -> primary POWER term13 .)
    SEMI_COLON      reduce using rule 73 (term13 -> primary POWER term13 .)
    NEWLINE         reduce using rule 73 (term13 -> primary POWER term13 .)
    def             reduce using rule 73 (term13 -> primary POWER term13 .)
    break           reduce using rule 73 (term13 -> primary POWER term13 .)
    if              reduce using rule 73 (term13 -> primary POWER term13 .)
    while           reduce using rule 73 (term13 -> primary POWER term13 .)
    case            reduce using rule 73 (term13 -> primary POWER term13 .)
    for             reduce using rule 73 (term13 -> primary POWER term13 .)
    return          reduce using rule 73 (term13 -> primary POWER term13 .)
    IDENTIFIER      reduce using rule 73 (term13 -> primary POWER term13 .)
    nil             reduce using rule 73 (term13 -> primary POWER term13 .)
    self            reduce using rule 73 (term13 -> primary POWER term13 .)
    GLOBAL          reduce using rule 73 (term13 -> primary POWER term13 .)
    AT_THE_RATE     reduce using rule 73 (term13 -> primary POWER term13 .)
    OPEN_BRACKET    reduce using rule 73 (term13 -> primary POWER term13 .)
    CONSTANT_RESOLUTION reduce using rule 73 (term13 -> primary POWER term13 .)
    Array           reduce using rule 73 (term13 -> primary POWER term13 .)
    NUMBER          reduce using rule 73 (term13 -> primary POWER term13 .)
    FLOAT           reduce using rule 73 (term13 -> primary POWER term13 .)
    STRING          reduce using rule 73 (term13 -> primary POWER term13 .)
    true            reduce using rule 73 (term13 -> primary POWER term13 .)
    false           reduce using rule 73 (term13 -> primary POWER term13 .)
    $end            reduce using rule 73 (term13 -> primary POWER term13 .)
    end             reduce using rule 73 (term13 -> primary POWER term13 .)
    then            reduce using rule 73 (term13 -> primary POWER term13 .)
    MAP             reduce using rule 73 (term13 -> primary POWER term13 .)
    COMMA           reduce using rule 73 (term13 -> primary POWER term13 .)
    do              reduce using rule 73 (term13 -> primary POWER term13 .)
    CLOSE_BRACKET   reduce using rule 73 (term13 -> primary POWER term13 .)


state 200

    (82) arrayd -> Array OPEN_BRACKET array_size . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 237


state 201

    (83) array_size -> primary . COMMA array_size
    (84) array_size -> primary .

    COMMA           shift and go to state 238
    CLOSE_BRACKET   reduce using rule 84 (array_size -> primary .)


state 202

    (133) arglist -> IDENTIFIER multarglist . COMMA MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER
    (134) arglist -> IDENTIFIER multarglist . COMMA MULTIPLY COMMA BIT_AND IDENTIFIER
    (135) arglist -> IDENTIFIER multarglist . COMMA BIT_AND IDENTIFIER
    (136) arglist -> IDENTIFIER multarglist . COMMA MULTIPLY IDENTIFIER
    (137) arglist -> IDENTIFIER multarglist . COMMA MULTIPLY
    (138) arglist -> IDENTIFIER multarglist .

    COMMA           shift and go to state 239
    SEMI_COLON      reduce using rule 138 (arglist -> IDENTIFIER multarglist .)
    NEWLINE         reduce using rule 138 (arglist -> IDENTIFIER multarglist .)
    CLOSE_BRACKET   reduce using rule 138 (arglist -> IDENTIFIER multarglist .)


state 203

    (143) multarglist -> COMMA . IDENTIFIER multarglist

    IDENTIFIER      shift and go to state 240


state 204

    (144) multarglist -> empty .

    COMMA           reduce using rule 144 (multarglist -> empty .)
    SEMI_COLON      reduce using rule 144 (multarglist -> empty .)
    NEWLINE         reduce using rule 144 (multarglist -> empty .)
    CLOSE_BRACKET   reduce using rule 144 (multarglist -> empty .)


state 205

    (7) stmt -> def IDENTIFIER argdecl compstmt . end

    end             shift and go to state 241


state 206

    (131) argdecl -> OPEN_BRACKET arglist . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 242


state 207

    (132) argdecl -> arglist newline .

    SEMI_COLON      reduce using rule 132 (argdecl -> arglist newline .)
    NEWLINE         reduce using rule 132 (argdecl -> arglist newline .)
    def             reduce using rule 132 (argdecl -> arglist newline .)
    break           reduce using rule 132 (argdecl -> arglist newline .)
    if              reduce using rule 132 (argdecl -> arglist newline .)
    while           reduce using rule 132 (argdecl -> arglist newline .)
    case            reduce using rule 132 (argdecl -> arglist newline .)
    for             reduce using rule 132 (argdecl -> arglist newline .)
    return          reduce using rule 132 (argdecl -> arglist newline .)
    IDENTIFIER      reduce using rule 132 (argdecl -> arglist newline .)
    nil             reduce using rule 132 (argdecl -> arglist newline .)
    self            reduce using rule 132 (argdecl -> arglist newline .)
    GLOBAL          reduce using rule 132 (argdecl -> arglist newline .)
    AT_THE_RATE     reduce using rule 132 (argdecl -> arglist newline .)
    MINUS           reduce using rule 132 (argdecl -> arglist newline .)
    PLUS            reduce using rule 132 (argdecl -> arglist newline .)
    OPEN_BRACKET    reduce using rule 132 (argdecl -> arglist newline .)
    CONSTANT_RESOLUTION reduce using rule 132 (argdecl -> arglist newline .)
    Array           reduce using rule 132 (argdecl -> arglist newline .)
    NUMBER          reduce using rule 132 (argdecl -> arglist newline .)
    FLOAT           reduce using rule 132 (argdecl -> arglist newline .)
    STRING          reduce using rule 132 (argdecl -> arglist newline .)
    true            reduce using rule 132 (argdecl -> arglist newline .)
    false           reduce using rule 132 (argdecl -> arglist newline .)
    end             reduce using rule 132 (argdecl -> arglist newline .)


state 208

    (139) arglist -> MULTIPLY IDENTIFIER . COMMA BIT_AND IDENTIFIER
    (140) arglist -> MULTIPLY IDENTIFIER .

    COMMA           shift and go to state 243
    SEMI_COLON      reduce using rule 140 (arglist -> MULTIPLY IDENTIFIER .)
    NEWLINE         reduce using rule 140 (arglist -> MULTIPLY IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 140 (arglist -> MULTIPLY IDENTIFIER .)


state 209

    (141) arglist -> BIT_AND IDENTIFIER .

    SEMI_COLON      reduce using rule 141 (arglist -> BIT_AND IDENTIFIER .)
    NEWLINE         reduce using rule 141 (arglist -> BIT_AND IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 141 (arglist -> BIT_AND IDENTIFIER .)


state 210

    (27) function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .

    SEMI_COLON      reduce using rule 27 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    NEWLINE         reduce using rule 27 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    def             reduce using rule 27 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    break           reduce using rule 27 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    if              reduce using rule 27 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    while           reduce using rule 27 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    case            reduce using rule 27 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    for             reduce using rule 27 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    return          reduce using rule 27 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 27 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    nil             reduce using rule 27 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    self            reduce using rule 27 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    GLOBAL          reduce using rule 27 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 27 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    MINUS           reduce using rule 27 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    PLUS            reduce using rule 27 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 27 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    CONSTANT_RESOLUTION reduce using rule 27 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    Array           reduce using rule 27 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    NUMBER          reduce using rule 27 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    FLOAT           reduce using rule 27 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    STRING          reduce using rule 27 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    true            reduce using rule 27 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    false           reduce using rule 27 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    $end            reduce using rule 27 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    end             reduce using rule 27 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    then            reduce using rule 27 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 27 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    do              reduce using rule 27 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)


state 211

    (12) expr -> if expr1 pthen M_1 . multstmt else newline M_1 multstmt end M_1
    (13) expr -> if expr1 pthen M_1 . multstmt end M_1
    (10) multstmt -> . stmt newline multstmt
    (11) multstmt -> . empty
    (7) stmt -> . def IDENTIFIER argdecl compstmt end
    (8) stmt -> . break
    (9) stmt -> . expr
    (178) empty -> .
    (12) expr -> . if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
    (13) expr -> . if expr1 pthen M_1 multstmt end M_1
    (14) expr -> . while M_1 expr1 pdo M_1 multstmt end M_1
    (15) expr -> . case multstmt M_1 multcase end M_1
    (16) expr -> . for mlhs in expr1 pdo compstmt end
    (17) expr -> . expr1
    (19) expr1 -> . return callargs
    (20) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (21) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (22) expr1 -> . return
    (23) expr1 -> . expr2
    (24) expr2 -> . call
    (25) expr2 -> . arg
    (26) call -> . function
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (27) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (28) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    def             shift and go to state 9
    break           shift and go to state 11
    else            reduce using rule 178 (empty -> .)
    end             reduce using rule 178 (empty -> .)
    if              shift and go to state 13
    while           shift and go to state 15
    case            shift and go to state 16
    for             shift and go to state 17
    return          shift and go to state 19
    IDENTIFIER      shift and go to state 10
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    expr1                          shift and go to state 14
    multstmt                       shift and go to state 244
    stmt                           shift and go to state 67
    empty                          shift and go to state 68
    expr                           shift and go to state 12
    mlhs                           shift and go to state 18
    expr2                          shift and go to state 21
    call                           shift and go to state 22
    arg                            shift and go to state 23
    function                       shift and go to state 24
    term0                          shift and go to state 25
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 212

    (156) pthen -> newline then .

    def             reduce using rule 156 (pthen -> newline then .)
    break           reduce using rule 156 (pthen -> newline then .)
    if              reduce using rule 156 (pthen -> newline then .)
    while           reduce using rule 156 (pthen -> newline then .)
    case            reduce using rule 156 (pthen -> newline then .)
    for             reduce using rule 156 (pthen -> newline then .)
    return          reduce using rule 156 (pthen -> newline then .)
    IDENTIFIER      reduce using rule 156 (pthen -> newline then .)
    nil             reduce using rule 156 (pthen -> newline then .)
    self            reduce using rule 156 (pthen -> newline then .)
    GLOBAL          reduce using rule 156 (pthen -> newline then .)
    AT_THE_RATE     reduce using rule 156 (pthen -> newline then .)
    MINUS           reduce using rule 156 (pthen -> newline then .)
    PLUS            reduce using rule 156 (pthen -> newline then .)
    OPEN_BRACKET    reduce using rule 156 (pthen -> newline then .)
    CONSTANT_RESOLUTION reduce using rule 156 (pthen -> newline then .)
    Array           reduce using rule 156 (pthen -> newline then .)
    NUMBER          reduce using rule 156 (pthen -> newline then .)
    FLOAT           reduce using rule 156 (pthen -> newline then .)
    STRING          reduce using rule 156 (pthen -> newline then .)
    true            reduce using rule 156 (pthen -> newline then .)
    false           reduce using rule 156 (pthen -> newline then .)
    else            reduce using rule 156 (pthen -> newline then .)
    end             reduce using rule 156 (pthen -> newline then .)
    when            reduce using rule 156 (pthen -> newline then .)


state 213

    (14) expr -> while M_1 expr1 pdo . M_1 multstmt end M_1
    (18) M_1 -> . empty
    (178) empty -> .

    def             reduce using rule 178 (empty -> .)
    break           reduce using rule 178 (empty -> .)
    if              reduce using rule 178 (empty -> .)
    while           reduce using rule 178 (empty -> .)
    case            reduce using rule 178 (empty -> .)
    for             reduce using rule 178 (empty -> .)
    return          reduce using rule 178 (empty -> .)
    IDENTIFIER      reduce using rule 178 (empty -> .)
    nil             reduce using rule 178 (empty -> .)
    self            reduce using rule 178 (empty -> .)
    GLOBAL          reduce using rule 178 (empty -> .)
    AT_THE_RATE     reduce using rule 178 (empty -> .)
    MINUS           reduce using rule 178 (empty -> .)
    PLUS            reduce using rule 178 (empty -> .)
    OPEN_BRACKET    reduce using rule 178 (empty -> .)
    CONSTANT_RESOLUTION reduce using rule 178 (empty -> .)
    Array           reduce using rule 178 (empty -> .)
    NUMBER          reduce using rule 178 (empty -> .)
    FLOAT           reduce using rule 178 (empty -> .)
    STRING          reduce using rule 178 (empty -> .)
    true            reduce using rule 178 (empty -> .)
    false           reduce using rule 178 (empty -> .)
    end             reduce using rule 178 (empty -> .)

    M_1                            shift and go to state 245
    empty                          shift and go to state 65

state 214

    (157) pdo -> newline .
    (159) pdo -> newline . do

    def             reduce using rule 157 (pdo -> newline .)
    break           reduce using rule 157 (pdo -> newline .)
    if              reduce using rule 157 (pdo -> newline .)
    while           reduce using rule 157 (pdo -> newline .)
    case            reduce using rule 157 (pdo -> newline .)
    for             reduce using rule 157 (pdo -> newline .)
    return          reduce using rule 157 (pdo -> newline .)
    IDENTIFIER      reduce using rule 157 (pdo -> newline .)
    nil             reduce using rule 157 (pdo -> newline .)
    self            reduce using rule 157 (pdo -> newline .)
    GLOBAL          reduce using rule 157 (pdo -> newline .)
    AT_THE_RATE     reduce using rule 157 (pdo -> newline .)
    MINUS           reduce using rule 157 (pdo -> newline .)
    PLUS            reduce using rule 157 (pdo -> newline .)
    OPEN_BRACKET    reduce using rule 157 (pdo -> newline .)
    CONSTANT_RESOLUTION reduce using rule 157 (pdo -> newline .)
    Array           reduce using rule 157 (pdo -> newline .)
    NUMBER          reduce using rule 157 (pdo -> newline .)
    FLOAT           reduce using rule 157 (pdo -> newline .)
    STRING          reduce using rule 157 (pdo -> newline .)
    true            reduce using rule 157 (pdo -> newline .)
    false           reduce using rule 157 (pdo -> newline .)
    end             reduce using rule 157 (pdo -> newline .)
    SEMI_COLON      reduce using rule 157 (pdo -> newline .)
    NEWLINE         reduce using rule 157 (pdo -> newline .)
    do              shift and go to state 246


state 215

    (158) pdo -> do .

    def             reduce using rule 158 (pdo -> do .)
    break           reduce using rule 158 (pdo -> do .)
    if              reduce using rule 158 (pdo -> do .)
    while           reduce using rule 158 (pdo -> do .)
    case            reduce using rule 158 (pdo -> do .)
    for             reduce using rule 158 (pdo -> do .)
    return          reduce using rule 158 (pdo -> do .)
    IDENTIFIER      reduce using rule 158 (pdo -> do .)
    nil             reduce using rule 158 (pdo -> do .)
    self            reduce using rule 158 (pdo -> do .)
    GLOBAL          reduce using rule 158 (pdo -> do .)
    AT_THE_RATE     reduce using rule 158 (pdo -> do .)
    MINUS           reduce using rule 158 (pdo -> do .)
    PLUS            reduce using rule 158 (pdo -> do .)
    OPEN_BRACKET    reduce using rule 158 (pdo -> do .)
    CONSTANT_RESOLUTION reduce using rule 158 (pdo -> do .)
    Array           reduce using rule 158 (pdo -> do .)
    NUMBER          reduce using rule 158 (pdo -> do .)
    FLOAT           reduce using rule 158 (pdo -> do .)
    STRING          reduce using rule 158 (pdo -> do .)
    true            reduce using rule 158 (pdo -> do .)
    false           reduce using rule 158 (pdo -> do .)
    end             reduce using rule 158 (pdo -> do .)
    SEMI_COLON      reduce using rule 158 (pdo -> do .)
    NEWLINE         reduce using rule 158 (pdo -> do .)


state 216

    (15) expr -> case multstmt M_1 multcase . end M_1

    end             shift and go to state 247


state 217

    (88) multcase -> when . whenargs pthen M_1 multstmt multcase M_1
    (89) multcase -> when . whenargs pthen M_1 multstmt M_1
    (97) whenargs -> . args COMMA MULTIPLY arg
    (98) whenargs -> . args
    (99) whenargs -> . MULTIPLY arg
    (128) args -> . arg multargs
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    MULTIPLY        shift and go to state 250
    IDENTIFIER      shift and go to state 70
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    whenargs                       shift and go to state 248
    args                           shift and go to state 249
    arg                            shift and go to state 155
    term0                          shift and go to state 25
    mlhs                           shift and go to state 18
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 218

    (10) multstmt -> stmt newline multstmt .

    when            reduce using rule 10 (multstmt -> stmt newline multstmt .)
    else            reduce using rule 10 (multstmt -> stmt newline multstmt .)
    end             reduce using rule 10 (multstmt -> stmt newline multstmt .)


state 219

    (16) expr -> for mlhs in expr1 . pdo compstmt end
    (157) pdo -> . newline
    (158) pdo -> . do
    (159) pdo -> . newline do
    (176) newline -> . SEMI_COLON
    (177) newline -> . NEWLINE

    do              shift and go to state 215
    SEMI_COLON      shift and go to state 6
    NEWLINE         shift and go to state 7

    pdo                            shift and go to state 251
    newline                        shift and go to state 214

state 220

    (31) term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET . CLOSE_BRACKET
    (32) term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET . callargs CLOSE_BRACKET
    (114) callargs -> . args
    (115) callargs -> . args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg
    (116) callargs -> . args COMMA MULTIPLY arg COMMA BIT_AND arg
    (117) callargs -> . args COMMA assocs COMMA BIT_AND arg
    (118) callargs -> . args COMMA assocs COMMA MULTIPLY arg
    (119) callargs -> . args COMMA assocs
    (120) callargs -> . args COMMA MULTIPLY arg
    (121) callargs -> . args COMMA BIT_AND arg
    (122) callargs -> . assocs COMMA MULTIPLY arg COMMA BIT_AND arg
    (123) callargs -> . assocs COMMA MULTIPLY arg
    (124) callargs -> . assocs COMMA BIT_AND arg
    (125) callargs -> . assocs
    (126) callargs -> . MULTIPLY arg COMMA BIT_AND arg
    (127) callargs -> . BIT_AND arg
    (128) args -> . arg multargs
    (147) assocs -> . assoc multassocs
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (150) assoc -> . arg MAP arg
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    CLOSE_BRACKET   shift and go to state 252
    MULTIPLY        shift and go to state 93
    BIT_AND         shift and go to state 95
    IDENTIFIER      shift and go to state 70
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    mlhs                           shift and go to state 18
    callargs                       shift and go to state 253
    args                           shift and go to state 91
    assocs                         shift and go to state 92
    arg                            shift and go to state 94
    assoc                          shift and go to state 96
    term0                          shift and go to state 25
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 221

    (112) mrhs -> args COMMA . MULTIPLY arg

    MULTIPLY        shift and go to state 254


state 222

    (113) mrhs -> MULTIPLY arg .
    (29) arg -> arg . BIT_OR term0

  ! shift/reduce conflict for BIT_OR resolved as shift
    SEMI_COLON      reduce using rule 113 (mrhs -> MULTIPLY arg .)
    NEWLINE         reduce using rule 113 (mrhs -> MULTIPLY arg .)
    def             reduce using rule 113 (mrhs -> MULTIPLY arg .)
    break           reduce using rule 113 (mrhs -> MULTIPLY arg .)
    if              reduce using rule 113 (mrhs -> MULTIPLY arg .)
    while           reduce using rule 113 (mrhs -> MULTIPLY arg .)
    case            reduce using rule 113 (mrhs -> MULTIPLY arg .)
    for             reduce using rule 113 (mrhs -> MULTIPLY arg .)
    return          reduce using rule 113 (mrhs -> MULTIPLY arg .)
    IDENTIFIER      reduce using rule 113 (mrhs -> MULTIPLY arg .)
    nil             reduce using rule 113 (mrhs -> MULTIPLY arg .)
    self            reduce using rule 113 (mrhs -> MULTIPLY arg .)
    GLOBAL          reduce using rule 113 (mrhs -> MULTIPLY arg .)
    AT_THE_RATE     reduce using rule 113 (mrhs -> MULTIPLY arg .)
    MINUS           reduce using rule 113 (mrhs -> MULTIPLY arg .)
    PLUS            reduce using rule 113 (mrhs -> MULTIPLY arg .)
    OPEN_BRACKET    reduce using rule 113 (mrhs -> MULTIPLY arg .)
    CONSTANT_RESOLUTION reduce using rule 113 (mrhs -> MULTIPLY arg .)
    Array           reduce using rule 113 (mrhs -> MULTIPLY arg .)
    NUMBER          reduce using rule 113 (mrhs -> MULTIPLY arg .)
    FLOAT           reduce using rule 113 (mrhs -> MULTIPLY arg .)
    STRING          reduce using rule 113 (mrhs -> MULTIPLY arg .)
    true            reduce using rule 113 (mrhs -> MULTIPLY arg .)
    false           reduce using rule 113 (mrhs -> MULTIPLY arg .)
    $end            reduce using rule 113 (mrhs -> MULTIPLY arg .)
    end             reduce using rule 113 (mrhs -> MULTIPLY arg .)
    then            reduce using rule 113 (mrhs -> MULTIPLY arg .)
    MAP             reduce using rule 113 (mrhs -> MULTIPLY arg .)
    COMMA           reduce using rule 113 (mrhs -> MULTIPLY arg .)
    do              reduce using rule 113 (mrhs -> MULTIPLY arg .)
    CLOSE_BRACKET   reduce using rule 113 (mrhs -> MULTIPLY arg .)
    BIT_OR          shift and go to state 98

  ! BIT_OR          [ reduce using rule 113 (mrhs -> MULTIPLY arg .) ]


state 223

    (33) term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET . callargs CLOSE_BRACKET
    (114) callargs -> . args
    (115) callargs -> . args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg
    (116) callargs -> . args COMMA MULTIPLY arg COMMA BIT_AND arg
    (117) callargs -> . args COMMA assocs COMMA BIT_AND arg
    (118) callargs -> . args COMMA assocs COMMA MULTIPLY arg
    (119) callargs -> . args COMMA assocs
    (120) callargs -> . args COMMA MULTIPLY arg
    (121) callargs -> . args COMMA BIT_AND arg
    (122) callargs -> . assocs COMMA MULTIPLY arg COMMA BIT_AND arg
    (123) callargs -> . assocs COMMA MULTIPLY arg
    (124) callargs -> . assocs COMMA BIT_AND arg
    (125) callargs -> . assocs
    (126) callargs -> . MULTIPLY arg COMMA BIT_AND arg
    (127) callargs -> . BIT_AND arg
    (128) args -> . arg multargs
    (147) assocs -> . assoc multassocs
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (150) assoc -> . arg MAP arg
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    MULTIPLY        shift and go to state 93
    BIT_AND         shift and go to state 95
    IDENTIFIER      shift and go to state 70
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    mlhs                           shift and go to state 18
    callargs                       shift and go to state 255
    args                           shift and go to state 91
    assocs                         shift and go to state 92
    arg                            shift and go to state 94
    assoc                          shift and go to state 96
    term0                          shift and go to state 25
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 224

    (20) expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .

    SEMI_COLON      reduce using rule 20 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    NEWLINE         reduce using rule 20 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    def             reduce using rule 20 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    break           reduce using rule 20 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    if              reduce using rule 20 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    while           reduce using rule 20 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    case            reduce using rule 20 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    for             reduce using rule 20 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    return          reduce using rule 20 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 20 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    nil             reduce using rule 20 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    self            reduce using rule 20 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    GLOBAL          reduce using rule 20 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 20 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    MINUS           reduce using rule 20 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    PLUS            reduce using rule 20 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 20 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    CONSTANT_RESOLUTION reduce using rule 20 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    Array           reduce using rule 20 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    NUMBER          reduce using rule 20 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    FLOAT           reduce using rule 20 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    STRING          reduce using rule 20 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    true            reduce using rule 20 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    false           reduce using rule 20 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    $end            reduce using rule 20 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    end             reduce using rule 20 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    then            reduce using rule 20 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)
    do              reduce using rule 20 (expr1 -> return OPEN_BRACKET callargs CLOSE_BRACKET .)


state 225

    (115) callargs -> args COMMA assocs . COMMA MULTIPLY arg COMMA BIT_AND arg
    (117) callargs -> args COMMA assocs . COMMA BIT_AND arg
    (118) callargs -> args COMMA assocs . COMMA MULTIPLY arg
    (119) callargs -> args COMMA assocs .

    COMMA           shift and go to state 256
    SEMI_COLON      reduce using rule 119 (callargs -> args COMMA assocs .)
    NEWLINE         reduce using rule 119 (callargs -> args COMMA assocs .)
    def             reduce using rule 119 (callargs -> args COMMA assocs .)
    break           reduce using rule 119 (callargs -> args COMMA assocs .)
    if              reduce using rule 119 (callargs -> args COMMA assocs .)
    while           reduce using rule 119 (callargs -> args COMMA assocs .)
    case            reduce using rule 119 (callargs -> args COMMA assocs .)
    for             reduce using rule 119 (callargs -> args COMMA assocs .)
    return          reduce using rule 119 (callargs -> args COMMA assocs .)
    IDENTIFIER      reduce using rule 119 (callargs -> args COMMA assocs .)
    nil             reduce using rule 119 (callargs -> args COMMA assocs .)
    self            reduce using rule 119 (callargs -> args COMMA assocs .)
    GLOBAL          reduce using rule 119 (callargs -> args COMMA assocs .)
    AT_THE_RATE     reduce using rule 119 (callargs -> args COMMA assocs .)
    MINUS           reduce using rule 119 (callargs -> args COMMA assocs .)
    PLUS            reduce using rule 119 (callargs -> args COMMA assocs .)
    OPEN_BRACKET    reduce using rule 119 (callargs -> args COMMA assocs .)
    CONSTANT_RESOLUTION reduce using rule 119 (callargs -> args COMMA assocs .)
    Array           reduce using rule 119 (callargs -> args COMMA assocs .)
    NUMBER          reduce using rule 119 (callargs -> args COMMA assocs .)
    FLOAT           reduce using rule 119 (callargs -> args COMMA assocs .)
    STRING          reduce using rule 119 (callargs -> args COMMA assocs .)
    true            reduce using rule 119 (callargs -> args COMMA assocs .)
    false           reduce using rule 119 (callargs -> args COMMA assocs .)
    $end            reduce using rule 119 (callargs -> args COMMA assocs .)
    end             reduce using rule 119 (callargs -> args COMMA assocs .)
    then            reduce using rule 119 (callargs -> args COMMA assocs .)
    do              reduce using rule 119 (callargs -> args COMMA assocs .)
    CLOSE_BRACKET   reduce using rule 119 (callargs -> args COMMA assocs .)


state 226

    (116) callargs -> args COMMA MULTIPLY . arg COMMA BIT_AND arg
    (120) callargs -> args COMMA MULTIPLY . arg
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    IDENTIFIER      shift and go to state 70
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    arg                            shift and go to state 257
    term0                          shift and go to state 25
    mlhs                           shift and go to state 18
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 227

    (150) assoc -> arg . MAP arg
    (29) arg -> arg . BIT_OR term0

    MAP             shift and go to state 165
    BIT_OR          shift and go to state 98


state 228

    (121) callargs -> args COMMA BIT_AND . arg
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    IDENTIFIER      shift and go to state 70
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    arg                            shift and go to state 258
    term0                          shift and go to state 25
    mlhs                           shift and go to state 18
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 229

    (122) callargs -> assocs COMMA MULTIPLY . arg COMMA BIT_AND arg
    (123) callargs -> assocs COMMA MULTIPLY . arg
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    IDENTIFIER      shift and go to state 70
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    arg                            shift and go to state 259
    term0                          shift and go to state 25
    mlhs                           shift and go to state 18
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 230

    (124) callargs -> assocs COMMA BIT_AND . arg
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    IDENTIFIER      shift and go to state 70
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    arg                            shift and go to state 260
    term0                          shift and go to state 25
    mlhs                           shift and go to state 18
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 231

    (126) callargs -> MULTIPLY arg COMMA . BIT_AND arg

    BIT_AND         shift and go to state 261


state 232

    (150) assoc -> arg MAP arg .
    (29) arg -> arg . BIT_OR term0

    COMMA           reduce using rule 150 (assoc -> arg MAP arg .)
    SEMI_COLON      reduce using rule 150 (assoc -> arg MAP arg .)
    NEWLINE         reduce using rule 150 (assoc -> arg MAP arg .)
    def             reduce using rule 150 (assoc -> arg MAP arg .)
    break           reduce using rule 150 (assoc -> arg MAP arg .)
    if              reduce using rule 150 (assoc -> arg MAP arg .)
    while           reduce using rule 150 (assoc -> arg MAP arg .)
    case            reduce using rule 150 (assoc -> arg MAP arg .)
    for             reduce using rule 150 (assoc -> arg MAP arg .)
    return          reduce using rule 150 (assoc -> arg MAP arg .)
    IDENTIFIER      reduce using rule 150 (assoc -> arg MAP arg .)
    nil             reduce using rule 150 (assoc -> arg MAP arg .)
    self            reduce using rule 150 (assoc -> arg MAP arg .)
    GLOBAL          reduce using rule 150 (assoc -> arg MAP arg .)
    AT_THE_RATE     reduce using rule 150 (assoc -> arg MAP arg .)
    MINUS           reduce using rule 150 (assoc -> arg MAP arg .)
    PLUS            reduce using rule 150 (assoc -> arg MAP arg .)
    OPEN_BRACKET    reduce using rule 150 (assoc -> arg MAP arg .)
    CONSTANT_RESOLUTION reduce using rule 150 (assoc -> arg MAP arg .)
    Array           reduce using rule 150 (assoc -> arg MAP arg .)
    NUMBER          reduce using rule 150 (assoc -> arg MAP arg .)
    FLOAT           reduce using rule 150 (assoc -> arg MAP arg .)
    STRING          reduce using rule 150 (assoc -> arg MAP arg .)
    true            reduce using rule 150 (assoc -> arg MAP arg .)
    false           reduce using rule 150 (assoc -> arg MAP arg .)
    $end            reduce using rule 150 (assoc -> arg MAP arg .)
    end             reduce using rule 150 (assoc -> arg MAP arg .)
    then            reduce using rule 150 (assoc -> arg MAP arg .)
    do              reduce using rule 150 (assoc -> arg MAP arg .)
    CLOSE_BRACKET   reduce using rule 150 (assoc -> arg MAP arg .)
    BIT_OR          shift and go to state 98


state 233

    (129) multargs -> COMMA arg . multargs
    (29) arg -> arg . BIT_OR term0
    (129) multargs -> . COMMA arg multargs
    (130) multargs -> . empty
    (178) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    BIT_OR          shift and go to state 98
    COMMA           shift and go to state 166
    SEMI_COLON      reduce using rule 178 (empty -> .)
    NEWLINE         reduce using rule 178 (empty -> .)
    def             reduce using rule 178 (empty -> .)
    break           reduce using rule 178 (empty -> .)
    if              reduce using rule 178 (empty -> .)
    while           reduce using rule 178 (empty -> .)
    case            reduce using rule 178 (empty -> .)
    for             reduce using rule 178 (empty -> .)
    return          reduce using rule 178 (empty -> .)
    IDENTIFIER      reduce using rule 178 (empty -> .)
    nil             reduce using rule 178 (empty -> .)
    self            reduce using rule 178 (empty -> .)
    GLOBAL          reduce using rule 178 (empty -> .)
    AT_THE_RATE     reduce using rule 178 (empty -> .)
    MINUS           reduce using rule 178 (empty -> .)
    PLUS            reduce using rule 178 (empty -> .)
    OPEN_BRACKET    reduce using rule 178 (empty -> .)
    CONSTANT_RESOLUTION reduce using rule 178 (empty -> .)
    Array           reduce using rule 178 (empty -> .)
    NUMBER          reduce using rule 178 (empty -> .)
    FLOAT           reduce using rule 178 (empty -> .)
    STRING          reduce using rule 178 (empty -> .)
    true            reduce using rule 178 (empty -> .)
    false           reduce using rule 178 (empty -> .)
    $end            reduce using rule 178 (empty -> .)
    end             reduce using rule 178 (empty -> .)
    then            reduce using rule 178 (empty -> .)
    do              reduce using rule 178 (empty -> .)
    CLOSE_BRACKET   reduce using rule 178 (empty -> .)

  ! COMMA           [ reduce using rule 178 (empty -> .) ]

    multargs                       shift and go to state 262
    empty                          shift and go to state 167

state 234

    (148) multassocs -> COMMA assoc . multassocs
    (148) multassocs -> . COMMA assoc multassocs
    (149) multassocs -> . empty
    (178) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 170
    SEMI_COLON      reduce using rule 178 (empty -> .)
    NEWLINE         reduce using rule 178 (empty -> .)
    def             reduce using rule 178 (empty -> .)
    break           reduce using rule 178 (empty -> .)
    if              reduce using rule 178 (empty -> .)
    while           reduce using rule 178 (empty -> .)
    case            reduce using rule 178 (empty -> .)
    for             reduce using rule 178 (empty -> .)
    return          reduce using rule 178 (empty -> .)
    IDENTIFIER      reduce using rule 178 (empty -> .)
    nil             reduce using rule 178 (empty -> .)
    self            reduce using rule 178 (empty -> .)
    GLOBAL          reduce using rule 178 (empty -> .)
    AT_THE_RATE     reduce using rule 178 (empty -> .)
    MINUS           reduce using rule 178 (empty -> .)
    PLUS            reduce using rule 178 (empty -> .)
    OPEN_BRACKET    reduce using rule 178 (empty -> .)
    CONSTANT_RESOLUTION reduce using rule 178 (empty -> .)
    Array           reduce using rule 178 (empty -> .)
    NUMBER          reduce using rule 178 (empty -> .)
    FLOAT           reduce using rule 178 (empty -> .)
    STRING          reduce using rule 178 (empty -> .)
    true            reduce using rule 178 (empty -> .)
    false           reduce using rule 178 (empty -> .)
    $end            reduce using rule 178 (empty -> .)
    end             reduce using rule 178 (empty -> .)
    then            reduce using rule 178 (empty -> .)
    do              reduce using rule 178 (empty -> .)
    CLOSE_BRACKET   reduce using rule 178 (empty -> .)

  ! COMMA           [ reduce using rule 178 (empty -> .) ]

    multassocs                     shift and go to state 263
    empty                          shift and go to state 171

state 235

    (85) arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .

    EQUALS          reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    MODULO_EQUALS   reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    DIVIDE_EQUALS   reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    MINUS_EQUALS    reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    PLUS_EQUALS     reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    OR_EQUALS       reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    AND_EQUALS      reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    XOR_EQUALS      reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    RIGHT_SHIFT_EQUALS reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    LEFT_SHIFT_EQUALS reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    MULTIPLY_EQUALS reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    LOGICAL_AND_EQUALS reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    LOGICAL_OR_EQUALS reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    POWER_EQUALS    reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    POWER           reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    MULTIPLY        reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    DIVIDE          reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    MODULO          reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    PLUS            reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    MINUS           reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    LEFT_SHIFT      reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    RIGHT_SHIFT     reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    BIT_AND         reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    BIT_XOR         reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    DOUBLE_EQUALS   reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    TRIPLE_EQUALS   reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    NOT_EQUALS      reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    EQUAL_TILDE     reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    BANG_TILDE      reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    COMPARISON      reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    LESS            reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    LESS_EQUALS     reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    GREATER         reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    GREATER_EQUALS  reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    INCL_RANGE      reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    EXCL_RANGE      reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    LOGICAL_OR      reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    BIT_OR          reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    SEMI_COLON      reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    NEWLINE         reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    def             reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    break           reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    if              reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    while           reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    case            reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    for             reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    return          reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    nil             reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    self            reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    GLOBAL          reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    AT_THE_RATE     reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    OPEN_BRACKET    reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    CONSTANT_RESOLUTION reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    Array           reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    NUMBER          reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    FLOAT           reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    STRING          reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    true            reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    false           reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    $end            reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    end             reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    then            reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    in              reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    MAP             reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    COMMA           reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    do              reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    CLOSE_BRACKET   reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 85 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)


state 236

    (86) array_args -> primary COMMA . array_args
    (86) array_args -> . primary COMMA array_args
    (87) array_args -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    nil             shift and go to state 34
    self            shift and go to state 35
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    IDENTIFIER      shift and go to state 123

    primary                        shift and go to state 178
    array_args                     shift and go to state 264
    variable                       shift and go to state 122
    arrayd                         shift and go to state 51
    arraya                         shift and go to state 124
    literal                        shift and go to state 52
    varname                        shift and go to state 125

state 237

    (82) arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .

    POWER           reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    MULTIPLY        reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    DIVIDE          reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    MODULO          reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    PLUS            reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    MINUS           reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    LEFT_SHIFT      reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    RIGHT_SHIFT     reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    BIT_AND         reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    BIT_XOR         reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    DOUBLE_EQUALS   reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    TRIPLE_EQUALS   reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    NOT_EQUALS      reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    EQUAL_TILDE     reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    BANG_TILDE      reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    COMPARISON      reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    LESS            reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    LESS_EQUALS     reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    GREATER         reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    GREATER_EQUALS  reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    INCL_RANGE      reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    EXCL_RANGE      reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    LOGICAL_OR      reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    BIT_OR          reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    SEMI_COLON      reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    NEWLINE         reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    def             reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    break           reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    if              reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    while           reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    case            reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    for             reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    return          reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    nil             reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    self            reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    GLOBAL          reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    CONSTANT_RESOLUTION reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    Array           reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    NUMBER          reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    FLOAT           reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    STRING          reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    true            reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    false           reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    $end            reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    end             reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    then            reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    MAP             reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    COMMA           reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    do              reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    CLOSE_SQUARE    reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)


state 238

    (83) array_size -> primary COMMA . array_size
    (83) array_size -> . primary COMMA array_size
    (84) array_size -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER

    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    nil             shift and go to state 34
    self            shift and go to state 35
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    IDENTIFIER      shift and go to state 123

    primary                        shift and go to state 201
    array_size                     shift and go to state 265
    variable                       shift and go to state 122
    arrayd                         shift and go to state 51
    arraya                         shift and go to state 124
    literal                        shift and go to state 52
    varname                        shift and go to state 125

state 239

    (133) arglist -> IDENTIFIER multarglist COMMA . MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER
    (134) arglist -> IDENTIFIER multarglist COMMA . MULTIPLY COMMA BIT_AND IDENTIFIER
    (135) arglist -> IDENTIFIER multarglist COMMA . BIT_AND IDENTIFIER
    (136) arglist -> IDENTIFIER multarglist COMMA . MULTIPLY IDENTIFIER
    (137) arglist -> IDENTIFIER multarglist COMMA . MULTIPLY

    MULTIPLY        shift and go to state 266
    BIT_AND         shift and go to state 267


state 240

    (143) multarglist -> COMMA IDENTIFIER . multarglist
    (143) multarglist -> . COMMA IDENTIFIER multarglist
    (144) multarglist -> . empty
    (178) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 203
    SEMI_COLON      reduce using rule 178 (empty -> .)
    NEWLINE         reduce using rule 178 (empty -> .)
    CLOSE_BRACKET   reduce using rule 178 (empty -> .)

  ! COMMA           [ reduce using rule 178 (empty -> .) ]

    multarglist                    shift and go to state 268
    empty                          shift and go to state 204

state 241

    (7) stmt -> def IDENTIFIER argdecl compstmt end .

    SEMI_COLON      reduce using rule 7 (stmt -> def IDENTIFIER argdecl compstmt end .)
    NEWLINE         reduce using rule 7 (stmt -> def IDENTIFIER argdecl compstmt end .)
    def             reduce using rule 7 (stmt -> def IDENTIFIER argdecl compstmt end .)
    break           reduce using rule 7 (stmt -> def IDENTIFIER argdecl compstmt end .)
    if              reduce using rule 7 (stmt -> def IDENTIFIER argdecl compstmt end .)
    while           reduce using rule 7 (stmt -> def IDENTIFIER argdecl compstmt end .)
    case            reduce using rule 7 (stmt -> def IDENTIFIER argdecl compstmt end .)
    for             reduce using rule 7 (stmt -> def IDENTIFIER argdecl compstmt end .)
    return          reduce using rule 7 (stmt -> def IDENTIFIER argdecl compstmt end .)
    IDENTIFIER      reduce using rule 7 (stmt -> def IDENTIFIER argdecl compstmt end .)
    nil             reduce using rule 7 (stmt -> def IDENTIFIER argdecl compstmt end .)
    self            reduce using rule 7 (stmt -> def IDENTIFIER argdecl compstmt end .)
    GLOBAL          reduce using rule 7 (stmt -> def IDENTIFIER argdecl compstmt end .)
    AT_THE_RATE     reduce using rule 7 (stmt -> def IDENTIFIER argdecl compstmt end .)
    MINUS           reduce using rule 7 (stmt -> def IDENTIFIER argdecl compstmt end .)
    PLUS            reduce using rule 7 (stmt -> def IDENTIFIER argdecl compstmt end .)
    OPEN_BRACKET    reduce using rule 7 (stmt -> def IDENTIFIER argdecl compstmt end .)
    CONSTANT_RESOLUTION reduce using rule 7 (stmt -> def IDENTIFIER argdecl compstmt end .)
    Array           reduce using rule 7 (stmt -> def IDENTIFIER argdecl compstmt end .)
    NUMBER          reduce using rule 7 (stmt -> def IDENTIFIER argdecl compstmt end .)
    FLOAT           reduce using rule 7 (stmt -> def IDENTIFIER argdecl compstmt end .)
    STRING          reduce using rule 7 (stmt -> def IDENTIFIER argdecl compstmt end .)
    true            reduce using rule 7 (stmt -> def IDENTIFIER argdecl compstmt end .)
    false           reduce using rule 7 (stmt -> def IDENTIFIER argdecl compstmt end .)
    $end            reduce using rule 7 (stmt -> def IDENTIFIER argdecl compstmt end .)
    end             reduce using rule 7 (stmt -> def IDENTIFIER argdecl compstmt end .)


state 242

    (131) argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .

    SEMI_COLON      reduce using rule 131 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    NEWLINE         reduce using rule 131 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    def             reduce using rule 131 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    break           reduce using rule 131 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    if              reduce using rule 131 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    while           reduce using rule 131 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    case            reduce using rule 131 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    for             reduce using rule 131 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    return          reduce using rule 131 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 131 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    nil             reduce using rule 131 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    self            reduce using rule 131 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    GLOBAL          reduce using rule 131 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 131 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    MINUS           reduce using rule 131 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    PLUS            reduce using rule 131 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 131 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    CONSTANT_RESOLUTION reduce using rule 131 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    Array           reduce using rule 131 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    NUMBER          reduce using rule 131 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    FLOAT           reduce using rule 131 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    STRING          reduce using rule 131 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    true            reduce using rule 131 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    false           reduce using rule 131 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    end             reduce using rule 131 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)


state 243

    (139) arglist -> MULTIPLY IDENTIFIER COMMA . BIT_AND IDENTIFIER

    BIT_AND         shift and go to state 269


state 244

    (12) expr -> if expr1 pthen M_1 multstmt . else newline M_1 multstmt end M_1
    (13) expr -> if expr1 pthen M_1 multstmt . end M_1

    else            shift and go to state 270
    end             shift and go to state 271


state 245

    (14) expr -> while M_1 expr1 pdo M_1 . multstmt end M_1
    (10) multstmt -> . stmt newline multstmt
    (11) multstmt -> . empty
    (7) stmt -> . def IDENTIFIER argdecl compstmt end
    (8) stmt -> . break
    (9) stmt -> . expr
    (178) empty -> .
    (12) expr -> . if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
    (13) expr -> . if expr1 pthen M_1 multstmt end M_1
    (14) expr -> . while M_1 expr1 pdo M_1 multstmt end M_1
    (15) expr -> . case multstmt M_1 multcase end M_1
    (16) expr -> . for mlhs in expr1 pdo compstmt end
    (17) expr -> . expr1
    (19) expr1 -> . return callargs
    (20) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (21) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (22) expr1 -> . return
    (23) expr1 -> . expr2
    (24) expr2 -> . call
    (25) expr2 -> . arg
    (26) call -> . function
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (27) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (28) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    def             shift and go to state 9
    break           shift and go to state 11
    end             reduce using rule 178 (empty -> .)
    if              shift and go to state 13
    while           shift and go to state 15
    case            shift and go to state 16
    for             shift and go to state 17
    return          shift and go to state 19
    IDENTIFIER      shift and go to state 10
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    expr1                          shift and go to state 14
    multstmt                       shift and go to state 272
    stmt                           shift and go to state 67
    empty                          shift and go to state 68
    expr                           shift and go to state 12
    mlhs                           shift and go to state 18
    expr2                          shift and go to state 21
    call                           shift and go to state 22
    arg                            shift and go to state 23
    function                       shift and go to state 24
    term0                          shift and go to state 25
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 246

    (159) pdo -> newline do .

    def             reduce using rule 159 (pdo -> newline do .)
    break           reduce using rule 159 (pdo -> newline do .)
    if              reduce using rule 159 (pdo -> newline do .)
    while           reduce using rule 159 (pdo -> newline do .)
    case            reduce using rule 159 (pdo -> newline do .)
    for             reduce using rule 159 (pdo -> newline do .)
    return          reduce using rule 159 (pdo -> newline do .)
    IDENTIFIER      reduce using rule 159 (pdo -> newline do .)
    nil             reduce using rule 159 (pdo -> newline do .)
    self            reduce using rule 159 (pdo -> newline do .)
    GLOBAL          reduce using rule 159 (pdo -> newline do .)
    AT_THE_RATE     reduce using rule 159 (pdo -> newline do .)
    MINUS           reduce using rule 159 (pdo -> newline do .)
    PLUS            reduce using rule 159 (pdo -> newline do .)
    OPEN_BRACKET    reduce using rule 159 (pdo -> newline do .)
    CONSTANT_RESOLUTION reduce using rule 159 (pdo -> newline do .)
    Array           reduce using rule 159 (pdo -> newline do .)
    NUMBER          reduce using rule 159 (pdo -> newline do .)
    FLOAT           reduce using rule 159 (pdo -> newline do .)
    STRING          reduce using rule 159 (pdo -> newline do .)
    true            reduce using rule 159 (pdo -> newline do .)
    false           reduce using rule 159 (pdo -> newline do .)
    end             reduce using rule 159 (pdo -> newline do .)
    SEMI_COLON      reduce using rule 159 (pdo -> newline do .)
    NEWLINE         reduce using rule 159 (pdo -> newline do .)


state 247

    (15) expr -> case multstmt M_1 multcase end . M_1
    (18) M_1 -> . empty
    (178) empty -> .

    SEMI_COLON      reduce using rule 178 (empty -> .)
    NEWLINE         reduce using rule 178 (empty -> .)
    def             reduce using rule 178 (empty -> .)
    break           reduce using rule 178 (empty -> .)
    if              reduce using rule 178 (empty -> .)
    while           reduce using rule 178 (empty -> .)
    case            reduce using rule 178 (empty -> .)
    for             reduce using rule 178 (empty -> .)
    return          reduce using rule 178 (empty -> .)
    IDENTIFIER      reduce using rule 178 (empty -> .)
    nil             reduce using rule 178 (empty -> .)
    self            reduce using rule 178 (empty -> .)
    GLOBAL          reduce using rule 178 (empty -> .)
    AT_THE_RATE     reduce using rule 178 (empty -> .)
    MINUS           reduce using rule 178 (empty -> .)
    PLUS            reduce using rule 178 (empty -> .)
    OPEN_BRACKET    reduce using rule 178 (empty -> .)
    CONSTANT_RESOLUTION reduce using rule 178 (empty -> .)
    Array           reduce using rule 178 (empty -> .)
    NUMBER          reduce using rule 178 (empty -> .)
    FLOAT           reduce using rule 178 (empty -> .)
    STRING          reduce using rule 178 (empty -> .)
    true            reduce using rule 178 (empty -> .)
    false           reduce using rule 178 (empty -> .)
    $end            reduce using rule 178 (empty -> .)
    end             reduce using rule 178 (empty -> .)

    M_1                            shift and go to state 273
    empty                          shift and go to state 65

state 248

    (88) multcase -> when whenargs . pthen M_1 multstmt multcase M_1
    (89) multcase -> when whenargs . pthen M_1 multstmt M_1
    (154) pthen -> . newline
    (155) pthen -> . then
    (156) pthen -> . newline then
    (176) newline -> . SEMI_COLON
    (177) newline -> . NEWLINE

    then            shift and go to state 145
    SEMI_COLON      shift and go to state 6
    NEWLINE         shift and go to state 7

    pthen                          shift and go to state 274
    newline                        shift and go to state 144

state 249

    (97) whenargs -> args . COMMA MULTIPLY arg
    (98) whenargs -> args .

    COMMA           shift and go to state 275
    then            reduce using rule 98 (whenargs -> args .)
    SEMI_COLON      reduce using rule 98 (whenargs -> args .)
    NEWLINE         reduce using rule 98 (whenargs -> args .)


state 250

    (99) whenargs -> MULTIPLY . arg
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    IDENTIFIER      shift and go to state 70
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    arg                            shift and go to state 276
    term0                          shift and go to state 25
    mlhs                           shift and go to state 18
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 251

    (16) expr -> for mlhs in expr1 pdo . compstmt end
    (1) compstmt -> . multcompstmt
    (2) multcompstmt -> . newline stmt1 multcompstmt
    (3) multcompstmt -> . stmt1 multcompstmt
    (4) multcompstmt -> . newline
    (5) multcompstmt -> . empty
    (176) newline -> . SEMI_COLON
    (177) newline -> . NEWLINE
    (6) stmt1 -> . stmt
    (178) empty -> .
    (7) stmt -> . def IDENTIFIER argdecl compstmt end
    (8) stmt -> . break
    (9) stmt -> . expr
    (12) expr -> . if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
    (13) expr -> . if expr1 pthen M_1 multstmt end M_1
    (14) expr -> . while M_1 expr1 pdo M_1 multstmt end M_1
    (15) expr -> . case multstmt M_1 multcase end M_1
    (16) expr -> . for mlhs in expr1 pdo compstmt end
    (17) expr -> . expr1
    (19) expr1 -> . return callargs
    (20) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (21) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (22) expr1 -> . return
    (23) expr1 -> . expr2
    (24) expr2 -> . call
    (25) expr2 -> . arg
    (26) call -> . function
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (27) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (28) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    SEMI_COLON      shift and go to state 6
    NEWLINE         shift and go to state 7
    end             reduce using rule 178 (empty -> .)
    def             shift and go to state 9
    break           shift and go to state 11
    if              shift and go to state 13
    while           shift and go to state 15
    case            shift and go to state 16
    for             shift and go to state 17
    return          shift and go to state 19
    IDENTIFIER      shift and go to state 10
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    mlhs                           shift and go to state 18
    expr1                          shift and go to state 14
    compstmt                       shift and go to state 277
    multcompstmt                   shift and go to state 2
    newline                        shift and go to state 3
    stmt1                          shift and go to state 4
    empty                          shift and go to state 5
    stmt                           shift and go to state 8
    expr                           shift and go to state 12
    expr2                          shift and go to state 21
    call                           shift and go to state 22
    arg                            shift and go to state 23
    function                       shift and go to state 24
    term0                          shift and go to state 25
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 252

    (31) term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .

    BIT_OR          reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    SEMI_COLON      reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    NEWLINE         reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    def             reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    break           reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    if              reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    while           reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    case            reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    for             reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    return          reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    nil             reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    self            reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    GLOBAL          reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    MINUS           reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    PLUS            reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    CONSTANT_RESOLUTION reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    Array           reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    NUMBER          reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    FLOAT           reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    STRING          reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    true            reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    false           reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    $end            reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    end             reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    then            reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    MAP             reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    COMMA           reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    do              reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 31 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)


state 253

    (32) term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 278


state 254

    (112) mrhs -> args COMMA MULTIPLY . arg
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    IDENTIFIER      shift and go to state 70
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    arg                            shift and go to state 279
    term0                          shift and go to state 25
    mlhs                           shift and go to state 18
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 255

    (33) term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 280


state 256

    (115) callargs -> args COMMA assocs COMMA . MULTIPLY arg COMMA BIT_AND arg
    (117) callargs -> args COMMA assocs COMMA . BIT_AND arg
    (118) callargs -> args COMMA assocs COMMA . MULTIPLY arg

    MULTIPLY        shift and go to state 281
    BIT_AND         shift and go to state 282


state 257

    (116) callargs -> args COMMA MULTIPLY arg . COMMA BIT_AND arg
    (120) callargs -> args COMMA MULTIPLY arg .
    (29) arg -> arg . BIT_OR term0

    COMMA           shift and go to state 283
    SEMI_COLON      reduce using rule 120 (callargs -> args COMMA MULTIPLY arg .)
    NEWLINE         reduce using rule 120 (callargs -> args COMMA MULTIPLY arg .)
    def             reduce using rule 120 (callargs -> args COMMA MULTIPLY arg .)
    break           reduce using rule 120 (callargs -> args COMMA MULTIPLY arg .)
    if              reduce using rule 120 (callargs -> args COMMA MULTIPLY arg .)
    while           reduce using rule 120 (callargs -> args COMMA MULTIPLY arg .)
    case            reduce using rule 120 (callargs -> args COMMA MULTIPLY arg .)
    for             reduce using rule 120 (callargs -> args COMMA MULTIPLY arg .)
    return          reduce using rule 120 (callargs -> args COMMA MULTIPLY arg .)
    IDENTIFIER      reduce using rule 120 (callargs -> args COMMA MULTIPLY arg .)
    nil             reduce using rule 120 (callargs -> args COMMA MULTIPLY arg .)
    self            reduce using rule 120 (callargs -> args COMMA MULTIPLY arg .)
    GLOBAL          reduce using rule 120 (callargs -> args COMMA MULTIPLY arg .)
    AT_THE_RATE     reduce using rule 120 (callargs -> args COMMA MULTIPLY arg .)
    MINUS           reduce using rule 120 (callargs -> args COMMA MULTIPLY arg .)
    PLUS            reduce using rule 120 (callargs -> args COMMA MULTIPLY arg .)
    OPEN_BRACKET    reduce using rule 120 (callargs -> args COMMA MULTIPLY arg .)
    CONSTANT_RESOLUTION reduce using rule 120 (callargs -> args COMMA MULTIPLY arg .)
    Array           reduce using rule 120 (callargs -> args COMMA MULTIPLY arg .)
    NUMBER          reduce using rule 120 (callargs -> args COMMA MULTIPLY arg .)
    FLOAT           reduce using rule 120 (callargs -> args COMMA MULTIPLY arg .)
    STRING          reduce using rule 120 (callargs -> args COMMA MULTIPLY arg .)
    true            reduce using rule 120 (callargs -> args COMMA MULTIPLY arg .)
    false           reduce using rule 120 (callargs -> args COMMA MULTIPLY arg .)
    $end            reduce using rule 120 (callargs -> args COMMA MULTIPLY arg .)
    end             reduce using rule 120 (callargs -> args COMMA MULTIPLY arg .)
    then            reduce using rule 120 (callargs -> args COMMA MULTIPLY arg .)
    do              reduce using rule 120 (callargs -> args COMMA MULTIPLY arg .)
    CLOSE_BRACKET   reduce using rule 120 (callargs -> args COMMA MULTIPLY arg .)
    BIT_OR          shift and go to state 98


state 258

    (121) callargs -> args COMMA BIT_AND arg .
    (29) arg -> arg . BIT_OR term0

    SEMI_COLON      reduce using rule 121 (callargs -> args COMMA BIT_AND arg .)
    NEWLINE         reduce using rule 121 (callargs -> args COMMA BIT_AND arg .)
    def             reduce using rule 121 (callargs -> args COMMA BIT_AND arg .)
    break           reduce using rule 121 (callargs -> args COMMA BIT_AND arg .)
    if              reduce using rule 121 (callargs -> args COMMA BIT_AND arg .)
    while           reduce using rule 121 (callargs -> args COMMA BIT_AND arg .)
    case            reduce using rule 121 (callargs -> args COMMA BIT_AND arg .)
    for             reduce using rule 121 (callargs -> args COMMA BIT_AND arg .)
    return          reduce using rule 121 (callargs -> args COMMA BIT_AND arg .)
    IDENTIFIER      reduce using rule 121 (callargs -> args COMMA BIT_AND arg .)
    nil             reduce using rule 121 (callargs -> args COMMA BIT_AND arg .)
    self            reduce using rule 121 (callargs -> args COMMA BIT_AND arg .)
    GLOBAL          reduce using rule 121 (callargs -> args COMMA BIT_AND arg .)
    AT_THE_RATE     reduce using rule 121 (callargs -> args COMMA BIT_AND arg .)
    MINUS           reduce using rule 121 (callargs -> args COMMA BIT_AND arg .)
    PLUS            reduce using rule 121 (callargs -> args COMMA BIT_AND arg .)
    OPEN_BRACKET    reduce using rule 121 (callargs -> args COMMA BIT_AND arg .)
    CONSTANT_RESOLUTION reduce using rule 121 (callargs -> args COMMA BIT_AND arg .)
    Array           reduce using rule 121 (callargs -> args COMMA BIT_AND arg .)
    NUMBER          reduce using rule 121 (callargs -> args COMMA BIT_AND arg .)
    FLOAT           reduce using rule 121 (callargs -> args COMMA BIT_AND arg .)
    STRING          reduce using rule 121 (callargs -> args COMMA BIT_AND arg .)
    true            reduce using rule 121 (callargs -> args COMMA BIT_AND arg .)
    false           reduce using rule 121 (callargs -> args COMMA BIT_AND arg .)
    $end            reduce using rule 121 (callargs -> args COMMA BIT_AND arg .)
    end             reduce using rule 121 (callargs -> args COMMA BIT_AND arg .)
    then            reduce using rule 121 (callargs -> args COMMA BIT_AND arg .)
    do              reduce using rule 121 (callargs -> args COMMA BIT_AND arg .)
    CLOSE_BRACKET   reduce using rule 121 (callargs -> args COMMA BIT_AND arg .)
    BIT_OR          shift and go to state 98


state 259

    (122) callargs -> assocs COMMA MULTIPLY arg . COMMA BIT_AND arg
    (123) callargs -> assocs COMMA MULTIPLY arg .
    (29) arg -> arg . BIT_OR term0

    COMMA           shift and go to state 284
    SEMI_COLON      reduce using rule 123 (callargs -> assocs COMMA MULTIPLY arg .)
    NEWLINE         reduce using rule 123 (callargs -> assocs COMMA MULTIPLY arg .)
    def             reduce using rule 123 (callargs -> assocs COMMA MULTIPLY arg .)
    break           reduce using rule 123 (callargs -> assocs COMMA MULTIPLY arg .)
    if              reduce using rule 123 (callargs -> assocs COMMA MULTIPLY arg .)
    while           reduce using rule 123 (callargs -> assocs COMMA MULTIPLY arg .)
    case            reduce using rule 123 (callargs -> assocs COMMA MULTIPLY arg .)
    for             reduce using rule 123 (callargs -> assocs COMMA MULTIPLY arg .)
    return          reduce using rule 123 (callargs -> assocs COMMA MULTIPLY arg .)
    IDENTIFIER      reduce using rule 123 (callargs -> assocs COMMA MULTIPLY arg .)
    nil             reduce using rule 123 (callargs -> assocs COMMA MULTIPLY arg .)
    self            reduce using rule 123 (callargs -> assocs COMMA MULTIPLY arg .)
    GLOBAL          reduce using rule 123 (callargs -> assocs COMMA MULTIPLY arg .)
    AT_THE_RATE     reduce using rule 123 (callargs -> assocs COMMA MULTIPLY arg .)
    MINUS           reduce using rule 123 (callargs -> assocs COMMA MULTIPLY arg .)
    PLUS            reduce using rule 123 (callargs -> assocs COMMA MULTIPLY arg .)
    OPEN_BRACKET    reduce using rule 123 (callargs -> assocs COMMA MULTIPLY arg .)
    CONSTANT_RESOLUTION reduce using rule 123 (callargs -> assocs COMMA MULTIPLY arg .)
    Array           reduce using rule 123 (callargs -> assocs COMMA MULTIPLY arg .)
    NUMBER          reduce using rule 123 (callargs -> assocs COMMA MULTIPLY arg .)
    FLOAT           reduce using rule 123 (callargs -> assocs COMMA MULTIPLY arg .)
    STRING          reduce using rule 123 (callargs -> assocs COMMA MULTIPLY arg .)
    true            reduce using rule 123 (callargs -> assocs COMMA MULTIPLY arg .)
    false           reduce using rule 123 (callargs -> assocs COMMA MULTIPLY arg .)
    $end            reduce using rule 123 (callargs -> assocs COMMA MULTIPLY arg .)
    end             reduce using rule 123 (callargs -> assocs COMMA MULTIPLY arg .)
    then            reduce using rule 123 (callargs -> assocs COMMA MULTIPLY arg .)
    do              reduce using rule 123 (callargs -> assocs COMMA MULTIPLY arg .)
    CLOSE_BRACKET   reduce using rule 123 (callargs -> assocs COMMA MULTIPLY arg .)
    BIT_OR          shift and go to state 98


state 260

    (124) callargs -> assocs COMMA BIT_AND arg .
    (29) arg -> arg . BIT_OR term0

    SEMI_COLON      reduce using rule 124 (callargs -> assocs COMMA BIT_AND arg .)
    NEWLINE         reduce using rule 124 (callargs -> assocs COMMA BIT_AND arg .)
    def             reduce using rule 124 (callargs -> assocs COMMA BIT_AND arg .)
    break           reduce using rule 124 (callargs -> assocs COMMA BIT_AND arg .)
    if              reduce using rule 124 (callargs -> assocs COMMA BIT_AND arg .)
    while           reduce using rule 124 (callargs -> assocs COMMA BIT_AND arg .)
    case            reduce using rule 124 (callargs -> assocs COMMA BIT_AND arg .)
    for             reduce using rule 124 (callargs -> assocs COMMA BIT_AND arg .)
    return          reduce using rule 124 (callargs -> assocs COMMA BIT_AND arg .)
    IDENTIFIER      reduce using rule 124 (callargs -> assocs COMMA BIT_AND arg .)
    nil             reduce using rule 124 (callargs -> assocs COMMA BIT_AND arg .)
    self            reduce using rule 124 (callargs -> assocs COMMA BIT_AND arg .)
    GLOBAL          reduce using rule 124 (callargs -> assocs COMMA BIT_AND arg .)
    AT_THE_RATE     reduce using rule 124 (callargs -> assocs COMMA BIT_AND arg .)
    MINUS           reduce using rule 124 (callargs -> assocs COMMA BIT_AND arg .)
    PLUS            reduce using rule 124 (callargs -> assocs COMMA BIT_AND arg .)
    OPEN_BRACKET    reduce using rule 124 (callargs -> assocs COMMA BIT_AND arg .)
    CONSTANT_RESOLUTION reduce using rule 124 (callargs -> assocs COMMA BIT_AND arg .)
    Array           reduce using rule 124 (callargs -> assocs COMMA BIT_AND arg .)
    NUMBER          reduce using rule 124 (callargs -> assocs COMMA BIT_AND arg .)
    FLOAT           reduce using rule 124 (callargs -> assocs COMMA BIT_AND arg .)
    STRING          reduce using rule 124 (callargs -> assocs COMMA BIT_AND arg .)
    true            reduce using rule 124 (callargs -> assocs COMMA BIT_AND arg .)
    false           reduce using rule 124 (callargs -> assocs COMMA BIT_AND arg .)
    $end            reduce using rule 124 (callargs -> assocs COMMA BIT_AND arg .)
    end             reduce using rule 124 (callargs -> assocs COMMA BIT_AND arg .)
    then            reduce using rule 124 (callargs -> assocs COMMA BIT_AND arg .)
    do              reduce using rule 124 (callargs -> assocs COMMA BIT_AND arg .)
    CLOSE_BRACKET   reduce using rule 124 (callargs -> assocs COMMA BIT_AND arg .)
    BIT_OR          shift and go to state 98


state 261

    (126) callargs -> MULTIPLY arg COMMA BIT_AND . arg
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    IDENTIFIER      shift and go to state 70
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    arg                            shift and go to state 285
    term0                          shift and go to state 25
    mlhs                           shift and go to state 18
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 262

    (129) multargs -> COMMA arg multargs .

    COMMA           reduce using rule 129 (multargs -> COMMA arg multargs .)
    SEMI_COLON      reduce using rule 129 (multargs -> COMMA arg multargs .)
    NEWLINE         reduce using rule 129 (multargs -> COMMA arg multargs .)
    def             reduce using rule 129 (multargs -> COMMA arg multargs .)
    break           reduce using rule 129 (multargs -> COMMA arg multargs .)
    if              reduce using rule 129 (multargs -> COMMA arg multargs .)
    while           reduce using rule 129 (multargs -> COMMA arg multargs .)
    case            reduce using rule 129 (multargs -> COMMA arg multargs .)
    for             reduce using rule 129 (multargs -> COMMA arg multargs .)
    return          reduce using rule 129 (multargs -> COMMA arg multargs .)
    IDENTIFIER      reduce using rule 129 (multargs -> COMMA arg multargs .)
    nil             reduce using rule 129 (multargs -> COMMA arg multargs .)
    self            reduce using rule 129 (multargs -> COMMA arg multargs .)
    GLOBAL          reduce using rule 129 (multargs -> COMMA arg multargs .)
    AT_THE_RATE     reduce using rule 129 (multargs -> COMMA arg multargs .)
    MINUS           reduce using rule 129 (multargs -> COMMA arg multargs .)
    PLUS            reduce using rule 129 (multargs -> COMMA arg multargs .)
    OPEN_BRACKET    reduce using rule 129 (multargs -> COMMA arg multargs .)
    CONSTANT_RESOLUTION reduce using rule 129 (multargs -> COMMA arg multargs .)
    Array           reduce using rule 129 (multargs -> COMMA arg multargs .)
    NUMBER          reduce using rule 129 (multargs -> COMMA arg multargs .)
    FLOAT           reduce using rule 129 (multargs -> COMMA arg multargs .)
    STRING          reduce using rule 129 (multargs -> COMMA arg multargs .)
    true            reduce using rule 129 (multargs -> COMMA arg multargs .)
    false           reduce using rule 129 (multargs -> COMMA arg multargs .)
    $end            reduce using rule 129 (multargs -> COMMA arg multargs .)
    end             reduce using rule 129 (multargs -> COMMA arg multargs .)
    then            reduce using rule 129 (multargs -> COMMA arg multargs .)
    do              reduce using rule 129 (multargs -> COMMA arg multargs .)
    CLOSE_BRACKET   reduce using rule 129 (multargs -> COMMA arg multargs .)


state 263

    (148) multassocs -> COMMA assoc multassocs .

    COMMA           reduce using rule 148 (multassocs -> COMMA assoc multassocs .)
    SEMI_COLON      reduce using rule 148 (multassocs -> COMMA assoc multassocs .)
    NEWLINE         reduce using rule 148 (multassocs -> COMMA assoc multassocs .)
    def             reduce using rule 148 (multassocs -> COMMA assoc multassocs .)
    break           reduce using rule 148 (multassocs -> COMMA assoc multassocs .)
    if              reduce using rule 148 (multassocs -> COMMA assoc multassocs .)
    while           reduce using rule 148 (multassocs -> COMMA assoc multassocs .)
    case            reduce using rule 148 (multassocs -> COMMA assoc multassocs .)
    for             reduce using rule 148 (multassocs -> COMMA assoc multassocs .)
    return          reduce using rule 148 (multassocs -> COMMA assoc multassocs .)
    IDENTIFIER      reduce using rule 148 (multassocs -> COMMA assoc multassocs .)
    nil             reduce using rule 148 (multassocs -> COMMA assoc multassocs .)
    self            reduce using rule 148 (multassocs -> COMMA assoc multassocs .)
    GLOBAL          reduce using rule 148 (multassocs -> COMMA assoc multassocs .)
    AT_THE_RATE     reduce using rule 148 (multassocs -> COMMA assoc multassocs .)
    MINUS           reduce using rule 148 (multassocs -> COMMA assoc multassocs .)
    PLUS            reduce using rule 148 (multassocs -> COMMA assoc multassocs .)
    OPEN_BRACKET    reduce using rule 148 (multassocs -> COMMA assoc multassocs .)
    CONSTANT_RESOLUTION reduce using rule 148 (multassocs -> COMMA assoc multassocs .)
    Array           reduce using rule 148 (multassocs -> COMMA assoc multassocs .)
    NUMBER          reduce using rule 148 (multassocs -> COMMA assoc multassocs .)
    FLOAT           reduce using rule 148 (multassocs -> COMMA assoc multassocs .)
    STRING          reduce using rule 148 (multassocs -> COMMA assoc multassocs .)
    true            reduce using rule 148 (multassocs -> COMMA assoc multassocs .)
    false           reduce using rule 148 (multassocs -> COMMA assoc multassocs .)
    $end            reduce using rule 148 (multassocs -> COMMA assoc multassocs .)
    end             reduce using rule 148 (multassocs -> COMMA assoc multassocs .)
    then            reduce using rule 148 (multassocs -> COMMA assoc multassocs .)
    do              reduce using rule 148 (multassocs -> COMMA assoc multassocs .)
    CLOSE_BRACKET   reduce using rule 148 (multassocs -> COMMA assoc multassocs .)


state 264

    (86) array_args -> primary COMMA array_args .

    CLOSE_SQUARE    reduce using rule 86 (array_args -> primary COMMA array_args .)


state 265

    (83) array_size -> primary COMMA array_size .

    CLOSE_BRACKET   reduce using rule 83 (array_size -> primary COMMA array_size .)


state 266

    (133) arglist -> IDENTIFIER multarglist COMMA MULTIPLY . IDENTIFIER COMMA BIT_AND IDENTIFIER
    (134) arglist -> IDENTIFIER multarglist COMMA MULTIPLY . COMMA BIT_AND IDENTIFIER
    (136) arglist -> IDENTIFIER multarglist COMMA MULTIPLY . IDENTIFIER
    (137) arglist -> IDENTIFIER multarglist COMMA MULTIPLY .

    IDENTIFIER      shift and go to state 286
    COMMA           shift and go to state 287
    SEMI_COLON      reduce using rule 137 (arglist -> IDENTIFIER multarglist COMMA MULTIPLY .)
    NEWLINE         reduce using rule 137 (arglist -> IDENTIFIER multarglist COMMA MULTIPLY .)
    CLOSE_BRACKET   reduce using rule 137 (arglist -> IDENTIFIER multarglist COMMA MULTIPLY .)


state 267

    (135) arglist -> IDENTIFIER multarglist COMMA BIT_AND . IDENTIFIER

    IDENTIFIER      shift and go to state 288


state 268

    (143) multarglist -> COMMA IDENTIFIER multarglist .

    COMMA           reduce using rule 143 (multarglist -> COMMA IDENTIFIER multarglist .)
    SEMI_COLON      reduce using rule 143 (multarglist -> COMMA IDENTIFIER multarglist .)
    NEWLINE         reduce using rule 143 (multarglist -> COMMA IDENTIFIER multarglist .)
    CLOSE_BRACKET   reduce using rule 143 (multarglist -> COMMA IDENTIFIER multarglist .)


state 269

    (139) arglist -> MULTIPLY IDENTIFIER COMMA BIT_AND . IDENTIFIER

    IDENTIFIER      shift and go to state 289


state 270

    (12) expr -> if expr1 pthen M_1 multstmt else . newline M_1 multstmt end M_1
    (176) newline -> . SEMI_COLON
    (177) newline -> . NEWLINE

    SEMI_COLON      shift and go to state 6
    NEWLINE         shift and go to state 7

    newline                        shift and go to state 290

state 271

    (13) expr -> if expr1 pthen M_1 multstmt end . M_1
    (18) M_1 -> . empty
    (178) empty -> .

    SEMI_COLON      reduce using rule 178 (empty -> .)
    NEWLINE         reduce using rule 178 (empty -> .)
    def             reduce using rule 178 (empty -> .)
    break           reduce using rule 178 (empty -> .)
    if              reduce using rule 178 (empty -> .)
    while           reduce using rule 178 (empty -> .)
    case            reduce using rule 178 (empty -> .)
    for             reduce using rule 178 (empty -> .)
    return          reduce using rule 178 (empty -> .)
    IDENTIFIER      reduce using rule 178 (empty -> .)
    nil             reduce using rule 178 (empty -> .)
    self            reduce using rule 178 (empty -> .)
    GLOBAL          reduce using rule 178 (empty -> .)
    AT_THE_RATE     reduce using rule 178 (empty -> .)
    MINUS           reduce using rule 178 (empty -> .)
    PLUS            reduce using rule 178 (empty -> .)
    OPEN_BRACKET    reduce using rule 178 (empty -> .)
    CONSTANT_RESOLUTION reduce using rule 178 (empty -> .)
    Array           reduce using rule 178 (empty -> .)
    NUMBER          reduce using rule 178 (empty -> .)
    FLOAT           reduce using rule 178 (empty -> .)
    STRING          reduce using rule 178 (empty -> .)
    true            reduce using rule 178 (empty -> .)
    false           reduce using rule 178 (empty -> .)
    $end            reduce using rule 178 (empty -> .)
    end             reduce using rule 178 (empty -> .)

    M_1                            shift and go to state 291
    empty                          shift and go to state 65

state 272

    (14) expr -> while M_1 expr1 pdo M_1 multstmt . end M_1

    end             shift and go to state 292


state 273

    (15) expr -> case multstmt M_1 multcase end M_1 .

    SEMI_COLON      reduce using rule 15 (expr -> case multstmt M_1 multcase end M_1 .)
    NEWLINE         reduce using rule 15 (expr -> case multstmt M_1 multcase end M_1 .)
    def             reduce using rule 15 (expr -> case multstmt M_1 multcase end M_1 .)
    break           reduce using rule 15 (expr -> case multstmt M_1 multcase end M_1 .)
    if              reduce using rule 15 (expr -> case multstmt M_1 multcase end M_1 .)
    while           reduce using rule 15 (expr -> case multstmt M_1 multcase end M_1 .)
    case            reduce using rule 15 (expr -> case multstmt M_1 multcase end M_1 .)
    for             reduce using rule 15 (expr -> case multstmt M_1 multcase end M_1 .)
    return          reduce using rule 15 (expr -> case multstmt M_1 multcase end M_1 .)
    IDENTIFIER      reduce using rule 15 (expr -> case multstmt M_1 multcase end M_1 .)
    nil             reduce using rule 15 (expr -> case multstmt M_1 multcase end M_1 .)
    self            reduce using rule 15 (expr -> case multstmt M_1 multcase end M_1 .)
    GLOBAL          reduce using rule 15 (expr -> case multstmt M_1 multcase end M_1 .)
    AT_THE_RATE     reduce using rule 15 (expr -> case multstmt M_1 multcase end M_1 .)
    MINUS           reduce using rule 15 (expr -> case multstmt M_1 multcase end M_1 .)
    PLUS            reduce using rule 15 (expr -> case multstmt M_1 multcase end M_1 .)
    OPEN_BRACKET    reduce using rule 15 (expr -> case multstmt M_1 multcase end M_1 .)
    CONSTANT_RESOLUTION reduce using rule 15 (expr -> case multstmt M_1 multcase end M_1 .)
    Array           reduce using rule 15 (expr -> case multstmt M_1 multcase end M_1 .)
    NUMBER          reduce using rule 15 (expr -> case multstmt M_1 multcase end M_1 .)
    FLOAT           reduce using rule 15 (expr -> case multstmt M_1 multcase end M_1 .)
    STRING          reduce using rule 15 (expr -> case multstmt M_1 multcase end M_1 .)
    true            reduce using rule 15 (expr -> case multstmt M_1 multcase end M_1 .)
    false           reduce using rule 15 (expr -> case multstmt M_1 multcase end M_1 .)
    $end            reduce using rule 15 (expr -> case multstmt M_1 multcase end M_1 .)
    end             reduce using rule 15 (expr -> case multstmt M_1 multcase end M_1 .)


state 274

    (88) multcase -> when whenargs pthen . M_1 multstmt multcase M_1
    (89) multcase -> when whenargs pthen . M_1 multstmt M_1
    (18) M_1 -> . empty
    (178) empty -> .

    def             reduce using rule 178 (empty -> .)
    break           reduce using rule 178 (empty -> .)
    if              reduce using rule 178 (empty -> .)
    while           reduce using rule 178 (empty -> .)
    case            reduce using rule 178 (empty -> .)
    for             reduce using rule 178 (empty -> .)
    return          reduce using rule 178 (empty -> .)
    IDENTIFIER      reduce using rule 178 (empty -> .)
    nil             reduce using rule 178 (empty -> .)
    self            reduce using rule 178 (empty -> .)
    GLOBAL          reduce using rule 178 (empty -> .)
    AT_THE_RATE     reduce using rule 178 (empty -> .)
    MINUS           reduce using rule 178 (empty -> .)
    PLUS            reduce using rule 178 (empty -> .)
    OPEN_BRACKET    reduce using rule 178 (empty -> .)
    CONSTANT_RESOLUTION reduce using rule 178 (empty -> .)
    Array           reduce using rule 178 (empty -> .)
    NUMBER          reduce using rule 178 (empty -> .)
    FLOAT           reduce using rule 178 (empty -> .)
    STRING          reduce using rule 178 (empty -> .)
    true            reduce using rule 178 (empty -> .)
    false           reduce using rule 178 (empty -> .)
    when            reduce using rule 178 (empty -> .)
    end             reduce using rule 178 (empty -> .)

    M_1                            shift and go to state 293
    empty                          shift and go to state 65

state 275

    (97) whenargs -> args COMMA . MULTIPLY arg

    MULTIPLY        shift and go to state 294


state 276

    (99) whenargs -> MULTIPLY arg .
    (29) arg -> arg . BIT_OR term0

    then            reduce using rule 99 (whenargs -> MULTIPLY arg .)
    SEMI_COLON      reduce using rule 99 (whenargs -> MULTIPLY arg .)
    NEWLINE         reduce using rule 99 (whenargs -> MULTIPLY arg .)
    BIT_OR          shift and go to state 98


state 277

    (16) expr -> for mlhs in expr1 pdo compstmt . end

    end             shift and go to state 295


state 278

    (32) term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .

    BIT_OR          reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    SEMI_COLON      reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    NEWLINE         reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    def             reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    break           reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    if              reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    while           reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    case            reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    for             reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    return          reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    nil             reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    self            reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    GLOBAL          reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    MINUS           reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    PLUS            reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    CONSTANT_RESOLUTION reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    Array           reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    NUMBER          reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    FLOAT           reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    STRING          reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    true            reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    false           reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    $end            reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    end             reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    then            reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    MAP             reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    COMMA           reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    do              reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 32 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)


state 279

    (112) mrhs -> args COMMA MULTIPLY arg .
    (29) arg -> arg . BIT_OR term0

  ! shift/reduce conflict for BIT_OR resolved as shift
    SEMI_COLON      reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    NEWLINE         reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    def             reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    break           reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    if              reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    while           reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    case            reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    for             reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    return          reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    IDENTIFIER      reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    nil             reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    self            reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    GLOBAL          reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    AT_THE_RATE     reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    MINUS           reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    PLUS            reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    OPEN_BRACKET    reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    CONSTANT_RESOLUTION reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    Array           reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    NUMBER          reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    FLOAT           reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    STRING          reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    true            reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    false           reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    $end            reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    end             reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    then            reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    MAP             reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    COMMA           reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    do              reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    CLOSE_BRACKET   reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    BIT_OR          shift and go to state 98

  ! BIT_OR          [ reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .) ]


state 280

    (33) term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .

    BIT_OR          reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    SEMI_COLON      reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    NEWLINE         reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    def             reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    break           reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    if              reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    while           reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    case            reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    for             reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    return          reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    nil             reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    self            reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    GLOBAL          reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    MINUS           reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    PLUS            reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    CONSTANT_RESOLUTION reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    Array           reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    NUMBER          reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    FLOAT           reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    STRING          reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    true            reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    false           reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    $end            reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    end             reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    then            reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    MAP             reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    COMMA           reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    do              reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 33 (term0 -> mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)


state 281

    (115) callargs -> args COMMA assocs COMMA MULTIPLY . arg COMMA BIT_AND arg
    (118) callargs -> args COMMA assocs COMMA MULTIPLY . arg
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    IDENTIFIER      shift and go to state 70
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    arg                            shift and go to state 296
    term0                          shift and go to state 25
    mlhs                           shift and go to state 18
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 282

    (117) callargs -> args COMMA assocs COMMA BIT_AND . arg
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    IDENTIFIER      shift and go to state 70
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    arg                            shift and go to state 297
    term0                          shift and go to state 25
    mlhs                           shift and go to state 18
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 283

    (116) callargs -> args COMMA MULTIPLY arg COMMA . BIT_AND arg

    BIT_AND         shift and go to state 298


state 284

    (122) callargs -> assocs COMMA MULTIPLY arg COMMA . BIT_AND arg

    BIT_AND         shift and go to state 299


state 285

    (126) callargs -> MULTIPLY arg COMMA BIT_AND arg .
    (29) arg -> arg . BIT_OR term0

    SEMI_COLON      reduce using rule 126 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    NEWLINE         reduce using rule 126 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    def             reduce using rule 126 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    break           reduce using rule 126 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    if              reduce using rule 126 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    while           reduce using rule 126 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    case            reduce using rule 126 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    for             reduce using rule 126 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    return          reduce using rule 126 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    IDENTIFIER      reduce using rule 126 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    nil             reduce using rule 126 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    self            reduce using rule 126 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    GLOBAL          reduce using rule 126 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    AT_THE_RATE     reduce using rule 126 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    MINUS           reduce using rule 126 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    PLUS            reduce using rule 126 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    OPEN_BRACKET    reduce using rule 126 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    CONSTANT_RESOLUTION reduce using rule 126 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    Array           reduce using rule 126 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    NUMBER          reduce using rule 126 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    FLOAT           reduce using rule 126 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    STRING          reduce using rule 126 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    true            reduce using rule 126 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    false           reduce using rule 126 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    $end            reduce using rule 126 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    end             reduce using rule 126 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    then            reduce using rule 126 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    do              reduce using rule 126 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    CLOSE_BRACKET   reduce using rule 126 (callargs -> MULTIPLY arg COMMA BIT_AND arg .)
    BIT_OR          shift and go to state 98


state 286

    (133) arglist -> IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER . COMMA BIT_AND IDENTIFIER
    (136) arglist -> IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER .

    COMMA           shift and go to state 300
    SEMI_COLON      reduce using rule 136 (arglist -> IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER .)
    NEWLINE         reduce using rule 136 (arglist -> IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 136 (arglist -> IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER .)


state 287

    (134) arglist -> IDENTIFIER multarglist COMMA MULTIPLY COMMA . BIT_AND IDENTIFIER

    BIT_AND         shift and go to state 301


state 288

    (135) arglist -> IDENTIFIER multarglist COMMA BIT_AND IDENTIFIER .

    SEMI_COLON      reduce using rule 135 (arglist -> IDENTIFIER multarglist COMMA BIT_AND IDENTIFIER .)
    NEWLINE         reduce using rule 135 (arglist -> IDENTIFIER multarglist COMMA BIT_AND IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 135 (arglist -> IDENTIFIER multarglist COMMA BIT_AND IDENTIFIER .)


state 289

    (139) arglist -> MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER .

    SEMI_COLON      reduce using rule 139 (arglist -> MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER .)
    NEWLINE         reduce using rule 139 (arglist -> MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 139 (arglist -> MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER .)


state 290

    (12) expr -> if expr1 pthen M_1 multstmt else newline . M_1 multstmt end M_1
    (18) M_1 -> . empty
    (178) empty -> .

    def             reduce using rule 178 (empty -> .)
    break           reduce using rule 178 (empty -> .)
    if              reduce using rule 178 (empty -> .)
    while           reduce using rule 178 (empty -> .)
    case            reduce using rule 178 (empty -> .)
    for             reduce using rule 178 (empty -> .)
    return          reduce using rule 178 (empty -> .)
    IDENTIFIER      reduce using rule 178 (empty -> .)
    nil             reduce using rule 178 (empty -> .)
    self            reduce using rule 178 (empty -> .)
    GLOBAL          reduce using rule 178 (empty -> .)
    AT_THE_RATE     reduce using rule 178 (empty -> .)
    MINUS           reduce using rule 178 (empty -> .)
    PLUS            reduce using rule 178 (empty -> .)
    OPEN_BRACKET    reduce using rule 178 (empty -> .)
    CONSTANT_RESOLUTION reduce using rule 178 (empty -> .)
    Array           reduce using rule 178 (empty -> .)
    NUMBER          reduce using rule 178 (empty -> .)
    FLOAT           reduce using rule 178 (empty -> .)
    STRING          reduce using rule 178 (empty -> .)
    true            reduce using rule 178 (empty -> .)
    false           reduce using rule 178 (empty -> .)
    end             reduce using rule 178 (empty -> .)

    M_1                            shift and go to state 302
    empty                          shift and go to state 65

state 291

    (13) expr -> if expr1 pthen M_1 multstmt end M_1 .

    SEMI_COLON      reduce using rule 13 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    NEWLINE         reduce using rule 13 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    def             reduce using rule 13 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    break           reduce using rule 13 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    if              reduce using rule 13 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    while           reduce using rule 13 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    case            reduce using rule 13 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    for             reduce using rule 13 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    return          reduce using rule 13 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    IDENTIFIER      reduce using rule 13 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    nil             reduce using rule 13 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    self            reduce using rule 13 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    GLOBAL          reduce using rule 13 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    AT_THE_RATE     reduce using rule 13 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    MINUS           reduce using rule 13 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    PLUS            reduce using rule 13 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    OPEN_BRACKET    reduce using rule 13 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    CONSTANT_RESOLUTION reduce using rule 13 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    Array           reduce using rule 13 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    NUMBER          reduce using rule 13 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    FLOAT           reduce using rule 13 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    STRING          reduce using rule 13 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    true            reduce using rule 13 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    false           reduce using rule 13 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    $end            reduce using rule 13 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    end             reduce using rule 13 (expr -> if expr1 pthen M_1 multstmt end M_1 .)


state 292

    (14) expr -> while M_1 expr1 pdo M_1 multstmt end . M_1
    (18) M_1 -> . empty
    (178) empty -> .

    SEMI_COLON      reduce using rule 178 (empty -> .)
    NEWLINE         reduce using rule 178 (empty -> .)
    def             reduce using rule 178 (empty -> .)
    break           reduce using rule 178 (empty -> .)
    if              reduce using rule 178 (empty -> .)
    while           reduce using rule 178 (empty -> .)
    case            reduce using rule 178 (empty -> .)
    for             reduce using rule 178 (empty -> .)
    return          reduce using rule 178 (empty -> .)
    IDENTIFIER      reduce using rule 178 (empty -> .)
    nil             reduce using rule 178 (empty -> .)
    self            reduce using rule 178 (empty -> .)
    GLOBAL          reduce using rule 178 (empty -> .)
    AT_THE_RATE     reduce using rule 178 (empty -> .)
    MINUS           reduce using rule 178 (empty -> .)
    PLUS            reduce using rule 178 (empty -> .)
    OPEN_BRACKET    reduce using rule 178 (empty -> .)
    CONSTANT_RESOLUTION reduce using rule 178 (empty -> .)
    Array           reduce using rule 178 (empty -> .)
    NUMBER          reduce using rule 178 (empty -> .)
    FLOAT           reduce using rule 178 (empty -> .)
    STRING          reduce using rule 178 (empty -> .)
    true            reduce using rule 178 (empty -> .)
    false           reduce using rule 178 (empty -> .)
    $end            reduce using rule 178 (empty -> .)
    end             reduce using rule 178 (empty -> .)

    M_1                            shift and go to state 303
    empty                          shift and go to state 65

state 293

    (88) multcase -> when whenargs pthen M_1 . multstmt multcase M_1
    (89) multcase -> when whenargs pthen M_1 . multstmt M_1
    (10) multstmt -> . stmt newline multstmt
    (11) multstmt -> . empty
    (7) stmt -> . def IDENTIFIER argdecl compstmt end
    (8) stmt -> . break
    (9) stmt -> . expr
    (178) empty -> .
    (12) expr -> . if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
    (13) expr -> . if expr1 pthen M_1 multstmt end M_1
    (14) expr -> . while M_1 expr1 pdo M_1 multstmt end M_1
    (15) expr -> . case multstmt M_1 multcase end M_1
    (16) expr -> . for mlhs in expr1 pdo compstmt end
    (17) expr -> . expr1
    (19) expr1 -> . return callargs
    (20) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (21) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (22) expr1 -> . return
    (23) expr1 -> . expr2
    (24) expr2 -> . call
    (25) expr2 -> . arg
    (26) call -> . function
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (27) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (28) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    def             shift and go to state 9
    break           shift and go to state 11
    when            reduce using rule 178 (empty -> .)
    end             reduce using rule 178 (empty -> .)
    if              shift and go to state 13
    while           shift and go to state 15
    case            shift and go to state 16
    for             shift and go to state 17
    return          shift and go to state 19
    IDENTIFIER      shift and go to state 10
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    multstmt                       shift and go to state 304
    stmt                           shift and go to state 67
    empty                          shift and go to state 68
    expr                           shift and go to state 12
    expr1                          shift and go to state 14
    mlhs                           shift and go to state 18
    expr2                          shift and go to state 21
    call                           shift and go to state 22
    arg                            shift and go to state 23
    function                       shift and go to state 24
    term0                          shift and go to state 25
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 294

    (97) whenargs -> args COMMA MULTIPLY . arg
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    IDENTIFIER      shift and go to state 70
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    arg                            shift and go to state 305
    term0                          shift and go to state 25
    mlhs                           shift and go to state 18
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 295

    (16) expr -> for mlhs in expr1 pdo compstmt end .

    SEMI_COLON      reduce using rule 16 (expr -> for mlhs in expr1 pdo compstmt end .)
    NEWLINE         reduce using rule 16 (expr -> for mlhs in expr1 pdo compstmt end .)
    def             reduce using rule 16 (expr -> for mlhs in expr1 pdo compstmt end .)
    break           reduce using rule 16 (expr -> for mlhs in expr1 pdo compstmt end .)
    if              reduce using rule 16 (expr -> for mlhs in expr1 pdo compstmt end .)
    while           reduce using rule 16 (expr -> for mlhs in expr1 pdo compstmt end .)
    case            reduce using rule 16 (expr -> for mlhs in expr1 pdo compstmt end .)
    for             reduce using rule 16 (expr -> for mlhs in expr1 pdo compstmt end .)
    return          reduce using rule 16 (expr -> for mlhs in expr1 pdo compstmt end .)
    IDENTIFIER      reduce using rule 16 (expr -> for mlhs in expr1 pdo compstmt end .)
    nil             reduce using rule 16 (expr -> for mlhs in expr1 pdo compstmt end .)
    self            reduce using rule 16 (expr -> for mlhs in expr1 pdo compstmt end .)
    GLOBAL          reduce using rule 16 (expr -> for mlhs in expr1 pdo compstmt end .)
    AT_THE_RATE     reduce using rule 16 (expr -> for mlhs in expr1 pdo compstmt end .)
    MINUS           reduce using rule 16 (expr -> for mlhs in expr1 pdo compstmt end .)
    PLUS            reduce using rule 16 (expr -> for mlhs in expr1 pdo compstmt end .)
    OPEN_BRACKET    reduce using rule 16 (expr -> for mlhs in expr1 pdo compstmt end .)
    CONSTANT_RESOLUTION reduce using rule 16 (expr -> for mlhs in expr1 pdo compstmt end .)
    Array           reduce using rule 16 (expr -> for mlhs in expr1 pdo compstmt end .)
    NUMBER          reduce using rule 16 (expr -> for mlhs in expr1 pdo compstmt end .)
    FLOAT           reduce using rule 16 (expr -> for mlhs in expr1 pdo compstmt end .)
    STRING          reduce using rule 16 (expr -> for mlhs in expr1 pdo compstmt end .)
    true            reduce using rule 16 (expr -> for mlhs in expr1 pdo compstmt end .)
    false           reduce using rule 16 (expr -> for mlhs in expr1 pdo compstmt end .)
    $end            reduce using rule 16 (expr -> for mlhs in expr1 pdo compstmt end .)
    end             reduce using rule 16 (expr -> for mlhs in expr1 pdo compstmt end .)


state 296

    (115) callargs -> args COMMA assocs COMMA MULTIPLY arg . COMMA BIT_AND arg
    (118) callargs -> args COMMA assocs COMMA MULTIPLY arg .
    (29) arg -> arg . BIT_OR term0

    COMMA           shift and go to state 306
    SEMI_COLON      reduce using rule 118 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    NEWLINE         reduce using rule 118 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    def             reduce using rule 118 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    break           reduce using rule 118 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    if              reduce using rule 118 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    while           reduce using rule 118 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    case            reduce using rule 118 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    for             reduce using rule 118 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    return          reduce using rule 118 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    IDENTIFIER      reduce using rule 118 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    nil             reduce using rule 118 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    self            reduce using rule 118 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    GLOBAL          reduce using rule 118 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    AT_THE_RATE     reduce using rule 118 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    MINUS           reduce using rule 118 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    PLUS            reduce using rule 118 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    OPEN_BRACKET    reduce using rule 118 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    CONSTANT_RESOLUTION reduce using rule 118 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    Array           reduce using rule 118 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    NUMBER          reduce using rule 118 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    FLOAT           reduce using rule 118 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    STRING          reduce using rule 118 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    true            reduce using rule 118 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    false           reduce using rule 118 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    $end            reduce using rule 118 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    end             reduce using rule 118 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    then            reduce using rule 118 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    do              reduce using rule 118 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    CLOSE_BRACKET   reduce using rule 118 (callargs -> args COMMA assocs COMMA MULTIPLY arg .)
    BIT_OR          shift and go to state 98


state 297

    (117) callargs -> args COMMA assocs COMMA BIT_AND arg .
    (29) arg -> arg . BIT_OR term0

    SEMI_COLON      reduce using rule 117 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    NEWLINE         reduce using rule 117 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    def             reduce using rule 117 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    break           reduce using rule 117 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    if              reduce using rule 117 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    while           reduce using rule 117 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    case            reduce using rule 117 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    for             reduce using rule 117 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    return          reduce using rule 117 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    IDENTIFIER      reduce using rule 117 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    nil             reduce using rule 117 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    self            reduce using rule 117 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    GLOBAL          reduce using rule 117 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    AT_THE_RATE     reduce using rule 117 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    MINUS           reduce using rule 117 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    PLUS            reduce using rule 117 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    OPEN_BRACKET    reduce using rule 117 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    CONSTANT_RESOLUTION reduce using rule 117 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    Array           reduce using rule 117 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    NUMBER          reduce using rule 117 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    FLOAT           reduce using rule 117 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    STRING          reduce using rule 117 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    true            reduce using rule 117 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    false           reduce using rule 117 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    $end            reduce using rule 117 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    end             reduce using rule 117 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    then            reduce using rule 117 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    do              reduce using rule 117 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    CLOSE_BRACKET   reduce using rule 117 (callargs -> args COMMA assocs COMMA BIT_AND arg .)
    BIT_OR          shift and go to state 98


state 298

    (116) callargs -> args COMMA MULTIPLY arg COMMA BIT_AND . arg
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    IDENTIFIER      shift and go to state 70
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    arg                            shift and go to state 307
    term0                          shift and go to state 25
    mlhs                           shift and go to state 18
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 299

    (122) callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND . arg
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    IDENTIFIER      shift and go to state 70
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    arg                            shift and go to state 308
    term0                          shift and go to state 25
    mlhs                           shift and go to state 18
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 300

    (133) arglist -> IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER COMMA . BIT_AND IDENTIFIER

    BIT_AND         shift and go to state 309


state 301

    (134) arglist -> IDENTIFIER multarglist COMMA MULTIPLY COMMA BIT_AND . IDENTIFIER

    IDENTIFIER      shift and go to state 310


state 302

    (12) expr -> if expr1 pthen M_1 multstmt else newline M_1 . multstmt end M_1
    (10) multstmt -> . stmt newline multstmt
    (11) multstmt -> . empty
    (7) stmt -> . def IDENTIFIER argdecl compstmt end
    (8) stmt -> . break
    (9) stmt -> . expr
    (178) empty -> .
    (12) expr -> . if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
    (13) expr -> . if expr1 pthen M_1 multstmt end M_1
    (14) expr -> . while M_1 expr1 pdo M_1 multstmt end M_1
    (15) expr -> . case multstmt M_1 multcase end M_1
    (16) expr -> . for mlhs in expr1 pdo compstmt end
    (17) expr -> . expr1
    (19) expr1 -> . return callargs
    (20) expr1 -> . return OPEN_BRACKET callargs CLOSE_BRACKET
    (21) expr1 -> . return OPEN_BRACKET CLOSE_BRACKET
    (22) expr1 -> . return
    (23) expr1 -> . expr2
    (24) expr2 -> . call
    (25) expr2 -> . arg
    (26) call -> . function
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (27) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (28) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    def             shift and go to state 9
    break           shift and go to state 11
    end             reduce using rule 178 (empty -> .)
    if              shift and go to state 13
    while           shift and go to state 15
    case            shift and go to state 16
    for             shift and go to state 17
    return          shift and go to state 19
    IDENTIFIER      shift and go to state 10
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    expr1                          shift and go to state 14
    multstmt                       shift and go to state 311
    stmt                           shift and go to state 67
    empty                          shift and go to state 68
    expr                           shift and go to state 12
    mlhs                           shift and go to state 18
    expr2                          shift and go to state 21
    call                           shift and go to state 22
    arg                            shift and go to state 23
    function                       shift and go to state 24
    term0                          shift and go to state 25
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 303

    (14) expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .

    SEMI_COLON      reduce using rule 14 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    NEWLINE         reduce using rule 14 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    def             reduce using rule 14 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    break           reduce using rule 14 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    if              reduce using rule 14 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    while           reduce using rule 14 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    case            reduce using rule 14 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    for             reduce using rule 14 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    return          reduce using rule 14 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    IDENTIFIER      reduce using rule 14 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    nil             reduce using rule 14 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    self            reduce using rule 14 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    GLOBAL          reduce using rule 14 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    AT_THE_RATE     reduce using rule 14 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    MINUS           reduce using rule 14 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    PLUS            reduce using rule 14 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    OPEN_BRACKET    reduce using rule 14 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    CONSTANT_RESOLUTION reduce using rule 14 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    Array           reduce using rule 14 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    NUMBER          reduce using rule 14 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    FLOAT           reduce using rule 14 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    STRING          reduce using rule 14 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    true            reduce using rule 14 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    false           reduce using rule 14 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    $end            reduce using rule 14 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    end             reduce using rule 14 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)


state 304

    (88) multcase -> when whenargs pthen M_1 multstmt . multcase M_1
    (89) multcase -> when whenargs pthen M_1 multstmt . M_1
    (88) multcase -> . when whenargs pthen M_1 multstmt multcase M_1
    (89) multcase -> . when whenargs pthen M_1 multstmt M_1
    (18) M_1 -> . empty
    (178) empty -> .

    when            shift and go to state 217
    end             reduce using rule 178 (empty -> .)

    M_1                            shift and go to state 312
    multcase                       shift and go to state 313
    empty                          shift and go to state 65

state 305

    (97) whenargs -> args COMMA MULTIPLY arg .
    (29) arg -> arg . BIT_OR term0

    then            reduce using rule 97 (whenargs -> args COMMA MULTIPLY arg .)
    SEMI_COLON      reduce using rule 97 (whenargs -> args COMMA MULTIPLY arg .)
    NEWLINE         reduce using rule 97 (whenargs -> args COMMA MULTIPLY arg .)
    BIT_OR          shift and go to state 98


state 306

    (115) callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA . BIT_AND arg

    BIT_AND         shift and go to state 314


state 307

    (116) callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .
    (29) arg -> arg . BIT_OR term0

    SEMI_COLON      reduce using rule 116 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    NEWLINE         reduce using rule 116 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    def             reduce using rule 116 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    break           reduce using rule 116 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    if              reduce using rule 116 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    while           reduce using rule 116 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    case            reduce using rule 116 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    for             reduce using rule 116 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    return          reduce using rule 116 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    IDENTIFIER      reduce using rule 116 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    nil             reduce using rule 116 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    self            reduce using rule 116 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    GLOBAL          reduce using rule 116 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    AT_THE_RATE     reduce using rule 116 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    MINUS           reduce using rule 116 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    PLUS            reduce using rule 116 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    OPEN_BRACKET    reduce using rule 116 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    CONSTANT_RESOLUTION reduce using rule 116 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    Array           reduce using rule 116 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    NUMBER          reduce using rule 116 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    FLOAT           reduce using rule 116 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    STRING          reduce using rule 116 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    true            reduce using rule 116 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    false           reduce using rule 116 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    $end            reduce using rule 116 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    end             reduce using rule 116 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    then            reduce using rule 116 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    do              reduce using rule 116 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    CLOSE_BRACKET   reduce using rule 116 (callargs -> args COMMA MULTIPLY arg COMMA BIT_AND arg .)
    BIT_OR          shift and go to state 98


state 308

    (122) callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .
    (29) arg -> arg . BIT_OR term0

    SEMI_COLON      reduce using rule 122 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    NEWLINE         reduce using rule 122 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    def             reduce using rule 122 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    break           reduce using rule 122 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    if              reduce using rule 122 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    while           reduce using rule 122 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    case            reduce using rule 122 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    for             reduce using rule 122 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    return          reduce using rule 122 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    IDENTIFIER      reduce using rule 122 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    nil             reduce using rule 122 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    self            reduce using rule 122 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    GLOBAL          reduce using rule 122 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    AT_THE_RATE     reduce using rule 122 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    MINUS           reduce using rule 122 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    PLUS            reduce using rule 122 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    OPEN_BRACKET    reduce using rule 122 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    CONSTANT_RESOLUTION reduce using rule 122 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    Array           reduce using rule 122 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    NUMBER          reduce using rule 122 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    FLOAT           reduce using rule 122 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    STRING          reduce using rule 122 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    true            reduce using rule 122 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    false           reduce using rule 122 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    $end            reduce using rule 122 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    end             reduce using rule 122 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    then            reduce using rule 122 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    do              reduce using rule 122 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    CLOSE_BRACKET   reduce using rule 122 (callargs -> assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    BIT_OR          shift and go to state 98


state 309

    (133) arglist -> IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER COMMA BIT_AND . IDENTIFIER

    IDENTIFIER      shift and go to state 315


state 310

    (134) arglist -> IDENTIFIER multarglist COMMA MULTIPLY COMMA BIT_AND IDENTIFIER .

    SEMI_COLON      reduce using rule 134 (arglist -> IDENTIFIER multarglist COMMA MULTIPLY COMMA BIT_AND IDENTIFIER .)
    NEWLINE         reduce using rule 134 (arglist -> IDENTIFIER multarglist COMMA MULTIPLY COMMA BIT_AND IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 134 (arglist -> IDENTIFIER multarglist COMMA MULTIPLY COMMA BIT_AND IDENTIFIER .)


state 311

    (12) expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt . end M_1

    end             shift and go to state 316


state 312

    (89) multcase -> when whenargs pthen M_1 multstmt M_1 .

    end             reduce using rule 89 (multcase -> when whenargs pthen M_1 multstmt M_1 .)


state 313

    (88) multcase -> when whenargs pthen M_1 multstmt multcase . M_1
    (18) M_1 -> . empty
    (178) empty -> .

    end             reduce using rule 178 (empty -> .)

    M_1                            shift and go to state 317
    empty                          shift and go to state 65

state 314

    (115) callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND . arg
    (29) arg -> . arg BIT_OR term0
    (30) arg -> . term0
    (31) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (32) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (33) term0 -> . mlhs opasgn IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (34) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (35) term1 -> . mlhs EQUALS mrhs
    (36) term1 -> . mlhs opasgn mrhs
    (37) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arraya
    (38) term2 -> . term3 INCL_RANGE term3
    (39) term2 -> . term3 EXCL_RANGE term3
    (40) term2 -> . term3
    (85) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (41) term3 -> . term3 LOGICAL_OR term4
    (42) term3 -> . term4
    (151) variable -> . varname
    (152) variable -> . nil
    (153) variable -> . self
    (43) term4 -> . term5 DOUBLE_EQUALS term5
    (44) term4 -> . term5 TRIPLE_EQUALS term5
    (45) term4 -> . term5 NOT_EQUALS term5
    (46) term4 -> . term5 EQUAL_TILDE term5
    (47) term4 -> . term5 BANG_TILDE term5
    (48) term4 -> . term5 COMPARISON term5
    (49) term4 -> . term5
    (173) varname -> . GLOBAL
    (174) varname -> . AT_THE_RATE IDENTIFIER
    (175) varname -> . IDENTIFIER
    (50) term5 -> . term5 LESS term6
    (51) term5 -> . term5 LESS_EQUALS term6
    (52) term5 -> . term5 GREATER term6
    (53) term5 -> . term5 GREATER_EQUALS term6
    (54) term5 -> . term6
    (55) term6 -> . term6 BIT_XOR term7
    (56) term6 -> . term7
    (57) term7 -> . term7 BIT_AND term8
    (58) term7 -> . term8
    (59) term8 -> . term8 LEFT_SHIFT term9
    (60) term8 -> . term8 RIGHT_SHIFT term9
    (61) term8 -> . term9
    (62) term9 -> . term9 PLUS term10
    (63) term9 -> . term9 MINUS term10
    (64) term9 -> . term10
    (65) term10 -> . term10 MULTIPLY term11
    (66) term10 -> . term10 DIVIDE term11
    (67) term10 -> . term10 MODULO term11
    (68) term10 -> . term11
    (69) term11 -> . MINUS term11
    (70) term11 -> . term12
    (71) term12 -> . PLUS term12
    (72) term12 -> . term13
    (73) term13 -> . primary POWER term13
    (74) term13 -> . primary
    (75) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (76) primary -> . variable CONSTANT_RESOLUTION IDENTIFIER
    (77) primary -> . CONSTANT_RESOLUTION IDENTIFIER
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (92) literal -> . NUMBER
    (93) literal -> . FLOAT
    (94) literal -> . STRING
    (95) literal -> . true
    (96) literal -> . false

    IDENTIFIER      shift and go to state 70
    nil             shift and go to state 34
    self            shift and go to state 35
    GLOBAL          shift and go to state 37
    AT_THE_RATE     shift and go to state 38
    MINUS           shift and go to state 45
    PLUS            shift and go to state 43
    OPEN_BRACKET    shift and go to state 20
    CONSTANT_RESOLUTION shift and go to state 50
    Array           shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    STRING          shift and go to state 56
    true            shift and go to state 57
    false           shift and go to state 58

    arg                            shift and go to state 318
    term0                          shift and go to state 25
    mlhs                           shift and go to state 18
    term1                          shift and go to state 26
    mlhsitem                       shift and go to state 27
    term2                          shift and go to state 28
    arraya                         shift and go to state 29
    term3                          shift and go to state 30
    variable                       shift and go to state 31
    term4                          shift and go to state 32
    varname                        shift and go to state 33
    term5                          shift and go to state 36
    term6                          shift and go to state 39
    term7                          shift and go to state 40
    term8                          shift and go to state 41
    term9                          shift and go to state 42
    term10                         shift and go to state 44
    term11                         shift and go to state 46
    term12                         shift and go to state 47
    term13                         shift and go to state 48
    primary                        shift and go to state 49
    arrayd                         shift and go to state 51
    literal                        shift and go to state 52

state 315

    (133) arglist -> IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER .

    SEMI_COLON      reduce using rule 133 (arglist -> IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER .)
    NEWLINE         reduce using rule 133 (arglist -> IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 133 (arglist -> IDENTIFIER multarglist COMMA MULTIPLY IDENTIFIER COMMA BIT_AND IDENTIFIER .)


state 316

    (12) expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end . M_1
    (18) M_1 -> . empty
    (178) empty -> .

    SEMI_COLON      reduce using rule 178 (empty -> .)
    NEWLINE         reduce using rule 178 (empty -> .)
    def             reduce using rule 178 (empty -> .)
    break           reduce using rule 178 (empty -> .)
    if              reduce using rule 178 (empty -> .)
    while           reduce using rule 178 (empty -> .)
    case            reduce using rule 178 (empty -> .)
    for             reduce using rule 178 (empty -> .)
    return          reduce using rule 178 (empty -> .)
    IDENTIFIER      reduce using rule 178 (empty -> .)
    nil             reduce using rule 178 (empty -> .)
    self            reduce using rule 178 (empty -> .)
    GLOBAL          reduce using rule 178 (empty -> .)
    AT_THE_RATE     reduce using rule 178 (empty -> .)
    MINUS           reduce using rule 178 (empty -> .)
    PLUS            reduce using rule 178 (empty -> .)
    OPEN_BRACKET    reduce using rule 178 (empty -> .)
    CONSTANT_RESOLUTION reduce using rule 178 (empty -> .)
    Array           reduce using rule 178 (empty -> .)
    NUMBER          reduce using rule 178 (empty -> .)
    FLOAT           reduce using rule 178 (empty -> .)
    STRING          reduce using rule 178 (empty -> .)
    true            reduce using rule 178 (empty -> .)
    false           reduce using rule 178 (empty -> .)
    $end            reduce using rule 178 (empty -> .)
    end             reduce using rule 178 (empty -> .)

    M_1                            shift and go to state 319
    empty                          shift and go to state 65

state 317

    (88) multcase -> when whenargs pthen M_1 multstmt multcase M_1 .

    end             reduce using rule 88 (multcase -> when whenargs pthen M_1 multstmt multcase M_1 .)


state 318

    (115) callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .
    (29) arg -> arg . BIT_OR term0

    SEMI_COLON      reduce using rule 115 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    NEWLINE         reduce using rule 115 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    def             reduce using rule 115 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    break           reduce using rule 115 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    if              reduce using rule 115 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    while           reduce using rule 115 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    case            reduce using rule 115 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    for             reduce using rule 115 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    return          reduce using rule 115 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    IDENTIFIER      reduce using rule 115 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    nil             reduce using rule 115 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    self            reduce using rule 115 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    GLOBAL          reduce using rule 115 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    AT_THE_RATE     reduce using rule 115 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    MINUS           reduce using rule 115 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    PLUS            reduce using rule 115 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    OPEN_BRACKET    reduce using rule 115 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    CONSTANT_RESOLUTION reduce using rule 115 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    Array           reduce using rule 115 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    NUMBER          reduce using rule 115 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    FLOAT           reduce using rule 115 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    STRING          reduce using rule 115 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    true            reduce using rule 115 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    false           reduce using rule 115 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    $end            reduce using rule 115 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    end             reduce using rule 115 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    then            reduce using rule 115 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    do              reduce using rule 115 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    CLOSE_BRACKET   reduce using rule 115 (callargs -> args COMMA assocs COMMA MULTIPLY arg COMMA BIT_AND arg .)
    BIT_OR          shift and go to state 98


state 319

    (12) expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .

    SEMI_COLON      reduce using rule 12 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    NEWLINE         reduce using rule 12 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    def             reduce using rule 12 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    break           reduce using rule 12 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    if              reduce using rule 12 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    while           reduce using rule 12 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    case            reduce using rule 12 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    for             reduce using rule 12 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    return          reduce using rule 12 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    IDENTIFIER      reduce using rule 12 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    nil             reduce using rule 12 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    self            reduce using rule 12 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    GLOBAL          reduce using rule 12 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    AT_THE_RATE     reduce using rule 12 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    MINUS           reduce using rule 12 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    PLUS            reduce using rule 12 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    OPEN_BRACKET    reduce using rule 12 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    CONSTANT_RESOLUTION reduce using rule 12 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    Array           reduce using rule 12 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    NUMBER          reduce using rule 12 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    FLOAT           reduce using rule 12 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    STRING          reduce using rule 12 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    true            reduce using rule 12 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    false           reduce using rule 12 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    $end            reduce using rule 12 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    end             reduce using rule 12 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OPEN_BRACKET in state 10 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKET in state 19 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 19 resolved as shift
WARNING: shift/reduce conflict for nil in state 19 resolved as shift
WARNING: shift/reduce conflict for self in state 19 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 19 resolved as shift
WARNING: shift/reduce conflict for AT_THE_RATE in state 19 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 19 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 19 resolved as shift
WARNING: shift/reduce conflict for CONSTANT_RESOLUTION in state 19 resolved as shift
WARNING: shift/reduce conflict for Array in state 19 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 19 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 19 resolved as shift
WARNING: shift/reduce conflict for STRING in state 19 resolved as shift
WARNING: shift/reduce conflict for true in state 19 resolved as shift
WARNING: shift/reduce conflict for false in state 19 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 42 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 42 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 94 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 96 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 134 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKET in state 150 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 155 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKET in state 156 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 160 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 192 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 192 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 193 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 193 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 222 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 233 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 234 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 240 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 279 resolved as shift
WARNING: reduce/reduce conflict in state 33 resolved using rule (primary -> varname)
WARNING: rejected rule (variable -> varname) in state 33
WARNING: reduce/reduce conflict in state 125 resolved using rule (primary -> varname)
WARNING: rejected rule (variable -> varname) in state 125
WARNING: reduce/reduce conflict in state 152 resolved using rule (term1 -> term2)
WARNING: rejected rule (mrhs -> term2) in state 152
WARNING: reduce/reduce conflict in state 160 resolved using rule (expr2 -> arg)
WARNING: rejected rule (empty -> <empty>) in state 160

Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    BEGIN
    class
    ensure
    END
    not
    super
    alias
    defined
    or
    yield
    and
    redo
    begin
    rescue
    undef
    module
    retry
    unless
    next
    until
    CONSTANT_RESOLUTION
    ELEMENT_REFERENCE
    ELEMENT_SET
    SYMBOL_NOT
    COMPLEMENT
    LOGICAL_AND
    WORD_NOT
    WORD_AND
    WORD_OR
    MAP
    PLUS_AT
    MINUS_AT
    STRING2
    HEREDOC
    REGEXP
    DOUBLE_QUOTE
    DOLLAR
    COLON
    QUESTION_MARK
    OPEN_FLOWER
    CLOSE_FLOWER
    DOT

Grammar

Rule 0     S' -> compstmt
Rule 1     compstmt -> multcompstmt
Rule 2     multcompstmt -> newline stmt1 multcompstmt
Rule 3     multcompstmt -> stmt1 multcompstmt
Rule 4     multcompstmt -> newline
Rule 5     multcompstmt -> empty
Rule 6     stmt1 -> stmt
Rule 7     stmt -> keydef argdecl newline multstmt keyend
Rule 8     stmt -> puts OPEN_BRACKET STRING CLOSE_BRACKET
Rule 9     stmt -> print OPEN_BRACKET primary CLOSE_BRACKET
Rule 10    stmt -> break
Rule 11    stmt -> expr
Rule 12    keydef -> def IDENTIFIER
Rule 13    keyend -> end
Rule 14    multstmt -> stmt newline multstmt
Rule 15    multstmt -> empty
Rule 16    expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
Rule 17    expr -> if expr1 pthen M_1 multstmt M_1 multelsif end M_1
Rule 18    expr -> if expr1 pthen M_1 multstmt end M_1
Rule 19    expr -> while M_1 expr1 pdo M_1 multstmt end M_1
Rule 20    expr -> case expr1 M_1 newline multcase end M_1
Rule 21    expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end M_1
Rule 22    expr -> expr1
Rule 23    M_1 -> empty
Rule 24    expr1 -> return IDENTIFIER
Rule 25    expr1 -> return
Rule 26    expr1 -> expr2
Rule 27    expr2 -> arg
Rule 28    expr2 -> call
Rule 29    call -> function
Rule 30    function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
Rule 31    function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
Rule 32    arg -> arg BIT_OR term0
Rule 33    arg -> term0
Rule 34    term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
Rule 35    term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
Rule 36    term0 -> term1
Rule 37    term1 -> mlhs EQUALS mrhs
Rule 38    term1 -> mlhs opasgn mrhs
Rule 39    term1 -> term2
Rule 40    term2 -> term3 INCL_RANGE term3
Rule 41    term2 -> term3 EXCL_RANGE term3
Rule 42    term2 -> term3
Rule 43    term3 -> term3 LOGICAL_OR term4
Rule 44    term3 -> term4
Rule 45    term4 -> term5 DOUBLE_EQUALS term5
Rule 46    term4 -> term5 TRIPLE_EQUALS term5
Rule 47    term4 -> term5 NOT_EQUALS term5
Rule 48    term4 -> term5 EQUAL_TILDE term5
Rule 49    term4 -> term5 BANG_TILDE term5
Rule 50    term4 -> term5 COMPARISON term5
Rule 51    term4 -> term5
Rule 52    term5 -> term5 LESS term6
Rule 53    term5 -> term5 LESS_EQUALS term6
Rule 54    term5 -> term5 GREATER term6
Rule 55    term5 -> term5 GREATER_EQUALS term6
Rule 56    term5 -> term6
Rule 57    term6 -> term6 BIT_XOR term7
Rule 58    term6 -> term7
Rule 59    term7 -> term7 BIT_AND term8
Rule 60    term7 -> term8
Rule 61    term8 -> term8 LEFT_SHIFT term9
Rule 62    term8 -> term8 RIGHT_SHIFT term9
Rule 63    term8 -> term9
Rule 64    term9 -> term9 PLUS term10
Rule 65    term9 -> term9 MINUS term10
Rule 66    term9 -> term10
Rule 67    term10 -> term10 MULTIPLY term11
Rule 68    term10 -> term10 DIVIDE term11
Rule 69    term10 -> term10 MODULO term11
Rule 70    term10 -> term11
Rule 71    term11 -> MINUS term11
Rule 72    term11 -> term12
Rule 73    term12 -> PLUS term12
Rule 74    term12 -> term13
Rule 75    term13 -> primary POWER term13
Rule 76    term13 -> primary
Rule 77    primary -> OPEN_BRACKET expr2 CLOSE_BRACKET
Rule 78    primary -> arrayd
Rule 79    primary -> arraya
Rule 80    primary -> literal
Rule 81    primary -> varname
Rule 82    arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET
Rule 83    array_size -> primary COMMA array_size
Rule 84    array_size -> primary
Rule 85    arrayal -> variable OPEN_SQUARE array_args CLOSE_SQUARE
Rule 86    arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE
Rule 87    array_args -> primary COMMA array_args
Rule 88    array_args -> primary
Rule 89    multcase -> when whenargs pthen M_1 multstmt M_1 multcase
Rule 90    multcase -> when whenargs pthen M_1 multstmt M_1
Rule 91    multelsif -> elsif expr pthen M_1 multstmt M_1 multelsif M_1
Rule 92    multelsif -> else newline multstmt
Rule 93    multelsif -> empty
Rule 94    literal -> NUMBER
Rule 95    literal -> FLOAT
Rule 96    literal -> STRING
Rule 97    literal -> true
Rule 98    literal -> false
Rule 99    whenargs -> arg
Rule 100   mlhs -> mlhsitem
Rule 101   mlhsitem -> IDENTIFIER
Rule 102   mlhsitem -> arrayal
Rule 103   arrayl -> primary2 OPEN_SQUARE array_argsl CLOSE_SQUARE
Rule 104   array_argsl -> primary2 COMMA array_argsl
Rule 105   array_argsl -> primary2
Rule 106   primary2 -> IDENTIFIER
Rule 107   primary2 -> literal
Rule 108   lhs -> variable
Rule 109   lhs -> variable OPEN_SQUARE args CLOSE_SQUARE
Rule 110   lhs -> variable OPEN_SQUARE CLOSE_SQUARE
Rule 111   mrhs -> term2
Rule 112   mrhs -> args COMMA MULTIPLY arg
Rule 113   mrhs -> MULTIPLY arg
Rule 114   callargs -> callarglist
Rule 115   callarglist -> primary callmultarglist
Rule 116   callarglist -> empty
Rule 117   callmultarglist -> COMMA primary callmultarglist
Rule 118   callmultarglist -> empty
Rule 119   args -> arg multargs
Rule 120   multargs -> COMMA arg multargs
Rule 121   multargs -> empty
Rule 122   argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET
Rule 123   arglist -> IDENTIFIER multarglist
Rule 124   arglist -> empty
Rule 125   multarglist -> COMMA IDENTIFIER multarglist
Rule 126   multarglist -> empty
Rule 127   variable -> varname
Rule 128   variable -> nil
Rule 129   variable -> self
Rule 130   pthen -> newline
Rule 131   pthen -> then
Rule 132   pthen -> newline then
Rule 133   pdo -> newline
Rule 134   pdo -> do
Rule 135   pdo -> newline do
Rule 136   opasgn -> MODULO_EQUALS
Rule 137   opasgn -> DIVIDE_EQUALS
Rule 138   opasgn -> MINUS_EQUALS
Rule 139   opasgn -> PLUS_EQUALS
Rule 140   opasgn -> OR_EQUALS
Rule 141   opasgn -> AND_EQUALS
Rule 142   opasgn -> XOR_EQUALS
Rule 143   opasgn -> RIGHT_SHIFT_EQUALS
Rule 144   opasgn -> LEFT_SHIFT_EQUALS
Rule 145   opasgn -> MULTIPLY_EQUALS
Rule 146   opasgn -> LOGICAL_AND_EQUALS
Rule 147   opasgn -> LOGICAL_OR_EQUALS
Rule 148   opasgn -> POWER_EQUALS
Rule 149   varname -> GLOBAL
Rule 150   varname -> AT_THE_RATE IDENTIFIER
Rule 151   varname -> IDENTIFIER
Rule 152   newline -> SEMI_COLON
Rule 153   newline -> NEWLINE
Rule 154   empty -> <empty>

Terminals, with rules where they appear

AND_EQUALS           : 141
AT_THE_RATE          : 150
Array                : 82
BANG_TILDE           : 49
BEGIN                : 
BIT_AND              : 59
BIT_OR               : 32
BIT_XOR              : 57
CLOSE_BRACKET        : 8 9 30 31 34 35 77 82 122
CLOSE_FLOWER         : 
CLOSE_SQUARE         : 85 86 103 109 110
COLON                : 
COMMA                : 83 87 104 112 117 120 125
COMPARISON           : 50
COMPLEMENT           : 
CONSTANT_RESOLUTION  : 
DIVIDE               : 68
DIVIDE_EQUALS        : 137
DOLLAR               : 
DOT                  : 
DOUBLE_EQUALS        : 45
DOUBLE_QUOTE         : 
ELEMENT_REFERENCE    : 
ELEMENT_SET          : 
END                  : 
EQUALS               : 34 35 37
EQUAL_TILDE          : 48
EXCL_RANGE           : 41
FLOAT                : 95
GLOBAL               : 149
GREATER              : 54
GREATER_EQUALS       : 55
HEREDOC              : 
IDENTIFIER           : 12 24 30 31 34 35 101 106 123 125 150 151
INCL_RANGE           : 40
LEFT_SHIFT           : 61
LEFT_SHIFT_EQUALS    : 144
LESS                 : 52
LESS_EQUALS          : 53
LOGICAL_AND          : 
LOGICAL_AND_EQUALS   : 146
LOGICAL_OR           : 43
LOGICAL_OR_EQUALS    : 147
MAP                  : 
MINUS                : 65 71
MINUS_AT             : 
MINUS_EQUALS         : 138
MODULO               : 69
MODULO_EQUALS        : 136
MULTIPLY             : 67 112 113
MULTIPLY_EQUALS      : 145
NEWLINE              : 153
NOT_EQUALS           : 47
NUMBER               : 94
OPEN_BRACKET         : 8 9 30 31 34 35 77 82 122
OPEN_FLOWER          : 
OPEN_SQUARE          : 85 86 103 109 110
OR_EQUALS            : 140
PLUS                 : 64 73
PLUS_AT              : 
PLUS_EQUALS          : 139
POWER                : 75
POWER_EQUALS         : 148
QUESTION_MARK        : 
REGEXP               : 
RIGHT_SHIFT          : 62
RIGHT_SHIFT_EQUALS   : 143
SEMI_COLON           : 152
STRING               : 8 96
STRING2              : 
SYMBOL_NOT           : 
TRIPLE_EQUALS        : 46
WORD_AND             : 
WORD_NOT             : 
WORD_OR              : 
XOR_EQUALS           : 142
alias                : 
and                  : 
begin                : 
break                : 10
case                 : 20
class                : 
def                  : 12
defined              : 
do                   : 134 135
else                 : 16 92
elsif                : 91
end                  : 13 16 17 18 19 20 21
ensure               : 
error                : 
false                : 98
for                  : 21
if                   : 16 17 18
in                   : 21
module               : 
next                 : 
nil                  : 128
not                  : 
or                   : 
print                : 9
puts                 : 8
redo                 : 
rescue               : 
retry                : 
return               : 24 25
self                 : 129
super                : 
then                 : 131 132
true                 : 97
undef                : 
unless               : 
until                : 
when                 : 89 90
while                : 19
yield                : 

Nonterminals, with rules where they appear

M_1                  : 16 16 16 17 17 17 18 18 19 19 19 20 20 21 21 21 89 89 90 90 91 91 91
arg                  : 27 32 99 112 113 119 120
argdecl              : 7
arglist              : 122
args                 : 109 112
array_args           : 85 86 87
array_argsl          : 103 104
array_size           : 82 83
arraya               : 79
arrayal              : 102
arrayd               : 78
arrayl               : 
call                 : 28
callarglist          : 114
callargs             : 30 35
callmultarglist      : 115 117
compstmt             : 0
empty                : 5 15 23 93 116 118 121 124 126
expr                 : 11 91
expr1                : 16 17 18 19 20 21 22
expr2                : 26 77
function             : 29
keydef               : 7
keyend               : 7
lhs                  : 
literal              : 80 107
mlhs                 : 21 34 35 37 38
mlhsitem             : 100
mrhs                 : 37 38
multarglist          : 123 125
multargs             : 119 120
multcase             : 20 89
multcompstmt         : 1 2 3
multelsif            : 17 91
multstmt             : 7 14 16 16 17 18 19 21 89 90 91 92
newline              : 2 4 7 14 16 20 92 130 132 133 135
opasgn               : 38
pdo                  : 19 21
primary              : 9 75 76 83 84 87 88 115 117
primary2             : 103 104 105
pthen                : 16 17 18 89 90 91
stmt                 : 6 14
stmt1                : 2 3
term0                : 32 33
term1                : 36
term10               : 64 65 66 67 68 69
term11               : 67 68 69 70 71
term12               : 72 73
term13               : 74 75
term2                : 39 111
term3                : 40 40 41 41 42 43
term4                : 43 44
term5                : 45 45 46 46 47 47 48 48 49 49 50 50 51 52 53 54 55
term6                : 52 53 54 55 56 57
term7                : 57 58 59
term8                : 59 60 61 62
term9                : 61 62 63 64 65
variable             : 85 86 108 109 110
varname              : 81 127
whenargs             : 89 90

Parsing method: LALR

state 0

    (0) S' -> . compstmt
    (1) compstmt -> . multcompstmt
    (2) multcompstmt -> . newline stmt1 multcompstmt
    (3) multcompstmt -> . stmt1 multcompstmt
    (4) multcompstmt -> . newline
    (5) multcompstmt -> . empty
    (152) newline -> . SEMI_COLON
    (153) newline -> . NEWLINE
    (6) stmt1 -> . stmt
    (154) empty -> .
    (7) stmt -> . keydef argdecl newline multstmt keyend
    (8) stmt -> . puts OPEN_BRACKET STRING CLOSE_BRACKET
    (9) stmt -> . print OPEN_BRACKET primary CLOSE_BRACKET
    (10) stmt -> . break
    (11) stmt -> . expr
    (12) keydef -> . def IDENTIFIER
    (16) expr -> . if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
    (17) expr -> . if expr1 pthen M_1 multstmt M_1 multelsif end M_1
    (18) expr -> . if expr1 pthen M_1 multstmt end M_1
    (19) expr -> . while M_1 expr1 pdo M_1 multstmt end M_1
    (20) expr -> . case expr1 M_1 newline multcase end M_1
    (21) expr -> . for M_1 mlhs in expr1 pdo M_1 multstmt end M_1
    (22) expr -> . expr1
    (24) expr1 -> . return IDENTIFIER
    (25) expr1 -> . return
    (26) expr1 -> . expr2
    (27) expr2 -> . arg
    (28) expr2 -> . call
    (32) arg -> . arg BIT_OR term0
    (33) arg -> . term0
    (29) call -> . function
    (34) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (36) term0 -> . term1
    (30) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (31) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (100) mlhs -> . mlhsitem
    (37) term1 -> . mlhs EQUALS mrhs
    (38) term1 -> . mlhs opasgn mrhs
    (39) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arrayal
    (40) term2 -> . term3 INCL_RANGE term3
    (41) term2 -> . term3 EXCL_RANGE term3
    (42) term2 -> . term3
    (85) arrayal -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (43) term3 -> . term3 LOGICAL_OR term4
    (44) term3 -> . term4
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self
    (45) term4 -> . term5 DOUBLE_EQUALS term5
    (46) term4 -> . term5 TRIPLE_EQUALS term5
    (47) term4 -> . term5 NOT_EQUALS term5
    (48) term4 -> . term5 EQUAL_TILDE term5
    (49) term4 -> . term5 BANG_TILDE term5
    (50) term4 -> . term5 COMPARISON term5
    (51) term4 -> . term5
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false

    SEMI_COLON      shift and go to state 6
    NEWLINE         shift and go to state 7
    $end            reduce using rule 154 (empty -> .)
    puts            shift and go to state 10
    print           shift and go to state 13
    break           shift and go to state 15
    def             shift and go to state 17
    if              shift and go to state 19
    while           shift and go to state 21
    case            shift and go to state 22
    for             shift and go to state 23
    return          shift and go to state 25
    IDENTIFIER      shift and go to state 18
    nil             shift and go to state 39
    self            shift and go to state 40
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61

    compstmt                       shift and go to state 1
    multcompstmt                   shift and go to state 2
    newline                        shift and go to state 3
    stmt1                          shift and go to state 4
    empty                          shift and go to state 5
    stmt                           shift and go to state 8
    keydef                         shift and go to state 9
    primary                        shift and go to state 14
    expr                           shift and go to state 16
    expr1                          shift and go to state 20
    mlhs                           shift and go to state 24
    expr2                          shift and go to state 26
    arg                            shift and go to state 27
    call                           shift and go to state 28
    term0                          shift and go to state 29
    function                       shift and go to state 30
    term1                          shift and go to state 31
    mlhsitem                       shift and go to state 32
    term2                          shift and go to state 33
    arrayal                        shift and go to state 34
    term3                          shift and go to state 35
    variable                       shift and go to state 36
    term4                          shift and go to state 37
    varname                        shift and go to state 38
    term5                          shift and go to state 41
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56

state 1

    (0) S' -> compstmt .



state 2

    (1) compstmt -> multcompstmt .

    $end            reduce using rule 1 (compstmt -> multcompstmt .)


state 3

    (2) multcompstmt -> newline . stmt1 multcompstmt
    (4) multcompstmt -> newline .
    (6) stmt1 -> . stmt
    (7) stmt -> . keydef argdecl newline multstmt keyend
    (8) stmt -> . puts OPEN_BRACKET STRING CLOSE_BRACKET
    (9) stmt -> . print OPEN_BRACKET primary CLOSE_BRACKET
    (10) stmt -> . break
    (11) stmt -> . expr
    (12) keydef -> . def IDENTIFIER
    (16) expr -> . if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
    (17) expr -> . if expr1 pthen M_1 multstmt M_1 multelsif end M_1
    (18) expr -> . if expr1 pthen M_1 multstmt end M_1
    (19) expr -> . while M_1 expr1 pdo M_1 multstmt end M_1
    (20) expr -> . case expr1 M_1 newline multcase end M_1
    (21) expr -> . for M_1 mlhs in expr1 pdo M_1 multstmt end M_1
    (22) expr -> . expr1
    (24) expr1 -> . return IDENTIFIER
    (25) expr1 -> . return
    (26) expr1 -> . expr2
    (27) expr2 -> . arg
    (28) expr2 -> . call
    (32) arg -> . arg BIT_OR term0
    (33) arg -> . term0
    (29) call -> . function
    (34) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (36) term0 -> . term1
    (30) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (31) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (100) mlhs -> . mlhsitem
    (37) term1 -> . mlhs EQUALS mrhs
    (38) term1 -> . mlhs opasgn mrhs
    (39) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arrayal
    (40) term2 -> . term3 INCL_RANGE term3
    (41) term2 -> . term3 EXCL_RANGE term3
    (42) term2 -> . term3
    (85) arrayal -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (43) term3 -> . term3 LOGICAL_OR term4
    (44) term3 -> . term4
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self
    (45) term4 -> . term5 DOUBLE_EQUALS term5
    (46) term4 -> . term5 TRIPLE_EQUALS term5
    (47) term4 -> . term5 NOT_EQUALS term5
    (48) term4 -> . term5 EQUAL_TILDE term5
    (49) term4 -> . term5 BANG_TILDE term5
    (50) term4 -> . term5 COMPARISON term5
    (51) term4 -> . term5
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false

    $end            reduce using rule 4 (multcompstmt -> newline .)
    puts            shift and go to state 10
    print           shift and go to state 13
    break           shift and go to state 15
    def             shift and go to state 17
    if              shift and go to state 19
    while           shift and go to state 21
    case            shift and go to state 22
    for             shift and go to state 23
    return          shift and go to state 25
    IDENTIFIER      shift and go to state 18
    nil             shift and go to state 39
    self            shift and go to state 40
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61

    stmt1                          shift and go to state 62
    stmt                           shift and go to state 8
    keydef                         shift and go to state 9
    primary                        shift and go to state 14
    expr                           shift and go to state 16
    expr1                          shift and go to state 20
    mlhs                           shift and go to state 24
    expr2                          shift and go to state 26
    arg                            shift and go to state 27
    call                           shift and go to state 28
    term0                          shift and go to state 29
    function                       shift and go to state 30
    term1                          shift and go to state 31
    mlhsitem                       shift and go to state 32
    term2                          shift and go to state 33
    arrayal                        shift and go to state 34
    term3                          shift and go to state 35
    variable                       shift and go to state 36
    term4                          shift and go to state 37
    varname                        shift and go to state 38
    term5                          shift and go to state 41
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56

state 4

    (3) multcompstmt -> stmt1 . multcompstmt
    (2) multcompstmt -> . newline stmt1 multcompstmt
    (3) multcompstmt -> . stmt1 multcompstmt
    (4) multcompstmt -> . newline
    (5) multcompstmt -> . empty
    (152) newline -> . SEMI_COLON
    (153) newline -> . NEWLINE
    (6) stmt1 -> . stmt
    (154) empty -> .
    (7) stmt -> . keydef argdecl newline multstmt keyend
    (8) stmt -> . puts OPEN_BRACKET STRING CLOSE_BRACKET
    (9) stmt -> . print OPEN_BRACKET primary CLOSE_BRACKET
    (10) stmt -> . break
    (11) stmt -> . expr
    (12) keydef -> . def IDENTIFIER
    (16) expr -> . if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
    (17) expr -> . if expr1 pthen M_1 multstmt M_1 multelsif end M_1
    (18) expr -> . if expr1 pthen M_1 multstmt end M_1
    (19) expr -> . while M_1 expr1 pdo M_1 multstmt end M_1
    (20) expr -> . case expr1 M_1 newline multcase end M_1
    (21) expr -> . for M_1 mlhs in expr1 pdo M_1 multstmt end M_1
    (22) expr -> . expr1
    (24) expr1 -> . return IDENTIFIER
    (25) expr1 -> . return
    (26) expr1 -> . expr2
    (27) expr2 -> . arg
    (28) expr2 -> . call
    (32) arg -> . arg BIT_OR term0
    (33) arg -> . term0
    (29) call -> . function
    (34) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (36) term0 -> . term1
    (30) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (31) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (100) mlhs -> . mlhsitem
    (37) term1 -> . mlhs EQUALS mrhs
    (38) term1 -> . mlhs opasgn mrhs
    (39) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arrayal
    (40) term2 -> . term3 INCL_RANGE term3
    (41) term2 -> . term3 EXCL_RANGE term3
    (42) term2 -> . term3
    (85) arrayal -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (43) term3 -> . term3 LOGICAL_OR term4
    (44) term3 -> . term4
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self
    (45) term4 -> . term5 DOUBLE_EQUALS term5
    (46) term4 -> . term5 TRIPLE_EQUALS term5
    (47) term4 -> . term5 NOT_EQUALS term5
    (48) term4 -> . term5 EQUAL_TILDE term5
    (49) term4 -> . term5 BANG_TILDE term5
    (50) term4 -> . term5 COMPARISON term5
    (51) term4 -> . term5
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false

    SEMI_COLON      shift and go to state 6
    NEWLINE         shift and go to state 7
    $end            reduce using rule 154 (empty -> .)
    puts            shift and go to state 10
    print           shift and go to state 13
    break           shift and go to state 15
    def             shift and go to state 17
    if              shift and go to state 19
    while           shift and go to state 21
    case            shift and go to state 22
    for             shift and go to state 23
    return          shift and go to state 25
    IDENTIFIER      shift and go to state 18
    nil             shift and go to state 39
    self            shift and go to state 40
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61

    stmt1                          shift and go to state 4
    multcompstmt                   shift and go to state 63
    newline                        shift and go to state 3
    empty                          shift and go to state 5
    stmt                           shift and go to state 8
    keydef                         shift and go to state 9
    primary                        shift and go to state 14
    expr                           shift and go to state 16
    expr1                          shift and go to state 20
    mlhs                           shift and go to state 24
    expr2                          shift and go to state 26
    arg                            shift and go to state 27
    call                           shift and go to state 28
    term0                          shift and go to state 29
    function                       shift and go to state 30
    term1                          shift and go to state 31
    mlhsitem                       shift and go to state 32
    term2                          shift and go to state 33
    arrayal                        shift and go to state 34
    term3                          shift and go to state 35
    variable                       shift and go to state 36
    term4                          shift and go to state 37
    varname                        shift and go to state 38
    term5                          shift and go to state 41
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56

state 5

    (5) multcompstmt -> empty .

    $end            reduce using rule 5 (multcompstmt -> empty .)


state 6

    (152) newline -> SEMI_COLON .

    puts            reduce using rule 152 (newline -> SEMI_COLON .)
    print           reduce using rule 152 (newline -> SEMI_COLON .)
    break           reduce using rule 152 (newline -> SEMI_COLON .)
    def             reduce using rule 152 (newline -> SEMI_COLON .)
    if              reduce using rule 152 (newline -> SEMI_COLON .)
    while           reduce using rule 152 (newline -> SEMI_COLON .)
    case            reduce using rule 152 (newline -> SEMI_COLON .)
    for             reduce using rule 152 (newline -> SEMI_COLON .)
    return          reduce using rule 152 (newline -> SEMI_COLON .)
    IDENTIFIER      reduce using rule 152 (newline -> SEMI_COLON .)
    nil             reduce using rule 152 (newline -> SEMI_COLON .)
    self            reduce using rule 152 (newline -> SEMI_COLON .)
    GLOBAL          reduce using rule 152 (newline -> SEMI_COLON .)
    AT_THE_RATE     reduce using rule 152 (newline -> SEMI_COLON .)
    MINUS           reduce using rule 152 (newline -> SEMI_COLON .)
    PLUS            reduce using rule 152 (newline -> SEMI_COLON .)
    OPEN_BRACKET    reduce using rule 152 (newline -> SEMI_COLON .)
    Array           reduce using rule 152 (newline -> SEMI_COLON .)
    NUMBER          reduce using rule 152 (newline -> SEMI_COLON .)
    FLOAT           reduce using rule 152 (newline -> SEMI_COLON .)
    STRING          reduce using rule 152 (newline -> SEMI_COLON .)
    true            reduce using rule 152 (newline -> SEMI_COLON .)
    false           reduce using rule 152 (newline -> SEMI_COLON .)
    $end            reduce using rule 152 (newline -> SEMI_COLON .)
    end             reduce using rule 152 (newline -> SEMI_COLON .)
    then            reduce using rule 152 (newline -> SEMI_COLON .)
    else            reduce using rule 152 (newline -> SEMI_COLON .)
    elsif           reduce using rule 152 (newline -> SEMI_COLON .)
    do              reduce using rule 152 (newline -> SEMI_COLON .)
    when            reduce using rule 152 (newline -> SEMI_COLON .)


state 7

    (153) newline -> NEWLINE .

    puts            reduce using rule 153 (newline -> NEWLINE .)
    print           reduce using rule 153 (newline -> NEWLINE .)
    break           reduce using rule 153 (newline -> NEWLINE .)
    def             reduce using rule 153 (newline -> NEWLINE .)
    if              reduce using rule 153 (newline -> NEWLINE .)
    while           reduce using rule 153 (newline -> NEWLINE .)
    case            reduce using rule 153 (newline -> NEWLINE .)
    for             reduce using rule 153 (newline -> NEWLINE .)
    return          reduce using rule 153 (newline -> NEWLINE .)
    IDENTIFIER      reduce using rule 153 (newline -> NEWLINE .)
    nil             reduce using rule 153 (newline -> NEWLINE .)
    self            reduce using rule 153 (newline -> NEWLINE .)
    GLOBAL          reduce using rule 153 (newline -> NEWLINE .)
    AT_THE_RATE     reduce using rule 153 (newline -> NEWLINE .)
    MINUS           reduce using rule 153 (newline -> NEWLINE .)
    PLUS            reduce using rule 153 (newline -> NEWLINE .)
    OPEN_BRACKET    reduce using rule 153 (newline -> NEWLINE .)
    Array           reduce using rule 153 (newline -> NEWLINE .)
    NUMBER          reduce using rule 153 (newline -> NEWLINE .)
    FLOAT           reduce using rule 153 (newline -> NEWLINE .)
    STRING          reduce using rule 153 (newline -> NEWLINE .)
    true            reduce using rule 153 (newline -> NEWLINE .)
    false           reduce using rule 153 (newline -> NEWLINE .)
    $end            reduce using rule 153 (newline -> NEWLINE .)
    end             reduce using rule 153 (newline -> NEWLINE .)
    then            reduce using rule 153 (newline -> NEWLINE .)
    else            reduce using rule 153 (newline -> NEWLINE .)
    elsif           reduce using rule 153 (newline -> NEWLINE .)
    do              reduce using rule 153 (newline -> NEWLINE .)
    when            reduce using rule 153 (newline -> NEWLINE .)


state 8

    (6) stmt1 -> stmt .

    SEMI_COLON      reduce using rule 6 (stmt1 -> stmt .)
    NEWLINE         reduce using rule 6 (stmt1 -> stmt .)
    puts            reduce using rule 6 (stmt1 -> stmt .)
    print           reduce using rule 6 (stmt1 -> stmt .)
    break           reduce using rule 6 (stmt1 -> stmt .)
    def             reduce using rule 6 (stmt1 -> stmt .)
    if              reduce using rule 6 (stmt1 -> stmt .)
    while           reduce using rule 6 (stmt1 -> stmt .)
    case            reduce using rule 6 (stmt1 -> stmt .)
    for             reduce using rule 6 (stmt1 -> stmt .)
    return          reduce using rule 6 (stmt1 -> stmt .)
    IDENTIFIER      reduce using rule 6 (stmt1 -> stmt .)
    nil             reduce using rule 6 (stmt1 -> stmt .)
    self            reduce using rule 6 (stmt1 -> stmt .)
    GLOBAL          reduce using rule 6 (stmt1 -> stmt .)
    AT_THE_RATE     reduce using rule 6 (stmt1 -> stmt .)
    MINUS           reduce using rule 6 (stmt1 -> stmt .)
    PLUS            reduce using rule 6 (stmt1 -> stmt .)
    OPEN_BRACKET    reduce using rule 6 (stmt1 -> stmt .)
    Array           reduce using rule 6 (stmt1 -> stmt .)
    NUMBER          reduce using rule 6 (stmt1 -> stmt .)
    FLOAT           reduce using rule 6 (stmt1 -> stmt .)
    STRING          reduce using rule 6 (stmt1 -> stmt .)
    true            reduce using rule 6 (stmt1 -> stmt .)
    false           reduce using rule 6 (stmt1 -> stmt .)
    $end            reduce using rule 6 (stmt1 -> stmt .)


state 9

    (7) stmt -> keydef . argdecl newline multstmt keyend
    (122) argdecl -> . OPEN_BRACKET arglist CLOSE_BRACKET

    OPEN_BRACKET    shift and go to state 65

    argdecl                        shift and go to state 64

state 10

    (8) stmt -> puts . OPEN_BRACKET STRING CLOSE_BRACKET

    OPEN_BRACKET    shift and go to state 66


state 11

    (77) primary -> OPEN_BRACKET . expr2 CLOSE_BRACKET
    (27) expr2 -> . arg
    (28) expr2 -> . call
    (32) arg -> . arg BIT_OR term0
    (33) arg -> . term0
    (29) call -> . function
    (34) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (36) term0 -> . term1
    (30) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (31) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (100) mlhs -> . mlhsitem
    (37) term1 -> . mlhs EQUALS mrhs
    (38) term1 -> . mlhs opasgn mrhs
    (39) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arrayal
    (40) term2 -> . term3 INCL_RANGE term3
    (41) term2 -> . term3 EXCL_RANGE term3
    (42) term2 -> . term3
    (85) arrayal -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (43) term3 -> . term3 LOGICAL_OR term4
    (44) term3 -> . term4
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self
    (45) term4 -> . term5 DOUBLE_EQUALS term5
    (46) term4 -> . term5 TRIPLE_EQUALS term5
    (47) term4 -> . term5 NOT_EQUALS term5
    (48) term4 -> . term5 EQUAL_TILDE term5
    (49) term4 -> . term5 BANG_TILDE term5
    (50) term4 -> . term5 COMPARISON term5
    (51) term4 -> . term5
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false

    IDENTIFIER      shift and go to state 18
    nil             shift and go to state 39
    self            shift and go to state 40
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61

    expr2                          shift and go to state 67
    arg                            shift and go to state 27
    call                           shift and go to state 28
    term0                          shift and go to state 29
    function                       shift and go to state 30
    mlhs                           shift and go to state 24
    term1                          shift and go to state 31
    mlhsitem                       shift and go to state 32
    term2                          shift and go to state 33
    arrayal                        shift and go to state 34
    term3                          shift and go to state 35
    variable                       shift and go to state 36
    term4                          shift and go to state 37
    varname                        shift and go to state 38
    term5                          shift and go to state 41
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56

state 12

    (96) literal -> STRING .

    POWER           reduce using rule 96 (literal -> STRING .)
    MULTIPLY        reduce using rule 96 (literal -> STRING .)
    DIVIDE          reduce using rule 96 (literal -> STRING .)
    MODULO          reduce using rule 96 (literal -> STRING .)
    PLUS            reduce using rule 96 (literal -> STRING .)
    MINUS           reduce using rule 96 (literal -> STRING .)
    LEFT_SHIFT      reduce using rule 96 (literal -> STRING .)
    RIGHT_SHIFT     reduce using rule 96 (literal -> STRING .)
    BIT_AND         reduce using rule 96 (literal -> STRING .)
    BIT_XOR         reduce using rule 96 (literal -> STRING .)
    DOUBLE_EQUALS   reduce using rule 96 (literal -> STRING .)
    TRIPLE_EQUALS   reduce using rule 96 (literal -> STRING .)
    NOT_EQUALS      reduce using rule 96 (literal -> STRING .)
    EQUAL_TILDE     reduce using rule 96 (literal -> STRING .)
    BANG_TILDE      reduce using rule 96 (literal -> STRING .)
    COMPARISON      reduce using rule 96 (literal -> STRING .)
    LESS            reduce using rule 96 (literal -> STRING .)
    LESS_EQUALS     reduce using rule 96 (literal -> STRING .)
    GREATER         reduce using rule 96 (literal -> STRING .)
    GREATER_EQUALS  reduce using rule 96 (literal -> STRING .)
    INCL_RANGE      reduce using rule 96 (literal -> STRING .)
    EXCL_RANGE      reduce using rule 96 (literal -> STRING .)
    LOGICAL_OR      reduce using rule 96 (literal -> STRING .)
    BIT_OR          reduce using rule 96 (literal -> STRING .)
    SEMI_COLON      reduce using rule 96 (literal -> STRING .)
    NEWLINE         reduce using rule 96 (literal -> STRING .)
    puts            reduce using rule 96 (literal -> STRING .)
    print           reduce using rule 96 (literal -> STRING .)
    break           reduce using rule 96 (literal -> STRING .)
    def             reduce using rule 96 (literal -> STRING .)
    if              reduce using rule 96 (literal -> STRING .)
    while           reduce using rule 96 (literal -> STRING .)
    case            reduce using rule 96 (literal -> STRING .)
    for             reduce using rule 96 (literal -> STRING .)
    return          reduce using rule 96 (literal -> STRING .)
    IDENTIFIER      reduce using rule 96 (literal -> STRING .)
    nil             reduce using rule 96 (literal -> STRING .)
    self            reduce using rule 96 (literal -> STRING .)
    GLOBAL          reduce using rule 96 (literal -> STRING .)
    AT_THE_RATE     reduce using rule 96 (literal -> STRING .)
    OPEN_BRACKET    reduce using rule 96 (literal -> STRING .)
    Array           reduce using rule 96 (literal -> STRING .)
    NUMBER          reduce using rule 96 (literal -> STRING .)
    FLOAT           reduce using rule 96 (literal -> STRING .)
    STRING          reduce using rule 96 (literal -> STRING .)
    true            reduce using rule 96 (literal -> STRING .)
    false           reduce using rule 96 (literal -> STRING .)
    $end            reduce using rule 96 (literal -> STRING .)
    CLOSE_BRACKET   reduce using rule 96 (literal -> STRING .)
    then            reduce using rule 96 (literal -> STRING .)
    do              reduce using rule 96 (literal -> STRING .)
    COMMA           reduce using rule 96 (literal -> STRING .)
    CLOSE_SQUARE    reduce using rule 96 (literal -> STRING .)


state 13

    (9) stmt -> print . OPEN_BRACKET primary CLOSE_BRACKET

    OPEN_BRACKET    shift and go to state 68


state 14

    (75) term13 -> primary . POWER term13
    (76) term13 -> primary .

    POWER           shift and go to state 69
    MULTIPLY        reduce using rule 76 (term13 -> primary .)
    DIVIDE          reduce using rule 76 (term13 -> primary .)
    MODULO          reduce using rule 76 (term13 -> primary .)
    PLUS            reduce using rule 76 (term13 -> primary .)
    MINUS           reduce using rule 76 (term13 -> primary .)
    LEFT_SHIFT      reduce using rule 76 (term13 -> primary .)
    RIGHT_SHIFT     reduce using rule 76 (term13 -> primary .)
    BIT_AND         reduce using rule 76 (term13 -> primary .)
    BIT_XOR         reduce using rule 76 (term13 -> primary .)
    DOUBLE_EQUALS   reduce using rule 76 (term13 -> primary .)
    TRIPLE_EQUALS   reduce using rule 76 (term13 -> primary .)
    NOT_EQUALS      reduce using rule 76 (term13 -> primary .)
    EQUAL_TILDE     reduce using rule 76 (term13 -> primary .)
    BANG_TILDE      reduce using rule 76 (term13 -> primary .)
    COMPARISON      reduce using rule 76 (term13 -> primary .)
    LESS            reduce using rule 76 (term13 -> primary .)
    LESS_EQUALS     reduce using rule 76 (term13 -> primary .)
    GREATER         reduce using rule 76 (term13 -> primary .)
    GREATER_EQUALS  reduce using rule 76 (term13 -> primary .)
    INCL_RANGE      reduce using rule 76 (term13 -> primary .)
    EXCL_RANGE      reduce using rule 76 (term13 -> primary .)
    LOGICAL_OR      reduce using rule 76 (term13 -> primary .)
    BIT_OR          reduce using rule 76 (term13 -> primary .)
    SEMI_COLON      reduce using rule 76 (term13 -> primary .)
    NEWLINE         reduce using rule 76 (term13 -> primary .)
    puts            reduce using rule 76 (term13 -> primary .)
    print           reduce using rule 76 (term13 -> primary .)
    break           reduce using rule 76 (term13 -> primary .)
    def             reduce using rule 76 (term13 -> primary .)
    if              reduce using rule 76 (term13 -> primary .)
    while           reduce using rule 76 (term13 -> primary .)
    case            reduce using rule 76 (term13 -> primary .)
    for             reduce using rule 76 (term13 -> primary .)
    return          reduce using rule 76 (term13 -> primary .)
    IDENTIFIER      reduce using rule 76 (term13 -> primary .)
    nil             reduce using rule 76 (term13 -> primary .)
    self            reduce using rule 76 (term13 -> primary .)
    GLOBAL          reduce using rule 76 (term13 -> primary .)
    AT_THE_RATE     reduce using rule 76 (term13 -> primary .)
    OPEN_BRACKET    reduce using rule 76 (term13 -> primary .)
    Array           reduce using rule 76 (term13 -> primary .)
    NUMBER          reduce using rule 76 (term13 -> primary .)
    FLOAT           reduce using rule 76 (term13 -> primary .)
    STRING          reduce using rule 76 (term13 -> primary .)
    true            reduce using rule 76 (term13 -> primary .)
    false           reduce using rule 76 (term13 -> primary .)
    $end            reduce using rule 76 (term13 -> primary .)
    CLOSE_BRACKET   reduce using rule 76 (term13 -> primary .)
    then            reduce using rule 76 (term13 -> primary .)
    do              reduce using rule 76 (term13 -> primary .)
    COMMA           reduce using rule 76 (term13 -> primary .)


state 15

    (10) stmt -> break .

    SEMI_COLON      reduce using rule 10 (stmt -> break .)
    NEWLINE         reduce using rule 10 (stmt -> break .)
    puts            reduce using rule 10 (stmt -> break .)
    print           reduce using rule 10 (stmt -> break .)
    break           reduce using rule 10 (stmt -> break .)
    def             reduce using rule 10 (stmt -> break .)
    if              reduce using rule 10 (stmt -> break .)
    while           reduce using rule 10 (stmt -> break .)
    case            reduce using rule 10 (stmt -> break .)
    for             reduce using rule 10 (stmt -> break .)
    return          reduce using rule 10 (stmt -> break .)
    IDENTIFIER      reduce using rule 10 (stmt -> break .)
    nil             reduce using rule 10 (stmt -> break .)
    self            reduce using rule 10 (stmt -> break .)
    GLOBAL          reduce using rule 10 (stmt -> break .)
    AT_THE_RATE     reduce using rule 10 (stmt -> break .)
    MINUS           reduce using rule 10 (stmt -> break .)
    PLUS            reduce using rule 10 (stmt -> break .)
    OPEN_BRACKET    reduce using rule 10 (stmt -> break .)
    Array           reduce using rule 10 (stmt -> break .)
    NUMBER          reduce using rule 10 (stmt -> break .)
    FLOAT           reduce using rule 10 (stmt -> break .)
    STRING          reduce using rule 10 (stmt -> break .)
    true            reduce using rule 10 (stmt -> break .)
    false           reduce using rule 10 (stmt -> break .)
    $end            reduce using rule 10 (stmt -> break .)


state 16

    (11) stmt -> expr .

    SEMI_COLON      reduce using rule 11 (stmt -> expr .)
    NEWLINE         reduce using rule 11 (stmt -> expr .)
    puts            reduce using rule 11 (stmt -> expr .)
    print           reduce using rule 11 (stmt -> expr .)
    break           reduce using rule 11 (stmt -> expr .)
    def             reduce using rule 11 (stmt -> expr .)
    if              reduce using rule 11 (stmt -> expr .)
    while           reduce using rule 11 (stmt -> expr .)
    case            reduce using rule 11 (stmt -> expr .)
    for             reduce using rule 11 (stmt -> expr .)
    return          reduce using rule 11 (stmt -> expr .)
    IDENTIFIER      reduce using rule 11 (stmt -> expr .)
    nil             reduce using rule 11 (stmt -> expr .)
    self            reduce using rule 11 (stmt -> expr .)
    GLOBAL          reduce using rule 11 (stmt -> expr .)
    AT_THE_RATE     reduce using rule 11 (stmt -> expr .)
    MINUS           reduce using rule 11 (stmt -> expr .)
    PLUS            reduce using rule 11 (stmt -> expr .)
    OPEN_BRACKET    reduce using rule 11 (stmt -> expr .)
    Array           reduce using rule 11 (stmt -> expr .)
    NUMBER          reduce using rule 11 (stmt -> expr .)
    FLOAT           reduce using rule 11 (stmt -> expr .)
    STRING          reduce using rule 11 (stmt -> expr .)
    true            reduce using rule 11 (stmt -> expr .)
    false           reduce using rule 11 (stmt -> expr .)
    $end            reduce using rule 11 (stmt -> expr .)


state 17

    (12) keydef -> def . IDENTIFIER

    IDENTIFIER      shift and go to state 70


state 18

    (30) function -> IDENTIFIER . OPEN_BRACKET callargs CLOSE_BRACKET
    (31) function -> IDENTIFIER . OPEN_BRACKET CLOSE_BRACKET
    (101) mlhsitem -> IDENTIFIER .
    (151) varname -> IDENTIFIER .

  ! shift/reduce conflict for OPEN_BRACKET resolved as shift
    OPEN_BRACKET    shift and go to state 71
    EQUALS          reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    MODULO_EQUALS   reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    DIVIDE_EQUALS   reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    MINUS_EQUALS    reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    PLUS_EQUALS     reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    OR_EQUALS       reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    AND_EQUALS      reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    XOR_EQUALS      reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    RIGHT_SHIFT_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    LEFT_SHIFT_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    MULTIPLY_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    LOGICAL_AND_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    LOGICAL_OR_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    POWER_EQUALS    reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    OPEN_SQUARE     reduce using rule 151 (varname -> IDENTIFIER .)
    POWER           reduce using rule 151 (varname -> IDENTIFIER .)
    MULTIPLY        reduce using rule 151 (varname -> IDENTIFIER .)
    DIVIDE          reduce using rule 151 (varname -> IDENTIFIER .)
    MODULO          reduce using rule 151 (varname -> IDENTIFIER .)
    PLUS            reduce using rule 151 (varname -> IDENTIFIER .)
    MINUS           reduce using rule 151 (varname -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 151 (varname -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 151 (varname -> IDENTIFIER .)
    BIT_AND         reduce using rule 151 (varname -> IDENTIFIER .)
    BIT_XOR         reduce using rule 151 (varname -> IDENTIFIER .)
    DOUBLE_EQUALS   reduce using rule 151 (varname -> IDENTIFIER .)
    TRIPLE_EQUALS   reduce using rule 151 (varname -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 151 (varname -> IDENTIFIER .)
    EQUAL_TILDE     reduce using rule 151 (varname -> IDENTIFIER .)
    BANG_TILDE      reduce using rule 151 (varname -> IDENTIFIER .)
    COMPARISON      reduce using rule 151 (varname -> IDENTIFIER .)
    LESS            reduce using rule 151 (varname -> IDENTIFIER .)
    LESS_EQUALS     reduce using rule 151 (varname -> IDENTIFIER .)
    GREATER         reduce using rule 151 (varname -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 151 (varname -> IDENTIFIER .)
    INCL_RANGE      reduce using rule 151 (varname -> IDENTIFIER .)
    EXCL_RANGE      reduce using rule 151 (varname -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 151 (varname -> IDENTIFIER .)
    BIT_OR          reduce using rule 151 (varname -> IDENTIFIER .)
    SEMI_COLON      reduce using rule 151 (varname -> IDENTIFIER .)
    NEWLINE         reduce using rule 151 (varname -> IDENTIFIER .)
    puts            reduce using rule 151 (varname -> IDENTIFIER .)
    print           reduce using rule 151 (varname -> IDENTIFIER .)
    break           reduce using rule 151 (varname -> IDENTIFIER .)
    def             reduce using rule 151 (varname -> IDENTIFIER .)
    if              reduce using rule 151 (varname -> IDENTIFIER .)
    while           reduce using rule 151 (varname -> IDENTIFIER .)
    case            reduce using rule 151 (varname -> IDENTIFIER .)
    for             reduce using rule 151 (varname -> IDENTIFIER .)
    return          reduce using rule 151 (varname -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 151 (varname -> IDENTIFIER .)
    nil             reduce using rule 151 (varname -> IDENTIFIER .)
    self            reduce using rule 151 (varname -> IDENTIFIER .)
    GLOBAL          reduce using rule 151 (varname -> IDENTIFIER .)
    AT_THE_RATE     reduce using rule 151 (varname -> IDENTIFIER .)
    Array           reduce using rule 151 (varname -> IDENTIFIER .)
    NUMBER          reduce using rule 151 (varname -> IDENTIFIER .)
    FLOAT           reduce using rule 151 (varname -> IDENTIFIER .)
    STRING          reduce using rule 151 (varname -> IDENTIFIER .)
    true            reduce using rule 151 (varname -> IDENTIFIER .)
    false           reduce using rule 151 (varname -> IDENTIFIER .)
    $end            reduce using rule 151 (varname -> IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 151 (varname -> IDENTIFIER .)
    then            reduce using rule 151 (varname -> IDENTIFIER .)
    do              reduce using rule 151 (varname -> IDENTIFIER .)

  ! OPEN_BRACKET    [ reduce using rule 151 (varname -> IDENTIFIER .) ]


state 19

    (16) expr -> if . expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
    (17) expr -> if . expr1 pthen M_1 multstmt M_1 multelsif end M_1
    (18) expr -> if . expr1 pthen M_1 multstmt end M_1
    (24) expr1 -> . return IDENTIFIER
    (25) expr1 -> . return
    (26) expr1 -> . expr2
    (27) expr2 -> . arg
    (28) expr2 -> . call
    (32) arg -> . arg BIT_OR term0
    (33) arg -> . term0
    (29) call -> . function
    (34) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (36) term0 -> . term1
    (30) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (31) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (100) mlhs -> . mlhsitem
    (37) term1 -> . mlhs EQUALS mrhs
    (38) term1 -> . mlhs opasgn mrhs
    (39) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arrayal
    (40) term2 -> . term3 INCL_RANGE term3
    (41) term2 -> . term3 EXCL_RANGE term3
    (42) term2 -> . term3
    (85) arrayal -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (43) term3 -> . term3 LOGICAL_OR term4
    (44) term3 -> . term4
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self
    (45) term4 -> . term5 DOUBLE_EQUALS term5
    (46) term4 -> . term5 TRIPLE_EQUALS term5
    (47) term4 -> . term5 NOT_EQUALS term5
    (48) term4 -> . term5 EQUAL_TILDE term5
    (49) term4 -> . term5 BANG_TILDE term5
    (50) term4 -> . term5 COMPARISON term5
    (51) term4 -> . term5
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false

    return          shift and go to state 25
    IDENTIFIER      shift and go to state 18
    nil             shift and go to state 39
    self            shift and go to state 40
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61

    expr1                          shift and go to state 72
    expr2                          shift and go to state 26
    arg                            shift and go to state 27
    call                           shift and go to state 28
    term0                          shift and go to state 29
    function                       shift and go to state 30
    mlhs                           shift and go to state 24
    term1                          shift and go to state 31
    mlhsitem                       shift and go to state 32
    term2                          shift and go to state 33
    arrayal                        shift and go to state 34
    term3                          shift and go to state 35
    variable                       shift and go to state 36
    term4                          shift and go to state 37
    varname                        shift and go to state 38
    term5                          shift and go to state 41
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56

state 20

    (22) expr -> expr1 .

    SEMI_COLON      reduce using rule 22 (expr -> expr1 .)
    NEWLINE         reduce using rule 22 (expr -> expr1 .)
    puts            reduce using rule 22 (expr -> expr1 .)
    print           reduce using rule 22 (expr -> expr1 .)
    break           reduce using rule 22 (expr -> expr1 .)
    def             reduce using rule 22 (expr -> expr1 .)
    if              reduce using rule 22 (expr -> expr1 .)
    while           reduce using rule 22 (expr -> expr1 .)
    case            reduce using rule 22 (expr -> expr1 .)
    for             reduce using rule 22 (expr -> expr1 .)
    return          reduce using rule 22 (expr -> expr1 .)
    IDENTIFIER      reduce using rule 22 (expr -> expr1 .)
    nil             reduce using rule 22 (expr -> expr1 .)
    self            reduce using rule 22 (expr -> expr1 .)
    GLOBAL          reduce using rule 22 (expr -> expr1 .)
    AT_THE_RATE     reduce using rule 22 (expr -> expr1 .)
    MINUS           reduce using rule 22 (expr -> expr1 .)
    PLUS            reduce using rule 22 (expr -> expr1 .)
    OPEN_BRACKET    reduce using rule 22 (expr -> expr1 .)
    Array           reduce using rule 22 (expr -> expr1 .)
    NUMBER          reduce using rule 22 (expr -> expr1 .)
    FLOAT           reduce using rule 22 (expr -> expr1 .)
    STRING          reduce using rule 22 (expr -> expr1 .)
    true            reduce using rule 22 (expr -> expr1 .)
    false           reduce using rule 22 (expr -> expr1 .)
    $end            reduce using rule 22 (expr -> expr1 .)
    then            reduce using rule 22 (expr -> expr1 .)


state 21

    (19) expr -> while . M_1 expr1 pdo M_1 multstmt end M_1
    (23) M_1 -> . empty
    (154) empty -> .

    return          reduce using rule 154 (empty -> .)
    IDENTIFIER      reduce using rule 154 (empty -> .)
    nil             reduce using rule 154 (empty -> .)
    self            reduce using rule 154 (empty -> .)
    GLOBAL          reduce using rule 154 (empty -> .)
    AT_THE_RATE     reduce using rule 154 (empty -> .)
    MINUS           reduce using rule 154 (empty -> .)
    PLUS            reduce using rule 154 (empty -> .)
    OPEN_BRACKET    reduce using rule 154 (empty -> .)
    Array           reduce using rule 154 (empty -> .)
    NUMBER          reduce using rule 154 (empty -> .)
    FLOAT           reduce using rule 154 (empty -> .)
    STRING          reduce using rule 154 (empty -> .)
    true            reduce using rule 154 (empty -> .)
    false           reduce using rule 154 (empty -> .)

    M_1                            shift and go to state 73
    empty                          shift and go to state 74

state 22

    (20) expr -> case . expr1 M_1 newline multcase end M_1
    (24) expr1 -> . return IDENTIFIER
    (25) expr1 -> . return
    (26) expr1 -> . expr2
    (27) expr2 -> . arg
    (28) expr2 -> . call
    (32) arg -> . arg BIT_OR term0
    (33) arg -> . term0
    (29) call -> . function
    (34) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (36) term0 -> . term1
    (30) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (31) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (100) mlhs -> . mlhsitem
    (37) term1 -> . mlhs EQUALS mrhs
    (38) term1 -> . mlhs opasgn mrhs
    (39) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arrayal
    (40) term2 -> . term3 INCL_RANGE term3
    (41) term2 -> . term3 EXCL_RANGE term3
    (42) term2 -> . term3
    (85) arrayal -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (43) term3 -> . term3 LOGICAL_OR term4
    (44) term3 -> . term4
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self
    (45) term4 -> . term5 DOUBLE_EQUALS term5
    (46) term4 -> . term5 TRIPLE_EQUALS term5
    (47) term4 -> . term5 NOT_EQUALS term5
    (48) term4 -> . term5 EQUAL_TILDE term5
    (49) term4 -> . term5 BANG_TILDE term5
    (50) term4 -> . term5 COMPARISON term5
    (51) term4 -> . term5
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false

    return          shift and go to state 25
    IDENTIFIER      shift and go to state 18
    nil             shift and go to state 39
    self            shift and go to state 40
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61

    expr1                          shift and go to state 75
    expr2                          shift and go to state 26
    arg                            shift and go to state 27
    call                           shift and go to state 28
    term0                          shift and go to state 29
    function                       shift and go to state 30
    mlhs                           shift and go to state 24
    term1                          shift and go to state 31
    mlhsitem                       shift and go to state 32
    term2                          shift and go to state 33
    arrayal                        shift and go to state 34
    term3                          shift and go to state 35
    variable                       shift and go to state 36
    term4                          shift and go to state 37
    varname                        shift and go to state 38
    term5                          shift and go to state 41
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56

state 23

    (21) expr -> for . M_1 mlhs in expr1 pdo M_1 multstmt end M_1
    (23) M_1 -> . empty
    (154) empty -> .

    IDENTIFIER      reduce using rule 154 (empty -> .)
    nil             reduce using rule 154 (empty -> .)
    self            reduce using rule 154 (empty -> .)
    GLOBAL          reduce using rule 154 (empty -> .)
    AT_THE_RATE     reduce using rule 154 (empty -> .)

    M_1                            shift and go to state 76
    empty                          shift and go to state 74

state 24

    (34) term0 -> mlhs . EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) term0 -> mlhs . EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (37) term1 -> mlhs . EQUALS mrhs
    (38) term1 -> mlhs . opasgn mrhs
    (136) opasgn -> . MODULO_EQUALS
    (137) opasgn -> . DIVIDE_EQUALS
    (138) opasgn -> . MINUS_EQUALS
    (139) opasgn -> . PLUS_EQUALS
    (140) opasgn -> . OR_EQUALS
    (141) opasgn -> . AND_EQUALS
    (142) opasgn -> . XOR_EQUALS
    (143) opasgn -> . RIGHT_SHIFT_EQUALS
    (144) opasgn -> . LEFT_SHIFT_EQUALS
    (145) opasgn -> . MULTIPLY_EQUALS
    (146) opasgn -> . LOGICAL_AND_EQUALS
    (147) opasgn -> . LOGICAL_OR_EQUALS
    (148) opasgn -> . POWER_EQUALS

    EQUALS          shift and go to state 77
    MODULO_EQUALS   shift and go to state 79
    DIVIDE_EQUALS   shift and go to state 80
    MINUS_EQUALS    shift and go to state 81
    PLUS_EQUALS     shift and go to state 82
    OR_EQUALS       shift and go to state 83
    AND_EQUALS      shift and go to state 84
    XOR_EQUALS      shift and go to state 85
    RIGHT_SHIFT_EQUALS shift and go to state 86
    LEFT_SHIFT_EQUALS shift and go to state 87
    MULTIPLY_EQUALS shift and go to state 88
    LOGICAL_AND_EQUALS shift and go to state 89
    LOGICAL_OR_EQUALS shift and go to state 90
    POWER_EQUALS    shift and go to state 91

    opasgn                         shift and go to state 78

state 25

    (24) expr1 -> return . IDENTIFIER
    (25) expr1 -> return .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    IDENTIFIER      shift and go to state 92
    SEMI_COLON      reduce using rule 25 (expr1 -> return .)
    NEWLINE         reduce using rule 25 (expr1 -> return .)
    puts            reduce using rule 25 (expr1 -> return .)
    print           reduce using rule 25 (expr1 -> return .)
    break           reduce using rule 25 (expr1 -> return .)
    def             reduce using rule 25 (expr1 -> return .)
    if              reduce using rule 25 (expr1 -> return .)
    while           reduce using rule 25 (expr1 -> return .)
    case            reduce using rule 25 (expr1 -> return .)
    for             reduce using rule 25 (expr1 -> return .)
    return          reduce using rule 25 (expr1 -> return .)
    nil             reduce using rule 25 (expr1 -> return .)
    self            reduce using rule 25 (expr1 -> return .)
    GLOBAL          reduce using rule 25 (expr1 -> return .)
    AT_THE_RATE     reduce using rule 25 (expr1 -> return .)
    MINUS           reduce using rule 25 (expr1 -> return .)
    PLUS            reduce using rule 25 (expr1 -> return .)
    OPEN_BRACKET    reduce using rule 25 (expr1 -> return .)
    Array           reduce using rule 25 (expr1 -> return .)
    NUMBER          reduce using rule 25 (expr1 -> return .)
    FLOAT           reduce using rule 25 (expr1 -> return .)
    STRING          reduce using rule 25 (expr1 -> return .)
    true            reduce using rule 25 (expr1 -> return .)
    false           reduce using rule 25 (expr1 -> return .)
    $end            reduce using rule 25 (expr1 -> return .)
    then            reduce using rule 25 (expr1 -> return .)
    do              reduce using rule 25 (expr1 -> return .)

  ! IDENTIFIER      [ reduce using rule 25 (expr1 -> return .) ]


state 26

    (26) expr1 -> expr2 .

    SEMI_COLON      reduce using rule 26 (expr1 -> expr2 .)
    NEWLINE         reduce using rule 26 (expr1 -> expr2 .)
    puts            reduce using rule 26 (expr1 -> expr2 .)
    print           reduce using rule 26 (expr1 -> expr2 .)
    break           reduce using rule 26 (expr1 -> expr2 .)
    def             reduce using rule 26 (expr1 -> expr2 .)
    if              reduce using rule 26 (expr1 -> expr2 .)
    while           reduce using rule 26 (expr1 -> expr2 .)
    case            reduce using rule 26 (expr1 -> expr2 .)
    for             reduce using rule 26 (expr1 -> expr2 .)
    return          reduce using rule 26 (expr1 -> expr2 .)
    IDENTIFIER      reduce using rule 26 (expr1 -> expr2 .)
    nil             reduce using rule 26 (expr1 -> expr2 .)
    self            reduce using rule 26 (expr1 -> expr2 .)
    GLOBAL          reduce using rule 26 (expr1 -> expr2 .)
    AT_THE_RATE     reduce using rule 26 (expr1 -> expr2 .)
    MINUS           reduce using rule 26 (expr1 -> expr2 .)
    PLUS            reduce using rule 26 (expr1 -> expr2 .)
    OPEN_BRACKET    reduce using rule 26 (expr1 -> expr2 .)
    Array           reduce using rule 26 (expr1 -> expr2 .)
    NUMBER          reduce using rule 26 (expr1 -> expr2 .)
    FLOAT           reduce using rule 26 (expr1 -> expr2 .)
    STRING          reduce using rule 26 (expr1 -> expr2 .)
    true            reduce using rule 26 (expr1 -> expr2 .)
    false           reduce using rule 26 (expr1 -> expr2 .)
    $end            reduce using rule 26 (expr1 -> expr2 .)
    then            reduce using rule 26 (expr1 -> expr2 .)
    do              reduce using rule 26 (expr1 -> expr2 .)


state 27

    (27) expr2 -> arg .
    (32) arg -> arg . BIT_OR term0

    SEMI_COLON      reduce using rule 27 (expr2 -> arg .)
    NEWLINE         reduce using rule 27 (expr2 -> arg .)
    puts            reduce using rule 27 (expr2 -> arg .)
    print           reduce using rule 27 (expr2 -> arg .)
    break           reduce using rule 27 (expr2 -> arg .)
    def             reduce using rule 27 (expr2 -> arg .)
    if              reduce using rule 27 (expr2 -> arg .)
    while           reduce using rule 27 (expr2 -> arg .)
    case            reduce using rule 27 (expr2 -> arg .)
    for             reduce using rule 27 (expr2 -> arg .)
    return          reduce using rule 27 (expr2 -> arg .)
    IDENTIFIER      reduce using rule 27 (expr2 -> arg .)
    nil             reduce using rule 27 (expr2 -> arg .)
    self            reduce using rule 27 (expr2 -> arg .)
    GLOBAL          reduce using rule 27 (expr2 -> arg .)
    AT_THE_RATE     reduce using rule 27 (expr2 -> arg .)
    MINUS           reduce using rule 27 (expr2 -> arg .)
    PLUS            reduce using rule 27 (expr2 -> arg .)
    OPEN_BRACKET    reduce using rule 27 (expr2 -> arg .)
    Array           reduce using rule 27 (expr2 -> arg .)
    NUMBER          reduce using rule 27 (expr2 -> arg .)
    FLOAT           reduce using rule 27 (expr2 -> arg .)
    STRING          reduce using rule 27 (expr2 -> arg .)
    true            reduce using rule 27 (expr2 -> arg .)
    false           reduce using rule 27 (expr2 -> arg .)
    $end            reduce using rule 27 (expr2 -> arg .)
    CLOSE_BRACKET   reduce using rule 27 (expr2 -> arg .)
    then            reduce using rule 27 (expr2 -> arg .)
    do              reduce using rule 27 (expr2 -> arg .)
    BIT_OR          shift and go to state 93


state 28

    (28) expr2 -> call .

    SEMI_COLON      reduce using rule 28 (expr2 -> call .)
    NEWLINE         reduce using rule 28 (expr2 -> call .)
    puts            reduce using rule 28 (expr2 -> call .)
    print           reduce using rule 28 (expr2 -> call .)
    break           reduce using rule 28 (expr2 -> call .)
    def             reduce using rule 28 (expr2 -> call .)
    if              reduce using rule 28 (expr2 -> call .)
    while           reduce using rule 28 (expr2 -> call .)
    case            reduce using rule 28 (expr2 -> call .)
    for             reduce using rule 28 (expr2 -> call .)
    return          reduce using rule 28 (expr2 -> call .)
    IDENTIFIER      reduce using rule 28 (expr2 -> call .)
    nil             reduce using rule 28 (expr2 -> call .)
    self            reduce using rule 28 (expr2 -> call .)
    GLOBAL          reduce using rule 28 (expr2 -> call .)
    AT_THE_RATE     reduce using rule 28 (expr2 -> call .)
    MINUS           reduce using rule 28 (expr2 -> call .)
    PLUS            reduce using rule 28 (expr2 -> call .)
    OPEN_BRACKET    reduce using rule 28 (expr2 -> call .)
    Array           reduce using rule 28 (expr2 -> call .)
    NUMBER          reduce using rule 28 (expr2 -> call .)
    FLOAT           reduce using rule 28 (expr2 -> call .)
    STRING          reduce using rule 28 (expr2 -> call .)
    true            reduce using rule 28 (expr2 -> call .)
    false           reduce using rule 28 (expr2 -> call .)
    $end            reduce using rule 28 (expr2 -> call .)
    CLOSE_BRACKET   reduce using rule 28 (expr2 -> call .)
    then            reduce using rule 28 (expr2 -> call .)
    do              reduce using rule 28 (expr2 -> call .)


state 29

    (33) arg -> term0 .

    BIT_OR          reduce using rule 33 (arg -> term0 .)
    SEMI_COLON      reduce using rule 33 (arg -> term0 .)
    NEWLINE         reduce using rule 33 (arg -> term0 .)
    puts            reduce using rule 33 (arg -> term0 .)
    print           reduce using rule 33 (arg -> term0 .)
    break           reduce using rule 33 (arg -> term0 .)
    def             reduce using rule 33 (arg -> term0 .)
    if              reduce using rule 33 (arg -> term0 .)
    while           reduce using rule 33 (arg -> term0 .)
    case            reduce using rule 33 (arg -> term0 .)
    for             reduce using rule 33 (arg -> term0 .)
    return          reduce using rule 33 (arg -> term0 .)
    IDENTIFIER      reduce using rule 33 (arg -> term0 .)
    nil             reduce using rule 33 (arg -> term0 .)
    self            reduce using rule 33 (arg -> term0 .)
    GLOBAL          reduce using rule 33 (arg -> term0 .)
    AT_THE_RATE     reduce using rule 33 (arg -> term0 .)
    MINUS           reduce using rule 33 (arg -> term0 .)
    PLUS            reduce using rule 33 (arg -> term0 .)
    OPEN_BRACKET    reduce using rule 33 (arg -> term0 .)
    Array           reduce using rule 33 (arg -> term0 .)
    NUMBER          reduce using rule 33 (arg -> term0 .)
    FLOAT           reduce using rule 33 (arg -> term0 .)
    STRING          reduce using rule 33 (arg -> term0 .)
    true            reduce using rule 33 (arg -> term0 .)
    false           reduce using rule 33 (arg -> term0 .)
    $end            reduce using rule 33 (arg -> term0 .)
    CLOSE_BRACKET   reduce using rule 33 (arg -> term0 .)
    then            reduce using rule 33 (arg -> term0 .)
    do              reduce using rule 33 (arg -> term0 .)
    COMMA           reduce using rule 33 (arg -> term0 .)


state 30

    (29) call -> function .

    SEMI_COLON      reduce using rule 29 (call -> function .)
    NEWLINE         reduce using rule 29 (call -> function .)
    puts            reduce using rule 29 (call -> function .)
    print           reduce using rule 29 (call -> function .)
    break           reduce using rule 29 (call -> function .)
    def             reduce using rule 29 (call -> function .)
    if              reduce using rule 29 (call -> function .)
    while           reduce using rule 29 (call -> function .)
    case            reduce using rule 29 (call -> function .)
    for             reduce using rule 29 (call -> function .)
    return          reduce using rule 29 (call -> function .)
    IDENTIFIER      reduce using rule 29 (call -> function .)
    nil             reduce using rule 29 (call -> function .)
    self            reduce using rule 29 (call -> function .)
    GLOBAL          reduce using rule 29 (call -> function .)
    AT_THE_RATE     reduce using rule 29 (call -> function .)
    MINUS           reduce using rule 29 (call -> function .)
    PLUS            reduce using rule 29 (call -> function .)
    OPEN_BRACKET    reduce using rule 29 (call -> function .)
    Array           reduce using rule 29 (call -> function .)
    NUMBER          reduce using rule 29 (call -> function .)
    FLOAT           reduce using rule 29 (call -> function .)
    STRING          reduce using rule 29 (call -> function .)
    true            reduce using rule 29 (call -> function .)
    false           reduce using rule 29 (call -> function .)
    $end            reduce using rule 29 (call -> function .)
    CLOSE_BRACKET   reduce using rule 29 (call -> function .)
    then            reduce using rule 29 (call -> function .)
    do              reduce using rule 29 (call -> function .)


state 31

    (36) term0 -> term1 .

    BIT_OR          reduce using rule 36 (term0 -> term1 .)
    SEMI_COLON      reduce using rule 36 (term0 -> term1 .)
    NEWLINE         reduce using rule 36 (term0 -> term1 .)
    puts            reduce using rule 36 (term0 -> term1 .)
    print           reduce using rule 36 (term0 -> term1 .)
    break           reduce using rule 36 (term0 -> term1 .)
    def             reduce using rule 36 (term0 -> term1 .)
    if              reduce using rule 36 (term0 -> term1 .)
    while           reduce using rule 36 (term0 -> term1 .)
    case            reduce using rule 36 (term0 -> term1 .)
    for             reduce using rule 36 (term0 -> term1 .)
    return          reduce using rule 36 (term0 -> term1 .)
    IDENTIFIER      reduce using rule 36 (term0 -> term1 .)
    nil             reduce using rule 36 (term0 -> term1 .)
    self            reduce using rule 36 (term0 -> term1 .)
    GLOBAL          reduce using rule 36 (term0 -> term1 .)
    AT_THE_RATE     reduce using rule 36 (term0 -> term1 .)
    MINUS           reduce using rule 36 (term0 -> term1 .)
    PLUS            reduce using rule 36 (term0 -> term1 .)
    OPEN_BRACKET    reduce using rule 36 (term0 -> term1 .)
    Array           reduce using rule 36 (term0 -> term1 .)
    NUMBER          reduce using rule 36 (term0 -> term1 .)
    FLOAT           reduce using rule 36 (term0 -> term1 .)
    STRING          reduce using rule 36 (term0 -> term1 .)
    true            reduce using rule 36 (term0 -> term1 .)
    false           reduce using rule 36 (term0 -> term1 .)
    $end            reduce using rule 36 (term0 -> term1 .)
    CLOSE_BRACKET   reduce using rule 36 (term0 -> term1 .)
    then            reduce using rule 36 (term0 -> term1 .)
    do              reduce using rule 36 (term0 -> term1 .)
    COMMA           reduce using rule 36 (term0 -> term1 .)


state 32

    (100) mlhs -> mlhsitem .

    EQUALS          reduce using rule 100 (mlhs -> mlhsitem .)
    MODULO_EQUALS   reduce using rule 100 (mlhs -> mlhsitem .)
    DIVIDE_EQUALS   reduce using rule 100 (mlhs -> mlhsitem .)
    MINUS_EQUALS    reduce using rule 100 (mlhs -> mlhsitem .)
    PLUS_EQUALS     reduce using rule 100 (mlhs -> mlhsitem .)
    OR_EQUALS       reduce using rule 100 (mlhs -> mlhsitem .)
    AND_EQUALS      reduce using rule 100 (mlhs -> mlhsitem .)
    XOR_EQUALS      reduce using rule 100 (mlhs -> mlhsitem .)
    RIGHT_SHIFT_EQUALS reduce using rule 100 (mlhs -> mlhsitem .)
    LEFT_SHIFT_EQUALS reduce using rule 100 (mlhs -> mlhsitem .)
    MULTIPLY_EQUALS reduce using rule 100 (mlhs -> mlhsitem .)
    LOGICAL_AND_EQUALS reduce using rule 100 (mlhs -> mlhsitem .)
    LOGICAL_OR_EQUALS reduce using rule 100 (mlhs -> mlhsitem .)
    POWER_EQUALS    reduce using rule 100 (mlhs -> mlhsitem .)
    in              reduce using rule 100 (mlhs -> mlhsitem .)


state 33

    (39) term1 -> term2 .

    BIT_OR          reduce using rule 39 (term1 -> term2 .)
    SEMI_COLON      reduce using rule 39 (term1 -> term2 .)
    NEWLINE         reduce using rule 39 (term1 -> term2 .)
    puts            reduce using rule 39 (term1 -> term2 .)
    print           reduce using rule 39 (term1 -> term2 .)
    break           reduce using rule 39 (term1 -> term2 .)
    def             reduce using rule 39 (term1 -> term2 .)
    if              reduce using rule 39 (term1 -> term2 .)
    while           reduce using rule 39 (term1 -> term2 .)
    case            reduce using rule 39 (term1 -> term2 .)
    for             reduce using rule 39 (term1 -> term2 .)
    return          reduce using rule 39 (term1 -> term2 .)
    IDENTIFIER      reduce using rule 39 (term1 -> term2 .)
    nil             reduce using rule 39 (term1 -> term2 .)
    self            reduce using rule 39 (term1 -> term2 .)
    GLOBAL          reduce using rule 39 (term1 -> term2 .)
    AT_THE_RATE     reduce using rule 39 (term1 -> term2 .)
    MINUS           reduce using rule 39 (term1 -> term2 .)
    PLUS            reduce using rule 39 (term1 -> term2 .)
    OPEN_BRACKET    reduce using rule 39 (term1 -> term2 .)
    Array           reduce using rule 39 (term1 -> term2 .)
    NUMBER          reduce using rule 39 (term1 -> term2 .)
    FLOAT           reduce using rule 39 (term1 -> term2 .)
    STRING          reduce using rule 39 (term1 -> term2 .)
    true            reduce using rule 39 (term1 -> term2 .)
    false           reduce using rule 39 (term1 -> term2 .)
    $end            reduce using rule 39 (term1 -> term2 .)
    CLOSE_BRACKET   reduce using rule 39 (term1 -> term2 .)
    then            reduce using rule 39 (term1 -> term2 .)
    do              reduce using rule 39 (term1 -> term2 .)
    COMMA           reduce using rule 39 (term1 -> term2 .)


state 34

    (102) mlhsitem -> arrayal .

    EQUALS          reduce using rule 102 (mlhsitem -> arrayal .)
    MODULO_EQUALS   reduce using rule 102 (mlhsitem -> arrayal .)
    DIVIDE_EQUALS   reduce using rule 102 (mlhsitem -> arrayal .)
    MINUS_EQUALS    reduce using rule 102 (mlhsitem -> arrayal .)
    PLUS_EQUALS     reduce using rule 102 (mlhsitem -> arrayal .)
    OR_EQUALS       reduce using rule 102 (mlhsitem -> arrayal .)
    AND_EQUALS      reduce using rule 102 (mlhsitem -> arrayal .)
    XOR_EQUALS      reduce using rule 102 (mlhsitem -> arrayal .)
    RIGHT_SHIFT_EQUALS reduce using rule 102 (mlhsitem -> arrayal .)
    LEFT_SHIFT_EQUALS reduce using rule 102 (mlhsitem -> arrayal .)
    MULTIPLY_EQUALS reduce using rule 102 (mlhsitem -> arrayal .)
    LOGICAL_AND_EQUALS reduce using rule 102 (mlhsitem -> arrayal .)
    LOGICAL_OR_EQUALS reduce using rule 102 (mlhsitem -> arrayal .)
    POWER_EQUALS    reduce using rule 102 (mlhsitem -> arrayal .)
    in              reduce using rule 102 (mlhsitem -> arrayal .)


state 35

    (40) term2 -> term3 . INCL_RANGE term3
    (41) term2 -> term3 . EXCL_RANGE term3
    (42) term2 -> term3 .
    (43) term3 -> term3 . LOGICAL_OR term4

    INCL_RANGE      shift and go to state 94
    EXCL_RANGE      shift and go to state 95
    BIT_OR          reduce using rule 42 (term2 -> term3 .)
    SEMI_COLON      reduce using rule 42 (term2 -> term3 .)
    NEWLINE         reduce using rule 42 (term2 -> term3 .)
    puts            reduce using rule 42 (term2 -> term3 .)
    print           reduce using rule 42 (term2 -> term3 .)
    break           reduce using rule 42 (term2 -> term3 .)
    def             reduce using rule 42 (term2 -> term3 .)
    if              reduce using rule 42 (term2 -> term3 .)
    while           reduce using rule 42 (term2 -> term3 .)
    case            reduce using rule 42 (term2 -> term3 .)
    for             reduce using rule 42 (term2 -> term3 .)
    return          reduce using rule 42 (term2 -> term3 .)
    IDENTIFIER      reduce using rule 42 (term2 -> term3 .)
    nil             reduce using rule 42 (term2 -> term3 .)
    self            reduce using rule 42 (term2 -> term3 .)
    GLOBAL          reduce using rule 42 (term2 -> term3 .)
    AT_THE_RATE     reduce using rule 42 (term2 -> term3 .)
    MINUS           reduce using rule 42 (term2 -> term3 .)
    PLUS            reduce using rule 42 (term2 -> term3 .)
    OPEN_BRACKET    reduce using rule 42 (term2 -> term3 .)
    Array           reduce using rule 42 (term2 -> term3 .)
    NUMBER          reduce using rule 42 (term2 -> term3 .)
    FLOAT           reduce using rule 42 (term2 -> term3 .)
    STRING          reduce using rule 42 (term2 -> term3 .)
    true            reduce using rule 42 (term2 -> term3 .)
    false           reduce using rule 42 (term2 -> term3 .)
    $end            reduce using rule 42 (term2 -> term3 .)
    CLOSE_BRACKET   reduce using rule 42 (term2 -> term3 .)
    then            reduce using rule 42 (term2 -> term3 .)
    do              reduce using rule 42 (term2 -> term3 .)
    COMMA           reduce using rule 42 (term2 -> term3 .)
    LOGICAL_OR      shift and go to state 96


state 36

    (85) arrayal -> variable . OPEN_SQUARE array_args CLOSE_SQUARE
    (86) arraya -> variable . OPEN_SQUARE array_args CLOSE_SQUARE

    OPEN_SQUARE     shift and go to state 97


state 37

    (44) term3 -> term4 .

    INCL_RANGE      reduce using rule 44 (term3 -> term4 .)
    EXCL_RANGE      reduce using rule 44 (term3 -> term4 .)
    LOGICAL_OR      reduce using rule 44 (term3 -> term4 .)
    BIT_OR          reduce using rule 44 (term3 -> term4 .)
    SEMI_COLON      reduce using rule 44 (term3 -> term4 .)
    NEWLINE         reduce using rule 44 (term3 -> term4 .)
    puts            reduce using rule 44 (term3 -> term4 .)
    print           reduce using rule 44 (term3 -> term4 .)
    break           reduce using rule 44 (term3 -> term4 .)
    def             reduce using rule 44 (term3 -> term4 .)
    if              reduce using rule 44 (term3 -> term4 .)
    while           reduce using rule 44 (term3 -> term4 .)
    case            reduce using rule 44 (term3 -> term4 .)
    for             reduce using rule 44 (term3 -> term4 .)
    return          reduce using rule 44 (term3 -> term4 .)
    IDENTIFIER      reduce using rule 44 (term3 -> term4 .)
    nil             reduce using rule 44 (term3 -> term4 .)
    self            reduce using rule 44 (term3 -> term4 .)
    GLOBAL          reduce using rule 44 (term3 -> term4 .)
    AT_THE_RATE     reduce using rule 44 (term3 -> term4 .)
    MINUS           reduce using rule 44 (term3 -> term4 .)
    PLUS            reduce using rule 44 (term3 -> term4 .)
    OPEN_BRACKET    reduce using rule 44 (term3 -> term4 .)
    Array           reduce using rule 44 (term3 -> term4 .)
    NUMBER          reduce using rule 44 (term3 -> term4 .)
    FLOAT           reduce using rule 44 (term3 -> term4 .)
    STRING          reduce using rule 44 (term3 -> term4 .)
    true            reduce using rule 44 (term3 -> term4 .)
    false           reduce using rule 44 (term3 -> term4 .)
    $end            reduce using rule 44 (term3 -> term4 .)
    CLOSE_BRACKET   reduce using rule 44 (term3 -> term4 .)
    then            reduce using rule 44 (term3 -> term4 .)
    do              reduce using rule 44 (term3 -> term4 .)
    COMMA           reduce using rule 44 (term3 -> term4 .)


state 38

    (127) variable -> varname .
    (81) primary -> varname .

    OPEN_SQUARE     reduce using rule 127 (variable -> varname .)
    POWER           reduce using rule 81 (primary -> varname .)
    MULTIPLY        reduce using rule 81 (primary -> varname .)
    DIVIDE          reduce using rule 81 (primary -> varname .)
    MODULO          reduce using rule 81 (primary -> varname .)
    PLUS            reduce using rule 81 (primary -> varname .)
    MINUS           reduce using rule 81 (primary -> varname .)
    LEFT_SHIFT      reduce using rule 81 (primary -> varname .)
    RIGHT_SHIFT     reduce using rule 81 (primary -> varname .)
    BIT_AND         reduce using rule 81 (primary -> varname .)
    BIT_XOR         reduce using rule 81 (primary -> varname .)
    DOUBLE_EQUALS   reduce using rule 81 (primary -> varname .)
    TRIPLE_EQUALS   reduce using rule 81 (primary -> varname .)
    NOT_EQUALS      reduce using rule 81 (primary -> varname .)
    EQUAL_TILDE     reduce using rule 81 (primary -> varname .)
    BANG_TILDE      reduce using rule 81 (primary -> varname .)
    COMPARISON      reduce using rule 81 (primary -> varname .)
    LESS            reduce using rule 81 (primary -> varname .)
    LESS_EQUALS     reduce using rule 81 (primary -> varname .)
    GREATER         reduce using rule 81 (primary -> varname .)
    GREATER_EQUALS  reduce using rule 81 (primary -> varname .)
    INCL_RANGE      reduce using rule 81 (primary -> varname .)
    EXCL_RANGE      reduce using rule 81 (primary -> varname .)
    LOGICAL_OR      reduce using rule 81 (primary -> varname .)
    BIT_OR          reduce using rule 81 (primary -> varname .)
    SEMI_COLON      reduce using rule 81 (primary -> varname .)
    NEWLINE         reduce using rule 81 (primary -> varname .)
    puts            reduce using rule 81 (primary -> varname .)
    print           reduce using rule 81 (primary -> varname .)
    break           reduce using rule 81 (primary -> varname .)
    def             reduce using rule 81 (primary -> varname .)
    if              reduce using rule 81 (primary -> varname .)
    while           reduce using rule 81 (primary -> varname .)
    case            reduce using rule 81 (primary -> varname .)
    for             reduce using rule 81 (primary -> varname .)
    return          reduce using rule 81 (primary -> varname .)
    IDENTIFIER      reduce using rule 81 (primary -> varname .)
    nil             reduce using rule 81 (primary -> varname .)
    self            reduce using rule 81 (primary -> varname .)
    GLOBAL          reduce using rule 81 (primary -> varname .)
    AT_THE_RATE     reduce using rule 81 (primary -> varname .)
    OPEN_BRACKET    reduce using rule 81 (primary -> varname .)
    Array           reduce using rule 81 (primary -> varname .)
    NUMBER          reduce using rule 81 (primary -> varname .)
    FLOAT           reduce using rule 81 (primary -> varname .)
    STRING          reduce using rule 81 (primary -> varname .)
    true            reduce using rule 81 (primary -> varname .)
    false           reduce using rule 81 (primary -> varname .)
    $end            reduce using rule 81 (primary -> varname .)
    CLOSE_BRACKET   reduce using rule 81 (primary -> varname .)
    then            reduce using rule 81 (primary -> varname .)
    do              reduce using rule 81 (primary -> varname .)
    COMMA           reduce using rule 81 (primary -> varname .)


state 39

    (128) variable -> nil .

    OPEN_SQUARE     reduce using rule 128 (variable -> nil .)


state 40

    (129) variable -> self .

    OPEN_SQUARE     reduce using rule 129 (variable -> self .)


state 41

    (45) term4 -> term5 . DOUBLE_EQUALS term5
    (46) term4 -> term5 . TRIPLE_EQUALS term5
    (47) term4 -> term5 . NOT_EQUALS term5
    (48) term4 -> term5 . EQUAL_TILDE term5
    (49) term4 -> term5 . BANG_TILDE term5
    (50) term4 -> term5 . COMPARISON term5
    (51) term4 -> term5 .
    (52) term5 -> term5 . LESS term6
    (53) term5 -> term5 . LESS_EQUALS term6
    (54) term5 -> term5 . GREATER term6
    (55) term5 -> term5 . GREATER_EQUALS term6

    DOUBLE_EQUALS   shift and go to state 98
    TRIPLE_EQUALS   shift and go to state 99
    NOT_EQUALS      shift and go to state 100
    EQUAL_TILDE     shift and go to state 101
    BANG_TILDE      shift and go to state 102
    COMPARISON      shift and go to state 103
    INCL_RANGE      reduce using rule 51 (term4 -> term5 .)
    EXCL_RANGE      reduce using rule 51 (term4 -> term5 .)
    LOGICAL_OR      reduce using rule 51 (term4 -> term5 .)
    BIT_OR          reduce using rule 51 (term4 -> term5 .)
    SEMI_COLON      reduce using rule 51 (term4 -> term5 .)
    NEWLINE         reduce using rule 51 (term4 -> term5 .)
    puts            reduce using rule 51 (term4 -> term5 .)
    print           reduce using rule 51 (term4 -> term5 .)
    break           reduce using rule 51 (term4 -> term5 .)
    def             reduce using rule 51 (term4 -> term5 .)
    if              reduce using rule 51 (term4 -> term5 .)
    while           reduce using rule 51 (term4 -> term5 .)
    case            reduce using rule 51 (term4 -> term5 .)
    for             reduce using rule 51 (term4 -> term5 .)
    return          reduce using rule 51 (term4 -> term5 .)
    IDENTIFIER      reduce using rule 51 (term4 -> term5 .)
    nil             reduce using rule 51 (term4 -> term5 .)
    self            reduce using rule 51 (term4 -> term5 .)
    GLOBAL          reduce using rule 51 (term4 -> term5 .)
    AT_THE_RATE     reduce using rule 51 (term4 -> term5 .)
    MINUS           reduce using rule 51 (term4 -> term5 .)
    PLUS            reduce using rule 51 (term4 -> term5 .)
    OPEN_BRACKET    reduce using rule 51 (term4 -> term5 .)
    Array           reduce using rule 51 (term4 -> term5 .)
    NUMBER          reduce using rule 51 (term4 -> term5 .)
    FLOAT           reduce using rule 51 (term4 -> term5 .)
    STRING          reduce using rule 51 (term4 -> term5 .)
    true            reduce using rule 51 (term4 -> term5 .)
    false           reduce using rule 51 (term4 -> term5 .)
    $end            reduce using rule 51 (term4 -> term5 .)
    CLOSE_BRACKET   reduce using rule 51 (term4 -> term5 .)
    then            reduce using rule 51 (term4 -> term5 .)
    do              reduce using rule 51 (term4 -> term5 .)
    COMMA           reduce using rule 51 (term4 -> term5 .)
    LESS            shift and go to state 104
    LESS_EQUALS     shift and go to state 105
    GREATER         shift and go to state 106
    GREATER_EQUALS  shift and go to state 107


state 42

    (149) varname -> GLOBAL .

    OPEN_SQUARE     reduce using rule 149 (varname -> GLOBAL .)
    POWER           reduce using rule 149 (varname -> GLOBAL .)
    MULTIPLY        reduce using rule 149 (varname -> GLOBAL .)
    DIVIDE          reduce using rule 149 (varname -> GLOBAL .)
    MODULO          reduce using rule 149 (varname -> GLOBAL .)
    PLUS            reduce using rule 149 (varname -> GLOBAL .)
    MINUS           reduce using rule 149 (varname -> GLOBAL .)
    LEFT_SHIFT      reduce using rule 149 (varname -> GLOBAL .)
    RIGHT_SHIFT     reduce using rule 149 (varname -> GLOBAL .)
    BIT_AND         reduce using rule 149 (varname -> GLOBAL .)
    BIT_XOR         reduce using rule 149 (varname -> GLOBAL .)
    DOUBLE_EQUALS   reduce using rule 149 (varname -> GLOBAL .)
    TRIPLE_EQUALS   reduce using rule 149 (varname -> GLOBAL .)
    NOT_EQUALS      reduce using rule 149 (varname -> GLOBAL .)
    EQUAL_TILDE     reduce using rule 149 (varname -> GLOBAL .)
    BANG_TILDE      reduce using rule 149 (varname -> GLOBAL .)
    COMPARISON      reduce using rule 149 (varname -> GLOBAL .)
    LESS            reduce using rule 149 (varname -> GLOBAL .)
    LESS_EQUALS     reduce using rule 149 (varname -> GLOBAL .)
    GREATER         reduce using rule 149 (varname -> GLOBAL .)
    GREATER_EQUALS  reduce using rule 149 (varname -> GLOBAL .)
    INCL_RANGE      reduce using rule 149 (varname -> GLOBAL .)
    EXCL_RANGE      reduce using rule 149 (varname -> GLOBAL .)
    LOGICAL_OR      reduce using rule 149 (varname -> GLOBAL .)
    BIT_OR          reduce using rule 149 (varname -> GLOBAL .)
    SEMI_COLON      reduce using rule 149 (varname -> GLOBAL .)
    NEWLINE         reduce using rule 149 (varname -> GLOBAL .)
    puts            reduce using rule 149 (varname -> GLOBAL .)
    print           reduce using rule 149 (varname -> GLOBAL .)
    break           reduce using rule 149 (varname -> GLOBAL .)
    def             reduce using rule 149 (varname -> GLOBAL .)
    if              reduce using rule 149 (varname -> GLOBAL .)
    while           reduce using rule 149 (varname -> GLOBAL .)
    case            reduce using rule 149 (varname -> GLOBAL .)
    for             reduce using rule 149 (varname -> GLOBAL .)
    return          reduce using rule 149 (varname -> GLOBAL .)
    IDENTIFIER      reduce using rule 149 (varname -> GLOBAL .)
    nil             reduce using rule 149 (varname -> GLOBAL .)
    self            reduce using rule 149 (varname -> GLOBAL .)
    GLOBAL          reduce using rule 149 (varname -> GLOBAL .)
    AT_THE_RATE     reduce using rule 149 (varname -> GLOBAL .)
    OPEN_BRACKET    reduce using rule 149 (varname -> GLOBAL .)
    Array           reduce using rule 149 (varname -> GLOBAL .)
    NUMBER          reduce using rule 149 (varname -> GLOBAL .)
    FLOAT           reduce using rule 149 (varname -> GLOBAL .)
    STRING          reduce using rule 149 (varname -> GLOBAL .)
    true            reduce using rule 149 (varname -> GLOBAL .)
    false           reduce using rule 149 (varname -> GLOBAL .)
    $end            reduce using rule 149 (varname -> GLOBAL .)
    CLOSE_BRACKET   reduce using rule 149 (varname -> GLOBAL .)
    then            reduce using rule 149 (varname -> GLOBAL .)
    do              reduce using rule 149 (varname -> GLOBAL .)
    COMMA           reduce using rule 149 (varname -> GLOBAL .)
    CLOSE_SQUARE    reduce using rule 149 (varname -> GLOBAL .)


state 43

    (150) varname -> AT_THE_RATE . IDENTIFIER

    IDENTIFIER      shift and go to state 108


state 44

    (56) term5 -> term6 .
    (57) term6 -> term6 . BIT_XOR term7

    DOUBLE_EQUALS   reduce using rule 56 (term5 -> term6 .)
    TRIPLE_EQUALS   reduce using rule 56 (term5 -> term6 .)
    NOT_EQUALS      reduce using rule 56 (term5 -> term6 .)
    EQUAL_TILDE     reduce using rule 56 (term5 -> term6 .)
    BANG_TILDE      reduce using rule 56 (term5 -> term6 .)
    COMPARISON      reduce using rule 56 (term5 -> term6 .)
    LESS            reduce using rule 56 (term5 -> term6 .)
    LESS_EQUALS     reduce using rule 56 (term5 -> term6 .)
    GREATER         reduce using rule 56 (term5 -> term6 .)
    GREATER_EQUALS  reduce using rule 56 (term5 -> term6 .)
    INCL_RANGE      reduce using rule 56 (term5 -> term6 .)
    EXCL_RANGE      reduce using rule 56 (term5 -> term6 .)
    LOGICAL_OR      reduce using rule 56 (term5 -> term6 .)
    BIT_OR          reduce using rule 56 (term5 -> term6 .)
    SEMI_COLON      reduce using rule 56 (term5 -> term6 .)
    NEWLINE         reduce using rule 56 (term5 -> term6 .)
    puts            reduce using rule 56 (term5 -> term6 .)
    print           reduce using rule 56 (term5 -> term6 .)
    break           reduce using rule 56 (term5 -> term6 .)
    def             reduce using rule 56 (term5 -> term6 .)
    if              reduce using rule 56 (term5 -> term6 .)
    while           reduce using rule 56 (term5 -> term6 .)
    case            reduce using rule 56 (term5 -> term6 .)
    for             reduce using rule 56 (term5 -> term6 .)
    return          reduce using rule 56 (term5 -> term6 .)
    IDENTIFIER      reduce using rule 56 (term5 -> term6 .)
    nil             reduce using rule 56 (term5 -> term6 .)
    self            reduce using rule 56 (term5 -> term6 .)
    GLOBAL          reduce using rule 56 (term5 -> term6 .)
    AT_THE_RATE     reduce using rule 56 (term5 -> term6 .)
    MINUS           reduce using rule 56 (term5 -> term6 .)
    PLUS            reduce using rule 56 (term5 -> term6 .)
    OPEN_BRACKET    reduce using rule 56 (term5 -> term6 .)
    Array           reduce using rule 56 (term5 -> term6 .)
    NUMBER          reduce using rule 56 (term5 -> term6 .)
    FLOAT           reduce using rule 56 (term5 -> term6 .)
    STRING          reduce using rule 56 (term5 -> term6 .)
    true            reduce using rule 56 (term5 -> term6 .)
    false           reduce using rule 56 (term5 -> term6 .)
    $end            reduce using rule 56 (term5 -> term6 .)
    CLOSE_BRACKET   reduce using rule 56 (term5 -> term6 .)
    then            reduce using rule 56 (term5 -> term6 .)
    do              reduce using rule 56 (term5 -> term6 .)
    COMMA           reduce using rule 56 (term5 -> term6 .)
    BIT_XOR         shift and go to state 109


state 45

    (58) term6 -> term7 .
    (59) term7 -> term7 . BIT_AND term8

    BIT_XOR         reduce using rule 58 (term6 -> term7 .)
    DOUBLE_EQUALS   reduce using rule 58 (term6 -> term7 .)
    TRIPLE_EQUALS   reduce using rule 58 (term6 -> term7 .)
    NOT_EQUALS      reduce using rule 58 (term6 -> term7 .)
    EQUAL_TILDE     reduce using rule 58 (term6 -> term7 .)
    BANG_TILDE      reduce using rule 58 (term6 -> term7 .)
    COMPARISON      reduce using rule 58 (term6 -> term7 .)
    LESS            reduce using rule 58 (term6 -> term7 .)
    LESS_EQUALS     reduce using rule 58 (term6 -> term7 .)
    GREATER         reduce using rule 58 (term6 -> term7 .)
    GREATER_EQUALS  reduce using rule 58 (term6 -> term7 .)
    INCL_RANGE      reduce using rule 58 (term6 -> term7 .)
    EXCL_RANGE      reduce using rule 58 (term6 -> term7 .)
    LOGICAL_OR      reduce using rule 58 (term6 -> term7 .)
    BIT_OR          reduce using rule 58 (term6 -> term7 .)
    SEMI_COLON      reduce using rule 58 (term6 -> term7 .)
    NEWLINE         reduce using rule 58 (term6 -> term7 .)
    puts            reduce using rule 58 (term6 -> term7 .)
    print           reduce using rule 58 (term6 -> term7 .)
    break           reduce using rule 58 (term6 -> term7 .)
    def             reduce using rule 58 (term6 -> term7 .)
    if              reduce using rule 58 (term6 -> term7 .)
    while           reduce using rule 58 (term6 -> term7 .)
    case            reduce using rule 58 (term6 -> term7 .)
    for             reduce using rule 58 (term6 -> term7 .)
    return          reduce using rule 58 (term6 -> term7 .)
    IDENTIFIER      reduce using rule 58 (term6 -> term7 .)
    nil             reduce using rule 58 (term6 -> term7 .)
    self            reduce using rule 58 (term6 -> term7 .)
    GLOBAL          reduce using rule 58 (term6 -> term7 .)
    AT_THE_RATE     reduce using rule 58 (term6 -> term7 .)
    MINUS           reduce using rule 58 (term6 -> term7 .)
    PLUS            reduce using rule 58 (term6 -> term7 .)
    OPEN_BRACKET    reduce using rule 58 (term6 -> term7 .)
    Array           reduce using rule 58 (term6 -> term7 .)
    NUMBER          reduce using rule 58 (term6 -> term7 .)
    FLOAT           reduce using rule 58 (term6 -> term7 .)
    STRING          reduce using rule 58 (term6 -> term7 .)
    true            reduce using rule 58 (term6 -> term7 .)
    false           reduce using rule 58 (term6 -> term7 .)
    $end            reduce using rule 58 (term6 -> term7 .)
    CLOSE_BRACKET   reduce using rule 58 (term6 -> term7 .)
    then            reduce using rule 58 (term6 -> term7 .)
    do              reduce using rule 58 (term6 -> term7 .)
    COMMA           reduce using rule 58 (term6 -> term7 .)
    BIT_AND         shift and go to state 110


state 46

    (60) term7 -> term8 .
    (61) term8 -> term8 . LEFT_SHIFT term9
    (62) term8 -> term8 . RIGHT_SHIFT term9

    BIT_AND         reduce using rule 60 (term7 -> term8 .)
    BIT_XOR         reduce using rule 60 (term7 -> term8 .)
    DOUBLE_EQUALS   reduce using rule 60 (term7 -> term8 .)
    TRIPLE_EQUALS   reduce using rule 60 (term7 -> term8 .)
    NOT_EQUALS      reduce using rule 60 (term7 -> term8 .)
    EQUAL_TILDE     reduce using rule 60 (term7 -> term8 .)
    BANG_TILDE      reduce using rule 60 (term7 -> term8 .)
    COMPARISON      reduce using rule 60 (term7 -> term8 .)
    LESS            reduce using rule 60 (term7 -> term8 .)
    LESS_EQUALS     reduce using rule 60 (term7 -> term8 .)
    GREATER         reduce using rule 60 (term7 -> term8 .)
    GREATER_EQUALS  reduce using rule 60 (term7 -> term8 .)
    INCL_RANGE      reduce using rule 60 (term7 -> term8 .)
    EXCL_RANGE      reduce using rule 60 (term7 -> term8 .)
    LOGICAL_OR      reduce using rule 60 (term7 -> term8 .)
    BIT_OR          reduce using rule 60 (term7 -> term8 .)
    SEMI_COLON      reduce using rule 60 (term7 -> term8 .)
    NEWLINE         reduce using rule 60 (term7 -> term8 .)
    puts            reduce using rule 60 (term7 -> term8 .)
    print           reduce using rule 60 (term7 -> term8 .)
    break           reduce using rule 60 (term7 -> term8 .)
    def             reduce using rule 60 (term7 -> term8 .)
    if              reduce using rule 60 (term7 -> term8 .)
    while           reduce using rule 60 (term7 -> term8 .)
    case            reduce using rule 60 (term7 -> term8 .)
    for             reduce using rule 60 (term7 -> term8 .)
    return          reduce using rule 60 (term7 -> term8 .)
    IDENTIFIER      reduce using rule 60 (term7 -> term8 .)
    nil             reduce using rule 60 (term7 -> term8 .)
    self            reduce using rule 60 (term7 -> term8 .)
    GLOBAL          reduce using rule 60 (term7 -> term8 .)
    AT_THE_RATE     reduce using rule 60 (term7 -> term8 .)
    MINUS           reduce using rule 60 (term7 -> term8 .)
    PLUS            reduce using rule 60 (term7 -> term8 .)
    OPEN_BRACKET    reduce using rule 60 (term7 -> term8 .)
    Array           reduce using rule 60 (term7 -> term8 .)
    NUMBER          reduce using rule 60 (term7 -> term8 .)
    FLOAT           reduce using rule 60 (term7 -> term8 .)
    STRING          reduce using rule 60 (term7 -> term8 .)
    true            reduce using rule 60 (term7 -> term8 .)
    false           reduce using rule 60 (term7 -> term8 .)
    $end            reduce using rule 60 (term7 -> term8 .)
    CLOSE_BRACKET   reduce using rule 60 (term7 -> term8 .)
    then            reduce using rule 60 (term7 -> term8 .)
    do              reduce using rule 60 (term7 -> term8 .)
    COMMA           reduce using rule 60 (term7 -> term8 .)
    LEFT_SHIFT      shift and go to state 111
    RIGHT_SHIFT     shift and go to state 112


state 47

    (63) term8 -> term9 .
    (64) term9 -> term9 . PLUS term10
    (65) term9 -> term9 . MINUS term10

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LEFT_SHIFT      reduce using rule 63 (term8 -> term9 .)
    RIGHT_SHIFT     reduce using rule 63 (term8 -> term9 .)
    BIT_AND         reduce using rule 63 (term8 -> term9 .)
    BIT_XOR         reduce using rule 63 (term8 -> term9 .)
    DOUBLE_EQUALS   reduce using rule 63 (term8 -> term9 .)
    TRIPLE_EQUALS   reduce using rule 63 (term8 -> term9 .)
    NOT_EQUALS      reduce using rule 63 (term8 -> term9 .)
    EQUAL_TILDE     reduce using rule 63 (term8 -> term9 .)
    BANG_TILDE      reduce using rule 63 (term8 -> term9 .)
    COMPARISON      reduce using rule 63 (term8 -> term9 .)
    LESS            reduce using rule 63 (term8 -> term9 .)
    LESS_EQUALS     reduce using rule 63 (term8 -> term9 .)
    GREATER         reduce using rule 63 (term8 -> term9 .)
    GREATER_EQUALS  reduce using rule 63 (term8 -> term9 .)
    INCL_RANGE      reduce using rule 63 (term8 -> term9 .)
    EXCL_RANGE      reduce using rule 63 (term8 -> term9 .)
    LOGICAL_OR      reduce using rule 63 (term8 -> term9 .)
    BIT_OR          reduce using rule 63 (term8 -> term9 .)
    SEMI_COLON      reduce using rule 63 (term8 -> term9 .)
    NEWLINE         reduce using rule 63 (term8 -> term9 .)
    puts            reduce using rule 63 (term8 -> term9 .)
    print           reduce using rule 63 (term8 -> term9 .)
    break           reduce using rule 63 (term8 -> term9 .)
    def             reduce using rule 63 (term8 -> term9 .)
    if              reduce using rule 63 (term8 -> term9 .)
    while           reduce using rule 63 (term8 -> term9 .)
    case            reduce using rule 63 (term8 -> term9 .)
    for             reduce using rule 63 (term8 -> term9 .)
    return          reduce using rule 63 (term8 -> term9 .)
    IDENTIFIER      reduce using rule 63 (term8 -> term9 .)
    nil             reduce using rule 63 (term8 -> term9 .)
    self            reduce using rule 63 (term8 -> term9 .)
    GLOBAL          reduce using rule 63 (term8 -> term9 .)
    AT_THE_RATE     reduce using rule 63 (term8 -> term9 .)
    OPEN_BRACKET    reduce using rule 63 (term8 -> term9 .)
    Array           reduce using rule 63 (term8 -> term9 .)
    NUMBER          reduce using rule 63 (term8 -> term9 .)
    FLOAT           reduce using rule 63 (term8 -> term9 .)
    STRING          reduce using rule 63 (term8 -> term9 .)
    true            reduce using rule 63 (term8 -> term9 .)
    false           reduce using rule 63 (term8 -> term9 .)
    $end            reduce using rule 63 (term8 -> term9 .)
    CLOSE_BRACKET   reduce using rule 63 (term8 -> term9 .)
    then            reduce using rule 63 (term8 -> term9 .)
    do              reduce using rule 63 (term8 -> term9 .)
    COMMA           reduce using rule 63 (term8 -> term9 .)
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114

  ! MINUS           [ reduce using rule 63 (term8 -> term9 .) ]
  ! PLUS            [ reduce using rule 63 (term8 -> term9 .) ]


state 48

    (73) term12 -> PLUS . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    term12                         shift and go to state 115
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 49

    (66) term9 -> term10 .
    (67) term10 -> term10 . MULTIPLY term11
    (68) term10 -> term10 . DIVIDE term11
    (69) term10 -> term10 . MODULO term11

    PLUS            reduce using rule 66 (term9 -> term10 .)
    MINUS           reduce using rule 66 (term9 -> term10 .)
    LEFT_SHIFT      reduce using rule 66 (term9 -> term10 .)
    RIGHT_SHIFT     reduce using rule 66 (term9 -> term10 .)
    BIT_AND         reduce using rule 66 (term9 -> term10 .)
    BIT_XOR         reduce using rule 66 (term9 -> term10 .)
    DOUBLE_EQUALS   reduce using rule 66 (term9 -> term10 .)
    TRIPLE_EQUALS   reduce using rule 66 (term9 -> term10 .)
    NOT_EQUALS      reduce using rule 66 (term9 -> term10 .)
    EQUAL_TILDE     reduce using rule 66 (term9 -> term10 .)
    BANG_TILDE      reduce using rule 66 (term9 -> term10 .)
    COMPARISON      reduce using rule 66 (term9 -> term10 .)
    LESS            reduce using rule 66 (term9 -> term10 .)
    LESS_EQUALS     reduce using rule 66 (term9 -> term10 .)
    GREATER         reduce using rule 66 (term9 -> term10 .)
    GREATER_EQUALS  reduce using rule 66 (term9 -> term10 .)
    INCL_RANGE      reduce using rule 66 (term9 -> term10 .)
    EXCL_RANGE      reduce using rule 66 (term9 -> term10 .)
    LOGICAL_OR      reduce using rule 66 (term9 -> term10 .)
    BIT_OR          reduce using rule 66 (term9 -> term10 .)
    SEMI_COLON      reduce using rule 66 (term9 -> term10 .)
    NEWLINE         reduce using rule 66 (term9 -> term10 .)
    puts            reduce using rule 66 (term9 -> term10 .)
    print           reduce using rule 66 (term9 -> term10 .)
    break           reduce using rule 66 (term9 -> term10 .)
    def             reduce using rule 66 (term9 -> term10 .)
    if              reduce using rule 66 (term9 -> term10 .)
    while           reduce using rule 66 (term9 -> term10 .)
    case            reduce using rule 66 (term9 -> term10 .)
    for             reduce using rule 66 (term9 -> term10 .)
    return          reduce using rule 66 (term9 -> term10 .)
    IDENTIFIER      reduce using rule 66 (term9 -> term10 .)
    nil             reduce using rule 66 (term9 -> term10 .)
    self            reduce using rule 66 (term9 -> term10 .)
    GLOBAL          reduce using rule 66 (term9 -> term10 .)
    AT_THE_RATE     reduce using rule 66 (term9 -> term10 .)
    OPEN_BRACKET    reduce using rule 66 (term9 -> term10 .)
    Array           reduce using rule 66 (term9 -> term10 .)
    NUMBER          reduce using rule 66 (term9 -> term10 .)
    FLOAT           reduce using rule 66 (term9 -> term10 .)
    STRING          reduce using rule 66 (term9 -> term10 .)
    true            reduce using rule 66 (term9 -> term10 .)
    false           reduce using rule 66 (term9 -> term10 .)
    $end            reduce using rule 66 (term9 -> term10 .)
    CLOSE_BRACKET   reduce using rule 66 (term9 -> term10 .)
    then            reduce using rule 66 (term9 -> term10 .)
    do              reduce using rule 66 (term9 -> term10 .)
    COMMA           reduce using rule 66 (term9 -> term10 .)
    MULTIPLY        shift and go to state 119
    DIVIDE          shift and go to state 120
    MODULO          shift and go to state 121


state 50

    (71) term11 -> MINUS . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    term11                         shift and go to state 122
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 51

    (70) term10 -> term11 .

    MULTIPLY        reduce using rule 70 (term10 -> term11 .)
    DIVIDE          reduce using rule 70 (term10 -> term11 .)
    MODULO          reduce using rule 70 (term10 -> term11 .)
    PLUS            reduce using rule 70 (term10 -> term11 .)
    MINUS           reduce using rule 70 (term10 -> term11 .)
    LEFT_SHIFT      reduce using rule 70 (term10 -> term11 .)
    RIGHT_SHIFT     reduce using rule 70 (term10 -> term11 .)
    BIT_AND         reduce using rule 70 (term10 -> term11 .)
    BIT_XOR         reduce using rule 70 (term10 -> term11 .)
    DOUBLE_EQUALS   reduce using rule 70 (term10 -> term11 .)
    TRIPLE_EQUALS   reduce using rule 70 (term10 -> term11 .)
    NOT_EQUALS      reduce using rule 70 (term10 -> term11 .)
    EQUAL_TILDE     reduce using rule 70 (term10 -> term11 .)
    BANG_TILDE      reduce using rule 70 (term10 -> term11 .)
    COMPARISON      reduce using rule 70 (term10 -> term11 .)
    LESS            reduce using rule 70 (term10 -> term11 .)
    LESS_EQUALS     reduce using rule 70 (term10 -> term11 .)
    GREATER         reduce using rule 70 (term10 -> term11 .)
    GREATER_EQUALS  reduce using rule 70 (term10 -> term11 .)
    INCL_RANGE      reduce using rule 70 (term10 -> term11 .)
    EXCL_RANGE      reduce using rule 70 (term10 -> term11 .)
    LOGICAL_OR      reduce using rule 70 (term10 -> term11 .)
    BIT_OR          reduce using rule 70 (term10 -> term11 .)
    SEMI_COLON      reduce using rule 70 (term10 -> term11 .)
    NEWLINE         reduce using rule 70 (term10 -> term11 .)
    puts            reduce using rule 70 (term10 -> term11 .)
    print           reduce using rule 70 (term10 -> term11 .)
    break           reduce using rule 70 (term10 -> term11 .)
    def             reduce using rule 70 (term10 -> term11 .)
    if              reduce using rule 70 (term10 -> term11 .)
    while           reduce using rule 70 (term10 -> term11 .)
    case            reduce using rule 70 (term10 -> term11 .)
    for             reduce using rule 70 (term10 -> term11 .)
    return          reduce using rule 70 (term10 -> term11 .)
    IDENTIFIER      reduce using rule 70 (term10 -> term11 .)
    nil             reduce using rule 70 (term10 -> term11 .)
    self            reduce using rule 70 (term10 -> term11 .)
    GLOBAL          reduce using rule 70 (term10 -> term11 .)
    AT_THE_RATE     reduce using rule 70 (term10 -> term11 .)
    OPEN_BRACKET    reduce using rule 70 (term10 -> term11 .)
    Array           reduce using rule 70 (term10 -> term11 .)
    NUMBER          reduce using rule 70 (term10 -> term11 .)
    FLOAT           reduce using rule 70 (term10 -> term11 .)
    STRING          reduce using rule 70 (term10 -> term11 .)
    true            reduce using rule 70 (term10 -> term11 .)
    false           reduce using rule 70 (term10 -> term11 .)
    $end            reduce using rule 70 (term10 -> term11 .)
    CLOSE_BRACKET   reduce using rule 70 (term10 -> term11 .)
    then            reduce using rule 70 (term10 -> term11 .)
    do              reduce using rule 70 (term10 -> term11 .)
    COMMA           reduce using rule 70 (term10 -> term11 .)


state 52

    (72) term11 -> term12 .

    MULTIPLY        reduce using rule 72 (term11 -> term12 .)
    DIVIDE          reduce using rule 72 (term11 -> term12 .)
    MODULO          reduce using rule 72 (term11 -> term12 .)
    PLUS            reduce using rule 72 (term11 -> term12 .)
    MINUS           reduce using rule 72 (term11 -> term12 .)
    LEFT_SHIFT      reduce using rule 72 (term11 -> term12 .)
    RIGHT_SHIFT     reduce using rule 72 (term11 -> term12 .)
    BIT_AND         reduce using rule 72 (term11 -> term12 .)
    BIT_XOR         reduce using rule 72 (term11 -> term12 .)
    DOUBLE_EQUALS   reduce using rule 72 (term11 -> term12 .)
    TRIPLE_EQUALS   reduce using rule 72 (term11 -> term12 .)
    NOT_EQUALS      reduce using rule 72 (term11 -> term12 .)
    EQUAL_TILDE     reduce using rule 72 (term11 -> term12 .)
    BANG_TILDE      reduce using rule 72 (term11 -> term12 .)
    COMPARISON      reduce using rule 72 (term11 -> term12 .)
    LESS            reduce using rule 72 (term11 -> term12 .)
    LESS_EQUALS     reduce using rule 72 (term11 -> term12 .)
    GREATER         reduce using rule 72 (term11 -> term12 .)
    GREATER_EQUALS  reduce using rule 72 (term11 -> term12 .)
    INCL_RANGE      reduce using rule 72 (term11 -> term12 .)
    EXCL_RANGE      reduce using rule 72 (term11 -> term12 .)
    LOGICAL_OR      reduce using rule 72 (term11 -> term12 .)
    BIT_OR          reduce using rule 72 (term11 -> term12 .)
    SEMI_COLON      reduce using rule 72 (term11 -> term12 .)
    NEWLINE         reduce using rule 72 (term11 -> term12 .)
    puts            reduce using rule 72 (term11 -> term12 .)
    print           reduce using rule 72 (term11 -> term12 .)
    break           reduce using rule 72 (term11 -> term12 .)
    def             reduce using rule 72 (term11 -> term12 .)
    if              reduce using rule 72 (term11 -> term12 .)
    while           reduce using rule 72 (term11 -> term12 .)
    case            reduce using rule 72 (term11 -> term12 .)
    for             reduce using rule 72 (term11 -> term12 .)
    return          reduce using rule 72 (term11 -> term12 .)
    IDENTIFIER      reduce using rule 72 (term11 -> term12 .)
    nil             reduce using rule 72 (term11 -> term12 .)
    self            reduce using rule 72 (term11 -> term12 .)
    GLOBAL          reduce using rule 72 (term11 -> term12 .)
    AT_THE_RATE     reduce using rule 72 (term11 -> term12 .)
    OPEN_BRACKET    reduce using rule 72 (term11 -> term12 .)
    Array           reduce using rule 72 (term11 -> term12 .)
    NUMBER          reduce using rule 72 (term11 -> term12 .)
    FLOAT           reduce using rule 72 (term11 -> term12 .)
    STRING          reduce using rule 72 (term11 -> term12 .)
    true            reduce using rule 72 (term11 -> term12 .)
    false           reduce using rule 72 (term11 -> term12 .)
    $end            reduce using rule 72 (term11 -> term12 .)
    CLOSE_BRACKET   reduce using rule 72 (term11 -> term12 .)
    then            reduce using rule 72 (term11 -> term12 .)
    do              reduce using rule 72 (term11 -> term12 .)
    COMMA           reduce using rule 72 (term11 -> term12 .)


state 53

    (74) term12 -> term13 .

    MULTIPLY        reduce using rule 74 (term12 -> term13 .)
    DIVIDE          reduce using rule 74 (term12 -> term13 .)
    MODULO          reduce using rule 74 (term12 -> term13 .)
    PLUS            reduce using rule 74 (term12 -> term13 .)
    MINUS           reduce using rule 74 (term12 -> term13 .)
    LEFT_SHIFT      reduce using rule 74 (term12 -> term13 .)
    RIGHT_SHIFT     reduce using rule 74 (term12 -> term13 .)
    BIT_AND         reduce using rule 74 (term12 -> term13 .)
    BIT_XOR         reduce using rule 74 (term12 -> term13 .)
    DOUBLE_EQUALS   reduce using rule 74 (term12 -> term13 .)
    TRIPLE_EQUALS   reduce using rule 74 (term12 -> term13 .)
    NOT_EQUALS      reduce using rule 74 (term12 -> term13 .)
    EQUAL_TILDE     reduce using rule 74 (term12 -> term13 .)
    BANG_TILDE      reduce using rule 74 (term12 -> term13 .)
    COMPARISON      reduce using rule 74 (term12 -> term13 .)
    LESS            reduce using rule 74 (term12 -> term13 .)
    LESS_EQUALS     reduce using rule 74 (term12 -> term13 .)
    GREATER         reduce using rule 74 (term12 -> term13 .)
    GREATER_EQUALS  reduce using rule 74 (term12 -> term13 .)
    INCL_RANGE      reduce using rule 74 (term12 -> term13 .)
    EXCL_RANGE      reduce using rule 74 (term12 -> term13 .)
    LOGICAL_OR      reduce using rule 74 (term12 -> term13 .)
    BIT_OR          reduce using rule 74 (term12 -> term13 .)
    SEMI_COLON      reduce using rule 74 (term12 -> term13 .)
    NEWLINE         reduce using rule 74 (term12 -> term13 .)
    puts            reduce using rule 74 (term12 -> term13 .)
    print           reduce using rule 74 (term12 -> term13 .)
    break           reduce using rule 74 (term12 -> term13 .)
    def             reduce using rule 74 (term12 -> term13 .)
    if              reduce using rule 74 (term12 -> term13 .)
    while           reduce using rule 74 (term12 -> term13 .)
    case            reduce using rule 74 (term12 -> term13 .)
    for             reduce using rule 74 (term12 -> term13 .)
    return          reduce using rule 74 (term12 -> term13 .)
    IDENTIFIER      reduce using rule 74 (term12 -> term13 .)
    nil             reduce using rule 74 (term12 -> term13 .)
    self            reduce using rule 74 (term12 -> term13 .)
    GLOBAL          reduce using rule 74 (term12 -> term13 .)
    AT_THE_RATE     reduce using rule 74 (term12 -> term13 .)
    OPEN_BRACKET    reduce using rule 74 (term12 -> term13 .)
    Array           reduce using rule 74 (term12 -> term13 .)
    NUMBER          reduce using rule 74 (term12 -> term13 .)
    FLOAT           reduce using rule 74 (term12 -> term13 .)
    STRING          reduce using rule 74 (term12 -> term13 .)
    true            reduce using rule 74 (term12 -> term13 .)
    false           reduce using rule 74 (term12 -> term13 .)
    $end            reduce using rule 74 (term12 -> term13 .)
    CLOSE_BRACKET   reduce using rule 74 (term12 -> term13 .)
    then            reduce using rule 74 (term12 -> term13 .)
    do              reduce using rule 74 (term12 -> term13 .)
    COMMA           reduce using rule 74 (term12 -> term13 .)


state 54

    (78) primary -> arrayd .

    POWER           reduce using rule 78 (primary -> arrayd .)
    MULTIPLY        reduce using rule 78 (primary -> arrayd .)
    DIVIDE          reduce using rule 78 (primary -> arrayd .)
    MODULO          reduce using rule 78 (primary -> arrayd .)
    PLUS            reduce using rule 78 (primary -> arrayd .)
    MINUS           reduce using rule 78 (primary -> arrayd .)
    LEFT_SHIFT      reduce using rule 78 (primary -> arrayd .)
    RIGHT_SHIFT     reduce using rule 78 (primary -> arrayd .)
    BIT_AND         reduce using rule 78 (primary -> arrayd .)
    BIT_XOR         reduce using rule 78 (primary -> arrayd .)
    DOUBLE_EQUALS   reduce using rule 78 (primary -> arrayd .)
    TRIPLE_EQUALS   reduce using rule 78 (primary -> arrayd .)
    NOT_EQUALS      reduce using rule 78 (primary -> arrayd .)
    EQUAL_TILDE     reduce using rule 78 (primary -> arrayd .)
    BANG_TILDE      reduce using rule 78 (primary -> arrayd .)
    COMPARISON      reduce using rule 78 (primary -> arrayd .)
    LESS            reduce using rule 78 (primary -> arrayd .)
    LESS_EQUALS     reduce using rule 78 (primary -> arrayd .)
    GREATER         reduce using rule 78 (primary -> arrayd .)
    GREATER_EQUALS  reduce using rule 78 (primary -> arrayd .)
    INCL_RANGE      reduce using rule 78 (primary -> arrayd .)
    EXCL_RANGE      reduce using rule 78 (primary -> arrayd .)
    LOGICAL_OR      reduce using rule 78 (primary -> arrayd .)
    BIT_OR          reduce using rule 78 (primary -> arrayd .)
    SEMI_COLON      reduce using rule 78 (primary -> arrayd .)
    NEWLINE         reduce using rule 78 (primary -> arrayd .)
    puts            reduce using rule 78 (primary -> arrayd .)
    print           reduce using rule 78 (primary -> arrayd .)
    break           reduce using rule 78 (primary -> arrayd .)
    def             reduce using rule 78 (primary -> arrayd .)
    if              reduce using rule 78 (primary -> arrayd .)
    while           reduce using rule 78 (primary -> arrayd .)
    case            reduce using rule 78 (primary -> arrayd .)
    for             reduce using rule 78 (primary -> arrayd .)
    return          reduce using rule 78 (primary -> arrayd .)
    IDENTIFIER      reduce using rule 78 (primary -> arrayd .)
    nil             reduce using rule 78 (primary -> arrayd .)
    self            reduce using rule 78 (primary -> arrayd .)
    GLOBAL          reduce using rule 78 (primary -> arrayd .)
    AT_THE_RATE     reduce using rule 78 (primary -> arrayd .)
    OPEN_BRACKET    reduce using rule 78 (primary -> arrayd .)
    Array           reduce using rule 78 (primary -> arrayd .)
    NUMBER          reduce using rule 78 (primary -> arrayd .)
    FLOAT           reduce using rule 78 (primary -> arrayd .)
    STRING          reduce using rule 78 (primary -> arrayd .)
    true            reduce using rule 78 (primary -> arrayd .)
    false           reduce using rule 78 (primary -> arrayd .)
    $end            reduce using rule 78 (primary -> arrayd .)
    CLOSE_BRACKET   reduce using rule 78 (primary -> arrayd .)
    then            reduce using rule 78 (primary -> arrayd .)
    do              reduce using rule 78 (primary -> arrayd .)
    COMMA           reduce using rule 78 (primary -> arrayd .)
    CLOSE_SQUARE    reduce using rule 78 (primary -> arrayd .)


state 55

    (79) primary -> arraya .

    POWER           reduce using rule 79 (primary -> arraya .)
    MULTIPLY        reduce using rule 79 (primary -> arraya .)
    DIVIDE          reduce using rule 79 (primary -> arraya .)
    MODULO          reduce using rule 79 (primary -> arraya .)
    PLUS            reduce using rule 79 (primary -> arraya .)
    MINUS           reduce using rule 79 (primary -> arraya .)
    LEFT_SHIFT      reduce using rule 79 (primary -> arraya .)
    RIGHT_SHIFT     reduce using rule 79 (primary -> arraya .)
    BIT_AND         reduce using rule 79 (primary -> arraya .)
    BIT_XOR         reduce using rule 79 (primary -> arraya .)
    DOUBLE_EQUALS   reduce using rule 79 (primary -> arraya .)
    TRIPLE_EQUALS   reduce using rule 79 (primary -> arraya .)
    NOT_EQUALS      reduce using rule 79 (primary -> arraya .)
    EQUAL_TILDE     reduce using rule 79 (primary -> arraya .)
    BANG_TILDE      reduce using rule 79 (primary -> arraya .)
    COMPARISON      reduce using rule 79 (primary -> arraya .)
    LESS            reduce using rule 79 (primary -> arraya .)
    LESS_EQUALS     reduce using rule 79 (primary -> arraya .)
    GREATER         reduce using rule 79 (primary -> arraya .)
    GREATER_EQUALS  reduce using rule 79 (primary -> arraya .)
    INCL_RANGE      reduce using rule 79 (primary -> arraya .)
    EXCL_RANGE      reduce using rule 79 (primary -> arraya .)
    LOGICAL_OR      reduce using rule 79 (primary -> arraya .)
    BIT_OR          reduce using rule 79 (primary -> arraya .)
    SEMI_COLON      reduce using rule 79 (primary -> arraya .)
    NEWLINE         reduce using rule 79 (primary -> arraya .)
    puts            reduce using rule 79 (primary -> arraya .)
    print           reduce using rule 79 (primary -> arraya .)
    break           reduce using rule 79 (primary -> arraya .)
    def             reduce using rule 79 (primary -> arraya .)
    if              reduce using rule 79 (primary -> arraya .)
    while           reduce using rule 79 (primary -> arraya .)
    case            reduce using rule 79 (primary -> arraya .)
    for             reduce using rule 79 (primary -> arraya .)
    return          reduce using rule 79 (primary -> arraya .)
    IDENTIFIER      reduce using rule 79 (primary -> arraya .)
    nil             reduce using rule 79 (primary -> arraya .)
    self            reduce using rule 79 (primary -> arraya .)
    GLOBAL          reduce using rule 79 (primary -> arraya .)
    AT_THE_RATE     reduce using rule 79 (primary -> arraya .)
    OPEN_BRACKET    reduce using rule 79 (primary -> arraya .)
    Array           reduce using rule 79 (primary -> arraya .)
    NUMBER          reduce using rule 79 (primary -> arraya .)
    FLOAT           reduce using rule 79 (primary -> arraya .)
    STRING          reduce using rule 79 (primary -> arraya .)
    true            reduce using rule 79 (primary -> arraya .)
    false           reduce using rule 79 (primary -> arraya .)
    $end            reduce using rule 79 (primary -> arraya .)
    CLOSE_BRACKET   reduce using rule 79 (primary -> arraya .)
    then            reduce using rule 79 (primary -> arraya .)
    do              reduce using rule 79 (primary -> arraya .)
    COMMA           reduce using rule 79 (primary -> arraya .)
    CLOSE_SQUARE    reduce using rule 79 (primary -> arraya .)


state 56

    (80) primary -> literal .

    POWER           reduce using rule 80 (primary -> literal .)
    MULTIPLY        reduce using rule 80 (primary -> literal .)
    DIVIDE          reduce using rule 80 (primary -> literal .)
    MODULO          reduce using rule 80 (primary -> literal .)
    PLUS            reduce using rule 80 (primary -> literal .)
    MINUS           reduce using rule 80 (primary -> literal .)
    LEFT_SHIFT      reduce using rule 80 (primary -> literal .)
    RIGHT_SHIFT     reduce using rule 80 (primary -> literal .)
    BIT_AND         reduce using rule 80 (primary -> literal .)
    BIT_XOR         reduce using rule 80 (primary -> literal .)
    DOUBLE_EQUALS   reduce using rule 80 (primary -> literal .)
    TRIPLE_EQUALS   reduce using rule 80 (primary -> literal .)
    NOT_EQUALS      reduce using rule 80 (primary -> literal .)
    EQUAL_TILDE     reduce using rule 80 (primary -> literal .)
    BANG_TILDE      reduce using rule 80 (primary -> literal .)
    COMPARISON      reduce using rule 80 (primary -> literal .)
    LESS            reduce using rule 80 (primary -> literal .)
    LESS_EQUALS     reduce using rule 80 (primary -> literal .)
    GREATER         reduce using rule 80 (primary -> literal .)
    GREATER_EQUALS  reduce using rule 80 (primary -> literal .)
    INCL_RANGE      reduce using rule 80 (primary -> literal .)
    EXCL_RANGE      reduce using rule 80 (primary -> literal .)
    LOGICAL_OR      reduce using rule 80 (primary -> literal .)
    BIT_OR          reduce using rule 80 (primary -> literal .)
    SEMI_COLON      reduce using rule 80 (primary -> literal .)
    NEWLINE         reduce using rule 80 (primary -> literal .)
    puts            reduce using rule 80 (primary -> literal .)
    print           reduce using rule 80 (primary -> literal .)
    break           reduce using rule 80 (primary -> literal .)
    def             reduce using rule 80 (primary -> literal .)
    if              reduce using rule 80 (primary -> literal .)
    while           reduce using rule 80 (primary -> literal .)
    case            reduce using rule 80 (primary -> literal .)
    for             reduce using rule 80 (primary -> literal .)
    return          reduce using rule 80 (primary -> literal .)
    IDENTIFIER      reduce using rule 80 (primary -> literal .)
    nil             reduce using rule 80 (primary -> literal .)
    self            reduce using rule 80 (primary -> literal .)
    GLOBAL          reduce using rule 80 (primary -> literal .)
    AT_THE_RATE     reduce using rule 80 (primary -> literal .)
    OPEN_BRACKET    reduce using rule 80 (primary -> literal .)
    Array           reduce using rule 80 (primary -> literal .)
    NUMBER          reduce using rule 80 (primary -> literal .)
    FLOAT           reduce using rule 80 (primary -> literal .)
    STRING          reduce using rule 80 (primary -> literal .)
    true            reduce using rule 80 (primary -> literal .)
    false           reduce using rule 80 (primary -> literal .)
    $end            reduce using rule 80 (primary -> literal .)
    CLOSE_BRACKET   reduce using rule 80 (primary -> literal .)
    then            reduce using rule 80 (primary -> literal .)
    do              reduce using rule 80 (primary -> literal .)
    COMMA           reduce using rule 80 (primary -> literal .)
    CLOSE_SQUARE    reduce using rule 80 (primary -> literal .)


state 57

    (82) arrayd -> Array . OPEN_BRACKET array_size CLOSE_BRACKET

    OPEN_BRACKET    shift and go to state 123


state 58

    (94) literal -> NUMBER .

    POWER           reduce using rule 94 (literal -> NUMBER .)
    MULTIPLY        reduce using rule 94 (literal -> NUMBER .)
    DIVIDE          reduce using rule 94 (literal -> NUMBER .)
    MODULO          reduce using rule 94 (literal -> NUMBER .)
    PLUS            reduce using rule 94 (literal -> NUMBER .)
    MINUS           reduce using rule 94 (literal -> NUMBER .)
    LEFT_SHIFT      reduce using rule 94 (literal -> NUMBER .)
    RIGHT_SHIFT     reduce using rule 94 (literal -> NUMBER .)
    BIT_AND         reduce using rule 94 (literal -> NUMBER .)
    BIT_XOR         reduce using rule 94 (literal -> NUMBER .)
    DOUBLE_EQUALS   reduce using rule 94 (literal -> NUMBER .)
    TRIPLE_EQUALS   reduce using rule 94 (literal -> NUMBER .)
    NOT_EQUALS      reduce using rule 94 (literal -> NUMBER .)
    EQUAL_TILDE     reduce using rule 94 (literal -> NUMBER .)
    BANG_TILDE      reduce using rule 94 (literal -> NUMBER .)
    COMPARISON      reduce using rule 94 (literal -> NUMBER .)
    LESS            reduce using rule 94 (literal -> NUMBER .)
    LESS_EQUALS     reduce using rule 94 (literal -> NUMBER .)
    GREATER         reduce using rule 94 (literal -> NUMBER .)
    GREATER_EQUALS  reduce using rule 94 (literal -> NUMBER .)
    INCL_RANGE      reduce using rule 94 (literal -> NUMBER .)
    EXCL_RANGE      reduce using rule 94 (literal -> NUMBER .)
    LOGICAL_OR      reduce using rule 94 (literal -> NUMBER .)
    BIT_OR          reduce using rule 94 (literal -> NUMBER .)
    SEMI_COLON      reduce using rule 94 (literal -> NUMBER .)
    NEWLINE         reduce using rule 94 (literal -> NUMBER .)
    puts            reduce using rule 94 (literal -> NUMBER .)
    print           reduce using rule 94 (literal -> NUMBER .)
    break           reduce using rule 94 (literal -> NUMBER .)
    def             reduce using rule 94 (literal -> NUMBER .)
    if              reduce using rule 94 (literal -> NUMBER .)
    while           reduce using rule 94 (literal -> NUMBER .)
    case            reduce using rule 94 (literal -> NUMBER .)
    for             reduce using rule 94 (literal -> NUMBER .)
    return          reduce using rule 94 (literal -> NUMBER .)
    IDENTIFIER      reduce using rule 94 (literal -> NUMBER .)
    nil             reduce using rule 94 (literal -> NUMBER .)
    self            reduce using rule 94 (literal -> NUMBER .)
    GLOBAL          reduce using rule 94 (literal -> NUMBER .)
    AT_THE_RATE     reduce using rule 94 (literal -> NUMBER .)
    OPEN_BRACKET    reduce using rule 94 (literal -> NUMBER .)
    Array           reduce using rule 94 (literal -> NUMBER .)
    NUMBER          reduce using rule 94 (literal -> NUMBER .)
    FLOAT           reduce using rule 94 (literal -> NUMBER .)
    STRING          reduce using rule 94 (literal -> NUMBER .)
    true            reduce using rule 94 (literal -> NUMBER .)
    false           reduce using rule 94 (literal -> NUMBER .)
    $end            reduce using rule 94 (literal -> NUMBER .)
    CLOSE_BRACKET   reduce using rule 94 (literal -> NUMBER .)
    then            reduce using rule 94 (literal -> NUMBER .)
    do              reduce using rule 94 (literal -> NUMBER .)
    COMMA           reduce using rule 94 (literal -> NUMBER .)
    CLOSE_SQUARE    reduce using rule 94 (literal -> NUMBER .)


state 59

    (95) literal -> FLOAT .

    POWER           reduce using rule 95 (literal -> FLOAT .)
    MULTIPLY        reduce using rule 95 (literal -> FLOAT .)
    DIVIDE          reduce using rule 95 (literal -> FLOAT .)
    MODULO          reduce using rule 95 (literal -> FLOAT .)
    PLUS            reduce using rule 95 (literal -> FLOAT .)
    MINUS           reduce using rule 95 (literal -> FLOAT .)
    LEFT_SHIFT      reduce using rule 95 (literal -> FLOAT .)
    RIGHT_SHIFT     reduce using rule 95 (literal -> FLOAT .)
    BIT_AND         reduce using rule 95 (literal -> FLOAT .)
    BIT_XOR         reduce using rule 95 (literal -> FLOAT .)
    DOUBLE_EQUALS   reduce using rule 95 (literal -> FLOAT .)
    TRIPLE_EQUALS   reduce using rule 95 (literal -> FLOAT .)
    NOT_EQUALS      reduce using rule 95 (literal -> FLOAT .)
    EQUAL_TILDE     reduce using rule 95 (literal -> FLOAT .)
    BANG_TILDE      reduce using rule 95 (literal -> FLOAT .)
    COMPARISON      reduce using rule 95 (literal -> FLOAT .)
    LESS            reduce using rule 95 (literal -> FLOAT .)
    LESS_EQUALS     reduce using rule 95 (literal -> FLOAT .)
    GREATER         reduce using rule 95 (literal -> FLOAT .)
    GREATER_EQUALS  reduce using rule 95 (literal -> FLOAT .)
    INCL_RANGE      reduce using rule 95 (literal -> FLOAT .)
    EXCL_RANGE      reduce using rule 95 (literal -> FLOAT .)
    LOGICAL_OR      reduce using rule 95 (literal -> FLOAT .)
    BIT_OR          reduce using rule 95 (literal -> FLOAT .)
    SEMI_COLON      reduce using rule 95 (literal -> FLOAT .)
    NEWLINE         reduce using rule 95 (literal -> FLOAT .)
    puts            reduce using rule 95 (literal -> FLOAT .)
    print           reduce using rule 95 (literal -> FLOAT .)
    break           reduce using rule 95 (literal -> FLOAT .)
    def             reduce using rule 95 (literal -> FLOAT .)
    if              reduce using rule 95 (literal -> FLOAT .)
    while           reduce using rule 95 (literal -> FLOAT .)
    case            reduce using rule 95 (literal -> FLOAT .)
    for             reduce using rule 95 (literal -> FLOAT .)
    return          reduce using rule 95 (literal -> FLOAT .)
    IDENTIFIER      reduce using rule 95 (literal -> FLOAT .)
    nil             reduce using rule 95 (literal -> FLOAT .)
    self            reduce using rule 95 (literal -> FLOAT .)
    GLOBAL          reduce using rule 95 (literal -> FLOAT .)
    AT_THE_RATE     reduce using rule 95 (literal -> FLOAT .)
    OPEN_BRACKET    reduce using rule 95 (literal -> FLOAT .)
    Array           reduce using rule 95 (literal -> FLOAT .)
    NUMBER          reduce using rule 95 (literal -> FLOAT .)
    FLOAT           reduce using rule 95 (literal -> FLOAT .)
    STRING          reduce using rule 95 (literal -> FLOAT .)
    true            reduce using rule 95 (literal -> FLOAT .)
    false           reduce using rule 95 (literal -> FLOAT .)
    $end            reduce using rule 95 (literal -> FLOAT .)
    CLOSE_BRACKET   reduce using rule 95 (literal -> FLOAT .)
    then            reduce using rule 95 (literal -> FLOAT .)
    do              reduce using rule 95 (literal -> FLOAT .)
    COMMA           reduce using rule 95 (literal -> FLOAT .)
    CLOSE_SQUARE    reduce using rule 95 (literal -> FLOAT .)


state 60

    (97) literal -> true .

    POWER           reduce using rule 97 (literal -> true .)
    MULTIPLY        reduce using rule 97 (literal -> true .)
    DIVIDE          reduce using rule 97 (literal -> true .)
    MODULO          reduce using rule 97 (literal -> true .)
    PLUS            reduce using rule 97 (literal -> true .)
    MINUS           reduce using rule 97 (literal -> true .)
    LEFT_SHIFT      reduce using rule 97 (literal -> true .)
    RIGHT_SHIFT     reduce using rule 97 (literal -> true .)
    BIT_AND         reduce using rule 97 (literal -> true .)
    BIT_XOR         reduce using rule 97 (literal -> true .)
    DOUBLE_EQUALS   reduce using rule 97 (literal -> true .)
    TRIPLE_EQUALS   reduce using rule 97 (literal -> true .)
    NOT_EQUALS      reduce using rule 97 (literal -> true .)
    EQUAL_TILDE     reduce using rule 97 (literal -> true .)
    BANG_TILDE      reduce using rule 97 (literal -> true .)
    COMPARISON      reduce using rule 97 (literal -> true .)
    LESS            reduce using rule 97 (literal -> true .)
    LESS_EQUALS     reduce using rule 97 (literal -> true .)
    GREATER         reduce using rule 97 (literal -> true .)
    GREATER_EQUALS  reduce using rule 97 (literal -> true .)
    INCL_RANGE      reduce using rule 97 (literal -> true .)
    EXCL_RANGE      reduce using rule 97 (literal -> true .)
    LOGICAL_OR      reduce using rule 97 (literal -> true .)
    BIT_OR          reduce using rule 97 (literal -> true .)
    SEMI_COLON      reduce using rule 97 (literal -> true .)
    NEWLINE         reduce using rule 97 (literal -> true .)
    puts            reduce using rule 97 (literal -> true .)
    print           reduce using rule 97 (literal -> true .)
    break           reduce using rule 97 (literal -> true .)
    def             reduce using rule 97 (literal -> true .)
    if              reduce using rule 97 (literal -> true .)
    while           reduce using rule 97 (literal -> true .)
    case            reduce using rule 97 (literal -> true .)
    for             reduce using rule 97 (literal -> true .)
    return          reduce using rule 97 (literal -> true .)
    IDENTIFIER      reduce using rule 97 (literal -> true .)
    nil             reduce using rule 97 (literal -> true .)
    self            reduce using rule 97 (literal -> true .)
    GLOBAL          reduce using rule 97 (literal -> true .)
    AT_THE_RATE     reduce using rule 97 (literal -> true .)
    OPEN_BRACKET    reduce using rule 97 (literal -> true .)
    Array           reduce using rule 97 (literal -> true .)
    NUMBER          reduce using rule 97 (literal -> true .)
    FLOAT           reduce using rule 97 (literal -> true .)
    STRING          reduce using rule 97 (literal -> true .)
    true            reduce using rule 97 (literal -> true .)
    false           reduce using rule 97 (literal -> true .)
    $end            reduce using rule 97 (literal -> true .)
    CLOSE_BRACKET   reduce using rule 97 (literal -> true .)
    then            reduce using rule 97 (literal -> true .)
    do              reduce using rule 97 (literal -> true .)
    COMMA           reduce using rule 97 (literal -> true .)
    CLOSE_SQUARE    reduce using rule 97 (literal -> true .)


state 61

    (98) literal -> false .

    POWER           reduce using rule 98 (literal -> false .)
    MULTIPLY        reduce using rule 98 (literal -> false .)
    DIVIDE          reduce using rule 98 (literal -> false .)
    MODULO          reduce using rule 98 (literal -> false .)
    PLUS            reduce using rule 98 (literal -> false .)
    MINUS           reduce using rule 98 (literal -> false .)
    LEFT_SHIFT      reduce using rule 98 (literal -> false .)
    RIGHT_SHIFT     reduce using rule 98 (literal -> false .)
    BIT_AND         reduce using rule 98 (literal -> false .)
    BIT_XOR         reduce using rule 98 (literal -> false .)
    DOUBLE_EQUALS   reduce using rule 98 (literal -> false .)
    TRIPLE_EQUALS   reduce using rule 98 (literal -> false .)
    NOT_EQUALS      reduce using rule 98 (literal -> false .)
    EQUAL_TILDE     reduce using rule 98 (literal -> false .)
    BANG_TILDE      reduce using rule 98 (literal -> false .)
    COMPARISON      reduce using rule 98 (literal -> false .)
    LESS            reduce using rule 98 (literal -> false .)
    LESS_EQUALS     reduce using rule 98 (literal -> false .)
    GREATER         reduce using rule 98 (literal -> false .)
    GREATER_EQUALS  reduce using rule 98 (literal -> false .)
    INCL_RANGE      reduce using rule 98 (literal -> false .)
    EXCL_RANGE      reduce using rule 98 (literal -> false .)
    LOGICAL_OR      reduce using rule 98 (literal -> false .)
    BIT_OR          reduce using rule 98 (literal -> false .)
    SEMI_COLON      reduce using rule 98 (literal -> false .)
    NEWLINE         reduce using rule 98 (literal -> false .)
    puts            reduce using rule 98 (literal -> false .)
    print           reduce using rule 98 (literal -> false .)
    break           reduce using rule 98 (literal -> false .)
    def             reduce using rule 98 (literal -> false .)
    if              reduce using rule 98 (literal -> false .)
    while           reduce using rule 98 (literal -> false .)
    case            reduce using rule 98 (literal -> false .)
    for             reduce using rule 98 (literal -> false .)
    return          reduce using rule 98 (literal -> false .)
    IDENTIFIER      reduce using rule 98 (literal -> false .)
    nil             reduce using rule 98 (literal -> false .)
    self            reduce using rule 98 (literal -> false .)
    GLOBAL          reduce using rule 98 (literal -> false .)
    AT_THE_RATE     reduce using rule 98 (literal -> false .)
    OPEN_BRACKET    reduce using rule 98 (literal -> false .)
    Array           reduce using rule 98 (literal -> false .)
    NUMBER          reduce using rule 98 (literal -> false .)
    FLOAT           reduce using rule 98 (literal -> false .)
    STRING          reduce using rule 98 (literal -> false .)
    true            reduce using rule 98 (literal -> false .)
    false           reduce using rule 98 (literal -> false .)
    $end            reduce using rule 98 (literal -> false .)
    CLOSE_BRACKET   reduce using rule 98 (literal -> false .)
    then            reduce using rule 98 (literal -> false .)
    do              reduce using rule 98 (literal -> false .)
    COMMA           reduce using rule 98 (literal -> false .)
    CLOSE_SQUARE    reduce using rule 98 (literal -> false .)


state 62

    (2) multcompstmt -> newline stmt1 . multcompstmt
    (2) multcompstmt -> . newline stmt1 multcompstmt
    (3) multcompstmt -> . stmt1 multcompstmt
    (4) multcompstmt -> . newline
    (5) multcompstmt -> . empty
    (152) newline -> . SEMI_COLON
    (153) newline -> . NEWLINE
    (6) stmt1 -> . stmt
    (154) empty -> .
    (7) stmt -> . keydef argdecl newline multstmt keyend
    (8) stmt -> . puts OPEN_BRACKET STRING CLOSE_BRACKET
    (9) stmt -> . print OPEN_BRACKET primary CLOSE_BRACKET
    (10) stmt -> . break
    (11) stmt -> . expr
    (12) keydef -> . def IDENTIFIER
    (16) expr -> . if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
    (17) expr -> . if expr1 pthen M_1 multstmt M_1 multelsif end M_1
    (18) expr -> . if expr1 pthen M_1 multstmt end M_1
    (19) expr -> . while M_1 expr1 pdo M_1 multstmt end M_1
    (20) expr -> . case expr1 M_1 newline multcase end M_1
    (21) expr -> . for M_1 mlhs in expr1 pdo M_1 multstmt end M_1
    (22) expr -> . expr1
    (24) expr1 -> . return IDENTIFIER
    (25) expr1 -> . return
    (26) expr1 -> . expr2
    (27) expr2 -> . arg
    (28) expr2 -> . call
    (32) arg -> . arg BIT_OR term0
    (33) arg -> . term0
    (29) call -> . function
    (34) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (36) term0 -> . term1
    (30) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (31) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (100) mlhs -> . mlhsitem
    (37) term1 -> . mlhs EQUALS mrhs
    (38) term1 -> . mlhs opasgn mrhs
    (39) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arrayal
    (40) term2 -> . term3 INCL_RANGE term3
    (41) term2 -> . term3 EXCL_RANGE term3
    (42) term2 -> . term3
    (85) arrayal -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (43) term3 -> . term3 LOGICAL_OR term4
    (44) term3 -> . term4
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self
    (45) term4 -> . term5 DOUBLE_EQUALS term5
    (46) term4 -> . term5 TRIPLE_EQUALS term5
    (47) term4 -> . term5 NOT_EQUALS term5
    (48) term4 -> . term5 EQUAL_TILDE term5
    (49) term4 -> . term5 BANG_TILDE term5
    (50) term4 -> . term5 COMPARISON term5
    (51) term4 -> . term5
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false

    SEMI_COLON      shift and go to state 6
    NEWLINE         shift and go to state 7
    $end            reduce using rule 154 (empty -> .)
    puts            shift and go to state 10
    print           shift and go to state 13
    break           shift and go to state 15
    def             shift and go to state 17
    if              shift and go to state 19
    while           shift and go to state 21
    case            shift and go to state 22
    for             shift and go to state 23
    return          shift and go to state 25
    IDENTIFIER      shift and go to state 18
    nil             shift and go to state 39
    self            shift and go to state 40
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61

    newline                        shift and go to state 3
    stmt1                          shift and go to state 4
    multcompstmt                   shift and go to state 124
    empty                          shift and go to state 5
    stmt                           shift and go to state 8
    keydef                         shift and go to state 9
    primary                        shift and go to state 14
    expr                           shift and go to state 16
    expr1                          shift and go to state 20
    mlhs                           shift and go to state 24
    expr2                          shift and go to state 26
    arg                            shift and go to state 27
    call                           shift and go to state 28
    term0                          shift and go to state 29
    function                       shift and go to state 30
    term1                          shift and go to state 31
    mlhsitem                       shift and go to state 32
    term2                          shift and go to state 33
    arrayal                        shift and go to state 34
    term3                          shift and go to state 35
    variable                       shift and go to state 36
    term4                          shift and go to state 37
    varname                        shift and go to state 38
    term5                          shift and go to state 41
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56

state 63

    (3) multcompstmt -> stmt1 multcompstmt .

    $end            reduce using rule 3 (multcompstmt -> stmt1 multcompstmt .)


state 64

    (7) stmt -> keydef argdecl . newline multstmt keyend
    (152) newline -> . SEMI_COLON
    (153) newline -> . NEWLINE

    SEMI_COLON      shift and go to state 6
    NEWLINE         shift and go to state 7

    newline                        shift and go to state 125

state 65

    (122) argdecl -> OPEN_BRACKET . arglist CLOSE_BRACKET
    (123) arglist -> . IDENTIFIER multarglist
    (124) arglist -> . empty
    (154) empty -> .

    IDENTIFIER      shift and go to state 127
    CLOSE_BRACKET   reduce using rule 154 (empty -> .)

    arglist                        shift and go to state 126
    empty                          shift and go to state 128

state 66

    (8) stmt -> puts OPEN_BRACKET . STRING CLOSE_BRACKET

    STRING          shift and go to state 129


state 67

    (77) primary -> OPEN_BRACKET expr2 . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 130


state 68

    (9) stmt -> print OPEN_BRACKET . primary CLOSE_BRACKET
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    primary                        shift and go to state 131
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 69

    (75) term13 -> primary POWER . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    primary                        shift and go to state 14
    term13                         shift and go to state 132
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 70

    (12) keydef -> def IDENTIFIER .

    OPEN_BRACKET    reduce using rule 12 (keydef -> def IDENTIFIER .)


state 71

    (30) function -> IDENTIFIER OPEN_BRACKET . callargs CLOSE_BRACKET
    (31) function -> IDENTIFIER OPEN_BRACKET . CLOSE_BRACKET
    (114) callargs -> . callarglist
    (115) callarglist -> . primary callmultarglist
    (116) callarglist -> . empty
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (154) empty -> .
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

  ! shift/reduce conflict for CLOSE_BRACKET resolved as shift
    CLOSE_BRACKET   shift and go to state 134
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

  ! CLOSE_BRACKET   [ reduce using rule 154 (empty -> .) ]

    callargs                       shift and go to state 133
    callarglist                    shift and go to state 135
    primary                        shift and go to state 136
    empty                          shift and go to state 137
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 72

    (16) expr -> if expr1 . pthen M_1 multstmt else newline M_1 multstmt end M_1
    (17) expr -> if expr1 . pthen M_1 multstmt M_1 multelsif end M_1
    (18) expr -> if expr1 . pthen M_1 multstmt end M_1
    (130) pthen -> . newline
    (131) pthen -> . then
    (132) pthen -> . newline then
    (152) newline -> . SEMI_COLON
    (153) newline -> . NEWLINE

    then            shift and go to state 140
    SEMI_COLON      shift and go to state 6
    NEWLINE         shift and go to state 7

    pthen                          shift and go to state 138
    newline                        shift and go to state 139

state 73

    (19) expr -> while M_1 . expr1 pdo M_1 multstmt end M_1
    (24) expr1 -> . return IDENTIFIER
    (25) expr1 -> . return
    (26) expr1 -> . expr2
    (27) expr2 -> . arg
    (28) expr2 -> . call
    (32) arg -> . arg BIT_OR term0
    (33) arg -> . term0
    (29) call -> . function
    (34) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (36) term0 -> . term1
    (30) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (31) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (100) mlhs -> . mlhsitem
    (37) term1 -> . mlhs EQUALS mrhs
    (38) term1 -> . mlhs opasgn mrhs
    (39) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arrayal
    (40) term2 -> . term3 INCL_RANGE term3
    (41) term2 -> . term3 EXCL_RANGE term3
    (42) term2 -> . term3
    (85) arrayal -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (43) term3 -> . term3 LOGICAL_OR term4
    (44) term3 -> . term4
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self
    (45) term4 -> . term5 DOUBLE_EQUALS term5
    (46) term4 -> . term5 TRIPLE_EQUALS term5
    (47) term4 -> . term5 NOT_EQUALS term5
    (48) term4 -> . term5 EQUAL_TILDE term5
    (49) term4 -> . term5 BANG_TILDE term5
    (50) term4 -> . term5 COMPARISON term5
    (51) term4 -> . term5
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false

    return          shift and go to state 25
    IDENTIFIER      shift and go to state 18
    nil             shift and go to state 39
    self            shift and go to state 40
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61

    expr1                          shift and go to state 141
    expr2                          shift and go to state 26
    arg                            shift and go to state 27
    call                           shift and go to state 28
    term0                          shift and go to state 29
    function                       shift and go to state 30
    mlhs                           shift and go to state 24
    term1                          shift and go to state 31
    mlhsitem                       shift and go to state 32
    term2                          shift and go to state 33
    arrayal                        shift and go to state 34
    term3                          shift and go to state 35
    variable                       shift and go to state 36
    term4                          shift and go to state 37
    varname                        shift and go to state 38
    term5                          shift and go to state 41
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56

state 74

    (23) M_1 -> empty .

    return          reduce using rule 23 (M_1 -> empty .)
    IDENTIFIER      reduce using rule 23 (M_1 -> empty .)
    nil             reduce using rule 23 (M_1 -> empty .)
    self            reduce using rule 23 (M_1 -> empty .)
    GLOBAL          reduce using rule 23 (M_1 -> empty .)
    AT_THE_RATE     reduce using rule 23 (M_1 -> empty .)
    MINUS           reduce using rule 23 (M_1 -> empty .)
    PLUS            reduce using rule 23 (M_1 -> empty .)
    OPEN_BRACKET    reduce using rule 23 (M_1 -> empty .)
    Array           reduce using rule 23 (M_1 -> empty .)
    NUMBER          reduce using rule 23 (M_1 -> empty .)
    FLOAT           reduce using rule 23 (M_1 -> empty .)
    STRING          reduce using rule 23 (M_1 -> empty .)
    true            reduce using rule 23 (M_1 -> empty .)
    false           reduce using rule 23 (M_1 -> empty .)
    SEMI_COLON      reduce using rule 23 (M_1 -> empty .)
    NEWLINE         reduce using rule 23 (M_1 -> empty .)
    puts            reduce using rule 23 (M_1 -> empty .)
    print           reduce using rule 23 (M_1 -> empty .)
    break           reduce using rule 23 (M_1 -> empty .)
    def             reduce using rule 23 (M_1 -> empty .)
    if              reduce using rule 23 (M_1 -> empty .)
    while           reduce using rule 23 (M_1 -> empty .)
    case            reduce using rule 23 (M_1 -> empty .)
    for             reduce using rule 23 (M_1 -> empty .)
    else            reduce using rule 23 (M_1 -> empty .)
    end             reduce using rule 23 (M_1 -> empty .)
    elsif           reduce using rule 23 (M_1 -> empty .)
    $end            reduce using rule 23 (M_1 -> empty .)
    then            reduce using rule 23 (M_1 -> empty .)
    when            reduce using rule 23 (M_1 -> empty .)


state 75

    (20) expr -> case expr1 . M_1 newline multcase end M_1
    (23) M_1 -> . empty
    (154) empty -> .

    SEMI_COLON      reduce using rule 154 (empty -> .)
    NEWLINE         reduce using rule 154 (empty -> .)

    M_1                            shift and go to state 142
    empty                          shift and go to state 74

state 76

    (21) expr -> for M_1 . mlhs in expr1 pdo M_1 multstmt end M_1
    (100) mlhs -> . mlhsitem
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arrayal
    (85) arrayal -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER

    IDENTIFIER      shift and go to state 144
    nil             shift and go to state 39
    self            shift and go to state 40
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43

    mlhs                           shift and go to state 143
    mlhsitem                       shift and go to state 32
    arrayal                        shift and go to state 34
    variable                       shift and go to state 145
    varname                        shift and go to state 146

state 77

    (34) term0 -> mlhs EQUALS . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) term0 -> mlhs EQUALS . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (37) term1 -> mlhs EQUALS . mrhs
    (111) mrhs -> . term2
    (112) mrhs -> . args COMMA MULTIPLY arg
    (113) mrhs -> . MULTIPLY arg
    (40) term2 -> . term3 INCL_RANGE term3
    (41) term2 -> . term3 EXCL_RANGE term3
    (42) term2 -> . term3
    (119) args -> . arg multargs
    (43) term3 -> . term3 LOGICAL_OR term4
    (44) term3 -> . term4
    (32) arg -> . arg BIT_OR term0
    (33) arg -> . term0
    (45) term4 -> . term5 DOUBLE_EQUALS term5
    (46) term4 -> . term5 TRIPLE_EQUALS term5
    (47) term4 -> . term5 NOT_EQUALS term5
    (48) term4 -> . term5 EQUAL_TILDE term5
    (49) term4 -> . term5 BANG_TILDE term5
    (50) term4 -> . term5 COMPARISON term5
    (51) term4 -> . term5
    (34) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (36) term0 -> . term1
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (100) mlhs -> . mlhsitem
    (37) term1 -> . mlhs EQUALS mrhs
    (38) term1 -> . mlhs opasgn mrhs
    (39) term1 -> . term2
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arrayal
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (85) arrayal -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false

    IDENTIFIER      shift and go to state 147
    MULTIPLY        shift and go to state 151
    nil             shift and go to state 39
    self            shift and go to state 40
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61

    mlhs                           shift and go to state 24
    mrhs                           shift and go to state 148
    term2                          shift and go to state 149
    args                           shift and go to state 150
    arg                            shift and go to state 152
    term3                          shift and go to state 35
    term4                          shift and go to state 37
    term0                          shift and go to state 29
    term5                          shift and go to state 41
    term1                          shift and go to state 31
    term6                          shift and go to state 44
    mlhsitem                       shift and go to state 32
    term7                          shift and go to state 45
    arrayal                        shift and go to state 34
    term8                          shift and go to state 46
    variable                       shift and go to state 36
    term9                          shift and go to state 47
    varname                        shift and go to state 38
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56

state 78

    (38) term1 -> mlhs opasgn . mrhs
    (111) mrhs -> . term2
    (112) mrhs -> . args COMMA MULTIPLY arg
    (113) mrhs -> . MULTIPLY arg
    (40) term2 -> . term3 INCL_RANGE term3
    (41) term2 -> . term3 EXCL_RANGE term3
    (42) term2 -> . term3
    (119) args -> . arg multargs
    (43) term3 -> . term3 LOGICAL_OR term4
    (44) term3 -> . term4
    (32) arg -> . arg BIT_OR term0
    (33) arg -> . term0
    (45) term4 -> . term5 DOUBLE_EQUALS term5
    (46) term4 -> . term5 TRIPLE_EQUALS term5
    (47) term4 -> . term5 NOT_EQUALS term5
    (48) term4 -> . term5 EQUAL_TILDE term5
    (49) term4 -> . term5 BANG_TILDE term5
    (50) term4 -> . term5 COMPARISON term5
    (51) term4 -> . term5
    (34) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (36) term0 -> . term1
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (100) mlhs -> . mlhsitem
    (37) term1 -> . mlhs EQUALS mrhs
    (38) term1 -> . mlhs opasgn mrhs
    (39) term1 -> . term2
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arrayal
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (85) arrayal -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false

    MULTIPLY        shift and go to state 151
    IDENTIFIER      shift and go to state 144
    nil             shift and go to state 39
    self            shift and go to state 40
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61

    mlhs                           shift and go to state 24
    mrhs                           shift and go to state 153
    term2                          shift and go to state 149
    args                           shift and go to state 150
    arg                            shift and go to state 152
    term3                          shift and go to state 35
    term4                          shift and go to state 37
    term0                          shift and go to state 29
    term5                          shift and go to state 41
    term1                          shift and go to state 31
    term6                          shift and go to state 44
    mlhsitem                       shift and go to state 32
    term7                          shift and go to state 45
    arrayal                        shift and go to state 34
    term8                          shift and go to state 46
    variable                       shift and go to state 36
    term9                          shift and go to state 47
    varname                        shift and go to state 38
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56

state 79

    (136) opasgn -> MODULO_EQUALS .

    MULTIPLY        reduce using rule 136 (opasgn -> MODULO_EQUALS .)
    IDENTIFIER      reduce using rule 136 (opasgn -> MODULO_EQUALS .)
    nil             reduce using rule 136 (opasgn -> MODULO_EQUALS .)
    self            reduce using rule 136 (opasgn -> MODULO_EQUALS .)
    GLOBAL          reduce using rule 136 (opasgn -> MODULO_EQUALS .)
    AT_THE_RATE     reduce using rule 136 (opasgn -> MODULO_EQUALS .)
    MINUS           reduce using rule 136 (opasgn -> MODULO_EQUALS .)
    PLUS            reduce using rule 136 (opasgn -> MODULO_EQUALS .)
    OPEN_BRACKET    reduce using rule 136 (opasgn -> MODULO_EQUALS .)
    Array           reduce using rule 136 (opasgn -> MODULO_EQUALS .)
    NUMBER          reduce using rule 136 (opasgn -> MODULO_EQUALS .)
    FLOAT           reduce using rule 136 (opasgn -> MODULO_EQUALS .)
    STRING          reduce using rule 136 (opasgn -> MODULO_EQUALS .)
    true            reduce using rule 136 (opasgn -> MODULO_EQUALS .)
    false           reduce using rule 136 (opasgn -> MODULO_EQUALS .)


state 80

    (137) opasgn -> DIVIDE_EQUALS .

    MULTIPLY        reduce using rule 137 (opasgn -> DIVIDE_EQUALS .)
    IDENTIFIER      reduce using rule 137 (opasgn -> DIVIDE_EQUALS .)
    nil             reduce using rule 137 (opasgn -> DIVIDE_EQUALS .)
    self            reduce using rule 137 (opasgn -> DIVIDE_EQUALS .)
    GLOBAL          reduce using rule 137 (opasgn -> DIVIDE_EQUALS .)
    AT_THE_RATE     reduce using rule 137 (opasgn -> DIVIDE_EQUALS .)
    MINUS           reduce using rule 137 (opasgn -> DIVIDE_EQUALS .)
    PLUS            reduce using rule 137 (opasgn -> DIVIDE_EQUALS .)
    OPEN_BRACKET    reduce using rule 137 (opasgn -> DIVIDE_EQUALS .)
    Array           reduce using rule 137 (opasgn -> DIVIDE_EQUALS .)
    NUMBER          reduce using rule 137 (opasgn -> DIVIDE_EQUALS .)
    FLOAT           reduce using rule 137 (opasgn -> DIVIDE_EQUALS .)
    STRING          reduce using rule 137 (opasgn -> DIVIDE_EQUALS .)
    true            reduce using rule 137 (opasgn -> DIVIDE_EQUALS .)
    false           reduce using rule 137 (opasgn -> DIVIDE_EQUALS .)


state 81

    (138) opasgn -> MINUS_EQUALS .

    MULTIPLY        reduce using rule 138 (opasgn -> MINUS_EQUALS .)
    IDENTIFIER      reduce using rule 138 (opasgn -> MINUS_EQUALS .)
    nil             reduce using rule 138 (opasgn -> MINUS_EQUALS .)
    self            reduce using rule 138 (opasgn -> MINUS_EQUALS .)
    GLOBAL          reduce using rule 138 (opasgn -> MINUS_EQUALS .)
    AT_THE_RATE     reduce using rule 138 (opasgn -> MINUS_EQUALS .)
    MINUS           reduce using rule 138 (opasgn -> MINUS_EQUALS .)
    PLUS            reduce using rule 138 (opasgn -> MINUS_EQUALS .)
    OPEN_BRACKET    reduce using rule 138 (opasgn -> MINUS_EQUALS .)
    Array           reduce using rule 138 (opasgn -> MINUS_EQUALS .)
    NUMBER          reduce using rule 138 (opasgn -> MINUS_EQUALS .)
    FLOAT           reduce using rule 138 (opasgn -> MINUS_EQUALS .)
    STRING          reduce using rule 138 (opasgn -> MINUS_EQUALS .)
    true            reduce using rule 138 (opasgn -> MINUS_EQUALS .)
    false           reduce using rule 138 (opasgn -> MINUS_EQUALS .)


state 82

    (139) opasgn -> PLUS_EQUALS .

    MULTIPLY        reduce using rule 139 (opasgn -> PLUS_EQUALS .)
    IDENTIFIER      reduce using rule 139 (opasgn -> PLUS_EQUALS .)
    nil             reduce using rule 139 (opasgn -> PLUS_EQUALS .)
    self            reduce using rule 139 (opasgn -> PLUS_EQUALS .)
    GLOBAL          reduce using rule 139 (opasgn -> PLUS_EQUALS .)
    AT_THE_RATE     reduce using rule 139 (opasgn -> PLUS_EQUALS .)
    MINUS           reduce using rule 139 (opasgn -> PLUS_EQUALS .)
    PLUS            reduce using rule 139 (opasgn -> PLUS_EQUALS .)
    OPEN_BRACKET    reduce using rule 139 (opasgn -> PLUS_EQUALS .)
    Array           reduce using rule 139 (opasgn -> PLUS_EQUALS .)
    NUMBER          reduce using rule 139 (opasgn -> PLUS_EQUALS .)
    FLOAT           reduce using rule 139 (opasgn -> PLUS_EQUALS .)
    STRING          reduce using rule 139 (opasgn -> PLUS_EQUALS .)
    true            reduce using rule 139 (opasgn -> PLUS_EQUALS .)
    false           reduce using rule 139 (opasgn -> PLUS_EQUALS .)


state 83

    (140) opasgn -> OR_EQUALS .

    MULTIPLY        reduce using rule 140 (opasgn -> OR_EQUALS .)
    IDENTIFIER      reduce using rule 140 (opasgn -> OR_EQUALS .)
    nil             reduce using rule 140 (opasgn -> OR_EQUALS .)
    self            reduce using rule 140 (opasgn -> OR_EQUALS .)
    GLOBAL          reduce using rule 140 (opasgn -> OR_EQUALS .)
    AT_THE_RATE     reduce using rule 140 (opasgn -> OR_EQUALS .)
    MINUS           reduce using rule 140 (opasgn -> OR_EQUALS .)
    PLUS            reduce using rule 140 (opasgn -> OR_EQUALS .)
    OPEN_BRACKET    reduce using rule 140 (opasgn -> OR_EQUALS .)
    Array           reduce using rule 140 (opasgn -> OR_EQUALS .)
    NUMBER          reduce using rule 140 (opasgn -> OR_EQUALS .)
    FLOAT           reduce using rule 140 (opasgn -> OR_EQUALS .)
    STRING          reduce using rule 140 (opasgn -> OR_EQUALS .)
    true            reduce using rule 140 (opasgn -> OR_EQUALS .)
    false           reduce using rule 140 (opasgn -> OR_EQUALS .)


state 84

    (141) opasgn -> AND_EQUALS .

    MULTIPLY        reduce using rule 141 (opasgn -> AND_EQUALS .)
    IDENTIFIER      reduce using rule 141 (opasgn -> AND_EQUALS .)
    nil             reduce using rule 141 (opasgn -> AND_EQUALS .)
    self            reduce using rule 141 (opasgn -> AND_EQUALS .)
    GLOBAL          reduce using rule 141 (opasgn -> AND_EQUALS .)
    AT_THE_RATE     reduce using rule 141 (opasgn -> AND_EQUALS .)
    MINUS           reduce using rule 141 (opasgn -> AND_EQUALS .)
    PLUS            reduce using rule 141 (opasgn -> AND_EQUALS .)
    OPEN_BRACKET    reduce using rule 141 (opasgn -> AND_EQUALS .)
    Array           reduce using rule 141 (opasgn -> AND_EQUALS .)
    NUMBER          reduce using rule 141 (opasgn -> AND_EQUALS .)
    FLOAT           reduce using rule 141 (opasgn -> AND_EQUALS .)
    STRING          reduce using rule 141 (opasgn -> AND_EQUALS .)
    true            reduce using rule 141 (opasgn -> AND_EQUALS .)
    false           reduce using rule 141 (opasgn -> AND_EQUALS .)


state 85

    (142) opasgn -> XOR_EQUALS .

    MULTIPLY        reduce using rule 142 (opasgn -> XOR_EQUALS .)
    IDENTIFIER      reduce using rule 142 (opasgn -> XOR_EQUALS .)
    nil             reduce using rule 142 (opasgn -> XOR_EQUALS .)
    self            reduce using rule 142 (opasgn -> XOR_EQUALS .)
    GLOBAL          reduce using rule 142 (opasgn -> XOR_EQUALS .)
    AT_THE_RATE     reduce using rule 142 (opasgn -> XOR_EQUALS .)
    MINUS           reduce using rule 142 (opasgn -> XOR_EQUALS .)
    PLUS            reduce using rule 142 (opasgn -> XOR_EQUALS .)
    OPEN_BRACKET    reduce using rule 142 (opasgn -> XOR_EQUALS .)
    Array           reduce using rule 142 (opasgn -> XOR_EQUALS .)
    NUMBER          reduce using rule 142 (opasgn -> XOR_EQUALS .)
    FLOAT           reduce using rule 142 (opasgn -> XOR_EQUALS .)
    STRING          reduce using rule 142 (opasgn -> XOR_EQUALS .)
    true            reduce using rule 142 (opasgn -> XOR_EQUALS .)
    false           reduce using rule 142 (opasgn -> XOR_EQUALS .)


state 86

    (143) opasgn -> RIGHT_SHIFT_EQUALS .

    MULTIPLY        reduce using rule 143 (opasgn -> RIGHT_SHIFT_EQUALS .)
    IDENTIFIER      reduce using rule 143 (opasgn -> RIGHT_SHIFT_EQUALS .)
    nil             reduce using rule 143 (opasgn -> RIGHT_SHIFT_EQUALS .)
    self            reduce using rule 143 (opasgn -> RIGHT_SHIFT_EQUALS .)
    GLOBAL          reduce using rule 143 (opasgn -> RIGHT_SHIFT_EQUALS .)
    AT_THE_RATE     reduce using rule 143 (opasgn -> RIGHT_SHIFT_EQUALS .)
    MINUS           reduce using rule 143 (opasgn -> RIGHT_SHIFT_EQUALS .)
    PLUS            reduce using rule 143 (opasgn -> RIGHT_SHIFT_EQUALS .)
    OPEN_BRACKET    reduce using rule 143 (opasgn -> RIGHT_SHIFT_EQUALS .)
    Array           reduce using rule 143 (opasgn -> RIGHT_SHIFT_EQUALS .)
    NUMBER          reduce using rule 143 (opasgn -> RIGHT_SHIFT_EQUALS .)
    FLOAT           reduce using rule 143 (opasgn -> RIGHT_SHIFT_EQUALS .)
    STRING          reduce using rule 143 (opasgn -> RIGHT_SHIFT_EQUALS .)
    true            reduce using rule 143 (opasgn -> RIGHT_SHIFT_EQUALS .)
    false           reduce using rule 143 (opasgn -> RIGHT_SHIFT_EQUALS .)


state 87

    (144) opasgn -> LEFT_SHIFT_EQUALS .

    MULTIPLY        reduce using rule 144 (opasgn -> LEFT_SHIFT_EQUALS .)
    IDENTIFIER      reduce using rule 144 (opasgn -> LEFT_SHIFT_EQUALS .)
    nil             reduce using rule 144 (opasgn -> LEFT_SHIFT_EQUALS .)
    self            reduce using rule 144 (opasgn -> LEFT_SHIFT_EQUALS .)
    GLOBAL          reduce using rule 144 (opasgn -> LEFT_SHIFT_EQUALS .)
    AT_THE_RATE     reduce using rule 144 (opasgn -> LEFT_SHIFT_EQUALS .)
    MINUS           reduce using rule 144 (opasgn -> LEFT_SHIFT_EQUALS .)
    PLUS            reduce using rule 144 (opasgn -> LEFT_SHIFT_EQUALS .)
    OPEN_BRACKET    reduce using rule 144 (opasgn -> LEFT_SHIFT_EQUALS .)
    Array           reduce using rule 144 (opasgn -> LEFT_SHIFT_EQUALS .)
    NUMBER          reduce using rule 144 (opasgn -> LEFT_SHIFT_EQUALS .)
    FLOAT           reduce using rule 144 (opasgn -> LEFT_SHIFT_EQUALS .)
    STRING          reduce using rule 144 (opasgn -> LEFT_SHIFT_EQUALS .)
    true            reduce using rule 144 (opasgn -> LEFT_SHIFT_EQUALS .)
    false           reduce using rule 144 (opasgn -> LEFT_SHIFT_EQUALS .)


state 88

    (145) opasgn -> MULTIPLY_EQUALS .

    MULTIPLY        reduce using rule 145 (opasgn -> MULTIPLY_EQUALS .)
    IDENTIFIER      reduce using rule 145 (opasgn -> MULTIPLY_EQUALS .)
    nil             reduce using rule 145 (opasgn -> MULTIPLY_EQUALS .)
    self            reduce using rule 145 (opasgn -> MULTIPLY_EQUALS .)
    GLOBAL          reduce using rule 145 (opasgn -> MULTIPLY_EQUALS .)
    AT_THE_RATE     reduce using rule 145 (opasgn -> MULTIPLY_EQUALS .)
    MINUS           reduce using rule 145 (opasgn -> MULTIPLY_EQUALS .)
    PLUS            reduce using rule 145 (opasgn -> MULTIPLY_EQUALS .)
    OPEN_BRACKET    reduce using rule 145 (opasgn -> MULTIPLY_EQUALS .)
    Array           reduce using rule 145 (opasgn -> MULTIPLY_EQUALS .)
    NUMBER          reduce using rule 145 (opasgn -> MULTIPLY_EQUALS .)
    FLOAT           reduce using rule 145 (opasgn -> MULTIPLY_EQUALS .)
    STRING          reduce using rule 145 (opasgn -> MULTIPLY_EQUALS .)
    true            reduce using rule 145 (opasgn -> MULTIPLY_EQUALS .)
    false           reduce using rule 145 (opasgn -> MULTIPLY_EQUALS .)


state 89

    (146) opasgn -> LOGICAL_AND_EQUALS .

    MULTIPLY        reduce using rule 146 (opasgn -> LOGICAL_AND_EQUALS .)
    IDENTIFIER      reduce using rule 146 (opasgn -> LOGICAL_AND_EQUALS .)
    nil             reduce using rule 146 (opasgn -> LOGICAL_AND_EQUALS .)
    self            reduce using rule 146 (opasgn -> LOGICAL_AND_EQUALS .)
    GLOBAL          reduce using rule 146 (opasgn -> LOGICAL_AND_EQUALS .)
    AT_THE_RATE     reduce using rule 146 (opasgn -> LOGICAL_AND_EQUALS .)
    MINUS           reduce using rule 146 (opasgn -> LOGICAL_AND_EQUALS .)
    PLUS            reduce using rule 146 (opasgn -> LOGICAL_AND_EQUALS .)
    OPEN_BRACKET    reduce using rule 146 (opasgn -> LOGICAL_AND_EQUALS .)
    Array           reduce using rule 146 (opasgn -> LOGICAL_AND_EQUALS .)
    NUMBER          reduce using rule 146 (opasgn -> LOGICAL_AND_EQUALS .)
    FLOAT           reduce using rule 146 (opasgn -> LOGICAL_AND_EQUALS .)
    STRING          reduce using rule 146 (opasgn -> LOGICAL_AND_EQUALS .)
    true            reduce using rule 146 (opasgn -> LOGICAL_AND_EQUALS .)
    false           reduce using rule 146 (opasgn -> LOGICAL_AND_EQUALS .)


state 90

    (147) opasgn -> LOGICAL_OR_EQUALS .

    MULTIPLY        reduce using rule 147 (opasgn -> LOGICAL_OR_EQUALS .)
    IDENTIFIER      reduce using rule 147 (opasgn -> LOGICAL_OR_EQUALS .)
    nil             reduce using rule 147 (opasgn -> LOGICAL_OR_EQUALS .)
    self            reduce using rule 147 (opasgn -> LOGICAL_OR_EQUALS .)
    GLOBAL          reduce using rule 147 (opasgn -> LOGICAL_OR_EQUALS .)
    AT_THE_RATE     reduce using rule 147 (opasgn -> LOGICAL_OR_EQUALS .)
    MINUS           reduce using rule 147 (opasgn -> LOGICAL_OR_EQUALS .)
    PLUS            reduce using rule 147 (opasgn -> LOGICAL_OR_EQUALS .)
    OPEN_BRACKET    reduce using rule 147 (opasgn -> LOGICAL_OR_EQUALS .)
    Array           reduce using rule 147 (opasgn -> LOGICAL_OR_EQUALS .)
    NUMBER          reduce using rule 147 (opasgn -> LOGICAL_OR_EQUALS .)
    FLOAT           reduce using rule 147 (opasgn -> LOGICAL_OR_EQUALS .)
    STRING          reduce using rule 147 (opasgn -> LOGICAL_OR_EQUALS .)
    true            reduce using rule 147 (opasgn -> LOGICAL_OR_EQUALS .)
    false           reduce using rule 147 (opasgn -> LOGICAL_OR_EQUALS .)


state 91

    (148) opasgn -> POWER_EQUALS .

    MULTIPLY        reduce using rule 148 (opasgn -> POWER_EQUALS .)
    IDENTIFIER      reduce using rule 148 (opasgn -> POWER_EQUALS .)
    nil             reduce using rule 148 (opasgn -> POWER_EQUALS .)
    self            reduce using rule 148 (opasgn -> POWER_EQUALS .)
    GLOBAL          reduce using rule 148 (opasgn -> POWER_EQUALS .)
    AT_THE_RATE     reduce using rule 148 (opasgn -> POWER_EQUALS .)
    MINUS           reduce using rule 148 (opasgn -> POWER_EQUALS .)
    PLUS            reduce using rule 148 (opasgn -> POWER_EQUALS .)
    OPEN_BRACKET    reduce using rule 148 (opasgn -> POWER_EQUALS .)
    Array           reduce using rule 148 (opasgn -> POWER_EQUALS .)
    NUMBER          reduce using rule 148 (opasgn -> POWER_EQUALS .)
    FLOAT           reduce using rule 148 (opasgn -> POWER_EQUALS .)
    STRING          reduce using rule 148 (opasgn -> POWER_EQUALS .)
    true            reduce using rule 148 (opasgn -> POWER_EQUALS .)
    false           reduce using rule 148 (opasgn -> POWER_EQUALS .)


state 92

    (24) expr1 -> return IDENTIFIER .

    SEMI_COLON      reduce using rule 24 (expr1 -> return IDENTIFIER .)
    NEWLINE         reduce using rule 24 (expr1 -> return IDENTIFIER .)
    puts            reduce using rule 24 (expr1 -> return IDENTIFIER .)
    print           reduce using rule 24 (expr1 -> return IDENTIFIER .)
    break           reduce using rule 24 (expr1 -> return IDENTIFIER .)
    def             reduce using rule 24 (expr1 -> return IDENTIFIER .)
    if              reduce using rule 24 (expr1 -> return IDENTIFIER .)
    while           reduce using rule 24 (expr1 -> return IDENTIFIER .)
    case            reduce using rule 24 (expr1 -> return IDENTIFIER .)
    for             reduce using rule 24 (expr1 -> return IDENTIFIER .)
    return          reduce using rule 24 (expr1 -> return IDENTIFIER .)
    IDENTIFIER      reduce using rule 24 (expr1 -> return IDENTIFIER .)
    nil             reduce using rule 24 (expr1 -> return IDENTIFIER .)
    self            reduce using rule 24 (expr1 -> return IDENTIFIER .)
    GLOBAL          reduce using rule 24 (expr1 -> return IDENTIFIER .)
    AT_THE_RATE     reduce using rule 24 (expr1 -> return IDENTIFIER .)
    MINUS           reduce using rule 24 (expr1 -> return IDENTIFIER .)
    PLUS            reduce using rule 24 (expr1 -> return IDENTIFIER .)
    OPEN_BRACKET    reduce using rule 24 (expr1 -> return IDENTIFIER .)
    Array           reduce using rule 24 (expr1 -> return IDENTIFIER .)
    NUMBER          reduce using rule 24 (expr1 -> return IDENTIFIER .)
    FLOAT           reduce using rule 24 (expr1 -> return IDENTIFIER .)
    STRING          reduce using rule 24 (expr1 -> return IDENTIFIER .)
    true            reduce using rule 24 (expr1 -> return IDENTIFIER .)
    false           reduce using rule 24 (expr1 -> return IDENTIFIER .)
    $end            reduce using rule 24 (expr1 -> return IDENTIFIER .)
    then            reduce using rule 24 (expr1 -> return IDENTIFIER .)
    do              reduce using rule 24 (expr1 -> return IDENTIFIER .)


state 93

    (32) arg -> arg BIT_OR . term0
    (34) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (36) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (37) term1 -> . mlhs EQUALS mrhs
    (38) term1 -> . mlhs opasgn mrhs
    (39) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arrayal
    (40) term2 -> . term3 INCL_RANGE term3
    (41) term2 -> . term3 EXCL_RANGE term3
    (42) term2 -> . term3
    (85) arrayal -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (43) term3 -> . term3 LOGICAL_OR term4
    (44) term3 -> . term4
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self
    (45) term4 -> . term5 DOUBLE_EQUALS term5
    (46) term4 -> . term5 TRIPLE_EQUALS term5
    (47) term4 -> . term5 NOT_EQUALS term5
    (48) term4 -> . term5 EQUAL_TILDE term5
    (49) term4 -> . term5 BANG_TILDE term5
    (50) term4 -> . term5 COMPARISON term5
    (51) term4 -> . term5
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false

    IDENTIFIER      shift and go to state 144
    nil             shift and go to state 39
    self            shift and go to state 40
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61

    term0                          shift and go to state 154
    mlhs                           shift and go to state 24
    term1                          shift and go to state 31
    mlhsitem                       shift and go to state 32
    term2                          shift and go to state 33
    arrayal                        shift and go to state 34
    term3                          shift and go to state 35
    variable                       shift and go to state 36
    term4                          shift and go to state 37
    varname                        shift and go to state 38
    term5                          shift and go to state 41
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56

state 94

    (40) term2 -> term3 INCL_RANGE . term3
    (43) term3 -> . term3 LOGICAL_OR term4
    (44) term3 -> . term4
    (45) term4 -> . term5 DOUBLE_EQUALS term5
    (46) term4 -> . term5 TRIPLE_EQUALS term5
    (47) term4 -> . term5 NOT_EQUALS term5
    (48) term4 -> . term5 EQUAL_TILDE term5
    (49) term4 -> . term5 BANG_TILDE term5
    (50) term4 -> . term5 COMPARISON term5
    (51) term4 -> . term5
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    term3                          shift and go to state 155
    term4                          shift and go to state 37
    term5                          shift and go to state 41
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 95

    (41) term2 -> term3 EXCL_RANGE . term3
    (43) term3 -> . term3 LOGICAL_OR term4
    (44) term3 -> . term4
    (45) term4 -> . term5 DOUBLE_EQUALS term5
    (46) term4 -> . term5 TRIPLE_EQUALS term5
    (47) term4 -> . term5 NOT_EQUALS term5
    (48) term4 -> . term5 EQUAL_TILDE term5
    (49) term4 -> . term5 BANG_TILDE term5
    (50) term4 -> . term5 COMPARISON term5
    (51) term4 -> . term5
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    term3                          shift and go to state 156
    term4                          shift and go to state 37
    term5                          shift and go to state 41
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 96

    (43) term3 -> term3 LOGICAL_OR . term4
    (45) term4 -> . term5 DOUBLE_EQUALS term5
    (46) term4 -> . term5 TRIPLE_EQUALS term5
    (47) term4 -> . term5 NOT_EQUALS term5
    (48) term4 -> . term5 EQUAL_TILDE term5
    (49) term4 -> . term5 BANG_TILDE term5
    (50) term4 -> . term5 COMPARISON term5
    (51) term4 -> . term5
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    term4                          shift and go to state 157
    term5                          shift and go to state 41
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 97

    (85) arrayal -> variable OPEN_SQUARE . array_args CLOSE_SQUARE
    (86) arraya -> variable OPEN_SQUARE . array_args CLOSE_SQUARE
    (87) array_args -> . primary COMMA array_args
    (88) array_args -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    variable                       shift and go to state 117
    array_args                     shift and go to state 158
    primary                        shift and go to state 159
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116

state 98

    (45) term4 -> term5 DOUBLE_EQUALS . term5
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    term5                          shift and go to state 160
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 99

    (46) term4 -> term5 TRIPLE_EQUALS . term5
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    term5                          shift and go to state 161
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 100

    (47) term4 -> term5 NOT_EQUALS . term5
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    term5                          shift and go to state 162
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 101

    (48) term4 -> term5 EQUAL_TILDE . term5
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    term5                          shift and go to state 163
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 102

    (49) term4 -> term5 BANG_TILDE . term5
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    term5                          shift and go to state 164
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 103

    (50) term4 -> term5 COMPARISON . term5
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    term5                          shift and go to state 165
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 104

    (52) term5 -> term5 LESS . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    term6                          shift and go to state 166
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 105

    (53) term5 -> term5 LESS_EQUALS . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    term6                          shift and go to state 167
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 106

    (54) term5 -> term5 GREATER . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    term6                          shift and go to state 168
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 107

    (55) term5 -> term5 GREATER_EQUALS . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    term6                          shift and go to state 169
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 108

    (150) varname -> AT_THE_RATE IDENTIFIER .

    OPEN_SQUARE     reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    POWER           reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    MULTIPLY        reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    DIVIDE          reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    MODULO          reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    PLUS            reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    MINUS           reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    BIT_AND         reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    BIT_XOR         reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    DOUBLE_EQUALS   reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    TRIPLE_EQUALS   reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    NOT_EQUALS      reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    EQUAL_TILDE     reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    BANG_TILDE      reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    COMPARISON      reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    LESS            reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    LESS_EQUALS     reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    GREATER         reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    INCL_RANGE      reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    EXCL_RANGE      reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    LOGICAL_OR      reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    BIT_OR          reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    SEMI_COLON      reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    NEWLINE         reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    puts            reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    print           reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    break           reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    def             reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    if              reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    while           reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    case            reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    for             reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    return          reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    IDENTIFIER      reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    nil             reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    self            reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    GLOBAL          reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    AT_THE_RATE     reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    OPEN_BRACKET    reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    Array           reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    NUMBER          reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    FLOAT           reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    STRING          reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    true            reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    false           reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    $end            reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    then            reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    do              reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    COMMA           reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)
    CLOSE_SQUARE    reduce using rule 150 (varname -> AT_THE_RATE IDENTIFIER .)


state 109

    (57) term6 -> term6 BIT_XOR . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    term7                          shift and go to state 170
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 110

    (59) term7 -> term7 BIT_AND . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    term8                          shift and go to state 171
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 111

    (61) term8 -> term8 LEFT_SHIFT . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    term9                          shift and go to state 172
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 112

    (62) term8 -> term8 RIGHT_SHIFT . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    term9                          shift and go to state 173
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 113

    (64) term9 -> term9 PLUS . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    term10                         shift and go to state 174
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 114

    (65) term9 -> term9 MINUS . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    term10                         shift and go to state 175
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 115

    (73) term12 -> PLUS term12 .

    MULTIPLY        reduce using rule 73 (term12 -> PLUS term12 .)
    DIVIDE          reduce using rule 73 (term12 -> PLUS term12 .)
    MODULO          reduce using rule 73 (term12 -> PLUS term12 .)
    PLUS            reduce using rule 73 (term12 -> PLUS term12 .)
    MINUS           reduce using rule 73 (term12 -> PLUS term12 .)
    LEFT_SHIFT      reduce using rule 73 (term12 -> PLUS term12 .)
    RIGHT_SHIFT     reduce using rule 73 (term12 -> PLUS term12 .)
    BIT_AND         reduce using rule 73 (term12 -> PLUS term12 .)
    BIT_XOR         reduce using rule 73 (term12 -> PLUS term12 .)
    DOUBLE_EQUALS   reduce using rule 73 (term12 -> PLUS term12 .)
    TRIPLE_EQUALS   reduce using rule 73 (term12 -> PLUS term12 .)
    NOT_EQUALS      reduce using rule 73 (term12 -> PLUS term12 .)
    EQUAL_TILDE     reduce using rule 73 (term12 -> PLUS term12 .)
    BANG_TILDE      reduce using rule 73 (term12 -> PLUS term12 .)
    COMPARISON      reduce using rule 73 (term12 -> PLUS term12 .)
    LESS            reduce using rule 73 (term12 -> PLUS term12 .)
    LESS_EQUALS     reduce using rule 73 (term12 -> PLUS term12 .)
    GREATER         reduce using rule 73 (term12 -> PLUS term12 .)
    GREATER_EQUALS  reduce using rule 73 (term12 -> PLUS term12 .)
    INCL_RANGE      reduce using rule 73 (term12 -> PLUS term12 .)
    EXCL_RANGE      reduce using rule 73 (term12 -> PLUS term12 .)
    LOGICAL_OR      reduce using rule 73 (term12 -> PLUS term12 .)
    BIT_OR          reduce using rule 73 (term12 -> PLUS term12 .)
    SEMI_COLON      reduce using rule 73 (term12 -> PLUS term12 .)
    NEWLINE         reduce using rule 73 (term12 -> PLUS term12 .)
    puts            reduce using rule 73 (term12 -> PLUS term12 .)
    print           reduce using rule 73 (term12 -> PLUS term12 .)
    break           reduce using rule 73 (term12 -> PLUS term12 .)
    def             reduce using rule 73 (term12 -> PLUS term12 .)
    if              reduce using rule 73 (term12 -> PLUS term12 .)
    while           reduce using rule 73 (term12 -> PLUS term12 .)
    case            reduce using rule 73 (term12 -> PLUS term12 .)
    for             reduce using rule 73 (term12 -> PLUS term12 .)
    return          reduce using rule 73 (term12 -> PLUS term12 .)
    IDENTIFIER      reduce using rule 73 (term12 -> PLUS term12 .)
    nil             reduce using rule 73 (term12 -> PLUS term12 .)
    self            reduce using rule 73 (term12 -> PLUS term12 .)
    GLOBAL          reduce using rule 73 (term12 -> PLUS term12 .)
    AT_THE_RATE     reduce using rule 73 (term12 -> PLUS term12 .)
    OPEN_BRACKET    reduce using rule 73 (term12 -> PLUS term12 .)
    Array           reduce using rule 73 (term12 -> PLUS term12 .)
    NUMBER          reduce using rule 73 (term12 -> PLUS term12 .)
    FLOAT           reduce using rule 73 (term12 -> PLUS term12 .)
    STRING          reduce using rule 73 (term12 -> PLUS term12 .)
    true            reduce using rule 73 (term12 -> PLUS term12 .)
    false           reduce using rule 73 (term12 -> PLUS term12 .)
    $end            reduce using rule 73 (term12 -> PLUS term12 .)
    CLOSE_BRACKET   reduce using rule 73 (term12 -> PLUS term12 .)
    then            reduce using rule 73 (term12 -> PLUS term12 .)
    do              reduce using rule 73 (term12 -> PLUS term12 .)
    COMMA           reduce using rule 73 (term12 -> PLUS term12 .)


state 116

    (81) primary -> varname .
    (127) variable -> varname .

    POWER           reduce using rule 81 (primary -> varname .)
    MULTIPLY        reduce using rule 81 (primary -> varname .)
    DIVIDE          reduce using rule 81 (primary -> varname .)
    MODULO          reduce using rule 81 (primary -> varname .)
    PLUS            reduce using rule 81 (primary -> varname .)
    MINUS           reduce using rule 81 (primary -> varname .)
    LEFT_SHIFT      reduce using rule 81 (primary -> varname .)
    RIGHT_SHIFT     reduce using rule 81 (primary -> varname .)
    BIT_AND         reduce using rule 81 (primary -> varname .)
    BIT_XOR         reduce using rule 81 (primary -> varname .)
    DOUBLE_EQUALS   reduce using rule 81 (primary -> varname .)
    TRIPLE_EQUALS   reduce using rule 81 (primary -> varname .)
    NOT_EQUALS      reduce using rule 81 (primary -> varname .)
    EQUAL_TILDE     reduce using rule 81 (primary -> varname .)
    BANG_TILDE      reduce using rule 81 (primary -> varname .)
    COMPARISON      reduce using rule 81 (primary -> varname .)
    LESS            reduce using rule 81 (primary -> varname .)
    LESS_EQUALS     reduce using rule 81 (primary -> varname .)
    GREATER         reduce using rule 81 (primary -> varname .)
    GREATER_EQUALS  reduce using rule 81 (primary -> varname .)
    INCL_RANGE      reduce using rule 81 (primary -> varname .)
    EXCL_RANGE      reduce using rule 81 (primary -> varname .)
    LOGICAL_OR      reduce using rule 81 (primary -> varname .)
    BIT_OR          reduce using rule 81 (primary -> varname .)
    SEMI_COLON      reduce using rule 81 (primary -> varname .)
    NEWLINE         reduce using rule 81 (primary -> varname .)
    puts            reduce using rule 81 (primary -> varname .)
    print           reduce using rule 81 (primary -> varname .)
    break           reduce using rule 81 (primary -> varname .)
    def             reduce using rule 81 (primary -> varname .)
    if              reduce using rule 81 (primary -> varname .)
    while           reduce using rule 81 (primary -> varname .)
    case            reduce using rule 81 (primary -> varname .)
    for             reduce using rule 81 (primary -> varname .)
    return          reduce using rule 81 (primary -> varname .)
    IDENTIFIER      reduce using rule 81 (primary -> varname .)
    nil             reduce using rule 81 (primary -> varname .)
    self            reduce using rule 81 (primary -> varname .)
    GLOBAL          reduce using rule 81 (primary -> varname .)
    AT_THE_RATE     reduce using rule 81 (primary -> varname .)
    OPEN_BRACKET    reduce using rule 81 (primary -> varname .)
    Array           reduce using rule 81 (primary -> varname .)
    NUMBER          reduce using rule 81 (primary -> varname .)
    FLOAT           reduce using rule 81 (primary -> varname .)
    STRING          reduce using rule 81 (primary -> varname .)
    true            reduce using rule 81 (primary -> varname .)
    false           reduce using rule 81 (primary -> varname .)
    $end            reduce using rule 81 (primary -> varname .)
    CLOSE_BRACKET   reduce using rule 81 (primary -> varname .)
    then            reduce using rule 81 (primary -> varname .)
    do              reduce using rule 81 (primary -> varname .)
    COMMA           reduce using rule 81 (primary -> varname .)
    CLOSE_SQUARE    reduce using rule 81 (primary -> varname .)
    OPEN_SQUARE     reduce using rule 127 (variable -> varname .)


state 117

    (86) arraya -> variable . OPEN_SQUARE array_args CLOSE_SQUARE

    OPEN_SQUARE     shift and go to state 176


state 118

    (151) varname -> IDENTIFIER .

    POWER           reduce using rule 151 (varname -> IDENTIFIER .)
    MULTIPLY        reduce using rule 151 (varname -> IDENTIFIER .)
    DIVIDE          reduce using rule 151 (varname -> IDENTIFIER .)
    MODULO          reduce using rule 151 (varname -> IDENTIFIER .)
    PLUS            reduce using rule 151 (varname -> IDENTIFIER .)
    MINUS           reduce using rule 151 (varname -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 151 (varname -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 151 (varname -> IDENTIFIER .)
    BIT_AND         reduce using rule 151 (varname -> IDENTIFIER .)
    BIT_XOR         reduce using rule 151 (varname -> IDENTIFIER .)
    DOUBLE_EQUALS   reduce using rule 151 (varname -> IDENTIFIER .)
    TRIPLE_EQUALS   reduce using rule 151 (varname -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 151 (varname -> IDENTIFIER .)
    EQUAL_TILDE     reduce using rule 151 (varname -> IDENTIFIER .)
    BANG_TILDE      reduce using rule 151 (varname -> IDENTIFIER .)
    COMPARISON      reduce using rule 151 (varname -> IDENTIFIER .)
    LESS            reduce using rule 151 (varname -> IDENTIFIER .)
    LESS_EQUALS     reduce using rule 151 (varname -> IDENTIFIER .)
    GREATER         reduce using rule 151 (varname -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 151 (varname -> IDENTIFIER .)
    INCL_RANGE      reduce using rule 151 (varname -> IDENTIFIER .)
    EXCL_RANGE      reduce using rule 151 (varname -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 151 (varname -> IDENTIFIER .)
    BIT_OR          reduce using rule 151 (varname -> IDENTIFIER .)
    SEMI_COLON      reduce using rule 151 (varname -> IDENTIFIER .)
    NEWLINE         reduce using rule 151 (varname -> IDENTIFIER .)
    puts            reduce using rule 151 (varname -> IDENTIFIER .)
    print           reduce using rule 151 (varname -> IDENTIFIER .)
    break           reduce using rule 151 (varname -> IDENTIFIER .)
    def             reduce using rule 151 (varname -> IDENTIFIER .)
    if              reduce using rule 151 (varname -> IDENTIFIER .)
    while           reduce using rule 151 (varname -> IDENTIFIER .)
    case            reduce using rule 151 (varname -> IDENTIFIER .)
    for             reduce using rule 151 (varname -> IDENTIFIER .)
    return          reduce using rule 151 (varname -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 151 (varname -> IDENTIFIER .)
    nil             reduce using rule 151 (varname -> IDENTIFIER .)
    self            reduce using rule 151 (varname -> IDENTIFIER .)
    GLOBAL          reduce using rule 151 (varname -> IDENTIFIER .)
    AT_THE_RATE     reduce using rule 151 (varname -> IDENTIFIER .)
    OPEN_BRACKET    reduce using rule 151 (varname -> IDENTIFIER .)
    Array           reduce using rule 151 (varname -> IDENTIFIER .)
    NUMBER          reduce using rule 151 (varname -> IDENTIFIER .)
    FLOAT           reduce using rule 151 (varname -> IDENTIFIER .)
    STRING          reduce using rule 151 (varname -> IDENTIFIER .)
    true            reduce using rule 151 (varname -> IDENTIFIER .)
    false           reduce using rule 151 (varname -> IDENTIFIER .)
    $end            reduce using rule 151 (varname -> IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 151 (varname -> IDENTIFIER .)
    then            reduce using rule 151 (varname -> IDENTIFIER .)
    do              reduce using rule 151 (varname -> IDENTIFIER .)
    COMMA           reduce using rule 151 (varname -> IDENTIFIER .)
    OPEN_SQUARE     reduce using rule 151 (varname -> IDENTIFIER .)
    CLOSE_SQUARE    reduce using rule 151 (varname -> IDENTIFIER .)


state 119

    (67) term10 -> term10 MULTIPLY . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    term11                         shift and go to state 177
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 120

    (68) term10 -> term10 DIVIDE . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    term11                         shift and go to state 178
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 121

    (69) term10 -> term10 MODULO . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    term11                         shift and go to state 179
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 122

    (71) term11 -> MINUS term11 .

    MULTIPLY        reduce using rule 71 (term11 -> MINUS term11 .)
    DIVIDE          reduce using rule 71 (term11 -> MINUS term11 .)
    MODULO          reduce using rule 71 (term11 -> MINUS term11 .)
    PLUS            reduce using rule 71 (term11 -> MINUS term11 .)
    MINUS           reduce using rule 71 (term11 -> MINUS term11 .)
    LEFT_SHIFT      reduce using rule 71 (term11 -> MINUS term11 .)
    RIGHT_SHIFT     reduce using rule 71 (term11 -> MINUS term11 .)
    BIT_AND         reduce using rule 71 (term11 -> MINUS term11 .)
    BIT_XOR         reduce using rule 71 (term11 -> MINUS term11 .)
    DOUBLE_EQUALS   reduce using rule 71 (term11 -> MINUS term11 .)
    TRIPLE_EQUALS   reduce using rule 71 (term11 -> MINUS term11 .)
    NOT_EQUALS      reduce using rule 71 (term11 -> MINUS term11 .)
    EQUAL_TILDE     reduce using rule 71 (term11 -> MINUS term11 .)
    BANG_TILDE      reduce using rule 71 (term11 -> MINUS term11 .)
    COMPARISON      reduce using rule 71 (term11 -> MINUS term11 .)
    LESS            reduce using rule 71 (term11 -> MINUS term11 .)
    LESS_EQUALS     reduce using rule 71 (term11 -> MINUS term11 .)
    GREATER         reduce using rule 71 (term11 -> MINUS term11 .)
    GREATER_EQUALS  reduce using rule 71 (term11 -> MINUS term11 .)
    INCL_RANGE      reduce using rule 71 (term11 -> MINUS term11 .)
    EXCL_RANGE      reduce using rule 71 (term11 -> MINUS term11 .)
    LOGICAL_OR      reduce using rule 71 (term11 -> MINUS term11 .)
    BIT_OR          reduce using rule 71 (term11 -> MINUS term11 .)
    SEMI_COLON      reduce using rule 71 (term11 -> MINUS term11 .)
    NEWLINE         reduce using rule 71 (term11 -> MINUS term11 .)
    puts            reduce using rule 71 (term11 -> MINUS term11 .)
    print           reduce using rule 71 (term11 -> MINUS term11 .)
    break           reduce using rule 71 (term11 -> MINUS term11 .)
    def             reduce using rule 71 (term11 -> MINUS term11 .)
    if              reduce using rule 71 (term11 -> MINUS term11 .)
    while           reduce using rule 71 (term11 -> MINUS term11 .)
    case            reduce using rule 71 (term11 -> MINUS term11 .)
    for             reduce using rule 71 (term11 -> MINUS term11 .)
    return          reduce using rule 71 (term11 -> MINUS term11 .)
    IDENTIFIER      reduce using rule 71 (term11 -> MINUS term11 .)
    nil             reduce using rule 71 (term11 -> MINUS term11 .)
    self            reduce using rule 71 (term11 -> MINUS term11 .)
    GLOBAL          reduce using rule 71 (term11 -> MINUS term11 .)
    AT_THE_RATE     reduce using rule 71 (term11 -> MINUS term11 .)
    OPEN_BRACKET    reduce using rule 71 (term11 -> MINUS term11 .)
    Array           reduce using rule 71 (term11 -> MINUS term11 .)
    NUMBER          reduce using rule 71 (term11 -> MINUS term11 .)
    FLOAT           reduce using rule 71 (term11 -> MINUS term11 .)
    STRING          reduce using rule 71 (term11 -> MINUS term11 .)
    true            reduce using rule 71 (term11 -> MINUS term11 .)
    false           reduce using rule 71 (term11 -> MINUS term11 .)
    $end            reduce using rule 71 (term11 -> MINUS term11 .)
    CLOSE_BRACKET   reduce using rule 71 (term11 -> MINUS term11 .)
    then            reduce using rule 71 (term11 -> MINUS term11 .)
    do              reduce using rule 71 (term11 -> MINUS term11 .)
    COMMA           reduce using rule 71 (term11 -> MINUS term11 .)


state 123

    (82) arrayd -> Array OPEN_BRACKET . array_size CLOSE_BRACKET
    (83) array_size -> . primary COMMA array_size
    (84) array_size -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    array_size                     shift and go to state 180
    primary                        shift and go to state 181
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 124

    (2) multcompstmt -> newline stmt1 multcompstmt .

    $end            reduce using rule 2 (multcompstmt -> newline stmt1 multcompstmt .)


state 125

    (7) stmt -> keydef argdecl newline . multstmt keyend
    (14) multstmt -> . stmt newline multstmt
    (15) multstmt -> . empty
    (7) stmt -> . keydef argdecl newline multstmt keyend
    (8) stmt -> . puts OPEN_BRACKET STRING CLOSE_BRACKET
    (9) stmt -> . print OPEN_BRACKET primary CLOSE_BRACKET
    (10) stmt -> . break
    (11) stmt -> . expr
    (154) empty -> .
    (12) keydef -> . def IDENTIFIER
    (16) expr -> . if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
    (17) expr -> . if expr1 pthen M_1 multstmt M_1 multelsif end M_1
    (18) expr -> . if expr1 pthen M_1 multstmt end M_1
    (19) expr -> . while M_1 expr1 pdo M_1 multstmt end M_1
    (20) expr -> . case expr1 M_1 newline multcase end M_1
    (21) expr -> . for M_1 mlhs in expr1 pdo M_1 multstmt end M_1
    (22) expr -> . expr1
    (24) expr1 -> . return IDENTIFIER
    (25) expr1 -> . return
    (26) expr1 -> . expr2
    (27) expr2 -> . arg
    (28) expr2 -> . call
    (32) arg -> . arg BIT_OR term0
    (33) arg -> . term0
    (29) call -> . function
    (34) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (36) term0 -> . term1
    (30) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (31) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (100) mlhs -> . mlhsitem
    (37) term1 -> . mlhs EQUALS mrhs
    (38) term1 -> . mlhs opasgn mrhs
    (39) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arrayal
    (40) term2 -> . term3 INCL_RANGE term3
    (41) term2 -> . term3 EXCL_RANGE term3
    (42) term2 -> . term3
    (85) arrayal -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (43) term3 -> . term3 LOGICAL_OR term4
    (44) term3 -> . term4
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self
    (45) term4 -> . term5 DOUBLE_EQUALS term5
    (46) term4 -> . term5 TRIPLE_EQUALS term5
    (47) term4 -> . term5 NOT_EQUALS term5
    (48) term4 -> . term5 EQUAL_TILDE term5
    (49) term4 -> . term5 BANG_TILDE term5
    (50) term4 -> . term5 COMPARISON term5
    (51) term4 -> . term5
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false

    puts            shift and go to state 10
    print           shift and go to state 13
    break           shift and go to state 15
    end             reduce using rule 154 (empty -> .)
    def             shift and go to state 17
    if              shift and go to state 19
    while           shift and go to state 21
    case            shift and go to state 22
    for             shift and go to state 23
    return          shift and go to state 25
    IDENTIFIER      shift and go to state 18
    nil             shift and go to state 39
    self            shift and go to state 40
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61

    keydef                         shift and go to state 9
    multstmt                       shift and go to state 182
    stmt                           shift and go to state 183
    empty                          shift and go to state 184
    primary                        shift and go to state 14
    expr                           shift and go to state 16
    expr1                          shift and go to state 20
    mlhs                           shift and go to state 24
    expr2                          shift and go to state 26
    arg                            shift and go to state 27
    call                           shift and go to state 28
    term0                          shift and go to state 29
    function                       shift and go to state 30
    term1                          shift and go to state 31
    mlhsitem                       shift and go to state 32
    term2                          shift and go to state 33
    arrayal                        shift and go to state 34
    term3                          shift and go to state 35
    variable                       shift and go to state 36
    term4                          shift and go to state 37
    varname                        shift and go to state 38
    term5                          shift and go to state 41
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56

state 126

    (122) argdecl -> OPEN_BRACKET arglist . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 185


state 127

    (123) arglist -> IDENTIFIER . multarglist
    (125) multarglist -> . COMMA IDENTIFIER multarglist
    (126) multarglist -> . empty
    (154) empty -> .

    COMMA           shift and go to state 187
    CLOSE_BRACKET   reduce using rule 154 (empty -> .)

    multarglist                    shift and go to state 186
    empty                          shift and go to state 188

state 128

    (124) arglist -> empty .

    CLOSE_BRACKET   reduce using rule 124 (arglist -> empty .)


state 129

    (8) stmt -> puts OPEN_BRACKET STRING . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 189


state 130

    (77) primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .

    POWER           reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    MULTIPLY        reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    DIVIDE          reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    MODULO          reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    PLUS            reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    MINUS           reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    LEFT_SHIFT      reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    RIGHT_SHIFT     reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    BIT_AND         reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    BIT_XOR         reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    DOUBLE_EQUALS   reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    TRIPLE_EQUALS   reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    NOT_EQUALS      reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    EQUAL_TILDE     reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    BANG_TILDE      reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    COMPARISON      reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    LESS            reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    LESS_EQUALS     reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    GREATER         reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    GREATER_EQUALS  reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    INCL_RANGE      reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    EXCL_RANGE      reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    LOGICAL_OR      reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    BIT_OR          reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    SEMI_COLON      reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    NEWLINE         reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    puts            reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    print           reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    break           reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    def             reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    if              reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    while           reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    case            reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    for             reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    return          reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    nil             reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    self            reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    GLOBAL          reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    Array           reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    NUMBER          reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    FLOAT           reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    STRING          reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    true            reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    false           reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    $end            reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    then            reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    do              reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    COMMA           reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)
    CLOSE_SQUARE    reduce using rule 77 (primary -> OPEN_BRACKET expr2 CLOSE_BRACKET .)


state 131

    (9) stmt -> print OPEN_BRACKET primary . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 190


state 132

    (75) term13 -> primary POWER term13 .

    MULTIPLY        reduce using rule 75 (term13 -> primary POWER term13 .)
    DIVIDE          reduce using rule 75 (term13 -> primary POWER term13 .)
    MODULO          reduce using rule 75 (term13 -> primary POWER term13 .)
    PLUS            reduce using rule 75 (term13 -> primary POWER term13 .)
    MINUS           reduce using rule 75 (term13 -> primary POWER term13 .)
    LEFT_SHIFT      reduce using rule 75 (term13 -> primary POWER term13 .)
    RIGHT_SHIFT     reduce using rule 75 (term13 -> primary POWER term13 .)
    BIT_AND         reduce using rule 75 (term13 -> primary POWER term13 .)
    BIT_XOR         reduce using rule 75 (term13 -> primary POWER term13 .)
    DOUBLE_EQUALS   reduce using rule 75 (term13 -> primary POWER term13 .)
    TRIPLE_EQUALS   reduce using rule 75 (term13 -> primary POWER term13 .)
    NOT_EQUALS      reduce using rule 75 (term13 -> primary POWER term13 .)
    EQUAL_TILDE     reduce using rule 75 (term13 -> primary POWER term13 .)
    BANG_TILDE      reduce using rule 75 (term13 -> primary POWER term13 .)
    COMPARISON      reduce using rule 75 (term13 -> primary POWER term13 .)
    LESS            reduce using rule 75 (term13 -> primary POWER term13 .)
    LESS_EQUALS     reduce using rule 75 (term13 -> primary POWER term13 .)
    GREATER         reduce using rule 75 (term13 -> primary POWER term13 .)
    GREATER_EQUALS  reduce using rule 75 (term13 -> primary POWER term13 .)
    INCL_RANGE      reduce using rule 75 (term13 -> primary POWER term13 .)
    EXCL_RANGE      reduce using rule 75 (term13 -> primary POWER term13 .)
    LOGICAL_OR      reduce using rule 75 (term13 -> primary POWER term13 .)
    BIT_OR          reduce using rule 75 (term13 -> primary POWER term13 .)
    SEMI_COLON      reduce using rule 75 (term13 -> primary POWER term13 .)
    NEWLINE         reduce using rule 75 (term13 -> primary POWER term13 .)
    puts            reduce using rule 75 (term13 -> primary POWER term13 .)
    print           reduce using rule 75 (term13 -> primary POWER term13 .)
    break           reduce using rule 75 (term13 -> primary POWER term13 .)
    def             reduce using rule 75 (term13 -> primary POWER term13 .)
    if              reduce using rule 75 (term13 -> primary POWER term13 .)
    while           reduce using rule 75 (term13 -> primary POWER term13 .)
    case            reduce using rule 75 (term13 -> primary POWER term13 .)
    for             reduce using rule 75 (term13 -> primary POWER term13 .)
    return          reduce using rule 75 (term13 -> primary POWER term13 .)
    IDENTIFIER      reduce using rule 75 (term13 -> primary POWER term13 .)
    nil             reduce using rule 75 (term13 -> primary POWER term13 .)
    self            reduce using rule 75 (term13 -> primary POWER term13 .)
    GLOBAL          reduce using rule 75 (term13 -> primary POWER term13 .)
    AT_THE_RATE     reduce using rule 75 (term13 -> primary POWER term13 .)
    OPEN_BRACKET    reduce using rule 75 (term13 -> primary POWER term13 .)
    Array           reduce using rule 75 (term13 -> primary POWER term13 .)
    NUMBER          reduce using rule 75 (term13 -> primary POWER term13 .)
    FLOAT           reduce using rule 75 (term13 -> primary POWER term13 .)
    STRING          reduce using rule 75 (term13 -> primary POWER term13 .)
    true            reduce using rule 75 (term13 -> primary POWER term13 .)
    false           reduce using rule 75 (term13 -> primary POWER term13 .)
    $end            reduce using rule 75 (term13 -> primary POWER term13 .)
    CLOSE_BRACKET   reduce using rule 75 (term13 -> primary POWER term13 .)
    then            reduce using rule 75 (term13 -> primary POWER term13 .)
    do              reduce using rule 75 (term13 -> primary POWER term13 .)
    COMMA           reduce using rule 75 (term13 -> primary POWER term13 .)


state 133

    (30) function -> IDENTIFIER OPEN_BRACKET callargs . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 191


state 134

    (31) function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .

    SEMI_COLON      reduce using rule 31 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    NEWLINE         reduce using rule 31 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    puts            reduce using rule 31 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    print           reduce using rule 31 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    break           reduce using rule 31 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    def             reduce using rule 31 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    if              reduce using rule 31 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    while           reduce using rule 31 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    case            reduce using rule 31 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    for             reduce using rule 31 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    return          reduce using rule 31 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 31 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    nil             reduce using rule 31 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    self            reduce using rule 31 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    GLOBAL          reduce using rule 31 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 31 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    MINUS           reduce using rule 31 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    PLUS            reduce using rule 31 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 31 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    Array           reduce using rule 31 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    NUMBER          reduce using rule 31 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    FLOAT           reduce using rule 31 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    STRING          reduce using rule 31 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    true            reduce using rule 31 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    false           reduce using rule 31 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    $end            reduce using rule 31 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 31 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    then            reduce using rule 31 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    do              reduce using rule 31 (function -> IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)


state 135

    (114) callargs -> callarglist .

    CLOSE_BRACKET   reduce using rule 114 (callargs -> callarglist .)


state 136

    (115) callarglist -> primary . callmultarglist
    (117) callmultarglist -> . COMMA primary callmultarglist
    (118) callmultarglist -> . empty
    (154) empty -> .

    COMMA           shift and go to state 193
    CLOSE_BRACKET   reduce using rule 154 (empty -> .)

    callmultarglist                shift and go to state 192
    empty                          shift and go to state 194

state 137

    (116) callarglist -> empty .

    CLOSE_BRACKET   reduce using rule 116 (callarglist -> empty .)


state 138

    (16) expr -> if expr1 pthen . M_1 multstmt else newline M_1 multstmt end M_1
    (17) expr -> if expr1 pthen . M_1 multstmt M_1 multelsif end M_1
    (18) expr -> if expr1 pthen . M_1 multstmt end M_1
    (23) M_1 -> . empty
    (154) empty -> .

    puts            reduce using rule 154 (empty -> .)
    print           reduce using rule 154 (empty -> .)
    break           reduce using rule 154 (empty -> .)
    def             reduce using rule 154 (empty -> .)
    if              reduce using rule 154 (empty -> .)
    while           reduce using rule 154 (empty -> .)
    case            reduce using rule 154 (empty -> .)
    for             reduce using rule 154 (empty -> .)
    return          reduce using rule 154 (empty -> .)
    IDENTIFIER      reduce using rule 154 (empty -> .)
    nil             reduce using rule 154 (empty -> .)
    self            reduce using rule 154 (empty -> .)
    GLOBAL          reduce using rule 154 (empty -> .)
    AT_THE_RATE     reduce using rule 154 (empty -> .)
    MINUS           reduce using rule 154 (empty -> .)
    PLUS            reduce using rule 154 (empty -> .)
    OPEN_BRACKET    reduce using rule 154 (empty -> .)
    Array           reduce using rule 154 (empty -> .)
    NUMBER          reduce using rule 154 (empty -> .)
    FLOAT           reduce using rule 154 (empty -> .)
    STRING          reduce using rule 154 (empty -> .)
    true            reduce using rule 154 (empty -> .)
    false           reduce using rule 154 (empty -> .)
    else            reduce using rule 154 (empty -> .)
    end             reduce using rule 154 (empty -> .)
    elsif           reduce using rule 154 (empty -> .)

    M_1                            shift and go to state 195
    empty                          shift and go to state 74

state 139

    (130) pthen -> newline .
    (132) pthen -> newline . then

    puts            reduce using rule 130 (pthen -> newline .)
    print           reduce using rule 130 (pthen -> newline .)
    break           reduce using rule 130 (pthen -> newline .)
    def             reduce using rule 130 (pthen -> newline .)
    if              reduce using rule 130 (pthen -> newline .)
    while           reduce using rule 130 (pthen -> newline .)
    case            reduce using rule 130 (pthen -> newline .)
    for             reduce using rule 130 (pthen -> newline .)
    return          reduce using rule 130 (pthen -> newline .)
    IDENTIFIER      reduce using rule 130 (pthen -> newline .)
    nil             reduce using rule 130 (pthen -> newline .)
    self            reduce using rule 130 (pthen -> newline .)
    GLOBAL          reduce using rule 130 (pthen -> newline .)
    AT_THE_RATE     reduce using rule 130 (pthen -> newline .)
    MINUS           reduce using rule 130 (pthen -> newline .)
    PLUS            reduce using rule 130 (pthen -> newline .)
    OPEN_BRACKET    reduce using rule 130 (pthen -> newline .)
    Array           reduce using rule 130 (pthen -> newline .)
    NUMBER          reduce using rule 130 (pthen -> newline .)
    FLOAT           reduce using rule 130 (pthen -> newline .)
    STRING          reduce using rule 130 (pthen -> newline .)
    true            reduce using rule 130 (pthen -> newline .)
    false           reduce using rule 130 (pthen -> newline .)
    else            reduce using rule 130 (pthen -> newline .)
    end             reduce using rule 130 (pthen -> newline .)
    elsif           reduce using rule 130 (pthen -> newline .)
    when            reduce using rule 130 (pthen -> newline .)
    then            shift and go to state 196


state 140

    (131) pthen -> then .

    puts            reduce using rule 131 (pthen -> then .)
    print           reduce using rule 131 (pthen -> then .)
    break           reduce using rule 131 (pthen -> then .)
    def             reduce using rule 131 (pthen -> then .)
    if              reduce using rule 131 (pthen -> then .)
    while           reduce using rule 131 (pthen -> then .)
    case            reduce using rule 131 (pthen -> then .)
    for             reduce using rule 131 (pthen -> then .)
    return          reduce using rule 131 (pthen -> then .)
    IDENTIFIER      reduce using rule 131 (pthen -> then .)
    nil             reduce using rule 131 (pthen -> then .)
    self            reduce using rule 131 (pthen -> then .)
    GLOBAL          reduce using rule 131 (pthen -> then .)
    AT_THE_RATE     reduce using rule 131 (pthen -> then .)
    MINUS           reduce using rule 131 (pthen -> then .)
    PLUS            reduce using rule 131 (pthen -> then .)
    OPEN_BRACKET    reduce using rule 131 (pthen -> then .)
    Array           reduce using rule 131 (pthen -> then .)
    NUMBER          reduce using rule 131 (pthen -> then .)
    FLOAT           reduce using rule 131 (pthen -> then .)
    STRING          reduce using rule 131 (pthen -> then .)
    true            reduce using rule 131 (pthen -> then .)
    false           reduce using rule 131 (pthen -> then .)
    else            reduce using rule 131 (pthen -> then .)
    end             reduce using rule 131 (pthen -> then .)
    elsif           reduce using rule 131 (pthen -> then .)
    when            reduce using rule 131 (pthen -> then .)


state 141

    (19) expr -> while M_1 expr1 . pdo M_1 multstmt end M_1
    (133) pdo -> . newline
    (134) pdo -> . do
    (135) pdo -> . newline do
    (152) newline -> . SEMI_COLON
    (153) newline -> . NEWLINE

    do              shift and go to state 199
    SEMI_COLON      shift and go to state 6
    NEWLINE         shift and go to state 7

    pdo                            shift and go to state 197
    newline                        shift and go to state 198

state 142

    (20) expr -> case expr1 M_1 . newline multcase end M_1
    (152) newline -> . SEMI_COLON
    (153) newline -> . NEWLINE

    SEMI_COLON      shift and go to state 6
    NEWLINE         shift and go to state 7

    newline                        shift and go to state 200

state 143

    (21) expr -> for M_1 mlhs . in expr1 pdo M_1 multstmt end M_1

    in              shift and go to state 201


state 144

    (101) mlhsitem -> IDENTIFIER .
    (151) varname -> IDENTIFIER .

    in              reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    EQUALS          reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    MODULO_EQUALS   reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    DIVIDE_EQUALS   reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    MINUS_EQUALS    reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    PLUS_EQUALS     reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    OR_EQUALS       reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    AND_EQUALS      reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    XOR_EQUALS      reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    RIGHT_SHIFT_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    LEFT_SHIFT_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    MULTIPLY_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    LOGICAL_AND_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    LOGICAL_OR_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    POWER_EQUALS    reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    OPEN_SQUARE     reduce using rule 151 (varname -> IDENTIFIER .)
    POWER           reduce using rule 151 (varname -> IDENTIFIER .)
    MULTIPLY        reduce using rule 151 (varname -> IDENTIFIER .)
    DIVIDE          reduce using rule 151 (varname -> IDENTIFIER .)
    MODULO          reduce using rule 151 (varname -> IDENTIFIER .)
    PLUS            reduce using rule 151 (varname -> IDENTIFIER .)
    MINUS           reduce using rule 151 (varname -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 151 (varname -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 151 (varname -> IDENTIFIER .)
    BIT_AND         reduce using rule 151 (varname -> IDENTIFIER .)
    BIT_XOR         reduce using rule 151 (varname -> IDENTIFIER .)
    DOUBLE_EQUALS   reduce using rule 151 (varname -> IDENTIFIER .)
    TRIPLE_EQUALS   reduce using rule 151 (varname -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 151 (varname -> IDENTIFIER .)
    EQUAL_TILDE     reduce using rule 151 (varname -> IDENTIFIER .)
    BANG_TILDE      reduce using rule 151 (varname -> IDENTIFIER .)
    COMPARISON      reduce using rule 151 (varname -> IDENTIFIER .)
    LESS            reduce using rule 151 (varname -> IDENTIFIER .)
    LESS_EQUALS     reduce using rule 151 (varname -> IDENTIFIER .)
    GREATER         reduce using rule 151 (varname -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 151 (varname -> IDENTIFIER .)
    INCL_RANGE      reduce using rule 151 (varname -> IDENTIFIER .)
    EXCL_RANGE      reduce using rule 151 (varname -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 151 (varname -> IDENTIFIER .)
    BIT_OR          reduce using rule 151 (varname -> IDENTIFIER .)
    SEMI_COLON      reduce using rule 151 (varname -> IDENTIFIER .)
    NEWLINE         reduce using rule 151 (varname -> IDENTIFIER .)
    puts            reduce using rule 151 (varname -> IDENTIFIER .)
    print           reduce using rule 151 (varname -> IDENTIFIER .)
    break           reduce using rule 151 (varname -> IDENTIFIER .)
    def             reduce using rule 151 (varname -> IDENTIFIER .)
    if              reduce using rule 151 (varname -> IDENTIFIER .)
    while           reduce using rule 151 (varname -> IDENTIFIER .)
    case            reduce using rule 151 (varname -> IDENTIFIER .)
    for             reduce using rule 151 (varname -> IDENTIFIER .)
    return          reduce using rule 151 (varname -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 151 (varname -> IDENTIFIER .)
    nil             reduce using rule 151 (varname -> IDENTIFIER .)
    self            reduce using rule 151 (varname -> IDENTIFIER .)
    GLOBAL          reduce using rule 151 (varname -> IDENTIFIER .)
    AT_THE_RATE     reduce using rule 151 (varname -> IDENTIFIER .)
    OPEN_BRACKET    reduce using rule 151 (varname -> IDENTIFIER .)
    Array           reduce using rule 151 (varname -> IDENTIFIER .)
    NUMBER          reduce using rule 151 (varname -> IDENTIFIER .)
    FLOAT           reduce using rule 151 (varname -> IDENTIFIER .)
    STRING          reduce using rule 151 (varname -> IDENTIFIER .)
    true            reduce using rule 151 (varname -> IDENTIFIER .)
    false           reduce using rule 151 (varname -> IDENTIFIER .)
    $end            reduce using rule 151 (varname -> IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 151 (varname -> IDENTIFIER .)
    then            reduce using rule 151 (varname -> IDENTIFIER .)
    do              reduce using rule 151 (varname -> IDENTIFIER .)
    COMMA           reduce using rule 151 (varname -> IDENTIFIER .)


state 145

    (85) arrayal -> variable . OPEN_SQUARE array_args CLOSE_SQUARE

    OPEN_SQUARE     shift and go to state 202


state 146

    (127) variable -> varname .

    OPEN_SQUARE     reduce using rule 127 (variable -> varname .)


state 147

    (34) term0 -> mlhs EQUALS IDENTIFIER . OPEN_BRACKET CLOSE_BRACKET
    (35) term0 -> mlhs EQUALS IDENTIFIER . OPEN_BRACKET callargs CLOSE_BRACKET
    (101) mlhsitem -> IDENTIFIER .
    (151) varname -> IDENTIFIER .

  ! shift/reduce conflict for OPEN_BRACKET resolved as shift
    OPEN_BRACKET    shift and go to state 203
    EQUALS          reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    MODULO_EQUALS   reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    DIVIDE_EQUALS   reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    MINUS_EQUALS    reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    PLUS_EQUALS     reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    OR_EQUALS       reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    AND_EQUALS      reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    XOR_EQUALS      reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    RIGHT_SHIFT_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    LEFT_SHIFT_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    MULTIPLY_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    LOGICAL_AND_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    LOGICAL_OR_EQUALS reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    POWER_EQUALS    reduce using rule 101 (mlhsitem -> IDENTIFIER .)
    OPEN_SQUARE     reduce using rule 151 (varname -> IDENTIFIER .)
    POWER           reduce using rule 151 (varname -> IDENTIFIER .)
    MULTIPLY        reduce using rule 151 (varname -> IDENTIFIER .)
    DIVIDE          reduce using rule 151 (varname -> IDENTIFIER .)
    MODULO          reduce using rule 151 (varname -> IDENTIFIER .)
    PLUS            reduce using rule 151 (varname -> IDENTIFIER .)
    MINUS           reduce using rule 151 (varname -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 151 (varname -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 151 (varname -> IDENTIFIER .)
    BIT_AND         reduce using rule 151 (varname -> IDENTIFIER .)
    BIT_XOR         reduce using rule 151 (varname -> IDENTIFIER .)
    DOUBLE_EQUALS   reduce using rule 151 (varname -> IDENTIFIER .)
    TRIPLE_EQUALS   reduce using rule 151 (varname -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 151 (varname -> IDENTIFIER .)
    EQUAL_TILDE     reduce using rule 151 (varname -> IDENTIFIER .)
    BANG_TILDE      reduce using rule 151 (varname -> IDENTIFIER .)
    COMPARISON      reduce using rule 151 (varname -> IDENTIFIER .)
    LESS            reduce using rule 151 (varname -> IDENTIFIER .)
    LESS_EQUALS     reduce using rule 151 (varname -> IDENTIFIER .)
    GREATER         reduce using rule 151 (varname -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 151 (varname -> IDENTIFIER .)
    INCL_RANGE      reduce using rule 151 (varname -> IDENTIFIER .)
    EXCL_RANGE      reduce using rule 151 (varname -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 151 (varname -> IDENTIFIER .)
    BIT_OR          reduce using rule 151 (varname -> IDENTIFIER .)
    SEMI_COLON      reduce using rule 151 (varname -> IDENTIFIER .)
    NEWLINE         reduce using rule 151 (varname -> IDENTIFIER .)
    puts            reduce using rule 151 (varname -> IDENTIFIER .)
    print           reduce using rule 151 (varname -> IDENTIFIER .)
    break           reduce using rule 151 (varname -> IDENTIFIER .)
    def             reduce using rule 151 (varname -> IDENTIFIER .)
    if              reduce using rule 151 (varname -> IDENTIFIER .)
    while           reduce using rule 151 (varname -> IDENTIFIER .)
    case            reduce using rule 151 (varname -> IDENTIFIER .)
    for             reduce using rule 151 (varname -> IDENTIFIER .)
    return          reduce using rule 151 (varname -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 151 (varname -> IDENTIFIER .)
    nil             reduce using rule 151 (varname -> IDENTIFIER .)
    self            reduce using rule 151 (varname -> IDENTIFIER .)
    GLOBAL          reduce using rule 151 (varname -> IDENTIFIER .)
    AT_THE_RATE     reduce using rule 151 (varname -> IDENTIFIER .)
    Array           reduce using rule 151 (varname -> IDENTIFIER .)
    NUMBER          reduce using rule 151 (varname -> IDENTIFIER .)
    FLOAT           reduce using rule 151 (varname -> IDENTIFIER .)
    STRING          reduce using rule 151 (varname -> IDENTIFIER .)
    true            reduce using rule 151 (varname -> IDENTIFIER .)
    false           reduce using rule 151 (varname -> IDENTIFIER .)
    $end            reduce using rule 151 (varname -> IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 151 (varname -> IDENTIFIER .)
    then            reduce using rule 151 (varname -> IDENTIFIER .)
    do              reduce using rule 151 (varname -> IDENTIFIER .)
    COMMA           reduce using rule 151 (varname -> IDENTIFIER .)

  ! OPEN_BRACKET    [ reduce using rule 151 (varname -> IDENTIFIER .) ]


state 148

    (37) term1 -> mlhs EQUALS mrhs .

    BIT_OR          reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    SEMI_COLON      reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    NEWLINE         reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    puts            reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    print           reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    break           reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    def             reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    if              reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    while           reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    case            reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    for             reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    return          reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    IDENTIFIER      reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    nil             reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    self            reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    GLOBAL          reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    AT_THE_RATE     reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    MINUS           reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    PLUS            reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    OPEN_BRACKET    reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    Array           reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    NUMBER          reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    FLOAT           reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    STRING          reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    true            reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    false           reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    $end            reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    CLOSE_BRACKET   reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    then            reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    do              reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)
    COMMA           reduce using rule 37 (term1 -> mlhs EQUALS mrhs .)


state 149

    (111) mrhs -> term2 .
    (39) term1 -> term2 .

  ! reduce/reduce conflict for BIT_OR resolved using rule 39 (term1 -> term2 .)
  ! reduce/reduce conflict for COMMA resolved using rule 39 (term1 -> term2 .)
    SEMI_COLON      reduce using rule 111 (mrhs -> term2 .)
    NEWLINE         reduce using rule 111 (mrhs -> term2 .)
    puts            reduce using rule 111 (mrhs -> term2 .)
    print           reduce using rule 111 (mrhs -> term2 .)
    break           reduce using rule 111 (mrhs -> term2 .)
    def             reduce using rule 111 (mrhs -> term2 .)
    if              reduce using rule 111 (mrhs -> term2 .)
    while           reduce using rule 111 (mrhs -> term2 .)
    case            reduce using rule 111 (mrhs -> term2 .)
    for             reduce using rule 111 (mrhs -> term2 .)
    return          reduce using rule 111 (mrhs -> term2 .)
    IDENTIFIER      reduce using rule 111 (mrhs -> term2 .)
    nil             reduce using rule 111 (mrhs -> term2 .)
    self            reduce using rule 111 (mrhs -> term2 .)
    GLOBAL          reduce using rule 111 (mrhs -> term2 .)
    AT_THE_RATE     reduce using rule 111 (mrhs -> term2 .)
    MINUS           reduce using rule 111 (mrhs -> term2 .)
    PLUS            reduce using rule 111 (mrhs -> term2 .)
    OPEN_BRACKET    reduce using rule 111 (mrhs -> term2 .)
    Array           reduce using rule 111 (mrhs -> term2 .)
    NUMBER          reduce using rule 111 (mrhs -> term2 .)
    FLOAT           reduce using rule 111 (mrhs -> term2 .)
    STRING          reduce using rule 111 (mrhs -> term2 .)
    true            reduce using rule 111 (mrhs -> term2 .)
    false           reduce using rule 111 (mrhs -> term2 .)
    $end            reduce using rule 111 (mrhs -> term2 .)
    CLOSE_BRACKET   reduce using rule 111 (mrhs -> term2 .)
    then            reduce using rule 111 (mrhs -> term2 .)
    do              reduce using rule 111 (mrhs -> term2 .)
    BIT_OR          reduce using rule 39 (term1 -> term2 .)
    COMMA           reduce using rule 39 (term1 -> term2 .)

  ! BIT_OR          [ reduce using rule 111 (mrhs -> term2 .) ]
  ! COMMA           [ reduce using rule 111 (mrhs -> term2 .) ]


state 150

    (112) mrhs -> args . COMMA MULTIPLY arg

    COMMA           shift and go to state 204


state 151

    (113) mrhs -> MULTIPLY . arg
    (32) arg -> . arg BIT_OR term0
    (33) arg -> . term0
    (34) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (36) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (37) term1 -> . mlhs EQUALS mrhs
    (38) term1 -> . mlhs opasgn mrhs
    (39) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arrayal
    (40) term2 -> . term3 INCL_RANGE term3
    (41) term2 -> . term3 EXCL_RANGE term3
    (42) term2 -> . term3
    (85) arrayal -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (43) term3 -> . term3 LOGICAL_OR term4
    (44) term3 -> . term4
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self
    (45) term4 -> . term5 DOUBLE_EQUALS term5
    (46) term4 -> . term5 TRIPLE_EQUALS term5
    (47) term4 -> . term5 NOT_EQUALS term5
    (48) term4 -> . term5 EQUAL_TILDE term5
    (49) term4 -> . term5 BANG_TILDE term5
    (50) term4 -> . term5 COMPARISON term5
    (51) term4 -> . term5
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false

    IDENTIFIER      shift and go to state 144
    nil             shift and go to state 39
    self            shift and go to state 40
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61

    arg                            shift and go to state 205
    term0                          shift and go to state 29
    mlhs                           shift and go to state 24
    term1                          shift and go to state 31
    mlhsitem                       shift and go to state 32
    term2                          shift and go to state 33
    arrayal                        shift and go to state 34
    term3                          shift and go to state 35
    variable                       shift and go to state 36
    term4                          shift and go to state 37
    varname                        shift and go to state 38
    term5                          shift and go to state 41
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56

state 152

    (119) args -> arg . multargs
    (32) arg -> arg . BIT_OR term0
    (120) multargs -> . COMMA arg multargs
    (121) multargs -> . empty
    (154) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    BIT_OR          shift and go to state 93
    COMMA           shift and go to state 207

  ! COMMA           [ reduce using rule 154 (empty -> .) ]

    multargs                       shift and go to state 206
    empty                          shift and go to state 208

state 153

    (38) term1 -> mlhs opasgn mrhs .

    BIT_OR          reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    SEMI_COLON      reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    NEWLINE         reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    puts            reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    print           reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    break           reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    def             reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    if              reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    while           reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    case            reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    for             reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    return          reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    IDENTIFIER      reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    nil             reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    self            reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    GLOBAL          reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    AT_THE_RATE     reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    MINUS           reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    PLUS            reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    OPEN_BRACKET    reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    Array           reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    NUMBER          reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    FLOAT           reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    STRING          reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    true            reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    false           reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    $end            reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    CLOSE_BRACKET   reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    then            reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    do              reduce using rule 38 (term1 -> mlhs opasgn mrhs .)
    COMMA           reduce using rule 38 (term1 -> mlhs opasgn mrhs .)


state 154

    (32) arg -> arg BIT_OR term0 .

    BIT_OR          reduce using rule 32 (arg -> arg BIT_OR term0 .)
    SEMI_COLON      reduce using rule 32 (arg -> arg BIT_OR term0 .)
    NEWLINE         reduce using rule 32 (arg -> arg BIT_OR term0 .)
    puts            reduce using rule 32 (arg -> arg BIT_OR term0 .)
    print           reduce using rule 32 (arg -> arg BIT_OR term0 .)
    break           reduce using rule 32 (arg -> arg BIT_OR term0 .)
    def             reduce using rule 32 (arg -> arg BIT_OR term0 .)
    if              reduce using rule 32 (arg -> arg BIT_OR term0 .)
    while           reduce using rule 32 (arg -> arg BIT_OR term0 .)
    case            reduce using rule 32 (arg -> arg BIT_OR term0 .)
    for             reduce using rule 32 (arg -> arg BIT_OR term0 .)
    return          reduce using rule 32 (arg -> arg BIT_OR term0 .)
    IDENTIFIER      reduce using rule 32 (arg -> arg BIT_OR term0 .)
    nil             reduce using rule 32 (arg -> arg BIT_OR term0 .)
    self            reduce using rule 32 (arg -> arg BIT_OR term0 .)
    GLOBAL          reduce using rule 32 (arg -> arg BIT_OR term0 .)
    AT_THE_RATE     reduce using rule 32 (arg -> arg BIT_OR term0 .)
    MINUS           reduce using rule 32 (arg -> arg BIT_OR term0 .)
    PLUS            reduce using rule 32 (arg -> arg BIT_OR term0 .)
    OPEN_BRACKET    reduce using rule 32 (arg -> arg BIT_OR term0 .)
    Array           reduce using rule 32 (arg -> arg BIT_OR term0 .)
    NUMBER          reduce using rule 32 (arg -> arg BIT_OR term0 .)
    FLOAT           reduce using rule 32 (arg -> arg BIT_OR term0 .)
    STRING          reduce using rule 32 (arg -> arg BIT_OR term0 .)
    true            reduce using rule 32 (arg -> arg BIT_OR term0 .)
    false           reduce using rule 32 (arg -> arg BIT_OR term0 .)
    $end            reduce using rule 32 (arg -> arg BIT_OR term0 .)
    CLOSE_BRACKET   reduce using rule 32 (arg -> arg BIT_OR term0 .)
    then            reduce using rule 32 (arg -> arg BIT_OR term0 .)
    do              reduce using rule 32 (arg -> arg BIT_OR term0 .)
    COMMA           reduce using rule 32 (arg -> arg BIT_OR term0 .)


state 155

    (40) term2 -> term3 INCL_RANGE term3 .
    (43) term3 -> term3 . LOGICAL_OR term4

    BIT_OR          reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    SEMI_COLON      reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    NEWLINE         reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    puts            reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    print           reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    break           reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    def             reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    if              reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    while           reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    case            reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    for             reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    return          reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    IDENTIFIER      reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    nil             reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    self            reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    GLOBAL          reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    AT_THE_RATE     reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    MINUS           reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    PLUS            reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    OPEN_BRACKET    reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    Array           reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    NUMBER          reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    FLOAT           reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    STRING          reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    true            reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    false           reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    $end            reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    CLOSE_BRACKET   reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    then            reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    do              reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    COMMA           reduce using rule 40 (term2 -> term3 INCL_RANGE term3 .)
    LOGICAL_OR      shift and go to state 96


state 156

    (41) term2 -> term3 EXCL_RANGE term3 .
    (43) term3 -> term3 . LOGICAL_OR term4

    BIT_OR          reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    SEMI_COLON      reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    NEWLINE         reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    puts            reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    print           reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    break           reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    def             reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    if              reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    while           reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    case            reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    for             reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    return          reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    IDENTIFIER      reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    nil             reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    self            reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    GLOBAL          reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    AT_THE_RATE     reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    MINUS           reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    PLUS            reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    OPEN_BRACKET    reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    Array           reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    NUMBER          reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    FLOAT           reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    STRING          reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    true            reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    false           reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    $end            reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    CLOSE_BRACKET   reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    then            reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    do              reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    COMMA           reduce using rule 41 (term2 -> term3 EXCL_RANGE term3 .)
    LOGICAL_OR      shift and go to state 96


state 157

    (43) term3 -> term3 LOGICAL_OR term4 .

    INCL_RANGE      reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    EXCL_RANGE      reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    LOGICAL_OR      reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    BIT_OR          reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    SEMI_COLON      reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    NEWLINE         reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    puts            reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    print           reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    break           reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    def             reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    if              reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    while           reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    case            reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    for             reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    return          reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    IDENTIFIER      reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    nil             reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    self            reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    GLOBAL          reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    AT_THE_RATE     reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    MINUS           reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    PLUS            reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    OPEN_BRACKET    reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    Array           reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    NUMBER          reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    FLOAT           reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    STRING          reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    true            reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    false           reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    $end            reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    CLOSE_BRACKET   reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    then            reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    do              reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)
    COMMA           reduce using rule 43 (term3 -> term3 LOGICAL_OR term4 .)


state 158

    (85) arrayal -> variable OPEN_SQUARE array_args . CLOSE_SQUARE
    (86) arraya -> variable OPEN_SQUARE array_args . CLOSE_SQUARE

    CLOSE_SQUARE    shift and go to state 209


state 159

    (87) array_args -> primary . COMMA array_args
    (88) array_args -> primary .

    COMMA           shift and go to state 210
    CLOSE_SQUARE    reduce using rule 88 (array_args -> primary .)


state 160

    (45) term4 -> term5 DOUBLE_EQUALS term5 .
    (52) term5 -> term5 . LESS term6
    (53) term5 -> term5 . LESS_EQUALS term6
    (54) term5 -> term5 . GREATER term6
    (55) term5 -> term5 . GREATER_EQUALS term6

    INCL_RANGE      reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    EXCL_RANGE      reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    LOGICAL_OR      reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    BIT_OR          reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    SEMI_COLON      reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    NEWLINE         reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    puts            reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    print           reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    break           reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    def             reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    if              reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    while           reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    case            reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    for             reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    return          reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    IDENTIFIER      reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    nil             reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    self            reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    GLOBAL          reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    AT_THE_RATE     reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    MINUS           reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    PLUS            reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    OPEN_BRACKET    reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    Array           reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    NUMBER          reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    FLOAT           reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    STRING          reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    true            reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    false           reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    $end            reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    CLOSE_BRACKET   reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    then            reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    do              reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    COMMA           reduce using rule 45 (term4 -> term5 DOUBLE_EQUALS term5 .)
    LESS            shift and go to state 104
    LESS_EQUALS     shift and go to state 105
    GREATER         shift and go to state 106
    GREATER_EQUALS  shift and go to state 107


state 161

    (46) term4 -> term5 TRIPLE_EQUALS term5 .
    (52) term5 -> term5 . LESS term6
    (53) term5 -> term5 . LESS_EQUALS term6
    (54) term5 -> term5 . GREATER term6
    (55) term5 -> term5 . GREATER_EQUALS term6

    INCL_RANGE      reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    EXCL_RANGE      reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    LOGICAL_OR      reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    BIT_OR          reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    SEMI_COLON      reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    NEWLINE         reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    puts            reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    print           reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    break           reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    def             reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    if              reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    while           reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    case            reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    for             reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    return          reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    IDENTIFIER      reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    nil             reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    self            reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    GLOBAL          reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    AT_THE_RATE     reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    MINUS           reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    PLUS            reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    OPEN_BRACKET    reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    Array           reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    NUMBER          reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    FLOAT           reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    STRING          reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    true            reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    false           reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    $end            reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    CLOSE_BRACKET   reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    then            reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    do              reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    COMMA           reduce using rule 46 (term4 -> term5 TRIPLE_EQUALS term5 .)
    LESS            shift and go to state 104
    LESS_EQUALS     shift and go to state 105
    GREATER         shift and go to state 106
    GREATER_EQUALS  shift and go to state 107


state 162

    (47) term4 -> term5 NOT_EQUALS term5 .
    (52) term5 -> term5 . LESS term6
    (53) term5 -> term5 . LESS_EQUALS term6
    (54) term5 -> term5 . GREATER term6
    (55) term5 -> term5 . GREATER_EQUALS term6

    INCL_RANGE      reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    EXCL_RANGE      reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    LOGICAL_OR      reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    BIT_OR          reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    SEMI_COLON      reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    NEWLINE         reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    puts            reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    print           reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    break           reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    def             reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    if              reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    while           reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    case            reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    for             reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    return          reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    IDENTIFIER      reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    nil             reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    self            reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    GLOBAL          reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    AT_THE_RATE     reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    MINUS           reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    PLUS            reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    OPEN_BRACKET    reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    Array           reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    NUMBER          reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    FLOAT           reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    STRING          reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    true            reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    false           reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    $end            reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    CLOSE_BRACKET   reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    then            reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    do              reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    COMMA           reduce using rule 47 (term4 -> term5 NOT_EQUALS term5 .)
    LESS            shift and go to state 104
    LESS_EQUALS     shift and go to state 105
    GREATER         shift and go to state 106
    GREATER_EQUALS  shift and go to state 107


state 163

    (48) term4 -> term5 EQUAL_TILDE term5 .
    (52) term5 -> term5 . LESS term6
    (53) term5 -> term5 . LESS_EQUALS term6
    (54) term5 -> term5 . GREATER term6
    (55) term5 -> term5 . GREATER_EQUALS term6

    INCL_RANGE      reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    EXCL_RANGE      reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    LOGICAL_OR      reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    BIT_OR          reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    SEMI_COLON      reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    NEWLINE         reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    puts            reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    print           reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    break           reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    def             reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    if              reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    while           reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    case            reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    for             reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    return          reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    IDENTIFIER      reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    nil             reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    self            reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    GLOBAL          reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    AT_THE_RATE     reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    MINUS           reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    PLUS            reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    OPEN_BRACKET    reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    Array           reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    NUMBER          reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    FLOAT           reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    STRING          reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    true            reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    false           reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    $end            reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    CLOSE_BRACKET   reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    then            reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    do              reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    COMMA           reduce using rule 48 (term4 -> term5 EQUAL_TILDE term5 .)
    LESS            shift and go to state 104
    LESS_EQUALS     shift and go to state 105
    GREATER         shift and go to state 106
    GREATER_EQUALS  shift and go to state 107


state 164

    (49) term4 -> term5 BANG_TILDE term5 .
    (52) term5 -> term5 . LESS term6
    (53) term5 -> term5 . LESS_EQUALS term6
    (54) term5 -> term5 . GREATER term6
    (55) term5 -> term5 . GREATER_EQUALS term6

    INCL_RANGE      reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    EXCL_RANGE      reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    LOGICAL_OR      reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    BIT_OR          reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    SEMI_COLON      reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    NEWLINE         reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    puts            reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    print           reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    break           reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    def             reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    if              reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    while           reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    case            reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    for             reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    return          reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    IDENTIFIER      reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    nil             reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    self            reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    GLOBAL          reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    AT_THE_RATE     reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    MINUS           reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    PLUS            reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    OPEN_BRACKET    reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    Array           reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    NUMBER          reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    FLOAT           reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    STRING          reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    true            reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    false           reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    $end            reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    CLOSE_BRACKET   reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    then            reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    do              reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    COMMA           reduce using rule 49 (term4 -> term5 BANG_TILDE term5 .)
    LESS            shift and go to state 104
    LESS_EQUALS     shift and go to state 105
    GREATER         shift and go to state 106
    GREATER_EQUALS  shift and go to state 107


state 165

    (50) term4 -> term5 COMPARISON term5 .
    (52) term5 -> term5 . LESS term6
    (53) term5 -> term5 . LESS_EQUALS term6
    (54) term5 -> term5 . GREATER term6
    (55) term5 -> term5 . GREATER_EQUALS term6

    INCL_RANGE      reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    EXCL_RANGE      reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    LOGICAL_OR      reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    BIT_OR          reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    SEMI_COLON      reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    NEWLINE         reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    puts            reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    print           reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    break           reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    def             reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    if              reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    while           reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    case            reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    for             reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    return          reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    IDENTIFIER      reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    nil             reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    self            reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    GLOBAL          reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    AT_THE_RATE     reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    MINUS           reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    PLUS            reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    OPEN_BRACKET    reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    Array           reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    NUMBER          reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    FLOAT           reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    STRING          reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    true            reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    false           reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    $end            reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    CLOSE_BRACKET   reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    then            reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    do              reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    COMMA           reduce using rule 50 (term4 -> term5 COMPARISON term5 .)
    LESS            shift and go to state 104
    LESS_EQUALS     shift and go to state 105
    GREATER         shift and go to state 106
    GREATER_EQUALS  shift and go to state 107


state 166

    (52) term5 -> term5 LESS term6 .
    (57) term6 -> term6 . BIT_XOR term7

    DOUBLE_EQUALS   reduce using rule 52 (term5 -> term5 LESS term6 .)
    TRIPLE_EQUALS   reduce using rule 52 (term5 -> term5 LESS term6 .)
    NOT_EQUALS      reduce using rule 52 (term5 -> term5 LESS term6 .)
    EQUAL_TILDE     reduce using rule 52 (term5 -> term5 LESS term6 .)
    BANG_TILDE      reduce using rule 52 (term5 -> term5 LESS term6 .)
    COMPARISON      reduce using rule 52 (term5 -> term5 LESS term6 .)
    LESS            reduce using rule 52 (term5 -> term5 LESS term6 .)
    LESS_EQUALS     reduce using rule 52 (term5 -> term5 LESS term6 .)
    GREATER         reduce using rule 52 (term5 -> term5 LESS term6 .)
    GREATER_EQUALS  reduce using rule 52 (term5 -> term5 LESS term6 .)
    INCL_RANGE      reduce using rule 52 (term5 -> term5 LESS term6 .)
    EXCL_RANGE      reduce using rule 52 (term5 -> term5 LESS term6 .)
    LOGICAL_OR      reduce using rule 52 (term5 -> term5 LESS term6 .)
    BIT_OR          reduce using rule 52 (term5 -> term5 LESS term6 .)
    SEMI_COLON      reduce using rule 52 (term5 -> term5 LESS term6 .)
    NEWLINE         reduce using rule 52 (term5 -> term5 LESS term6 .)
    puts            reduce using rule 52 (term5 -> term5 LESS term6 .)
    print           reduce using rule 52 (term5 -> term5 LESS term6 .)
    break           reduce using rule 52 (term5 -> term5 LESS term6 .)
    def             reduce using rule 52 (term5 -> term5 LESS term6 .)
    if              reduce using rule 52 (term5 -> term5 LESS term6 .)
    while           reduce using rule 52 (term5 -> term5 LESS term6 .)
    case            reduce using rule 52 (term5 -> term5 LESS term6 .)
    for             reduce using rule 52 (term5 -> term5 LESS term6 .)
    return          reduce using rule 52 (term5 -> term5 LESS term6 .)
    IDENTIFIER      reduce using rule 52 (term5 -> term5 LESS term6 .)
    nil             reduce using rule 52 (term5 -> term5 LESS term6 .)
    self            reduce using rule 52 (term5 -> term5 LESS term6 .)
    GLOBAL          reduce using rule 52 (term5 -> term5 LESS term6 .)
    AT_THE_RATE     reduce using rule 52 (term5 -> term5 LESS term6 .)
    MINUS           reduce using rule 52 (term5 -> term5 LESS term6 .)
    PLUS            reduce using rule 52 (term5 -> term5 LESS term6 .)
    OPEN_BRACKET    reduce using rule 52 (term5 -> term5 LESS term6 .)
    Array           reduce using rule 52 (term5 -> term5 LESS term6 .)
    NUMBER          reduce using rule 52 (term5 -> term5 LESS term6 .)
    FLOAT           reduce using rule 52 (term5 -> term5 LESS term6 .)
    STRING          reduce using rule 52 (term5 -> term5 LESS term6 .)
    true            reduce using rule 52 (term5 -> term5 LESS term6 .)
    false           reduce using rule 52 (term5 -> term5 LESS term6 .)
    $end            reduce using rule 52 (term5 -> term5 LESS term6 .)
    CLOSE_BRACKET   reduce using rule 52 (term5 -> term5 LESS term6 .)
    then            reduce using rule 52 (term5 -> term5 LESS term6 .)
    do              reduce using rule 52 (term5 -> term5 LESS term6 .)
    COMMA           reduce using rule 52 (term5 -> term5 LESS term6 .)
    BIT_XOR         shift and go to state 109


state 167

    (53) term5 -> term5 LESS_EQUALS term6 .
    (57) term6 -> term6 . BIT_XOR term7

    DOUBLE_EQUALS   reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    TRIPLE_EQUALS   reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    NOT_EQUALS      reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    EQUAL_TILDE     reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    BANG_TILDE      reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    COMPARISON      reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    LESS            reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    LESS_EQUALS     reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    GREATER         reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    GREATER_EQUALS  reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    INCL_RANGE      reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    EXCL_RANGE      reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    LOGICAL_OR      reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    BIT_OR          reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    SEMI_COLON      reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    NEWLINE         reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    puts            reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    print           reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    break           reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    def             reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    if              reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    while           reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    case            reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    for             reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    return          reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    IDENTIFIER      reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    nil             reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    self            reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    GLOBAL          reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    AT_THE_RATE     reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    MINUS           reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    PLUS            reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    OPEN_BRACKET    reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    Array           reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    NUMBER          reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    FLOAT           reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    STRING          reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    true            reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    false           reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    $end            reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    CLOSE_BRACKET   reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    then            reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    do              reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    COMMA           reduce using rule 53 (term5 -> term5 LESS_EQUALS term6 .)
    BIT_XOR         shift and go to state 109


state 168

    (54) term5 -> term5 GREATER term6 .
    (57) term6 -> term6 . BIT_XOR term7

    DOUBLE_EQUALS   reduce using rule 54 (term5 -> term5 GREATER term6 .)
    TRIPLE_EQUALS   reduce using rule 54 (term5 -> term5 GREATER term6 .)
    NOT_EQUALS      reduce using rule 54 (term5 -> term5 GREATER term6 .)
    EQUAL_TILDE     reduce using rule 54 (term5 -> term5 GREATER term6 .)
    BANG_TILDE      reduce using rule 54 (term5 -> term5 GREATER term6 .)
    COMPARISON      reduce using rule 54 (term5 -> term5 GREATER term6 .)
    LESS            reduce using rule 54 (term5 -> term5 GREATER term6 .)
    LESS_EQUALS     reduce using rule 54 (term5 -> term5 GREATER term6 .)
    GREATER         reduce using rule 54 (term5 -> term5 GREATER term6 .)
    GREATER_EQUALS  reduce using rule 54 (term5 -> term5 GREATER term6 .)
    INCL_RANGE      reduce using rule 54 (term5 -> term5 GREATER term6 .)
    EXCL_RANGE      reduce using rule 54 (term5 -> term5 GREATER term6 .)
    LOGICAL_OR      reduce using rule 54 (term5 -> term5 GREATER term6 .)
    BIT_OR          reduce using rule 54 (term5 -> term5 GREATER term6 .)
    SEMI_COLON      reduce using rule 54 (term5 -> term5 GREATER term6 .)
    NEWLINE         reduce using rule 54 (term5 -> term5 GREATER term6 .)
    puts            reduce using rule 54 (term5 -> term5 GREATER term6 .)
    print           reduce using rule 54 (term5 -> term5 GREATER term6 .)
    break           reduce using rule 54 (term5 -> term5 GREATER term6 .)
    def             reduce using rule 54 (term5 -> term5 GREATER term6 .)
    if              reduce using rule 54 (term5 -> term5 GREATER term6 .)
    while           reduce using rule 54 (term5 -> term5 GREATER term6 .)
    case            reduce using rule 54 (term5 -> term5 GREATER term6 .)
    for             reduce using rule 54 (term5 -> term5 GREATER term6 .)
    return          reduce using rule 54 (term5 -> term5 GREATER term6 .)
    IDENTIFIER      reduce using rule 54 (term5 -> term5 GREATER term6 .)
    nil             reduce using rule 54 (term5 -> term5 GREATER term6 .)
    self            reduce using rule 54 (term5 -> term5 GREATER term6 .)
    GLOBAL          reduce using rule 54 (term5 -> term5 GREATER term6 .)
    AT_THE_RATE     reduce using rule 54 (term5 -> term5 GREATER term6 .)
    MINUS           reduce using rule 54 (term5 -> term5 GREATER term6 .)
    PLUS            reduce using rule 54 (term5 -> term5 GREATER term6 .)
    OPEN_BRACKET    reduce using rule 54 (term5 -> term5 GREATER term6 .)
    Array           reduce using rule 54 (term5 -> term5 GREATER term6 .)
    NUMBER          reduce using rule 54 (term5 -> term5 GREATER term6 .)
    FLOAT           reduce using rule 54 (term5 -> term5 GREATER term6 .)
    STRING          reduce using rule 54 (term5 -> term5 GREATER term6 .)
    true            reduce using rule 54 (term5 -> term5 GREATER term6 .)
    false           reduce using rule 54 (term5 -> term5 GREATER term6 .)
    $end            reduce using rule 54 (term5 -> term5 GREATER term6 .)
    CLOSE_BRACKET   reduce using rule 54 (term5 -> term5 GREATER term6 .)
    then            reduce using rule 54 (term5 -> term5 GREATER term6 .)
    do              reduce using rule 54 (term5 -> term5 GREATER term6 .)
    COMMA           reduce using rule 54 (term5 -> term5 GREATER term6 .)
    BIT_XOR         shift and go to state 109


state 169

    (55) term5 -> term5 GREATER_EQUALS term6 .
    (57) term6 -> term6 . BIT_XOR term7

    DOUBLE_EQUALS   reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    TRIPLE_EQUALS   reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    NOT_EQUALS      reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    EQUAL_TILDE     reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    BANG_TILDE      reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    COMPARISON      reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    LESS            reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    LESS_EQUALS     reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    GREATER         reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    GREATER_EQUALS  reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    INCL_RANGE      reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    EXCL_RANGE      reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    LOGICAL_OR      reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    BIT_OR          reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    SEMI_COLON      reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    NEWLINE         reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    puts            reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    print           reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    break           reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    def             reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    if              reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    while           reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    case            reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    for             reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    return          reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    IDENTIFIER      reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    nil             reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    self            reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    GLOBAL          reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    AT_THE_RATE     reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    MINUS           reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    PLUS            reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    OPEN_BRACKET    reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    Array           reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    NUMBER          reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    FLOAT           reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    STRING          reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    true            reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    false           reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    $end            reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    CLOSE_BRACKET   reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    then            reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    do              reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    COMMA           reduce using rule 55 (term5 -> term5 GREATER_EQUALS term6 .)
    BIT_XOR         shift and go to state 109


state 170

    (57) term6 -> term6 BIT_XOR term7 .
    (59) term7 -> term7 . BIT_AND term8

    BIT_XOR         reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    DOUBLE_EQUALS   reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    TRIPLE_EQUALS   reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    NOT_EQUALS      reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    EQUAL_TILDE     reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    BANG_TILDE      reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    COMPARISON      reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    LESS            reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    LESS_EQUALS     reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    GREATER         reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    GREATER_EQUALS  reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    INCL_RANGE      reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    EXCL_RANGE      reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    LOGICAL_OR      reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    BIT_OR          reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    SEMI_COLON      reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    NEWLINE         reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    puts            reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    print           reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    break           reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    def             reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    if              reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    while           reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    case            reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    for             reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    return          reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    IDENTIFIER      reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    nil             reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    self            reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    GLOBAL          reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    AT_THE_RATE     reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    MINUS           reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    PLUS            reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    OPEN_BRACKET    reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    Array           reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    NUMBER          reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    FLOAT           reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    STRING          reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    true            reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    false           reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    $end            reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    CLOSE_BRACKET   reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    then            reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    do              reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    COMMA           reduce using rule 57 (term6 -> term6 BIT_XOR term7 .)
    BIT_AND         shift and go to state 110


state 171

    (59) term7 -> term7 BIT_AND term8 .
    (61) term8 -> term8 . LEFT_SHIFT term9
    (62) term8 -> term8 . RIGHT_SHIFT term9

    BIT_AND         reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    BIT_XOR         reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    DOUBLE_EQUALS   reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    TRIPLE_EQUALS   reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    NOT_EQUALS      reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    EQUAL_TILDE     reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    BANG_TILDE      reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    COMPARISON      reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    LESS            reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    LESS_EQUALS     reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    GREATER         reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    GREATER_EQUALS  reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    INCL_RANGE      reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    EXCL_RANGE      reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    LOGICAL_OR      reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    BIT_OR          reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    SEMI_COLON      reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    NEWLINE         reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    puts            reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    print           reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    break           reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    def             reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    if              reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    while           reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    case            reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    for             reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    return          reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    IDENTIFIER      reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    nil             reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    self            reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    GLOBAL          reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    AT_THE_RATE     reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    MINUS           reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    PLUS            reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    OPEN_BRACKET    reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    Array           reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    NUMBER          reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    FLOAT           reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    STRING          reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    true            reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    false           reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    $end            reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    CLOSE_BRACKET   reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    then            reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    do              reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    COMMA           reduce using rule 59 (term7 -> term7 BIT_AND term8 .)
    LEFT_SHIFT      shift and go to state 111
    RIGHT_SHIFT     shift and go to state 112


state 172

    (61) term8 -> term8 LEFT_SHIFT term9 .
    (64) term9 -> term9 . PLUS term10
    (65) term9 -> term9 . MINUS term10

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LEFT_SHIFT      reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    RIGHT_SHIFT     reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    BIT_AND         reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    BIT_XOR         reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    DOUBLE_EQUALS   reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    TRIPLE_EQUALS   reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    NOT_EQUALS      reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    EQUAL_TILDE     reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    BANG_TILDE      reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    COMPARISON      reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    LESS            reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    LESS_EQUALS     reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    GREATER         reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    GREATER_EQUALS  reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    INCL_RANGE      reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    EXCL_RANGE      reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    LOGICAL_OR      reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    BIT_OR          reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    SEMI_COLON      reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    NEWLINE         reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    puts            reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    print           reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    break           reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    def             reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    if              reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    while           reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    case            reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    for             reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    return          reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    IDENTIFIER      reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    nil             reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    self            reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    GLOBAL          reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    AT_THE_RATE     reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    OPEN_BRACKET    reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    Array           reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    NUMBER          reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    FLOAT           reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    STRING          reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    true            reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    false           reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    $end            reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    CLOSE_BRACKET   reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    then            reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    do              reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    COMMA           reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .)
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114

  ! MINUS           [ reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .) ]
  ! PLUS            [ reduce using rule 61 (term8 -> term8 LEFT_SHIFT term9 .) ]


state 173

    (62) term8 -> term8 RIGHT_SHIFT term9 .
    (64) term9 -> term9 . PLUS term10
    (65) term9 -> term9 . MINUS term10

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LEFT_SHIFT      reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    RIGHT_SHIFT     reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    BIT_AND         reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    BIT_XOR         reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    DOUBLE_EQUALS   reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    TRIPLE_EQUALS   reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    NOT_EQUALS      reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    EQUAL_TILDE     reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    BANG_TILDE      reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    COMPARISON      reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    LESS            reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    LESS_EQUALS     reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    GREATER         reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    GREATER_EQUALS  reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    INCL_RANGE      reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    EXCL_RANGE      reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    LOGICAL_OR      reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    BIT_OR          reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    SEMI_COLON      reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    NEWLINE         reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    puts            reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    print           reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    break           reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    def             reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    if              reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    while           reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    case            reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    for             reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    return          reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    IDENTIFIER      reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    nil             reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    self            reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    GLOBAL          reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    AT_THE_RATE     reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    OPEN_BRACKET    reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    Array           reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    NUMBER          reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    FLOAT           reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    STRING          reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    true            reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    false           reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    $end            reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    CLOSE_BRACKET   reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    then            reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    do              reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    COMMA           reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .)
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114

  ! MINUS           [ reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .) ]
  ! PLUS            [ reduce using rule 62 (term8 -> term8 RIGHT_SHIFT term9 .) ]


state 174

    (64) term9 -> term9 PLUS term10 .
    (67) term10 -> term10 . MULTIPLY term11
    (68) term10 -> term10 . DIVIDE term11
    (69) term10 -> term10 . MODULO term11

    PLUS            reduce using rule 64 (term9 -> term9 PLUS term10 .)
    MINUS           reduce using rule 64 (term9 -> term9 PLUS term10 .)
    LEFT_SHIFT      reduce using rule 64 (term9 -> term9 PLUS term10 .)
    RIGHT_SHIFT     reduce using rule 64 (term9 -> term9 PLUS term10 .)
    BIT_AND         reduce using rule 64 (term9 -> term9 PLUS term10 .)
    BIT_XOR         reduce using rule 64 (term9 -> term9 PLUS term10 .)
    DOUBLE_EQUALS   reduce using rule 64 (term9 -> term9 PLUS term10 .)
    TRIPLE_EQUALS   reduce using rule 64 (term9 -> term9 PLUS term10 .)
    NOT_EQUALS      reduce using rule 64 (term9 -> term9 PLUS term10 .)
    EQUAL_TILDE     reduce using rule 64 (term9 -> term9 PLUS term10 .)
    BANG_TILDE      reduce using rule 64 (term9 -> term9 PLUS term10 .)
    COMPARISON      reduce using rule 64 (term9 -> term9 PLUS term10 .)
    LESS            reduce using rule 64 (term9 -> term9 PLUS term10 .)
    LESS_EQUALS     reduce using rule 64 (term9 -> term9 PLUS term10 .)
    GREATER         reduce using rule 64 (term9 -> term9 PLUS term10 .)
    GREATER_EQUALS  reduce using rule 64 (term9 -> term9 PLUS term10 .)
    INCL_RANGE      reduce using rule 64 (term9 -> term9 PLUS term10 .)
    EXCL_RANGE      reduce using rule 64 (term9 -> term9 PLUS term10 .)
    LOGICAL_OR      reduce using rule 64 (term9 -> term9 PLUS term10 .)
    BIT_OR          reduce using rule 64 (term9 -> term9 PLUS term10 .)
    SEMI_COLON      reduce using rule 64 (term9 -> term9 PLUS term10 .)
    NEWLINE         reduce using rule 64 (term9 -> term9 PLUS term10 .)
    puts            reduce using rule 64 (term9 -> term9 PLUS term10 .)
    print           reduce using rule 64 (term9 -> term9 PLUS term10 .)
    break           reduce using rule 64 (term9 -> term9 PLUS term10 .)
    def             reduce using rule 64 (term9 -> term9 PLUS term10 .)
    if              reduce using rule 64 (term9 -> term9 PLUS term10 .)
    while           reduce using rule 64 (term9 -> term9 PLUS term10 .)
    case            reduce using rule 64 (term9 -> term9 PLUS term10 .)
    for             reduce using rule 64 (term9 -> term9 PLUS term10 .)
    return          reduce using rule 64 (term9 -> term9 PLUS term10 .)
    IDENTIFIER      reduce using rule 64 (term9 -> term9 PLUS term10 .)
    nil             reduce using rule 64 (term9 -> term9 PLUS term10 .)
    self            reduce using rule 64 (term9 -> term9 PLUS term10 .)
    GLOBAL          reduce using rule 64 (term9 -> term9 PLUS term10 .)
    AT_THE_RATE     reduce using rule 64 (term9 -> term9 PLUS term10 .)
    OPEN_BRACKET    reduce using rule 64 (term9 -> term9 PLUS term10 .)
    Array           reduce using rule 64 (term9 -> term9 PLUS term10 .)
    NUMBER          reduce using rule 64 (term9 -> term9 PLUS term10 .)
    FLOAT           reduce using rule 64 (term9 -> term9 PLUS term10 .)
    STRING          reduce using rule 64 (term9 -> term9 PLUS term10 .)
    true            reduce using rule 64 (term9 -> term9 PLUS term10 .)
    false           reduce using rule 64 (term9 -> term9 PLUS term10 .)
    $end            reduce using rule 64 (term9 -> term9 PLUS term10 .)
    CLOSE_BRACKET   reduce using rule 64 (term9 -> term9 PLUS term10 .)
    then            reduce using rule 64 (term9 -> term9 PLUS term10 .)
    do              reduce using rule 64 (term9 -> term9 PLUS term10 .)
    COMMA           reduce using rule 64 (term9 -> term9 PLUS term10 .)
    MULTIPLY        shift and go to state 119
    DIVIDE          shift and go to state 120
    MODULO          shift and go to state 121


state 175

    (65) term9 -> term9 MINUS term10 .
    (67) term10 -> term10 . MULTIPLY term11
    (68) term10 -> term10 . DIVIDE term11
    (69) term10 -> term10 . MODULO term11

    PLUS            reduce using rule 65 (term9 -> term9 MINUS term10 .)
    MINUS           reduce using rule 65 (term9 -> term9 MINUS term10 .)
    LEFT_SHIFT      reduce using rule 65 (term9 -> term9 MINUS term10 .)
    RIGHT_SHIFT     reduce using rule 65 (term9 -> term9 MINUS term10 .)
    BIT_AND         reduce using rule 65 (term9 -> term9 MINUS term10 .)
    BIT_XOR         reduce using rule 65 (term9 -> term9 MINUS term10 .)
    DOUBLE_EQUALS   reduce using rule 65 (term9 -> term9 MINUS term10 .)
    TRIPLE_EQUALS   reduce using rule 65 (term9 -> term9 MINUS term10 .)
    NOT_EQUALS      reduce using rule 65 (term9 -> term9 MINUS term10 .)
    EQUAL_TILDE     reduce using rule 65 (term9 -> term9 MINUS term10 .)
    BANG_TILDE      reduce using rule 65 (term9 -> term9 MINUS term10 .)
    COMPARISON      reduce using rule 65 (term9 -> term9 MINUS term10 .)
    LESS            reduce using rule 65 (term9 -> term9 MINUS term10 .)
    LESS_EQUALS     reduce using rule 65 (term9 -> term9 MINUS term10 .)
    GREATER         reduce using rule 65 (term9 -> term9 MINUS term10 .)
    GREATER_EQUALS  reduce using rule 65 (term9 -> term9 MINUS term10 .)
    INCL_RANGE      reduce using rule 65 (term9 -> term9 MINUS term10 .)
    EXCL_RANGE      reduce using rule 65 (term9 -> term9 MINUS term10 .)
    LOGICAL_OR      reduce using rule 65 (term9 -> term9 MINUS term10 .)
    BIT_OR          reduce using rule 65 (term9 -> term9 MINUS term10 .)
    SEMI_COLON      reduce using rule 65 (term9 -> term9 MINUS term10 .)
    NEWLINE         reduce using rule 65 (term9 -> term9 MINUS term10 .)
    puts            reduce using rule 65 (term9 -> term9 MINUS term10 .)
    print           reduce using rule 65 (term9 -> term9 MINUS term10 .)
    break           reduce using rule 65 (term9 -> term9 MINUS term10 .)
    def             reduce using rule 65 (term9 -> term9 MINUS term10 .)
    if              reduce using rule 65 (term9 -> term9 MINUS term10 .)
    while           reduce using rule 65 (term9 -> term9 MINUS term10 .)
    case            reduce using rule 65 (term9 -> term9 MINUS term10 .)
    for             reduce using rule 65 (term9 -> term9 MINUS term10 .)
    return          reduce using rule 65 (term9 -> term9 MINUS term10 .)
    IDENTIFIER      reduce using rule 65 (term9 -> term9 MINUS term10 .)
    nil             reduce using rule 65 (term9 -> term9 MINUS term10 .)
    self            reduce using rule 65 (term9 -> term9 MINUS term10 .)
    GLOBAL          reduce using rule 65 (term9 -> term9 MINUS term10 .)
    AT_THE_RATE     reduce using rule 65 (term9 -> term9 MINUS term10 .)
    OPEN_BRACKET    reduce using rule 65 (term9 -> term9 MINUS term10 .)
    Array           reduce using rule 65 (term9 -> term9 MINUS term10 .)
    NUMBER          reduce using rule 65 (term9 -> term9 MINUS term10 .)
    FLOAT           reduce using rule 65 (term9 -> term9 MINUS term10 .)
    STRING          reduce using rule 65 (term9 -> term9 MINUS term10 .)
    true            reduce using rule 65 (term9 -> term9 MINUS term10 .)
    false           reduce using rule 65 (term9 -> term9 MINUS term10 .)
    $end            reduce using rule 65 (term9 -> term9 MINUS term10 .)
    CLOSE_BRACKET   reduce using rule 65 (term9 -> term9 MINUS term10 .)
    then            reduce using rule 65 (term9 -> term9 MINUS term10 .)
    do              reduce using rule 65 (term9 -> term9 MINUS term10 .)
    COMMA           reduce using rule 65 (term9 -> term9 MINUS term10 .)
    MULTIPLY        shift and go to state 119
    DIVIDE          shift and go to state 120
    MODULO          shift and go to state 121


state 176

    (86) arraya -> variable OPEN_SQUARE . array_args CLOSE_SQUARE
    (87) array_args -> . primary COMMA array_args
    (88) array_args -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    variable                       shift and go to state 117
    array_args                     shift and go to state 211
    primary                        shift and go to state 159
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116

state 177

    (67) term10 -> term10 MULTIPLY term11 .

    MULTIPLY        reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    DIVIDE          reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    MODULO          reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    PLUS            reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    MINUS           reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    LEFT_SHIFT      reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    RIGHT_SHIFT     reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    BIT_AND         reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    BIT_XOR         reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    DOUBLE_EQUALS   reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    TRIPLE_EQUALS   reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    NOT_EQUALS      reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    EQUAL_TILDE     reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    BANG_TILDE      reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    COMPARISON      reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    LESS            reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    LESS_EQUALS     reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    GREATER         reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    GREATER_EQUALS  reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    INCL_RANGE      reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    EXCL_RANGE      reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    LOGICAL_OR      reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    BIT_OR          reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    SEMI_COLON      reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    NEWLINE         reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    puts            reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    print           reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    break           reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    def             reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    if              reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    while           reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    case            reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    for             reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    return          reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    IDENTIFIER      reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    nil             reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    self            reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    GLOBAL          reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    AT_THE_RATE     reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    OPEN_BRACKET    reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    Array           reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    NUMBER          reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    FLOAT           reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    STRING          reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    true            reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    false           reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    $end            reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    CLOSE_BRACKET   reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    then            reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    do              reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)
    COMMA           reduce using rule 67 (term10 -> term10 MULTIPLY term11 .)


state 178

    (68) term10 -> term10 DIVIDE term11 .

    MULTIPLY        reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    DIVIDE          reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    MODULO          reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    PLUS            reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    MINUS           reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    LEFT_SHIFT      reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    RIGHT_SHIFT     reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    BIT_AND         reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    BIT_XOR         reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    DOUBLE_EQUALS   reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    TRIPLE_EQUALS   reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    NOT_EQUALS      reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    EQUAL_TILDE     reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    BANG_TILDE      reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    COMPARISON      reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    LESS            reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    LESS_EQUALS     reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    GREATER         reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    GREATER_EQUALS  reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    INCL_RANGE      reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    EXCL_RANGE      reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    LOGICAL_OR      reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    BIT_OR          reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    SEMI_COLON      reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    NEWLINE         reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    puts            reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    print           reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    break           reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    def             reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    if              reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    while           reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    case            reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    for             reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    return          reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    IDENTIFIER      reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    nil             reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    self            reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    GLOBAL          reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    AT_THE_RATE     reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    OPEN_BRACKET    reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    Array           reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    NUMBER          reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    FLOAT           reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    STRING          reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    true            reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    false           reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    $end            reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    CLOSE_BRACKET   reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    then            reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    do              reduce using rule 68 (term10 -> term10 DIVIDE term11 .)
    COMMA           reduce using rule 68 (term10 -> term10 DIVIDE term11 .)


state 179

    (69) term10 -> term10 MODULO term11 .

    MULTIPLY        reduce using rule 69 (term10 -> term10 MODULO term11 .)
    DIVIDE          reduce using rule 69 (term10 -> term10 MODULO term11 .)
    MODULO          reduce using rule 69 (term10 -> term10 MODULO term11 .)
    PLUS            reduce using rule 69 (term10 -> term10 MODULO term11 .)
    MINUS           reduce using rule 69 (term10 -> term10 MODULO term11 .)
    LEFT_SHIFT      reduce using rule 69 (term10 -> term10 MODULO term11 .)
    RIGHT_SHIFT     reduce using rule 69 (term10 -> term10 MODULO term11 .)
    BIT_AND         reduce using rule 69 (term10 -> term10 MODULO term11 .)
    BIT_XOR         reduce using rule 69 (term10 -> term10 MODULO term11 .)
    DOUBLE_EQUALS   reduce using rule 69 (term10 -> term10 MODULO term11 .)
    TRIPLE_EQUALS   reduce using rule 69 (term10 -> term10 MODULO term11 .)
    NOT_EQUALS      reduce using rule 69 (term10 -> term10 MODULO term11 .)
    EQUAL_TILDE     reduce using rule 69 (term10 -> term10 MODULO term11 .)
    BANG_TILDE      reduce using rule 69 (term10 -> term10 MODULO term11 .)
    COMPARISON      reduce using rule 69 (term10 -> term10 MODULO term11 .)
    LESS            reduce using rule 69 (term10 -> term10 MODULO term11 .)
    LESS_EQUALS     reduce using rule 69 (term10 -> term10 MODULO term11 .)
    GREATER         reduce using rule 69 (term10 -> term10 MODULO term11 .)
    GREATER_EQUALS  reduce using rule 69 (term10 -> term10 MODULO term11 .)
    INCL_RANGE      reduce using rule 69 (term10 -> term10 MODULO term11 .)
    EXCL_RANGE      reduce using rule 69 (term10 -> term10 MODULO term11 .)
    LOGICAL_OR      reduce using rule 69 (term10 -> term10 MODULO term11 .)
    BIT_OR          reduce using rule 69 (term10 -> term10 MODULO term11 .)
    SEMI_COLON      reduce using rule 69 (term10 -> term10 MODULO term11 .)
    NEWLINE         reduce using rule 69 (term10 -> term10 MODULO term11 .)
    puts            reduce using rule 69 (term10 -> term10 MODULO term11 .)
    print           reduce using rule 69 (term10 -> term10 MODULO term11 .)
    break           reduce using rule 69 (term10 -> term10 MODULO term11 .)
    def             reduce using rule 69 (term10 -> term10 MODULO term11 .)
    if              reduce using rule 69 (term10 -> term10 MODULO term11 .)
    while           reduce using rule 69 (term10 -> term10 MODULO term11 .)
    case            reduce using rule 69 (term10 -> term10 MODULO term11 .)
    for             reduce using rule 69 (term10 -> term10 MODULO term11 .)
    return          reduce using rule 69 (term10 -> term10 MODULO term11 .)
    IDENTIFIER      reduce using rule 69 (term10 -> term10 MODULO term11 .)
    nil             reduce using rule 69 (term10 -> term10 MODULO term11 .)
    self            reduce using rule 69 (term10 -> term10 MODULO term11 .)
    GLOBAL          reduce using rule 69 (term10 -> term10 MODULO term11 .)
    AT_THE_RATE     reduce using rule 69 (term10 -> term10 MODULO term11 .)
    OPEN_BRACKET    reduce using rule 69 (term10 -> term10 MODULO term11 .)
    Array           reduce using rule 69 (term10 -> term10 MODULO term11 .)
    NUMBER          reduce using rule 69 (term10 -> term10 MODULO term11 .)
    FLOAT           reduce using rule 69 (term10 -> term10 MODULO term11 .)
    STRING          reduce using rule 69 (term10 -> term10 MODULO term11 .)
    true            reduce using rule 69 (term10 -> term10 MODULO term11 .)
    false           reduce using rule 69 (term10 -> term10 MODULO term11 .)
    $end            reduce using rule 69 (term10 -> term10 MODULO term11 .)
    CLOSE_BRACKET   reduce using rule 69 (term10 -> term10 MODULO term11 .)
    then            reduce using rule 69 (term10 -> term10 MODULO term11 .)
    do              reduce using rule 69 (term10 -> term10 MODULO term11 .)
    COMMA           reduce using rule 69 (term10 -> term10 MODULO term11 .)


state 180

    (82) arrayd -> Array OPEN_BRACKET array_size . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 212


state 181

    (83) array_size -> primary . COMMA array_size
    (84) array_size -> primary .

    COMMA           shift and go to state 213
    CLOSE_BRACKET   reduce using rule 84 (array_size -> primary .)


state 182

    (7) stmt -> keydef argdecl newline multstmt . keyend
    (13) keyend -> . end

    end             shift and go to state 215

    keyend                         shift and go to state 214

state 183

    (14) multstmt -> stmt . newline multstmt
    (152) newline -> . SEMI_COLON
    (153) newline -> . NEWLINE

    SEMI_COLON      shift and go to state 6
    NEWLINE         shift and go to state 7

    newline                        shift and go to state 216

state 184

    (15) multstmt -> empty .

    end             reduce using rule 15 (multstmt -> empty .)
    else            reduce using rule 15 (multstmt -> empty .)
    elsif           reduce using rule 15 (multstmt -> empty .)
    when            reduce using rule 15 (multstmt -> empty .)


state 185

    (122) argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .

    SEMI_COLON      reduce using rule 122 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)
    NEWLINE         reduce using rule 122 (argdecl -> OPEN_BRACKET arglist CLOSE_BRACKET .)


state 186

    (123) arglist -> IDENTIFIER multarglist .

    CLOSE_BRACKET   reduce using rule 123 (arglist -> IDENTIFIER multarglist .)


state 187

    (125) multarglist -> COMMA . IDENTIFIER multarglist

    IDENTIFIER      shift and go to state 217


state 188

    (126) multarglist -> empty .

    CLOSE_BRACKET   reduce using rule 126 (multarglist -> empty .)


state 189

    (8) stmt -> puts OPEN_BRACKET STRING CLOSE_BRACKET .

    SEMI_COLON      reduce using rule 8 (stmt -> puts OPEN_BRACKET STRING CLOSE_BRACKET .)
    NEWLINE         reduce using rule 8 (stmt -> puts OPEN_BRACKET STRING CLOSE_BRACKET .)
    puts            reduce using rule 8 (stmt -> puts OPEN_BRACKET STRING CLOSE_BRACKET .)
    print           reduce using rule 8 (stmt -> puts OPEN_BRACKET STRING CLOSE_BRACKET .)
    break           reduce using rule 8 (stmt -> puts OPEN_BRACKET STRING CLOSE_BRACKET .)
    def             reduce using rule 8 (stmt -> puts OPEN_BRACKET STRING CLOSE_BRACKET .)
    if              reduce using rule 8 (stmt -> puts OPEN_BRACKET STRING CLOSE_BRACKET .)
    while           reduce using rule 8 (stmt -> puts OPEN_BRACKET STRING CLOSE_BRACKET .)
    case            reduce using rule 8 (stmt -> puts OPEN_BRACKET STRING CLOSE_BRACKET .)
    for             reduce using rule 8 (stmt -> puts OPEN_BRACKET STRING CLOSE_BRACKET .)
    return          reduce using rule 8 (stmt -> puts OPEN_BRACKET STRING CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 8 (stmt -> puts OPEN_BRACKET STRING CLOSE_BRACKET .)
    nil             reduce using rule 8 (stmt -> puts OPEN_BRACKET STRING CLOSE_BRACKET .)
    self            reduce using rule 8 (stmt -> puts OPEN_BRACKET STRING CLOSE_BRACKET .)
    GLOBAL          reduce using rule 8 (stmt -> puts OPEN_BRACKET STRING CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 8 (stmt -> puts OPEN_BRACKET STRING CLOSE_BRACKET .)
    MINUS           reduce using rule 8 (stmt -> puts OPEN_BRACKET STRING CLOSE_BRACKET .)
    PLUS            reduce using rule 8 (stmt -> puts OPEN_BRACKET STRING CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 8 (stmt -> puts OPEN_BRACKET STRING CLOSE_BRACKET .)
    Array           reduce using rule 8 (stmt -> puts OPEN_BRACKET STRING CLOSE_BRACKET .)
    NUMBER          reduce using rule 8 (stmt -> puts OPEN_BRACKET STRING CLOSE_BRACKET .)
    FLOAT           reduce using rule 8 (stmt -> puts OPEN_BRACKET STRING CLOSE_BRACKET .)
    STRING          reduce using rule 8 (stmt -> puts OPEN_BRACKET STRING CLOSE_BRACKET .)
    true            reduce using rule 8 (stmt -> puts OPEN_BRACKET STRING CLOSE_BRACKET .)
    false           reduce using rule 8 (stmt -> puts OPEN_BRACKET STRING CLOSE_BRACKET .)
    $end            reduce using rule 8 (stmt -> puts OPEN_BRACKET STRING CLOSE_BRACKET .)


state 190

    (9) stmt -> print OPEN_BRACKET primary CLOSE_BRACKET .

    SEMI_COLON      reduce using rule 9 (stmt -> print OPEN_BRACKET primary CLOSE_BRACKET .)
    NEWLINE         reduce using rule 9 (stmt -> print OPEN_BRACKET primary CLOSE_BRACKET .)
    puts            reduce using rule 9 (stmt -> print OPEN_BRACKET primary CLOSE_BRACKET .)
    print           reduce using rule 9 (stmt -> print OPEN_BRACKET primary CLOSE_BRACKET .)
    break           reduce using rule 9 (stmt -> print OPEN_BRACKET primary CLOSE_BRACKET .)
    def             reduce using rule 9 (stmt -> print OPEN_BRACKET primary CLOSE_BRACKET .)
    if              reduce using rule 9 (stmt -> print OPEN_BRACKET primary CLOSE_BRACKET .)
    while           reduce using rule 9 (stmt -> print OPEN_BRACKET primary CLOSE_BRACKET .)
    case            reduce using rule 9 (stmt -> print OPEN_BRACKET primary CLOSE_BRACKET .)
    for             reduce using rule 9 (stmt -> print OPEN_BRACKET primary CLOSE_BRACKET .)
    return          reduce using rule 9 (stmt -> print OPEN_BRACKET primary CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 9 (stmt -> print OPEN_BRACKET primary CLOSE_BRACKET .)
    nil             reduce using rule 9 (stmt -> print OPEN_BRACKET primary CLOSE_BRACKET .)
    self            reduce using rule 9 (stmt -> print OPEN_BRACKET primary CLOSE_BRACKET .)
    GLOBAL          reduce using rule 9 (stmt -> print OPEN_BRACKET primary CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 9 (stmt -> print OPEN_BRACKET primary CLOSE_BRACKET .)
    MINUS           reduce using rule 9 (stmt -> print OPEN_BRACKET primary CLOSE_BRACKET .)
    PLUS            reduce using rule 9 (stmt -> print OPEN_BRACKET primary CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 9 (stmt -> print OPEN_BRACKET primary CLOSE_BRACKET .)
    Array           reduce using rule 9 (stmt -> print OPEN_BRACKET primary CLOSE_BRACKET .)
    NUMBER          reduce using rule 9 (stmt -> print OPEN_BRACKET primary CLOSE_BRACKET .)
    FLOAT           reduce using rule 9 (stmt -> print OPEN_BRACKET primary CLOSE_BRACKET .)
    STRING          reduce using rule 9 (stmt -> print OPEN_BRACKET primary CLOSE_BRACKET .)
    true            reduce using rule 9 (stmt -> print OPEN_BRACKET primary CLOSE_BRACKET .)
    false           reduce using rule 9 (stmt -> print OPEN_BRACKET primary CLOSE_BRACKET .)
    $end            reduce using rule 9 (stmt -> print OPEN_BRACKET primary CLOSE_BRACKET .)


state 191

    (30) function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .

    SEMI_COLON      reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    NEWLINE         reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    puts            reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    print           reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    break           reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    def             reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    if              reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    while           reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    case            reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    for             reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    return          reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    nil             reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    self            reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    GLOBAL          reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    MINUS           reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    PLUS            reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    Array           reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    NUMBER          reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    FLOAT           reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    STRING          reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    true            reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    false           reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    $end            reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    then            reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    do              reduce using rule 30 (function -> IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)


state 192

    (115) callarglist -> primary callmultarglist .

    CLOSE_BRACKET   reduce using rule 115 (callarglist -> primary callmultarglist .)


state 193

    (117) callmultarglist -> COMMA . primary callmultarglist
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    primary                        shift and go to state 218
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 194

    (118) callmultarglist -> empty .

    CLOSE_BRACKET   reduce using rule 118 (callmultarglist -> empty .)


state 195

    (16) expr -> if expr1 pthen M_1 . multstmt else newline M_1 multstmt end M_1
    (17) expr -> if expr1 pthen M_1 . multstmt M_1 multelsif end M_1
    (18) expr -> if expr1 pthen M_1 . multstmt end M_1
    (14) multstmt -> . stmt newline multstmt
    (15) multstmt -> . empty
    (7) stmt -> . keydef argdecl newline multstmt keyend
    (8) stmt -> . puts OPEN_BRACKET STRING CLOSE_BRACKET
    (9) stmt -> . print OPEN_BRACKET primary CLOSE_BRACKET
    (10) stmt -> . break
    (11) stmt -> . expr
    (154) empty -> .
    (12) keydef -> . def IDENTIFIER
    (16) expr -> . if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
    (17) expr -> . if expr1 pthen M_1 multstmt M_1 multelsif end M_1
    (18) expr -> . if expr1 pthen M_1 multstmt end M_1
    (19) expr -> . while M_1 expr1 pdo M_1 multstmt end M_1
    (20) expr -> . case expr1 M_1 newline multcase end M_1
    (21) expr -> . for M_1 mlhs in expr1 pdo M_1 multstmt end M_1
    (22) expr -> . expr1
    (24) expr1 -> . return IDENTIFIER
    (25) expr1 -> . return
    (26) expr1 -> . expr2
    (27) expr2 -> . arg
    (28) expr2 -> . call
    (32) arg -> . arg BIT_OR term0
    (33) arg -> . term0
    (29) call -> . function
    (34) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (36) term0 -> . term1
    (30) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (31) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (100) mlhs -> . mlhsitem
    (37) term1 -> . mlhs EQUALS mrhs
    (38) term1 -> . mlhs opasgn mrhs
    (39) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arrayal
    (40) term2 -> . term3 INCL_RANGE term3
    (41) term2 -> . term3 EXCL_RANGE term3
    (42) term2 -> . term3
    (85) arrayal -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (43) term3 -> . term3 LOGICAL_OR term4
    (44) term3 -> . term4
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self
    (45) term4 -> . term5 DOUBLE_EQUALS term5
    (46) term4 -> . term5 TRIPLE_EQUALS term5
    (47) term4 -> . term5 NOT_EQUALS term5
    (48) term4 -> . term5 EQUAL_TILDE term5
    (49) term4 -> . term5 BANG_TILDE term5
    (50) term4 -> . term5 COMPARISON term5
    (51) term4 -> . term5
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false

    puts            shift and go to state 10
    print           shift and go to state 13
    break           shift and go to state 15
    else            reduce using rule 154 (empty -> .)
    end             reduce using rule 154 (empty -> .)
    elsif           reduce using rule 154 (empty -> .)
    def             shift and go to state 17
    if              shift and go to state 19
    while           shift and go to state 21
    case            shift and go to state 22
    for             shift and go to state 23
    return          shift and go to state 25
    IDENTIFIER      shift and go to state 18
    nil             shift and go to state 39
    self            shift and go to state 40
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61

    expr1                          shift and go to state 20
    multstmt                       shift and go to state 219
    stmt                           shift and go to state 183
    empty                          shift and go to state 184
    keydef                         shift and go to state 9
    primary                        shift and go to state 14
    expr                           shift and go to state 16
    mlhs                           shift and go to state 24
    expr2                          shift and go to state 26
    arg                            shift and go to state 27
    call                           shift and go to state 28
    term0                          shift and go to state 29
    function                       shift and go to state 30
    term1                          shift and go to state 31
    mlhsitem                       shift and go to state 32
    term2                          shift and go to state 33
    arrayal                        shift and go to state 34
    term3                          shift and go to state 35
    variable                       shift and go to state 36
    term4                          shift and go to state 37
    varname                        shift and go to state 38
    term5                          shift and go to state 41
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56

state 196

    (132) pthen -> newline then .

    puts            reduce using rule 132 (pthen -> newline then .)
    print           reduce using rule 132 (pthen -> newline then .)
    break           reduce using rule 132 (pthen -> newline then .)
    def             reduce using rule 132 (pthen -> newline then .)
    if              reduce using rule 132 (pthen -> newline then .)
    while           reduce using rule 132 (pthen -> newline then .)
    case            reduce using rule 132 (pthen -> newline then .)
    for             reduce using rule 132 (pthen -> newline then .)
    return          reduce using rule 132 (pthen -> newline then .)
    IDENTIFIER      reduce using rule 132 (pthen -> newline then .)
    nil             reduce using rule 132 (pthen -> newline then .)
    self            reduce using rule 132 (pthen -> newline then .)
    GLOBAL          reduce using rule 132 (pthen -> newline then .)
    AT_THE_RATE     reduce using rule 132 (pthen -> newline then .)
    MINUS           reduce using rule 132 (pthen -> newline then .)
    PLUS            reduce using rule 132 (pthen -> newline then .)
    OPEN_BRACKET    reduce using rule 132 (pthen -> newline then .)
    Array           reduce using rule 132 (pthen -> newline then .)
    NUMBER          reduce using rule 132 (pthen -> newline then .)
    FLOAT           reduce using rule 132 (pthen -> newline then .)
    STRING          reduce using rule 132 (pthen -> newline then .)
    true            reduce using rule 132 (pthen -> newline then .)
    false           reduce using rule 132 (pthen -> newline then .)
    else            reduce using rule 132 (pthen -> newline then .)
    end             reduce using rule 132 (pthen -> newline then .)
    elsif           reduce using rule 132 (pthen -> newline then .)
    when            reduce using rule 132 (pthen -> newline then .)


state 197

    (19) expr -> while M_1 expr1 pdo . M_1 multstmt end M_1
    (23) M_1 -> . empty
    (154) empty -> .

    puts            reduce using rule 154 (empty -> .)
    print           reduce using rule 154 (empty -> .)
    break           reduce using rule 154 (empty -> .)
    def             reduce using rule 154 (empty -> .)
    if              reduce using rule 154 (empty -> .)
    while           reduce using rule 154 (empty -> .)
    case            reduce using rule 154 (empty -> .)
    for             reduce using rule 154 (empty -> .)
    return          reduce using rule 154 (empty -> .)
    IDENTIFIER      reduce using rule 154 (empty -> .)
    nil             reduce using rule 154 (empty -> .)
    self            reduce using rule 154 (empty -> .)
    GLOBAL          reduce using rule 154 (empty -> .)
    AT_THE_RATE     reduce using rule 154 (empty -> .)
    MINUS           reduce using rule 154 (empty -> .)
    PLUS            reduce using rule 154 (empty -> .)
    OPEN_BRACKET    reduce using rule 154 (empty -> .)
    Array           reduce using rule 154 (empty -> .)
    NUMBER          reduce using rule 154 (empty -> .)
    FLOAT           reduce using rule 154 (empty -> .)
    STRING          reduce using rule 154 (empty -> .)
    true            reduce using rule 154 (empty -> .)
    false           reduce using rule 154 (empty -> .)
    end             reduce using rule 154 (empty -> .)

    M_1                            shift and go to state 220
    empty                          shift and go to state 74

state 198

    (133) pdo -> newline .
    (135) pdo -> newline . do

    puts            reduce using rule 133 (pdo -> newline .)
    print           reduce using rule 133 (pdo -> newline .)
    break           reduce using rule 133 (pdo -> newline .)
    def             reduce using rule 133 (pdo -> newline .)
    if              reduce using rule 133 (pdo -> newline .)
    while           reduce using rule 133 (pdo -> newline .)
    case            reduce using rule 133 (pdo -> newline .)
    for             reduce using rule 133 (pdo -> newline .)
    return          reduce using rule 133 (pdo -> newline .)
    IDENTIFIER      reduce using rule 133 (pdo -> newline .)
    nil             reduce using rule 133 (pdo -> newline .)
    self            reduce using rule 133 (pdo -> newline .)
    GLOBAL          reduce using rule 133 (pdo -> newline .)
    AT_THE_RATE     reduce using rule 133 (pdo -> newline .)
    MINUS           reduce using rule 133 (pdo -> newline .)
    PLUS            reduce using rule 133 (pdo -> newline .)
    OPEN_BRACKET    reduce using rule 133 (pdo -> newline .)
    Array           reduce using rule 133 (pdo -> newline .)
    NUMBER          reduce using rule 133 (pdo -> newline .)
    FLOAT           reduce using rule 133 (pdo -> newline .)
    STRING          reduce using rule 133 (pdo -> newline .)
    true            reduce using rule 133 (pdo -> newline .)
    false           reduce using rule 133 (pdo -> newline .)
    end             reduce using rule 133 (pdo -> newline .)
    do              shift and go to state 221


state 199

    (134) pdo -> do .

    puts            reduce using rule 134 (pdo -> do .)
    print           reduce using rule 134 (pdo -> do .)
    break           reduce using rule 134 (pdo -> do .)
    def             reduce using rule 134 (pdo -> do .)
    if              reduce using rule 134 (pdo -> do .)
    while           reduce using rule 134 (pdo -> do .)
    case            reduce using rule 134 (pdo -> do .)
    for             reduce using rule 134 (pdo -> do .)
    return          reduce using rule 134 (pdo -> do .)
    IDENTIFIER      reduce using rule 134 (pdo -> do .)
    nil             reduce using rule 134 (pdo -> do .)
    self            reduce using rule 134 (pdo -> do .)
    GLOBAL          reduce using rule 134 (pdo -> do .)
    AT_THE_RATE     reduce using rule 134 (pdo -> do .)
    MINUS           reduce using rule 134 (pdo -> do .)
    PLUS            reduce using rule 134 (pdo -> do .)
    OPEN_BRACKET    reduce using rule 134 (pdo -> do .)
    Array           reduce using rule 134 (pdo -> do .)
    NUMBER          reduce using rule 134 (pdo -> do .)
    FLOAT           reduce using rule 134 (pdo -> do .)
    STRING          reduce using rule 134 (pdo -> do .)
    true            reduce using rule 134 (pdo -> do .)
    false           reduce using rule 134 (pdo -> do .)
    end             reduce using rule 134 (pdo -> do .)


state 200

    (20) expr -> case expr1 M_1 newline . multcase end M_1
    (89) multcase -> . when whenargs pthen M_1 multstmt M_1 multcase
    (90) multcase -> . when whenargs pthen M_1 multstmt M_1

    when            shift and go to state 223

    multcase                       shift and go to state 222

state 201

    (21) expr -> for M_1 mlhs in . expr1 pdo M_1 multstmt end M_1
    (24) expr1 -> . return IDENTIFIER
    (25) expr1 -> . return
    (26) expr1 -> . expr2
    (27) expr2 -> . arg
    (28) expr2 -> . call
    (32) arg -> . arg BIT_OR term0
    (33) arg -> . term0
    (29) call -> . function
    (34) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (36) term0 -> . term1
    (30) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (31) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (100) mlhs -> . mlhsitem
    (37) term1 -> . mlhs EQUALS mrhs
    (38) term1 -> . mlhs opasgn mrhs
    (39) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arrayal
    (40) term2 -> . term3 INCL_RANGE term3
    (41) term2 -> . term3 EXCL_RANGE term3
    (42) term2 -> . term3
    (85) arrayal -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (43) term3 -> . term3 LOGICAL_OR term4
    (44) term3 -> . term4
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self
    (45) term4 -> . term5 DOUBLE_EQUALS term5
    (46) term4 -> . term5 TRIPLE_EQUALS term5
    (47) term4 -> . term5 NOT_EQUALS term5
    (48) term4 -> . term5 EQUAL_TILDE term5
    (49) term4 -> . term5 BANG_TILDE term5
    (50) term4 -> . term5 COMPARISON term5
    (51) term4 -> . term5
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false

    return          shift and go to state 25
    IDENTIFIER      shift and go to state 18
    nil             shift and go to state 39
    self            shift and go to state 40
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61

    mlhs                           shift and go to state 24
    expr1                          shift and go to state 224
    expr2                          shift and go to state 26
    arg                            shift and go to state 27
    call                           shift and go to state 28
    term0                          shift and go to state 29
    function                       shift and go to state 30
    term1                          shift and go to state 31
    mlhsitem                       shift and go to state 32
    term2                          shift and go to state 33
    arrayal                        shift and go to state 34
    term3                          shift and go to state 35
    variable                       shift and go to state 36
    term4                          shift and go to state 37
    varname                        shift and go to state 38
    term5                          shift and go to state 41
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56

state 202

    (85) arrayal -> variable OPEN_SQUARE . array_args CLOSE_SQUARE
    (87) array_args -> . primary COMMA array_args
    (88) array_args -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    variable                       shift and go to state 117
    array_args                     shift and go to state 225
    primary                        shift and go to state 159
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116

state 203

    (34) term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET . CLOSE_BRACKET
    (35) term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET . callargs CLOSE_BRACKET
    (114) callargs -> . callarglist
    (115) callarglist -> . primary callmultarglist
    (116) callarglist -> . empty
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (154) empty -> .
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

  ! shift/reduce conflict for CLOSE_BRACKET resolved as shift
    CLOSE_BRACKET   shift and go to state 226
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

  ! CLOSE_BRACKET   [ reduce using rule 154 (empty -> .) ]

    callargs                       shift and go to state 227
    callarglist                    shift and go to state 135
    primary                        shift and go to state 136
    empty                          shift and go to state 137
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 204

    (112) mrhs -> args COMMA . MULTIPLY arg

    MULTIPLY        shift and go to state 228


state 205

    (113) mrhs -> MULTIPLY arg .
    (32) arg -> arg . BIT_OR term0

  ! shift/reduce conflict for BIT_OR resolved as shift
    SEMI_COLON      reduce using rule 113 (mrhs -> MULTIPLY arg .)
    NEWLINE         reduce using rule 113 (mrhs -> MULTIPLY arg .)
    puts            reduce using rule 113 (mrhs -> MULTIPLY arg .)
    print           reduce using rule 113 (mrhs -> MULTIPLY arg .)
    break           reduce using rule 113 (mrhs -> MULTIPLY arg .)
    def             reduce using rule 113 (mrhs -> MULTIPLY arg .)
    if              reduce using rule 113 (mrhs -> MULTIPLY arg .)
    while           reduce using rule 113 (mrhs -> MULTIPLY arg .)
    case            reduce using rule 113 (mrhs -> MULTIPLY arg .)
    for             reduce using rule 113 (mrhs -> MULTIPLY arg .)
    return          reduce using rule 113 (mrhs -> MULTIPLY arg .)
    IDENTIFIER      reduce using rule 113 (mrhs -> MULTIPLY arg .)
    nil             reduce using rule 113 (mrhs -> MULTIPLY arg .)
    self            reduce using rule 113 (mrhs -> MULTIPLY arg .)
    GLOBAL          reduce using rule 113 (mrhs -> MULTIPLY arg .)
    AT_THE_RATE     reduce using rule 113 (mrhs -> MULTIPLY arg .)
    MINUS           reduce using rule 113 (mrhs -> MULTIPLY arg .)
    PLUS            reduce using rule 113 (mrhs -> MULTIPLY arg .)
    OPEN_BRACKET    reduce using rule 113 (mrhs -> MULTIPLY arg .)
    Array           reduce using rule 113 (mrhs -> MULTIPLY arg .)
    NUMBER          reduce using rule 113 (mrhs -> MULTIPLY arg .)
    FLOAT           reduce using rule 113 (mrhs -> MULTIPLY arg .)
    STRING          reduce using rule 113 (mrhs -> MULTIPLY arg .)
    true            reduce using rule 113 (mrhs -> MULTIPLY arg .)
    false           reduce using rule 113 (mrhs -> MULTIPLY arg .)
    $end            reduce using rule 113 (mrhs -> MULTIPLY arg .)
    CLOSE_BRACKET   reduce using rule 113 (mrhs -> MULTIPLY arg .)
    then            reduce using rule 113 (mrhs -> MULTIPLY arg .)
    do              reduce using rule 113 (mrhs -> MULTIPLY arg .)
    COMMA           reduce using rule 113 (mrhs -> MULTIPLY arg .)
    BIT_OR          shift and go to state 93

  ! BIT_OR          [ reduce using rule 113 (mrhs -> MULTIPLY arg .) ]


state 206

    (119) args -> arg multargs .

    COMMA           reduce using rule 119 (args -> arg multargs .)


state 207

    (120) multargs -> COMMA . arg multargs
    (32) arg -> . arg BIT_OR term0
    (33) arg -> . term0
    (34) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (36) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (37) term1 -> . mlhs EQUALS mrhs
    (38) term1 -> . mlhs opasgn mrhs
    (39) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arrayal
    (40) term2 -> . term3 INCL_RANGE term3
    (41) term2 -> . term3 EXCL_RANGE term3
    (42) term2 -> . term3
    (85) arrayal -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (43) term3 -> . term3 LOGICAL_OR term4
    (44) term3 -> . term4
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self
    (45) term4 -> . term5 DOUBLE_EQUALS term5
    (46) term4 -> . term5 TRIPLE_EQUALS term5
    (47) term4 -> . term5 NOT_EQUALS term5
    (48) term4 -> . term5 EQUAL_TILDE term5
    (49) term4 -> . term5 BANG_TILDE term5
    (50) term4 -> . term5 COMPARISON term5
    (51) term4 -> . term5
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false

    IDENTIFIER      shift and go to state 144
    nil             shift and go to state 39
    self            shift and go to state 40
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61

    arg                            shift and go to state 229
    term0                          shift and go to state 29
    mlhs                           shift and go to state 24
    term1                          shift and go to state 31
    mlhsitem                       shift and go to state 32
    term2                          shift and go to state 33
    arrayal                        shift and go to state 34
    term3                          shift and go to state 35
    variable                       shift and go to state 36
    term4                          shift and go to state 37
    varname                        shift and go to state 38
    term5                          shift and go to state 41
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56

state 208

    (121) multargs -> empty .

    COMMA           reduce using rule 121 (multargs -> empty .)


state 209

    (85) arrayal -> variable OPEN_SQUARE array_args CLOSE_SQUARE .
    (86) arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .

    EQUALS          reduce using rule 85 (arrayal -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    MODULO_EQUALS   reduce using rule 85 (arrayal -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    DIVIDE_EQUALS   reduce using rule 85 (arrayal -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    MINUS_EQUALS    reduce using rule 85 (arrayal -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    PLUS_EQUALS     reduce using rule 85 (arrayal -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    OR_EQUALS       reduce using rule 85 (arrayal -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    AND_EQUALS      reduce using rule 85 (arrayal -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    XOR_EQUALS      reduce using rule 85 (arrayal -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    RIGHT_SHIFT_EQUALS reduce using rule 85 (arrayal -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    LEFT_SHIFT_EQUALS reduce using rule 85 (arrayal -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    MULTIPLY_EQUALS reduce using rule 85 (arrayal -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    LOGICAL_AND_EQUALS reduce using rule 85 (arrayal -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    LOGICAL_OR_EQUALS reduce using rule 85 (arrayal -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    POWER_EQUALS    reduce using rule 85 (arrayal -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    POWER           reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    MULTIPLY        reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    DIVIDE          reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    MODULO          reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    PLUS            reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    MINUS           reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    LEFT_SHIFT      reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    RIGHT_SHIFT     reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    BIT_AND         reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    BIT_XOR         reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    DOUBLE_EQUALS   reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    TRIPLE_EQUALS   reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    NOT_EQUALS      reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    EQUAL_TILDE     reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    BANG_TILDE      reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    COMPARISON      reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    LESS            reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    LESS_EQUALS     reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    GREATER         reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    GREATER_EQUALS  reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    INCL_RANGE      reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    EXCL_RANGE      reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    LOGICAL_OR      reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    BIT_OR          reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    SEMI_COLON      reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    NEWLINE         reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    puts            reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    print           reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    break           reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    def             reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    if              reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    while           reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    case            reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    for             reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    return          reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    nil             reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    self            reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    GLOBAL          reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    AT_THE_RATE     reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    OPEN_BRACKET    reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    Array           reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    NUMBER          reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    FLOAT           reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    STRING          reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    true            reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    false           reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    $end            reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    CLOSE_BRACKET   reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    then            reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    do              reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    COMMA           reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)


state 210

    (87) array_args -> primary COMMA . array_args
    (87) array_args -> . primary COMMA array_args
    (88) array_args -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    primary                        shift and go to state 159
    array_args                     shift and go to state 230
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 211

    (86) arraya -> variable OPEN_SQUARE array_args . CLOSE_SQUARE

    CLOSE_SQUARE    shift and go to state 231


state 212

    (82) arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .

    POWER           reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    MULTIPLY        reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    DIVIDE          reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    MODULO          reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    PLUS            reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    MINUS           reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    LEFT_SHIFT      reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    RIGHT_SHIFT     reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    BIT_AND         reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    BIT_XOR         reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    DOUBLE_EQUALS   reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    TRIPLE_EQUALS   reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    NOT_EQUALS      reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    EQUAL_TILDE     reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    BANG_TILDE      reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    COMPARISON      reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    LESS            reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    LESS_EQUALS     reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    GREATER         reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    GREATER_EQUALS  reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    INCL_RANGE      reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    EXCL_RANGE      reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    LOGICAL_OR      reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    BIT_OR          reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    SEMI_COLON      reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    NEWLINE         reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    puts            reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    print           reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    break           reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    def             reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    if              reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    while           reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    case            reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    for             reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    return          reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    nil             reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    self            reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    GLOBAL          reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    Array           reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    NUMBER          reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    FLOAT           reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    STRING          reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    true            reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    false           reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    $end            reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    then            reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    do              reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    COMMA           reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)
    CLOSE_SQUARE    reduce using rule 82 (arrayd -> Array OPEN_BRACKET array_size CLOSE_BRACKET .)


state 213

    (83) array_size -> primary COMMA . array_size
    (83) array_size -> . primary COMMA array_size
    (84) array_size -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self

    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    IDENTIFIER      shift and go to state 118
    nil             shift and go to state 39
    self            shift and go to state 40

    primary                        shift and go to state 181
    array_size                     shift and go to state 232
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56
    varname                        shift and go to state 116
    variable                       shift and go to state 117

state 214

    (7) stmt -> keydef argdecl newline multstmt keyend .

    SEMI_COLON      reduce using rule 7 (stmt -> keydef argdecl newline multstmt keyend .)
    NEWLINE         reduce using rule 7 (stmt -> keydef argdecl newline multstmt keyend .)
    puts            reduce using rule 7 (stmt -> keydef argdecl newline multstmt keyend .)
    print           reduce using rule 7 (stmt -> keydef argdecl newline multstmt keyend .)
    break           reduce using rule 7 (stmt -> keydef argdecl newline multstmt keyend .)
    def             reduce using rule 7 (stmt -> keydef argdecl newline multstmt keyend .)
    if              reduce using rule 7 (stmt -> keydef argdecl newline multstmt keyend .)
    while           reduce using rule 7 (stmt -> keydef argdecl newline multstmt keyend .)
    case            reduce using rule 7 (stmt -> keydef argdecl newline multstmt keyend .)
    for             reduce using rule 7 (stmt -> keydef argdecl newline multstmt keyend .)
    return          reduce using rule 7 (stmt -> keydef argdecl newline multstmt keyend .)
    IDENTIFIER      reduce using rule 7 (stmt -> keydef argdecl newline multstmt keyend .)
    nil             reduce using rule 7 (stmt -> keydef argdecl newline multstmt keyend .)
    self            reduce using rule 7 (stmt -> keydef argdecl newline multstmt keyend .)
    GLOBAL          reduce using rule 7 (stmt -> keydef argdecl newline multstmt keyend .)
    AT_THE_RATE     reduce using rule 7 (stmt -> keydef argdecl newline multstmt keyend .)
    MINUS           reduce using rule 7 (stmt -> keydef argdecl newline multstmt keyend .)
    PLUS            reduce using rule 7 (stmt -> keydef argdecl newline multstmt keyend .)
    OPEN_BRACKET    reduce using rule 7 (stmt -> keydef argdecl newline multstmt keyend .)
    Array           reduce using rule 7 (stmt -> keydef argdecl newline multstmt keyend .)
    NUMBER          reduce using rule 7 (stmt -> keydef argdecl newline multstmt keyend .)
    FLOAT           reduce using rule 7 (stmt -> keydef argdecl newline multstmt keyend .)
    STRING          reduce using rule 7 (stmt -> keydef argdecl newline multstmt keyend .)
    true            reduce using rule 7 (stmt -> keydef argdecl newline multstmt keyend .)
    false           reduce using rule 7 (stmt -> keydef argdecl newline multstmt keyend .)
    $end            reduce using rule 7 (stmt -> keydef argdecl newline multstmt keyend .)


state 215

    (13) keyend -> end .

    SEMI_COLON      reduce using rule 13 (keyend -> end .)
    NEWLINE         reduce using rule 13 (keyend -> end .)
    puts            reduce using rule 13 (keyend -> end .)
    print           reduce using rule 13 (keyend -> end .)
    break           reduce using rule 13 (keyend -> end .)
    def             reduce using rule 13 (keyend -> end .)
    if              reduce using rule 13 (keyend -> end .)
    while           reduce using rule 13 (keyend -> end .)
    case            reduce using rule 13 (keyend -> end .)
    for             reduce using rule 13 (keyend -> end .)
    return          reduce using rule 13 (keyend -> end .)
    IDENTIFIER      reduce using rule 13 (keyend -> end .)
    nil             reduce using rule 13 (keyend -> end .)
    self            reduce using rule 13 (keyend -> end .)
    GLOBAL          reduce using rule 13 (keyend -> end .)
    AT_THE_RATE     reduce using rule 13 (keyend -> end .)
    MINUS           reduce using rule 13 (keyend -> end .)
    PLUS            reduce using rule 13 (keyend -> end .)
    OPEN_BRACKET    reduce using rule 13 (keyend -> end .)
    Array           reduce using rule 13 (keyend -> end .)
    NUMBER          reduce using rule 13 (keyend -> end .)
    FLOAT           reduce using rule 13 (keyend -> end .)
    STRING          reduce using rule 13 (keyend -> end .)
    true            reduce using rule 13 (keyend -> end .)
    false           reduce using rule 13 (keyend -> end .)
    $end            reduce using rule 13 (keyend -> end .)


state 216

    (14) multstmt -> stmt newline . multstmt
    (14) multstmt -> . stmt newline multstmt
    (15) multstmt -> . empty
    (7) stmt -> . keydef argdecl newline multstmt keyend
    (8) stmt -> . puts OPEN_BRACKET STRING CLOSE_BRACKET
    (9) stmt -> . print OPEN_BRACKET primary CLOSE_BRACKET
    (10) stmt -> . break
    (11) stmt -> . expr
    (154) empty -> .
    (12) keydef -> . def IDENTIFIER
    (16) expr -> . if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
    (17) expr -> . if expr1 pthen M_1 multstmt M_1 multelsif end M_1
    (18) expr -> . if expr1 pthen M_1 multstmt end M_1
    (19) expr -> . while M_1 expr1 pdo M_1 multstmt end M_1
    (20) expr -> . case expr1 M_1 newline multcase end M_1
    (21) expr -> . for M_1 mlhs in expr1 pdo M_1 multstmt end M_1
    (22) expr -> . expr1
    (24) expr1 -> . return IDENTIFIER
    (25) expr1 -> . return
    (26) expr1 -> . expr2
    (27) expr2 -> . arg
    (28) expr2 -> . call
    (32) arg -> . arg BIT_OR term0
    (33) arg -> . term0
    (29) call -> . function
    (34) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (36) term0 -> . term1
    (30) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (31) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (100) mlhs -> . mlhsitem
    (37) term1 -> . mlhs EQUALS mrhs
    (38) term1 -> . mlhs opasgn mrhs
    (39) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arrayal
    (40) term2 -> . term3 INCL_RANGE term3
    (41) term2 -> . term3 EXCL_RANGE term3
    (42) term2 -> . term3
    (85) arrayal -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (43) term3 -> . term3 LOGICAL_OR term4
    (44) term3 -> . term4
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self
    (45) term4 -> . term5 DOUBLE_EQUALS term5
    (46) term4 -> . term5 TRIPLE_EQUALS term5
    (47) term4 -> . term5 NOT_EQUALS term5
    (48) term4 -> . term5 EQUAL_TILDE term5
    (49) term4 -> . term5 BANG_TILDE term5
    (50) term4 -> . term5 COMPARISON term5
    (51) term4 -> . term5
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false

    puts            shift and go to state 10
    print           shift and go to state 13
    break           shift and go to state 15
    end             reduce using rule 154 (empty -> .)
    else            reduce using rule 154 (empty -> .)
    elsif           reduce using rule 154 (empty -> .)
    when            reduce using rule 154 (empty -> .)
    def             shift and go to state 17
    if              shift and go to state 19
    while           shift and go to state 21
    case            shift and go to state 22
    for             shift and go to state 23
    return          shift and go to state 25
    IDENTIFIER      shift and go to state 18
    nil             shift and go to state 39
    self            shift and go to state 40
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61

    stmt                           shift and go to state 183
    multstmt                       shift and go to state 233
    empty                          shift and go to state 184
    keydef                         shift and go to state 9
    primary                        shift and go to state 14
    expr                           shift and go to state 16
    expr1                          shift and go to state 20
    mlhs                           shift and go to state 24
    expr2                          shift and go to state 26
    arg                            shift and go to state 27
    call                           shift and go to state 28
    term0                          shift and go to state 29
    function                       shift and go to state 30
    term1                          shift and go to state 31
    mlhsitem                       shift and go to state 32
    term2                          shift and go to state 33
    arrayal                        shift and go to state 34
    term3                          shift and go to state 35
    variable                       shift and go to state 36
    term4                          shift and go to state 37
    varname                        shift and go to state 38
    term5                          shift and go to state 41
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56

state 217

    (125) multarglist -> COMMA IDENTIFIER . multarglist
    (125) multarglist -> . COMMA IDENTIFIER multarglist
    (126) multarglist -> . empty
    (154) empty -> .

    COMMA           shift and go to state 187
    CLOSE_BRACKET   reduce using rule 154 (empty -> .)

    multarglist                    shift and go to state 234
    empty                          shift and go to state 188

state 218

    (117) callmultarglist -> COMMA primary . callmultarglist
    (117) callmultarglist -> . COMMA primary callmultarglist
    (118) callmultarglist -> . empty
    (154) empty -> .

    COMMA           shift and go to state 193
    CLOSE_BRACKET   reduce using rule 154 (empty -> .)

    callmultarglist                shift and go to state 235
    empty                          shift and go to state 194

state 219

    (16) expr -> if expr1 pthen M_1 multstmt . else newline M_1 multstmt end M_1
    (17) expr -> if expr1 pthen M_1 multstmt . M_1 multelsif end M_1
    (18) expr -> if expr1 pthen M_1 multstmt . end M_1
    (23) M_1 -> . empty
    (154) empty -> .

  ! shift/reduce conflict for else resolved as shift
  ! shift/reduce conflict for end resolved as shift
    else            shift and go to state 237
    end             shift and go to state 238
    elsif           reduce using rule 154 (empty -> .)

  ! else            [ reduce using rule 154 (empty -> .) ]
  ! end             [ reduce using rule 154 (empty -> .) ]

    M_1                            shift and go to state 236
    empty                          shift and go to state 74

state 220

    (19) expr -> while M_1 expr1 pdo M_1 . multstmt end M_1
    (14) multstmt -> . stmt newline multstmt
    (15) multstmt -> . empty
    (7) stmt -> . keydef argdecl newline multstmt keyend
    (8) stmt -> . puts OPEN_BRACKET STRING CLOSE_BRACKET
    (9) stmt -> . print OPEN_BRACKET primary CLOSE_BRACKET
    (10) stmt -> . break
    (11) stmt -> . expr
    (154) empty -> .
    (12) keydef -> . def IDENTIFIER
    (16) expr -> . if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
    (17) expr -> . if expr1 pthen M_1 multstmt M_1 multelsif end M_1
    (18) expr -> . if expr1 pthen M_1 multstmt end M_1
    (19) expr -> . while M_1 expr1 pdo M_1 multstmt end M_1
    (20) expr -> . case expr1 M_1 newline multcase end M_1
    (21) expr -> . for M_1 mlhs in expr1 pdo M_1 multstmt end M_1
    (22) expr -> . expr1
    (24) expr1 -> . return IDENTIFIER
    (25) expr1 -> . return
    (26) expr1 -> . expr2
    (27) expr2 -> . arg
    (28) expr2 -> . call
    (32) arg -> . arg BIT_OR term0
    (33) arg -> . term0
    (29) call -> . function
    (34) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (36) term0 -> . term1
    (30) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (31) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (100) mlhs -> . mlhsitem
    (37) term1 -> . mlhs EQUALS mrhs
    (38) term1 -> . mlhs opasgn mrhs
    (39) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arrayal
    (40) term2 -> . term3 INCL_RANGE term3
    (41) term2 -> . term3 EXCL_RANGE term3
    (42) term2 -> . term3
    (85) arrayal -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (43) term3 -> . term3 LOGICAL_OR term4
    (44) term3 -> . term4
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self
    (45) term4 -> . term5 DOUBLE_EQUALS term5
    (46) term4 -> . term5 TRIPLE_EQUALS term5
    (47) term4 -> . term5 NOT_EQUALS term5
    (48) term4 -> . term5 EQUAL_TILDE term5
    (49) term4 -> . term5 BANG_TILDE term5
    (50) term4 -> . term5 COMPARISON term5
    (51) term4 -> . term5
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false

    puts            shift and go to state 10
    print           shift and go to state 13
    break           shift and go to state 15
    end             reduce using rule 154 (empty -> .)
    def             shift and go to state 17
    if              shift and go to state 19
    while           shift and go to state 21
    case            shift and go to state 22
    for             shift and go to state 23
    return          shift and go to state 25
    IDENTIFIER      shift and go to state 18
    nil             shift and go to state 39
    self            shift and go to state 40
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61

    expr1                          shift and go to state 20
    multstmt                       shift and go to state 239
    stmt                           shift and go to state 183
    empty                          shift and go to state 184
    keydef                         shift and go to state 9
    primary                        shift and go to state 14
    expr                           shift and go to state 16
    mlhs                           shift and go to state 24
    expr2                          shift and go to state 26
    arg                            shift and go to state 27
    call                           shift and go to state 28
    term0                          shift and go to state 29
    function                       shift and go to state 30
    term1                          shift and go to state 31
    mlhsitem                       shift and go to state 32
    term2                          shift and go to state 33
    arrayal                        shift and go to state 34
    term3                          shift and go to state 35
    variable                       shift and go to state 36
    term4                          shift and go to state 37
    varname                        shift and go to state 38
    term5                          shift and go to state 41
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56

state 221

    (135) pdo -> newline do .

    puts            reduce using rule 135 (pdo -> newline do .)
    print           reduce using rule 135 (pdo -> newline do .)
    break           reduce using rule 135 (pdo -> newline do .)
    def             reduce using rule 135 (pdo -> newline do .)
    if              reduce using rule 135 (pdo -> newline do .)
    while           reduce using rule 135 (pdo -> newline do .)
    case            reduce using rule 135 (pdo -> newline do .)
    for             reduce using rule 135 (pdo -> newline do .)
    return          reduce using rule 135 (pdo -> newline do .)
    IDENTIFIER      reduce using rule 135 (pdo -> newline do .)
    nil             reduce using rule 135 (pdo -> newline do .)
    self            reduce using rule 135 (pdo -> newline do .)
    GLOBAL          reduce using rule 135 (pdo -> newline do .)
    AT_THE_RATE     reduce using rule 135 (pdo -> newline do .)
    MINUS           reduce using rule 135 (pdo -> newline do .)
    PLUS            reduce using rule 135 (pdo -> newline do .)
    OPEN_BRACKET    reduce using rule 135 (pdo -> newline do .)
    Array           reduce using rule 135 (pdo -> newline do .)
    NUMBER          reduce using rule 135 (pdo -> newline do .)
    FLOAT           reduce using rule 135 (pdo -> newline do .)
    STRING          reduce using rule 135 (pdo -> newline do .)
    true            reduce using rule 135 (pdo -> newline do .)
    false           reduce using rule 135 (pdo -> newline do .)
    end             reduce using rule 135 (pdo -> newline do .)


state 222

    (20) expr -> case expr1 M_1 newline multcase . end M_1

    end             shift and go to state 240


state 223

    (89) multcase -> when . whenargs pthen M_1 multstmt M_1 multcase
    (90) multcase -> when . whenargs pthen M_1 multstmt M_1
    (99) whenargs -> . arg
    (32) arg -> . arg BIT_OR term0
    (33) arg -> . term0
    (34) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (36) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (37) term1 -> . mlhs EQUALS mrhs
    (38) term1 -> . mlhs opasgn mrhs
    (39) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arrayal
    (40) term2 -> . term3 INCL_RANGE term3
    (41) term2 -> . term3 EXCL_RANGE term3
    (42) term2 -> . term3
    (85) arrayal -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (43) term3 -> . term3 LOGICAL_OR term4
    (44) term3 -> . term4
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self
    (45) term4 -> . term5 DOUBLE_EQUALS term5
    (46) term4 -> . term5 TRIPLE_EQUALS term5
    (47) term4 -> . term5 NOT_EQUALS term5
    (48) term4 -> . term5 EQUAL_TILDE term5
    (49) term4 -> . term5 BANG_TILDE term5
    (50) term4 -> . term5 COMPARISON term5
    (51) term4 -> . term5
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false

    IDENTIFIER      shift and go to state 144
    nil             shift and go to state 39
    self            shift and go to state 40
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61

    whenargs                       shift and go to state 241
    arg                            shift and go to state 242
    term0                          shift and go to state 29
    mlhs                           shift and go to state 24
    term1                          shift and go to state 31
    mlhsitem                       shift and go to state 32
    term2                          shift and go to state 33
    arrayal                        shift and go to state 34
    term3                          shift and go to state 35
    variable                       shift and go to state 36
    term4                          shift and go to state 37
    varname                        shift and go to state 38
    term5                          shift and go to state 41
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56

state 224

    (21) expr -> for M_1 mlhs in expr1 . pdo M_1 multstmt end M_1
    (133) pdo -> . newline
    (134) pdo -> . do
    (135) pdo -> . newline do
    (152) newline -> . SEMI_COLON
    (153) newline -> . NEWLINE

    do              shift and go to state 199
    SEMI_COLON      shift and go to state 6
    NEWLINE         shift and go to state 7

    pdo                            shift and go to state 243
    newline                        shift and go to state 198

state 225

    (85) arrayal -> variable OPEN_SQUARE array_args . CLOSE_SQUARE

    CLOSE_SQUARE    shift and go to state 244


state 226

    (34) term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .

    BIT_OR          reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    SEMI_COLON      reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    NEWLINE         reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    puts            reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    print           reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    break           reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    def             reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    if              reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    while           reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    case            reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    for             reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    return          reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    nil             reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    self            reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    GLOBAL          reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    MINUS           reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    PLUS            reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    Array           reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    NUMBER          reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    FLOAT           reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    STRING          reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    true            reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    false           reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    $end            reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    then            reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    do              reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)
    COMMA           reduce using rule 34 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET .)


state 227

    (35) term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 245


state 228

    (112) mrhs -> args COMMA MULTIPLY . arg
    (32) arg -> . arg BIT_OR term0
    (33) arg -> . term0
    (34) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (36) term0 -> . term1
    (100) mlhs -> . mlhsitem
    (37) term1 -> . mlhs EQUALS mrhs
    (38) term1 -> . mlhs opasgn mrhs
    (39) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arrayal
    (40) term2 -> . term3 INCL_RANGE term3
    (41) term2 -> . term3 EXCL_RANGE term3
    (42) term2 -> . term3
    (85) arrayal -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (43) term3 -> . term3 LOGICAL_OR term4
    (44) term3 -> . term4
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self
    (45) term4 -> . term5 DOUBLE_EQUALS term5
    (46) term4 -> . term5 TRIPLE_EQUALS term5
    (47) term4 -> . term5 NOT_EQUALS term5
    (48) term4 -> . term5 EQUAL_TILDE term5
    (49) term4 -> . term5 BANG_TILDE term5
    (50) term4 -> . term5 COMPARISON term5
    (51) term4 -> . term5
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false

    IDENTIFIER      shift and go to state 144
    nil             shift and go to state 39
    self            shift and go to state 40
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61

    arg                            shift and go to state 246
    term0                          shift and go to state 29
    mlhs                           shift and go to state 24
    term1                          shift and go to state 31
    mlhsitem                       shift and go to state 32
    term2                          shift and go to state 33
    arrayal                        shift and go to state 34
    term3                          shift and go to state 35
    variable                       shift and go to state 36
    term4                          shift and go to state 37
    varname                        shift and go to state 38
    term5                          shift and go to state 41
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56

state 229

    (120) multargs -> COMMA arg . multargs
    (32) arg -> arg . BIT_OR term0
    (120) multargs -> . COMMA arg multargs
    (121) multargs -> . empty
    (154) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    BIT_OR          shift and go to state 93
    COMMA           shift and go to state 207

  ! COMMA           [ reduce using rule 154 (empty -> .) ]

    multargs                       shift and go to state 247
    empty                          shift and go to state 208

state 230

    (87) array_args -> primary COMMA array_args .

    CLOSE_SQUARE    reduce using rule 87 (array_args -> primary COMMA array_args .)


state 231

    (86) arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .

    POWER           reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    MULTIPLY        reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    DIVIDE          reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    MODULO          reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    PLUS            reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    MINUS           reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    LEFT_SHIFT      reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    RIGHT_SHIFT     reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    BIT_AND         reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    BIT_XOR         reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    DOUBLE_EQUALS   reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    TRIPLE_EQUALS   reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    NOT_EQUALS      reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    EQUAL_TILDE     reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    BANG_TILDE      reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    COMPARISON      reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    LESS            reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    LESS_EQUALS     reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    GREATER         reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    GREATER_EQUALS  reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    INCL_RANGE      reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    EXCL_RANGE      reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    LOGICAL_OR      reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    BIT_OR          reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    SEMI_COLON      reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    NEWLINE         reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    puts            reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    print           reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    break           reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    def             reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    if              reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    while           reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    case            reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    for             reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    return          reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    nil             reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    self            reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    GLOBAL          reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    AT_THE_RATE     reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    OPEN_BRACKET    reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    Array           reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    NUMBER          reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    FLOAT           reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    STRING          reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    true            reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    false           reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    $end            reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    CLOSE_BRACKET   reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    then            reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    do              reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    COMMA           reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 86 (arraya -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)


state 232

    (83) array_size -> primary COMMA array_size .

    CLOSE_BRACKET   reduce using rule 83 (array_size -> primary COMMA array_size .)


state 233

    (14) multstmt -> stmt newline multstmt .

    end             reduce using rule 14 (multstmt -> stmt newline multstmt .)
    else            reduce using rule 14 (multstmt -> stmt newline multstmt .)
    elsif           reduce using rule 14 (multstmt -> stmt newline multstmt .)
    when            reduce using rule 14 (multstmt -> stmt newline multstmt .)


state 234

    (125) multarglist -> COMMA IDENTIFIER multarglist .

    CLOSE_BRACKET   reduce using rule 125 (multarglist -> COMMA IDENTIFIER multarglist .)


state 235

    (117) callmultarglist -> COMMA primary callmultarglist .

    CLOSE_BRACKET   reduce using rule 117 (callmultarglist -> COMMA primary callmultarglist .)


state 236

    (17) expr -> if expr1 pthen M_1 multstmt M_1 . multelsif end M_1
    (91) multelsif -> . elsif expr pthen M_1 multstmt M_1 multelsif M_1
    (92) multelsif -> . else newline multstmt
    (93) multelsif -> . empty
    (154) empty -> .

    elsif           shift and go to state 249
    else            shift and go to state 250
    end             reduce using rule 154 (empty -> .)

    multelsif                      shift and go to state 248
    empty                          shift and go to state 251

state 237

    (16) expr -> if expr1 pthen M_1 multstmt else . newline M_1 multstmt end M_1
    (152) newline -> . SEMI_COLON
    (153) newline -> . NEWLINE

    SEMI_COLON      shift and go to state 6
    NEWLINE         shift and go to state 7

    newline                        shift and go to state 252

state 238

    (18) expr -> if expr1 pthen M_1 multstmt end . M_1
    (23) M_1 -> . empty
    (154) empty -> .

    SEMI_COLON      reduce using rule 154 (empty -> .)
    NEWLINE         reduce using rule 154 (empty -> .)
    puts            reduce using rule 154 (empty -> .)
    print           reduce using rule 154 (empty -> .)
    break           reduce using rule 154 (empty -> .)
    def             reduce using rule 154 (empty -> .)
    if              reduce using rule 154 (empty -> .)
    while           reduce using rule 154 (empty -> .)
    case            reduce using rule 154 (empty -> .)
    for             reduce using rule 154 (empty -> .)
    return          reduce using rule 154 (empty -> .)
    IDENTIFIER      reduce using rule 154 (empty -> .)
    nil             reduce using rule 154 (empty -> .)
    self            reduce using rule 154 (empty -> .)
    GLOBAL          reduce using rule 154 (empty -> .)
    AT_THE_RATE     reduce using rule 154 (empty -> .)
    MINUS           reduce using rule 154 (empty -> .)
    PLUS            reduce using rule 154 (empty -> .)
    OPEN_BRACKET    reduce using rule 154 (empty -> .)
    Array           reduce using rule 154 (empty -> .)
    NUMBER          reduce using rule 154 (empty -> .)
    FLOAT           reduce using rule 154 (empty -> .)
    STRING          reduce using rule 154 (empty -> .)
    true            reduce using rule 154 (empty -> .)
    false           reduce using rule 154 (empty -> .)
    $end            reduce using rule 154 (empty -> .)
    then            reduce using rule 154 (empty -> .)

    M_1                            shift and go to state 253
    empty                          shift and go to state 74

state 239

    (19) expr -> while M_1 expr1 pdo M_1 multstmt . end M_1

    end             shift and go to state 254


state 240

    (20) expr -> case expr1 M_1 newline multcase end . M_1
    (23) M_1 -> . empty
    (154) empty -> .

    SEMI_COLON      reduce using rule 154 (empty -> .)
    NEWLINE         reduce using rule 154 (empty -> .)
    puts            reduce using rule 154 (empty -> .)
    print           reduce using rule 154 (empty -> .)
    break           reduce using rule 154 (empty -> .)
    def             reduce using rule 154 (empty -> .)
    if              reduce using rule 154 (empty -> .)
    while           reduce using rule 154 (empty -> .)
    case            reduce using rule 154 (empty -> .)
    for             reduce using rule 154 (empty -> .)
    return          reduce using rule 154 (empty -> .)
    IDENTIFIER      reduce using rule 154 (empty -> .)
    nil             reduce using rule 154 (empty -> .)
    self            reduce using rule 154 (empty -> .)
    GLOBAL          reduce using rule 154 (empty -> .)
    AT_THE_RATE     reduce using rule 154 (empty -> .)
    MINUS           reduce using rule 154 (empty -> .)
    PLUS            reduce using rule 154 (empty -> .)
    OPEN_BRACKET    reduce using rule 154 (empty -> .)
    Array           reduce using rule 154 (empty -> .)
    NUMBER          reduce using rule 154 (empty -> .)
    FLOAT           reduce using rule 154 (empty -> .)
    STRING          reduce using rule 154 (empty -> .)
    true            reduce using rule 154 (empty -> .)
    false           reduce using rule 154 (empty -> .)
    $end            reduce using rule 154 (empty -> .)
    then            reduce using rule 154 (empty -> .)

    M_1                            shift and go to state 255
    empty                          shift and go to state 74

state 241

    (89) multcase -> when whenargs . pthen M_1 multstmt M_1 multcase
    (90) multcase -> when whenargs . pthen M_1 multstmt M_1
    (130) pthen -> . newline
    (131) pthen -> . then
    (132) pthen -> . newline then
    (152) newline -> . SEMI_COLON
    (153) newline -> . NEWLINE

    then            shift and go to state 140
    SEMI_COLON      shift and go to state 6
    NEWLINE         shift and go to state 7

    pthen                          shift and go to state 256
    newline                        shift and go to state 139

state 242

    (99) whenargs -> arg .
    (32) arg -> arg . BIT_OR term0

    then            reduce using rule 99 (whenargs -> arg .)
    SEMI_COLON      reduce using rule 99 (whenargs -> arg .)
    NEWLINE         reduce using rule 99 (whenargs -> arg .)
    BIT_OR          shift and go to state 93


state 243

    (21) expr -> for M_1 mlhs in expr1 pdo . M_1 multstmt end M_1
    (23) M_1 -> . empty
    (154) empty -> .

    puts            reduce using rule 154 (empty -> .)
    print           reduce using rule 154 (empty -> .)
    break           reduce using rule 154 (empty -> .)
    def             reduce using rule 154 (empty -> .)
    if              reduce using rule 154 (empty -> .)
    while           reduce using rule 154 (empty -> .)
    case            reduce using rule 154 (empty -> .)
    for             reduce using rule 154 (empty -> .)
    return          reduce using rule 154 (empty -> .)
    IDENTIFIER      reduce using rule 154 (empty -> .)
    nil             reduce using rule 154 (empty -> .)
    self            reduce using rule 154 (empty -> .)
    GLOBAL          reduce using rule 154 (empty -> .)
    AT_THE_RATE     reduce using rule 154 (empty -> .)
    MINUS           reduce using rule 154 (empty -> .)
    PLUS            reduce using rule 154 (empty -> .)
    OPEN_BRACKET    reduce using rule 154 (empty -> .)
    Array           reduce using rule 154 (empty -> .)
    NUMBER          reduce using rule 154 (empty -> .)
    FLOAT           reduce using rule 154 (empty -> .)
    STRING          reduce using rule 154 (empty -> .)
    true            reduce using rule 154 (empty -> .)
    false           reduce using rule 154 (empty -> .)
    end             reduce using rule 154 (empty -> .)

    M_1                            shift and go to state 257
    empty                          shift and go to state 74

state 244

    (85) arrayal -> variable OPEN_SQUARE array_args CLOSE_SQUARE .

    in              reduce using rule 85 (arrayal -> variable OPEN_SQUARE array_args CLOSE_SQUARE .)


state 245

    (35) term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .

    BIT_OR          reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    SEMI_COLON      reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    NEWLINE         reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    puts            reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    print           reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    break           reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    def             reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    if              reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    while           reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    case            reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    for             reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    return          reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    nil             reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    self            reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    GLOBAL          reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    AT_THE_RATE     reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    MINUS           reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    PLUS            reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    OPEN_BRACKET    reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    Array           reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    NUMBER          reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    FLOAT           reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    STRING          reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    true            reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    false           reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    $end            reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    then            reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    do              reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)
    COMMA           reduce using rule 35 (term0 -> mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET .)


state 246

    (112) mrhs -> args COMMA MULTIPLY arg .
    (32) arg -> arg . BIT_OR term0

  ! shift/reduce conflict for BIT_OR resolved as shift
    SEMI_COLON      reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    NEWLINE         reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    puts            reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    print           reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    break           reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    def             reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    if              reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    while           reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    case            reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    for             reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    return          reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    IDENTIFIER      reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    nil             reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    self            reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    GLOBAL          reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    AT_THE_RATE     reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    MINUS           reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    PLUS            reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    OPEN_BRACKET    reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    Array           reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    NUMBER          reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    FLOAT           reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    STRING          reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    true            reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    false           reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    $end            reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    CLOSE_BRACKET   reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    then            reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    do              reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    COMMA           reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .)
    BIT_OR          shift and go to state 93

  ! BIT_OR          [ reduce using rule 112 (mrhs -> args COMMA MULTIPLY arg .) ]


state 247

    (120) multargs -> COMMA arg multargs .

    COMMA           reduce using rule 120 (multargs -> COMMA arg multargs .)


state 248

    (17) expr -> if expr1 pthen M_1 multstmt M_1 multelsif . end M_1

    end             shift and go to state 258


state 249

    (91) multelsif -> elsif . expr pthen M_1 multstmt M_1 multelsif M_1
    (16) expr -> . if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
    (17) expr -> . if expr1 pthen M_1 multstmt M_1 multelsif end M_1
    (18) expr -> . if expr1 pthen M_1 multstmt end M_1
    (19) expr -> . while M_1 expr1 pdo M_1 multstmt end M_1
    (20) expr -> . case expr1 M_1 newline multcase end M_1
    (21) expr -> . for M_1 mlhs in expr1 pdo M_1 multstmt end M_1
    (22) expr -> . expr1
    (24) expr1 -> . return IDENTIFIER
    (25) expr1 -> . return
    (26) expr1 -> . expr2
    (27) expr2 -> . arg
    (28) expr2 -> . call
    (32) arg -> . arg BIT_OR term0
    (33) arg -> . term0
    (29) call -> . function
    (34) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (36) term0 -> . term1
    (30) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (31) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (100) mlhs -> . mlhsitem
    (37) term1 -> . mlhs EQUALS mrhs
    (38) term1 -> . mlhs opasgn mrhs
    (39) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arrayal
    (40) term2 -> . term3 INCL_RANGE term3
    (41) term2 -> . term3 EXCL_RANGE term3
    (42) term2 -> . term3
    (85) arrayal -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (43) term3 -> . term3 LOGICAL_OR term4
    (44) term3 -> . term4
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self
    (45) term4 -> . term5 DOUBLE_EQUALS term5
    (46) term4 -> . term5 TRIPLE_EQUALS term5
    (47) term4 -> . term5 NOT_EQUALS term5
    (48) term4 -> . term5 EQUAL_TILDE term5
    (49) term4 -> . term5 BANG_TILDE term5
    (50) term4 -> . term5 COMPARISON term5
    (51) term4 -> . term5
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false

    if              shift and go to state 19
    while           shift and go to state 21
    case            shift and go to state 22
    for             shift and go to state 23
    return          shift and go to state 25
    IDENTIFIER      shift and go to state 18
    nil             shift and go to state 39
    self            shift and go to state 40
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61

    expr                           shift and go to state 259
    expr1                          shift and go to state 20
    mlhs                           shift and go to state 24
    expr2                          shift and go to state 26
    arg                            shift and go to state 27
    call                           shift and go to state 28
    term0                          shift and go to state 29
    function                       shift and go to state 30
    term1                          shift and go to state 31
    mlhsitem                       shift and go to state 32
    term2                          shift and go to state 33
    arrayal                        shift and go to state 34
    term3                          shift and go to state 35
    variable                       shift and go to state 36
    term4                          shift and go to state 37
    varname                        shift and go to state 38
    term5                          shift and go to state 41
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    primary                        shift and go to state 14
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56

state 250

    (92) multelsif -> else . newline multstmt
    (152) newline -> . SEMI_COLON
    (153) newline -> . NEWLINE

    SEMI_COLON      shift and go to state 6
    NEWLINE         shift and go to state 7

    newline                        shift and go to state 260

state 251

    (93) multelsif -> empty .

    end             reduce using rule 93 (multelsif -> empty .)


state 252

    (16) expr -> if expr1 pthen M_1 multstmt else newline . M_1 multstmt end M_1
    (23) M_1 -> . empty
    (154) empty -> .

    puts            reduce using rule 154 (empty -> .)
    print           reduce using rule 154 (empty -> .)
    break           reduce using rule 154 (empty -> .)
    def             reduce using rule 154 (empty -> .)
    if              reduce using rule 154 (empty -> .)
    while           reduce using rule 154 (empty -> .)
    case            reduce using rule 154 (empty -> .)
    for             reduce using rule 154 (empty -> .)
    return          reduce using rule 154 (empty -> .)
    IDENTIFIER      reduce using rule 154 (empty -> .)
    nil             reduce using rule 154 (empty -> .)
    self            reduce using rule 154 (empty -> .)
    GLOBAL          reduce using rule 154 (empty -> .)
    AT_THE_RATE     reduce using rule 154 (empty -> .)
    MINUS           reduce using rule 154 (empty -> .)
    PLUS            reduce using rule 154 (empty -> .)
    OPEN_BRACKET    reduce using rule 154 (empty -> .)
    Array           reduce using rule 154 (empty -> .)
    NUMBER          reduce using rule 154 (empty -> .)
    FLOAT           reduce using rule 154 (empty -> .)
    STRING          reduce using rule 154 (empty -> .)
    true            reduce using rule 154 (empty -> .)
    false           reduce using rule 154 (empty -> .)
    end             reduce using rule 154 (empty -> .)

    M_1                            shift and go to state 261
    empty                          shift and go to state 74

state 253

    (18) expr -> if expr1 pthen M_1 multstmt end M_1 .

    SEMI_COLON      reduce using rule 18 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    NEWLINE         reduce using rule 18 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    puts            reduce using rule 18 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    print           reduce using rule 18 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    break           reduce using rule 18 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    def             reduce using rule 18 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    if              reduce using rule 18 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    while           reduce using rule 18 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    case            reduce using rule 18 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    for             reduce using rule 18 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    return          reduce using rule 18 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    IDENTIFIER      reduce using rule 18 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    nil             reduce using rule 18 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    self            reduce using rule 18 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    GLOBAL          reduce using rule 18 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    AT_THE_RATE     reduce using rule 18 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    MINUS           reduce using rule 18 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    PLUS            reduce using rule 18 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    OPEN_BRACKET    reduce using rule 18 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    Array           reduce using rule 18 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    NUMBER          reduce using rule 18 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    FLOAT           reduce using rule 18 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    STRING          reduce using rule 18 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    true            reduce using rule 18 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    false           reduce using rule 18 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    $end            reduce using rule 18 (expr -> if expr1 pthen M_1 multstmt end M_1 .)
    then            reduce using rule 18 (expr -> if expr1 pthen M_1 multstmt end M_1 .)


state 254

    (19) expr -> while M_1 expr1 pdo M_1 multstmt end . M_1
    (23) M_1 -> . empty
    (154) empty -> .

    SEMI_COLON      reduce using rule 154 (empty -> .)
    NEWLINE         reduce using rule 154 (empty -> .)
    puts            reduce using rule 154 (empty -> .)
    print           reduce using rule 154 (empty -> .)
    break           reduce using rule 154 (empty -> .)
    def             reduce using rule 154 (empty -> .)
    if              reduce using rule 154 (empty -> .)
    while           reduce using rule 154 (empty -> .)
    case            reduce using rule 154 (empty -> .)
    for             reduce using rule 154 (empty -> .)
    return          reduce using rule 154 (empty -> .)
    IDENTIFIER      reduce using rule 154 (empty -> .)
    nil             reduce using rule 154 (empty -> .)
    self            reduce using rule 154 (empty -> .)
    GLOBAL          reduce using rule 154 (empty -> .)
    AT_THE_RATE     reduce using rule 154 (empty -> .)
    MINUS           reduce using rule 154 (empty -> .)
    PLUS            reduce using rule 154 (empty -> .)
    OPEN_BRACKET    reduce using rule 154 (empty -> .)
    Array           reduce using rule 154 (empty -> .)
    NUMBER          reduce using rule 154 (empty -> .)
    FLOAT           reduce using rule 154 (empty -> .)
    STRING          reduce using rule 154 (empty -> .)
    true            reduce using rule 154 (empty -> .)
    false           reduce using rule 154 (empty -> .)
    $end            reduce using rule 154 (empty -> .)
    then            reduce using rule 154 (empty -> .)

    M_1                            shift and go to state 262
    empty                          shift and go to state 74

state 255

    (20) expr -> case expr1 M_1 newline multcase end M_1 .

    SEMI_COLON      reduce using rule 20 (expr -> case expr1 M_1 newline multcase end M_1 .)
    NEWLINE         reduce using rule 20 (expr -> case expr1 M_1 newline multcase end M_1 .)
    puts            reduce using rule 20 (expr -> case expr1 M_1 newline multcase end M_1 .)
    print           reduce using rule 20 (expr -> case expr1 M_1 newline multcase end M_1 .)
    break           reduce using rule 20 (expr -> case expr1 M_1 newline multcase end M_1 .)
    def             reduce using rule 20 (expr -> case expr1 M_1 newline multcase end M_1 .)
    if              reduce using rule 20 (expr -> case expr1 M_1 newline multcase end M_1 .)
    while           reduce using rule 20 (expr -> case expr1 M_1 newline multcase end M_1 .)
    case            reduce using rule 20 (expr -> case expr1 M_1 newline multcase end M_1 .)
    for             reduce using rule 20 (expr -> case expr1 M_1 newline multcase end M_1 .)
    return          reduce using rule 20 (expr -> case expr1 M_1 newline multcase end M_1 .)
    IDENTIFIER      reduce using rule 20 (expr -> case expr1 M_1 newline multcase end M_1 .)
    nil             reduce using rule 20 (expr -> case expr1 M_1 newline multcase end M_1 .)
    self            reduce using rule 20 (expr -> case expr1 M_1 newline multcase end M_1 .)
    GLOBAL          reduce using rule 20 (expr -> case expr1 M_1 newline multcase end M_1 .)
    AT_THE_RATE     reduce using rule 20 (expr -> case expr1 M_1 newline multcase end M_1 .)
    MINUS           reduce using rule 20 (expr -> case expr1 M_1 newline multcase end M_1 .)
    PLUS            reduce using rule 20 (expr -> case expr1 M_1 newline multcase end M_1 .)
    OPEN_BRACKET    reduce using rule 20 (expr -> case expr1 M_1 newline multcase end M_1 .)
    Array           reduce using rule 20 (expr -> case expr1 M_1 newline multcase end M_1 .)
    NUMBER          reduce using rule 20 (expr -> case expr1 M_1 newline multcase end M_1 .)
    FLOAT           reduce using rule 20 (expr -> case expr1 M_1 newline multcase end M_1 .)
    STRING          reduce using rule 20 (expr -> case expr1 M_1 newline multcase end M_1 .)
    true            reduce using rule 20 (expr -> case expr1 M_1 newline multcase end M_1 .)
    false           reduce using rule 20 (expr -> case expr1 M_1 newline multcase end M_1 .)
    $end            reduce using rule 20 (expr -> case expr1 M_1 newline multcase end M_1 .)
    then            reduce using rule 20 (expr -> case expr1 M_1 newline multcase end M_1 .)


state 256

    (89) multcase -> when whenargs pthen . M_1 multstmt M_1 multcase
    (90) multcase -> when whenargs pthen . M_1 multstmt M_1
    (23) M_1 -> . empty
    (154) empty -> .

    puts            reduce using rule 154 (empty -> .)
    print           reduce using rule 154 (empty -> .)
    break           reduce using rule 154 (empty -> .)
    def             reduce using rule 154 (empty -> .)
    if              reduce using rule 154 (empty -> .)
    while           reduce using rule 154 (empty -> .)
    case            reduce using rule 154 (empty -> .)
    for             reduce using rule 154 (empty -> .)
    return          reduce using rule 154 (empty -> .)
    IDENTIFIER      reduce using rule 154 (empty -> .)
    nil             reduce using rule 154 (empty -> .)
    self            reduce using rule 154 (empty -> .)
    GLOBAL          reduce using rule 154 (empty -> .)
    AT_THE_RATE     reduce using rule 154 (empty -> .)
    MINUS           reduce using rule 154 (empty -> .)
    PLUS            reduce using rule 154 (empty -> .)
    OPEN_BRACKET    reduce using rule 154 (empty -> .)
    Array           reduce using rule 154 (empty -> .)
    NUMBER          reduce using rule 154 (empty -> .)
    FLOAT           reduce using rule 154 (empty -> .)
    STRING          reduce using rule 154 (empty -> .)
    true            reduce using rule 154 (empty -> .)
    false           reduce using rule 154 (empty -> .)
    when            reduce using rule 154 (empty -> .)
    end             reduce using rule 154 (empty -> .)

    M_1                            shift and go to state 263
    empty                          shift and go to state 74

state 257

    (21) expr -> for M_1 mlhs in expr1 pdo M_1 . multstmt end M_1
    (14) multstmt -> . stmt newline multstmt
    (15) multstmt -> . empty
    (7) stmt -> . keydef argdecl newline multstmt keyend
    (8) stmt -> . puts OPEN_BRACKET STRING CLOSE_BRACKET
    (9) stmt -> . print OPEN_BRACKET primary CLOSE_BRACKET
    (10) stmt -> . break
    (11) stmt -> . expr
    (154) empty -> .
    (12) keydef -> . def IDENTIFIER
    (16) expr -> . if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
    (17) expr -> . if expr1 pthen M_1 multstmt M_1 multelsif end M_1
    (18) expr -> . if expr1 pthen M_1 multstmt end M_1
    (19) expr -> . while M_1 expr1 pdo M_1 multstmt end M_1
    (20) expr -> . case expr1 M_1 newline multcase end M_1
    (21) expr -> . for M_1 mlhs in expr1 pdo M_1 multstmt end M_1
    (22) expr -> . expr1
    (24) expr1 -> . return IDENTIFIER
    (25) expr1 -> . return
    (26) expr1 -> . expr2
    (27) expr2 -> . arg
    (28) expr2 -> . call
    (32) arg -> . arg BIT_OR term0
    (33) arg -> . term0
    (29) call -> . function
    (34) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (36) term0 -> . term1
    (30) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (31) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (100) mlhs -> . mlhsitem
    (37) term1 -> . mlhs EQUALS mrhs
    (38) term1 -> . mlhs opasgn mrhs
    (39) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arrayal
    (40) term2 -> . term3 INCL_RANGE term3
    (41) term2 -> . term3 EXCL_RANGE term3
    (42) term2 -> . term3
    (85) arrayal -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (43) term3 -> . term3 LOGICAL_OR term4
    (44) term3 -> . term4
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self
    (45) term4 -> . term5 DOUBLE_EQUALS term5
    (46) term4 -> . term5 TRIPLE_EQUALS term5
    (47) term4 -> . term5 NOT_EQUALS term5
    (48) term4 -> . term5 EQUAL_TILDE term5
    (49) term4 -> . term5 BANG_TILDE term5
    (50) term4 -> . term5 COMPARISON term5
    (51) term4 -> . term5
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false

    puts            shift and go to state 10
    print           shift and go to state 13
    break           shift and go to state 15
    end             reduce using rule 154 (empty -> .)
    def             shift and go to state 17
    if              shift and go to state 19
    while           shift and go to state 21
    case            shift and go to state 22
    for             shift and go to state 23
    return          shift and go to state 25
    IDENTIFIER      shift and go to state 18
    nil             shift and go to state 39
    self            shift and go to state 40
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61

    mlhs                           shift and go to state 24
    expr1                          shift and go to state 20
    multstmt                       shift and go to state 264
    stmt                           shift and go to state 183
    empty                          shift and go to state 184
    keydef                         shift and go to state 9
    primary                        shift and go to state 14
    expr                           shift and go to state 16
    expr2                          shift and go to state 26
    arg                            shift and go to state 27
    call                           shift and go to state 28
    term0                          shift and go to state 29
    function                       shift and go to state 30
    term1                          shift and go to state 31
    mlhsitem                       shift and go to state 32
    term2                          shift and go to state 33
    arrayal                        shift and go to state 34
    term3                          shift and go to state 35
    variable                       shift and go to state 36
    term4                          shift and go to state 37
    varname                        shift and go to state 38
    term5                          shift and go to state 41
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56

state 258

    (17) expr -> if expr1 pthen M_1 multstmt M_1 multelsif end . M_1
    (23) M_1 -> . empty
    (154) empty -> .

    SEMI_COLON      reduce using rule 154 (empty -> .)
    NEWLINE         reduce using rule 154 (empty -> .)
    puts            reduce using rule 154 (empty -> .)
    print           reduce using rule 154 (empty -> .)
    break           reduce using rule 154 (empty -> .)
    def             reduce using rule 154 (empty -> .)
    if              reduce using rule 154 (empty -> .)
    while           reduce using rule 154 (empty -> .)
    case            reduce using rule 154 (empty -> .)
    for             reduce using rule 154 (empty -> .)
    return          reduce using rule 154 (empty -> .)
    IDENTIFIER      reduce using rule 154 (empty -> .)
    nil             reduce using rule 154 (empty -> .)
    self            reduce using rule 154 (empty -> .)
    GLOBAL          reduce using rule 154 (empty -> .)
    AT_THE_RATE     reduce using rule 154 (empty -> .)
    MINUS           reduce using rule 154 (empty -> .)
    PLUS            reduce using rule 154 (empty -> .)
    OPEN_BRACKET    reduce using rule 154 (empty -> .)
    Array           reduce using rule 154 (empty -> .)
    NUMBER          reduce using rule 154 (empty -> .)
    FLOAT           reduce using rule 154 (empty -> .)
    STRING          reduce using rule 154 (empty -> .)
    true            reduce using rule 154 (empty -> .)
    false           reduce using rule 154 (empty -> .)
    $end            reduce using rule 154 (empty -> .)
    then            reduce using rule 154 (empty -> .)

    M_1                            shift and go to state 265
    empty                          shift and go to state 74

state 259

    (91) multelsif -> elsif expr . pthen M_1 multstmt M_1 multelsif M_1
    (130) pthen -> . newline
    (131) pthen -> . then
    (132) pthen -> . newline then
    (152) newline -> . SEMI_COLON
    (153) newline -> . NEWLINE

    then            shift and go to state 140
    SEMI_COLON      shift and go to state 6
    NEWLINE         shift and go to state 7

    pthen                          shift and go to state 266
    newline                        shift and go to state 139

state 260

    (92) multelsif -> else newline . multstmt
    (14) multstmt -> . stmt newline multstmt
    (15) multstmt -> . empty
    (7) stmt -> . keydef argdecl newline multstmt keyend
    (8) stmt -> . puts OPEN_BRACKET STRING CLOSE_BRACKET
    (9) stmt -> . print OPEN_BRACKET primary CLOSE_BRACKET
    (10) stmt -> . break
    (11) stmt -> . expr
    (154) empty -> .
    (12) keydef -> . def IDENTIFIER
    (16) expr -> . if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
    (17) expr -> . if expr1 pthen M_1 multstmt M_1 multelsif end M_1
    (18) expr -> . if expr1 pthen M_1 multstmt end M_1
    (19) expr -> . while M_1 expr1 pdo M_1 multstmt end M_1
    (20) expr -> . case expr1 M_1 newline multcase end M_1
    (21) expr -> . for M_1 mlhs in expr1 pdo M_1 multstmt end M_1
    (22) expr -> . expr1
    (24) expr1 -> . return IDENTIFIER
    (25) expr1 -> . return
    (26) expr1 -> . expr2
    (27) expr2 -> . arg
    (28) expr2 -> . call
    (32) arg -> . arg BIT_OR term0
    (33) arg -> . term0
    (29) call -> . function
    (34) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (36) term0 -> . term1
    (30) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (31) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (100) mlhs -> . mlhsitem
    (37) term1 -> . mlhs EQUALS mrhs
    (38) term1 -> . mlhs opasgn mrhs
    (39) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arrayal
    (40) term2 -> . term3 INCL_RANGE term3
    (41) term2 -> . term3 EXCL_RANGE term3
    (42) term2 -> . term3
    (85) arrayal -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (43) term3 -> . term3 LOGICAL_OR term4
    (44) term3 -> . term4
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self
    (45) term4 -> . term5 DOUBLE_EQUALS term5
    (46) term4 -> . term5 TRIPLE_EQUALS term5
    (47) term4 -> . term5 NOT_EQUALS term5
    (48) term4 -> . term5 EQUAL_TILDE term5
    (49) term4 -> . term5 BANG_TILDE term5
    (50) term4 -> . term5 COMPARISON term5
    (51) term4 -> . term5
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false

    puts            shift and go to state 10
    print           shift and go to state 13
    break           shift and go to state 15
    end             reduce using rule 154 (empty -> .)
    def             shift and go to state 17
    if              shift and go to state 19
    while           shift and go to state 21
    case            shift and go to state 22
    for             shift and go to state 23
    return          shift and go to state 25
    IDENTIFIER      shift and go to state 18
    nil             shift and go to state 39
    self            shift and go to state 40
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61

    multstmt                       shift and go to state 267
    stmt                           shift and go to state 183
    empty                          shift and go to state 184
    keydef                         shift and go to state 9
    primary                        shift and go to state 14
    expr                           shift and go to state 16
    expr1                          shift and go to state 20
    mlhs                           shift and go to state 24
    expr2                          shift and go to state 26
    arg                            shift and go to state 27
    call                           shift and go to state 28
    term0                          shift and go to state 29
    function                       shift and go to state 30
    term1                          shift and go to state 31
    mlhsitem                       shift and go to state 32
    term2                          shift and go to state 33
    arrayal                        shift and go to state 34
    term3                          shift and go to state 35
    variable                       shift and go to state 36
    term4                          shift and go to state 37
    varname                        shift and go to state 38
    term5                          shift and go to state 41
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56

state 261

    (16) expr -> if expr1 pthen M_1 multstmt else newline M_1 . multstmt end M_1
    (14) multstmt -> . stmt newline multstmt
    (15) multstmt -> . empty
    (7) stmt -> . keydef argdecl newline multstmt keyend
    (8) stmt -> . puts OPEN_BRACKET STRING CLOSE_BRACKET
    (9) stmt -> . print OPEN_BRACKET primary CLOSE_BRACKET
    (10) stmt -> . break
    (11) stmt -> . expr
    (154) empty -> .
    (12) keydef -> . def IDENTIFIER
    (16) expr -> . if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
    (17) expr -> . if expr1 pthen M_1 multstmt M_1 multelsif end M_1
    (18) expr -> . if expr1 pthen M_1 multstmt end M_1
    (19) expr -> . while M_1 expr1 pdo M_1 multstmt end M_1
    (20) expr -> . case expr1 M_1 newline multcase end M_1
    (21) expr -> . for M_1 mlhs in expr1 pdo M_1 multstmt end M_1
    (22) expr -> . expr1
    (24) expr1 -> . return IDENTIFIER
    (25) expr1 -> . return
    (26) expr1 -> . expr2
    (27) expr2 -> . arg
    (28) expr2 -> . call
    (32) arg -> . arg BIT_OR term0
    (33) arg -> . term0
    (29) call -> . function
    (34) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (36) term0 -> . term1
    (30) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (31) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (100) mlhs -> . mlhsitem
    (37) term1 -> . mlhs EQUALS mrhs
    (38) term1 -> . mlhs opasgn mrhs
    (39) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arrayal
    (40) term2 -> . term3 INCL_RANGE term3
    (41) term2 -> . term3 EXCL_RANGE term3
    (42) term2 -> . term3
    (85) arrayal -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (43) term3 -> . term3 LOGICAL_OR term4
    (44) term3 -> . term4
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self
    (45) term4 -> . term5 DOUBLE_EQUALS term5
    (46) term4 -> . term5 TRIPLE_EQUALS term5
    (47) term4 -> . term5 NOT_EQUALS term5
    (48) term4 -> . term5 EQUAL_TILDE term5
    (49) term4 -> . term5 BANG_TILDE term5
    (50) term4 -> . term5 COMPARISON term5
    (51) term4 -> . term5
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false

    puts            shift and go to state 10
    print           shift and go to state 13
    break           shift and go to state 15
    end             reduce using rule 154 (empty -> .)
    def             shift and go to state 17
    if              shift and go to state 19
    while           shift and go to state 21
    case            shift and go to state 22
    for             shift and go to state 23
    return          shift and go to state 25
    IDENTIFIER      shift and go to state 18
    nil             shift and go to state 39
    self            shift and go to state 40
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61

    expr1                          shift and go to state 20
    multstmt                       shift and go to state 268
    stmt                           shift and go to state 183
    empty                          shift and go to state 184
    keydef                         shift and go to state 9
    primary                        shift and go to state 14
    expr                           shift and go to state 16
    mlhs                           shift and go to state 24
    expr2                          shift and go to state 26
    arg                            shift and go to state 27
    call                           shift and go to state 28
    term0                          shift and go to state 29
    function                       shift and go to state 30
    term1                          shift and go to state 31
    mlhsitem                       shift and go to state 32
    term2                          shift and go to state 33
    arrayal                        shift and go to state 34
    term3                          shift and go to state 35
    variable                       shift and go to state 36
    term4                          shift and go to state 37
    varname                        shift and go to state 38
    term5                          shift and go to state 41
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56

state 262

    (19) expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .

    SEMI_COLON      reduce using rule 19 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    NEWLINE         reduce using rule 19 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    puts            reduce using rule 19 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    print           reduce using rule 19 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    break           reduce using rule 19 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    def             reduce using rule 19 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    if              reduce using rule 19 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    while           reduce using rule 19 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    case            reduce using rule 19 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    for             reduce using rule 19 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    return          reduce using rule 19 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    IDENTIFIER      reduce using rule 19 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    nil             reduce using rule 19 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    self            reduce using rule 19 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    GLOBAL          reduce using rule 19 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    AT_THE_RATE     reduce using rule 19 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    MINUS           reduce using rule 19 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    PLUS            reduce using rule 19 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    OPEN_BRACKET    reduce using rule 19 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    Array           reduce using rule 19 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    NUMBER          reduce using rule 19 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    FLOAT           reduce using rule 19 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    STRING          reduce using rule 19 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    true            reduce using rule 19 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    false           reduce using rule 19 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    $end            reduce using rule 19 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)
    then            reduce using rule 19 (expr -> while M_1 expr1 pdo M_1 multstmt end M_1 .)


state 263

    (89) multcase -> when whenargs pthen M_1 . multstmt M_1 multcase
    (90) multcase -> when whenargs pthen M_1 . multstmt M_1
    (14) multstmt -> . stmt newline multstmt
    (15) multstmt -> . empty
    (7) stmt -> . keydef argdecl newline multstmt keyend
    (8) stmt -> . puts OPEN_BRACKET STRING CLOSE_BRACKET
    (9) stmt -> . print OPEN_BRACKET primary CLOSE_BRACKET
    (10) stmt -> . break
    (11) stmt -> . expr
    (154) empty -> .
    (12) keydef -> . def IDENTIFIER
    (16) expr -> . if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
    (17) expr -> . if expr1 pthen M_1 multstmt M_1 multelsif end M_1
    (18) expr -> . if expr1 pthen M_1 multstmt end M_1
    (19) expr -> . while M_1 expr1 pdo M_1 multstmt end M_1
    (20) expr -> . case expr1 M_1 newline multcase end M_1
    (21) expr -> . for M_1 mlhs in expr1 pdo M_1 multstmt end M_1
    (22) expr -> . expr1
    (24) expr1 -> . return IDENTIFIER
    (25) expr1 -> . return
    (26) expr1 -> . expr2
    (27) expr2 -> . arg
    (28) expr2 -> . call
    (32) arg -> . arg BIT_OR term0
    (33) arg -> . term0
    (29) call -> . function
    (34) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (36) term0 -> . term1
    (30) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (31) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (100) mlhs -> . mlhsitem
    (37) term1 -> . mlhs EQUALS mrhs
    (38) term1 -> . mlhs opasgn mrhs
    (39) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arrayal
    (40) term2 -> . term3 INCL_RANGE term3
    (41) term2 -> . term3 EXCL_RANGE term3
    (42) term2 -> . term3
    (85) arrayal -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (43) term3 -> . term3 LOGICAL_OR term4
    (44) term3 -> . term4
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self
    (45) term4 -> . term5 DOUBLE_EQUALS term5
    (46) term4 -> . term5 TRIPLE_EQUALS term5
    (47) term4 -> . term5 NOT_EQUALS term5
    (48) term4 -> . term5 EQUAL_TILDE term5
    (49) term4 -> . term5 BANG_TILDE term5
    (50) term4 -> . term5 COMPARISON term5
    (51) term4 -> . term5
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false

    puts            shift and go to state 10
    print           shift and go to state 13
    break           shift and go to state 15
    when            reduce using rule 154 (empty -> .)
    end             reduce using rule 154 (empty -> .)
    def             shift and go to state 17
    if              shift and go to state 19
    while           shift and go to state 21
    case            shift and go to state 22
    for             shift and go to state 23
    return          shift and go to state 25
    IDENTIFIER      shift and go to state 18
    nil             shift and go to state 39
    self            shift and go to state 40
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61

    multstmt                       shift and go to state 269
    stmt                           shift and go to state 183
    empty                          shift and go to state 184
    keydef                         shift and go to state 9
    primary                        shift and go to state 14
    expr                           shift and go to state 16
    expr1                          shift and go to state 20
    mlhs                           shift and go to state 24
    expr2                          shift and go to state 26
    arg                            shift and go to state 27
    call                           shift and go to state 28
    term0                          shift and go to state 29
    function                       shift and go to state 30
    term1                          shift and go to state 31
    mlhsitem                       shift and go to state 32
    term2                          shift and go to state 33
    arrayal                        shift and go to state 34
    term3                          shift and go to state 35
    variable                       shift and go to state 36
    term4                          shift and go to state 37
    varname                        shift and go to state 38
    term5                          shift and go to state 41
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56

state 264

    (21) expr -> for M_1 mlhs in expr1 pdo M_1 multstmt . end M_1

    end             shift and go to state 270


state 265

    (17) expr -> if expr1 pthen M_1 multstmt M_1 multelsif end M_1 .

    SEMI_COLON      reduce using rule 17 (expr -> if expr1 pthen M_1 multstmt M_1 multelsif end M_1 .)
    NEWLINE         reduce using rule 17 (expr -> if expr1 pthen M_1 multstmt M_1 multelsif end M_1 .)
    puts            reduce using rule 17 (expr -> if expr1 pthen M_1 multstmt M_1 multelsif end M_1 .)
    print           reduce using rule 17 (expr -> if expr1 pthen M_1 multstmt M_1 multelsif end M_1 .)
    break           reduce using rule 17 (expr -> if expr1 pthen M_1 multstmt M_1 multelsif end M_1 .)
    def             reduce using rule 17 (expr -> if expr1 pthen M_1 multstmt M_1 multelsif end M_1 .)
    if              reduce using rule 17 (expr -> if expr1 pthen M_1 multstmt M_1 multelsif end M_1 .)
    while           reduce using rule 17 (expr -> if expr1 pthen M_1 multstmt M_1 multelsif end M_1 .)
    case            reduce using rule 17 (expr -> if expr1 pthen M_1 multstmt M_1 multelsif end M_1 .)
    for             reduce using rule 17 (expr -> if expr1 pthen M_1 multstmt M_1 multelsif end M_1 .)
    return          reduce using rule 17 (expr -> if expr1 pthen M_1 multstmt M_1 multelsif end M_1 .)
    IDENTIFIER      reduce using rule 17 (expr -> if expr1 pthen M_1 multstmt M_1 multelsif end M_1 .)
    nil             reduce using rule 17 (expr -> if expr1 pthen M_1 multstmt M_1 multelsif end M_1 .)
    self            reduce using rule 17 (expr -> if expr1 pthen M_1 multstmt M_1 multelsif end M_1 .)
    GLOBAL          reduce using rule 17 (expr -> if expr1 pthen M_1 multstmt M_1 multelsif end M_1 .)
    AT_THE_RATE     reduce using rule 17 (expr -> if expr1 pthen M_1 multstmt M_1 multelsif end M_1 .)
    MINUS           reduce using rule 17 (expr -> if expr1 pthen M_1 multstmt M_1 multelsif end M_1 .)
    PLUS            reduce using rule 17 (expr -> if expr1 pthen M_1 multstmt M_1 multelsif end M_1 .)
    OPEN_BRACKET    reduce using rule 17 (expr -> if expr1 pthen M_1 multstmt M_1 multelsif end M_1 .)
    Array           reduce using rule 17 (expr -> if expr1 pthen M_1 multstmt M_1 multelsif end M_1 .)
    NUMBER          reduce using rule 17 (expr -> if expr1 pthen M_1 multstmt M_1 multelsif end M_1 .)
    FLOAT           reduce using rule 17 (expr -> if expr1 pthen M_1 multstmt M_1 multelsif end M_1 .)
    STRING          reduce using rule 17 (expr -> if expr1 pthen M_1 multstmt M_1 multelsif end M_1 .)
    true            reduce using rule 17 (expr -> if expr1 pthen M_1 multstmt M_1 multelsif end M_1 .)
    false           reduce using rule 17 (expr -> if expr1 pthen M_1 multstmt M_1 multelsif end M_1 .)
    $end            reduce using rule 17 (expr -> if expr1 pthen M_1 multstmt M_1 multelsif end M_1 .)
    then            reduce using rule 17 (expr -> if expr1 pthen M_1 multstmt M_1 multelsif end M_1 .)


state 266

    (91) multelsif -> elsif expr pthen . M_1 multstmt M_1 multelsif M_1
    (23) M_1 -> . empty
    (154) empty -> .

    puts            reduce using rule 154 (empty -> .)
    print           reduce using rule 154 (empty -> .)
    break           reduce using rule 154 (empty -> .)
    def             reduce using rule 154 (empty -> .)
    if              reduce using rule 154 (empty -> .)
    while           reduce using rule 154 (empty -> .)
    case            reduce using rule 154 (empty -> .)
    for             reduce using rule 154 (empty -> .)
    return          reduce using rule 154 (empty -> .)
    IDENTIFIER      reduce using rule 154 (empty -> .)
    nil             reduce using rule 154 (empty -> .)
    self            reduce using rule 154 (empty -> .)
    GLOBAL          reduce using rule 154 (empty -> .)
    AT_THE_RATE     reduce using rule 154 (empty -> .)
    MINUS           reduce using rule 154 (empty -> .)
    PLUS            reduce using rule 154 (empty -> .)
    OPEN_BRACKET    reduce using rule 154 (empty -> .)
    Array           reduce using rule 154 (empty -> .)
    NUMBER          reduce using rule 154 (empty -> .)
    FLOAT           reduce using rule 154 (empty -> .)
    STRING          reduce using rule 154 (empty -> .)
    true            reduce using rule 154 (empty -> .)
    false           reduce using rule 154 (empty -> .)
    elsif           reduce using rule 154 (empty -> .)
    else            reduce using rule 154 (empty -> .)
    end             reduce using rule 154 (empty -> .)

    M_1                            shift and go to state 271
    empty                          shift and go to state 74

state 267

    (92) multelsif -> else newline multstmt .

    end             reduce using rule 92 (multelsif -> else newline multstmt .)


state 268

    (16) expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt . end M_1

    end             shift and go to state 272


state 269

    (89) multcase -> when whenargs pthen M_1 multstmt . M_1 multcase
    (90) multcase -> when whenargs pthen M_1 multstmt . M_1
    (23) M_1 -> . empty
    (154) empty -> .

    when            reduce using rule 154 (empty -> .)
    end             reduce using rule 154 (empty -> .)

    M_1                            shift and go to state 273
    empty                          shift and go to state 74

state 270

    (21) expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end . M_1
    (23) M_1 -> . empty
    (154) empty -> .

    SEMI_COLON      reduce using rule 154 (empty -> .)
    NEWLINE         reduce using rule 154 (empty -> .)
    puts            reduce using rule 154 (empty -> .)
    print           reduce using rule 154 (empty -> .)
    break           reduce using rule 154 (empty -> .)
    def             reduce using rule 154 (empty -> .)
    if              reduce using rule 154 (empty -> .)
    while           reduce using rule 154 (empty -> .)
    case            reduce using rule 154 (empty -> .)
    for             reduce using rule 154 (empty -> .)
    return          reduce using rule 154 (empty -> .)
    IDENTIFIER      reduce using rule 154 (empty -> .)
    nil             reduce using rule 154 (empty -> .)
    self            reduce using rule 154 (empty -> .)
    GLOBAL          reduce using rule 154 (empty -> .)
    AT_THE_RATE     reduce using rule 154 (empty -> .)
    MINUS           reduce using rule 154 (empty -> .)
    PLUS            reduce using rule 154 (empty -> .)
    OPEN_BRACKET    reduce using rule 154 (empty -> .)
    Array           reduce using rule 154 (empty -> .)
    NUMBER          reduce using rule 154 (empty -> .)
    FLOAT           reduce using rule 154 (empty -> .)
    STRING          reduce using rule 154 (empty -> .)
    true            reduce using rule 154 (empty -> .)
    false           reduce using rule 154 (empty -> .)
    $end            reduce using rule 154 (empty -> .)
    then            reduce using rule 154 (empty -> .)

    M_1                            shift and go to state 274
    empty                          shift and go to state 74

state 271

    (91) multelsif -> elsif expr pthen M_1 . multstmt M_1 multelsif M_1
    (14) multstmt -> . stmt newline multstmt
    (15) multstmt -> . empty
    (7) stmt -> . keydef argdecl newline multstmt keyend
    (8) stmt -> . puts OPEN_BRACKET STRING CLOSE_BRACKET
    (9) stmt -> . print OPEN_BRACKET primary CLOSE_BRACKET
    (10) stmt -> . break
    (11) stmt -> . expr
    (154) empty -> .
    (12) keydef -> . def IDENTIFIER
    (16) expr -> . if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1
    (17) expr -> . if expr1 pthen M_1 multstmt M_1 multelsif end M_1
    (18) expr -> . if expr1 pthen M_1 multstmt end M_1
    (19) expr -> . while M_1 expr1 pdo M_1 multstmt end M_1
    (20) expr -> . case expr1 M_1 newline multcase end M_1
    (21) expr -> . for M_1 mlhs in expr1 pdo M_1 multstmt end M_1
    (22) expr -> . expr1
    (24) expr1 -> . return IDENTIFIER
    (25) expr1 -> . return
    (26) expr1 -> . expr2
    (27) expr2 -> . arg
    (28) expr2 -> . call
    (32) arg -> . arg BIT_OR term0
    (33) arg -> . term0
    (29) call -> . function
    (34) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (35) term0 -> . mlhs EQUALS IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (36) term0 -> . term1
    (30) function -> . IDENTIFIER OPEN_BRACKET callargs CLOSE_BRACKET
    (31) function -> . IDENTIFIER OPEN_BRACKET CLOSE_BRACKET
    (100) mlhs -> . mlhsitem
    (37) term1 -> . mlhs EQUALS mrhs
    (38) term1 -> . mlhs opasgn mrhs
    (39) term1 -> . term2
    (101) mlhsitem -> . IDENTIFIER
    (102) mlhsitem -> . arrayal
    (40) term2 -> . term3 INCL_RANGE term3
    (41) term2 -> . term3 EXCL_RANGE term3
    (42) term2 -> . term3
    (85) arrayal -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (43) term3 -> . term3 LOGICAL_OR term4
    (44) term3 -> . term4
    (127) variable -> . varname
    (128) variable -> . nil
    (129) variable -> . self
    (45) term4 -> . term5 DOUBLE_EQUALS term5
    (46) term4 -> . term5 TRIPLE_EQUALS term5
    (47) term4 -> . term5 NOT_EQUALS term5
    (48) term4 -> . term5 EQUAL_TILDE term5
    (49) term4 -> . term5 BANG_TILDE term5
    (50) term4 -> . term5 COMPARISON term5
    (51) term4 -> . term5
    (149) varname -> . GLOBAL
    (150) varname -> . AT_THE_RATE IDENTIFIER
    (151) varname -> . IDENTIFIER
    (52) term5 -> . term5 LESS term6
    (53) term5 -> . term5 LESS_EQUALS term6
    (54) term5 -> . term5 GREATER term6
    (55) term5 -> . term5 GREATER_EQUALS term6
    (56) term5 -> . term6
    (57) term6 -> . term6 BIT_XOR term7
    (58) term6 -> . term7
    (59) term7 -> . term7 BIT_AND term8
    (60) term7 -> . term8
    (61) term8 -> . term8 LEFT_SHIFT term9
    (62) term8 -> . term8 RIGHT_SHIFT term9
    (63) term8 -> . term9
    (64) term9 -> . term9 PLUS term10
    (65) term9 -> . term9 MINUS term10
    (66) term9 -> . term10
    (67) term10 -> . term10 MULTIPLY term11
    (68) term10 -> . term10 DIVIDE term11
    (69) term10 -> . term10 MODULO term11
    (70) term10 -> . term11
    (71) term11 -> . MINUS term11
    (72) term11 -> . term12
    (73) term12 -> . PLUS term12
    (74) term12 -> . term13
    (75) term13 -> . primary POWER term13
    (76) term13 -> . primary
    (77) primary -> . OPEN_BRACKET expr2 CLOSE_BRACKET
    (78) primary -> . arrayd
    (79) primary -> . arraya
    (80) primary -> . literal
    (81) primary -> . varname
    (82) arrayd -> . Array OPEN_BRACKET array_size CLOSE_BRACKET
    (86) arraya -> . variable OPEN_SQUARE array_args CLOSE_SQUARE
    (94) literal -> . NUMBER
    (95) literal -> . FLOAT
    (96) literal -> . STRING
    (97) literal -> . true
    (98) literal -> . false

    puts            shift and go to state 10
    print           shift and go to state 13
    break           shift and go to state 15
    elsif           reduce using rule 154 (empty -> .)
    else            reduce using rule 154 (empty -> .)
    end             reduce using rule 154 (empty -> .)
    def             shift and go to state 17
    if              shift and go to state 19
    while           shift and go to state 21
    case            shift and go to state 22
    for             shift and go to state 23
    return          shift and go to state 25
    IDENTIFIER      shift and go to state 18
    nil             shift and go to state 39
    self            shift and go to state 40
    GLOBAL          shift and go to state 42
    AT_THE_RATE     shift and go to state 43
    MINUS           shift and go to state 50
    PLUS            shift and go to state 48
    OPEN_BRACKET    shift and go to state 11
    Array           shift and go to state 57
    NUMBER          shift and go to state 58
    FLOAT           shift and go to state 59
    STRING          shift and go to state 12
    true            shift and go to state 60
    false           shift and go to state 61

    expr                           shift and go to state 16
    multstmt                       shift and go to state 275
    stmt                           shift and go to state 183
    empty                          shift and go to state 184
    keydef                         shift and go to state 9
    primary                        shift and go to state 14
    expr1                          shift and go to state 20
    mlhs                           shift and go to state 24
    expr2                          shift and go to state 26
    arg                            shift and go to state 27
    call                           shift and go to state 28
    term0                          shift and go to state 29
    function                       shift and go to state 30
    term1                          shift and go to state 31
    mlhsitem                       shift and go to state 32
    term2                          shift and go to state 33
    arrayal                        shift and go to state 34
    term3                          shift and go to state 35
    variable                       shift and go to state 36
    term4                          shift and go to state 37
    varname                        shift and go to state 38
    term5                          shift and go to state 41
    term6                          shift and go to state 44
    term7                          shift and go to state 45
    term8                          shift and go to state 46
    term9                          shift and go to state 47
    term10                         shift and go to state 49
    term11                         shift and go to state 51
    term12                         shift and go to state 52
    term13                         shift and go to state 53
    arrayd                         shift and go to state 54
    arraya                         shift and go to state 55
    literal                        shift and go to state 56

state 272

    (16) expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end . M_1
    (23) M_1 -> . empty
    (154) empty -> .

    SEMI_COLON      reduce using rule 154 (empty -> .)
    NEWLINE         reduce using rule 154 (empty -> .)
    puts            reduce using rule 154 (empty -> .)
    print           reduce using rule 154 (empty -> .)
    break           reduce using rule 154 (empty -> .)
    def             reduce using rule 154 (empty -> .)
    if              reduce using rule 154 (empty -> .)
    while           reduce using rule 154 (empty -> .)
    case            reduce using rule 154 (empty -> .)
    for             reduce using rule 154 (empty -> .)
    return          reduce using rule 154 (empty -> .)
    IDENTIFIER      reduce using rule 154 (empty -> .)
    nil             reduce using rule 154 (empty -> .)
    self            reduce using rule 154 (empty -> .)
    GLOBAL          reduce using rule 154 (empty -> .)
    AT_THE_RATE     reduce using rule 154 (empty -> .)
    MINUS           reduce using rule 154 (empty -> .)
    PLUS            reduce using rule 154 (empty -> .)
    OPEN_BRACKET    reduce using rule 154 (empty -> .)
    Array           reduce using rule 154 (empty -> .)
    NUMBER          reduce using rule 154 (empty -> .)
    FLOAT           reduce using rule 154 (empty -> .)
    STRING          reduce using rule 154 (empty -> .)
    true            reduce using rule 154 (empty -> .)
    false           reduce using rule 154 (empty -> .)
    $end            reduce using rule 154 (empty -> .)
    then            reduce using rule 154 (empty -> .)

    M_1                            shift and go to state 276
    empty                          shift and go to state 74

state 273

    (89) multcase -> when whenargs pthen M_1 multstmt M_1 . multcase
    (90) multcase -> when whenargs pthen M_1 multstmt M_1 .
    (89) multcase -> . when whenargs pthen M_1 multstmt M_1 multcase
    (90) multcase -> . when whenargs pthen M_1 multstmt M_1

    end             reduce using rule 90 (multcase -> when whenargs pthen M_1 multstmt M_1 .)
    when            shift and go to state 223

    multcase                       shift and go to state 277

state 274

    (21) expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end M_1 .

    SEMI_COLON      reduce using rule 21 (expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end M_1 .)
    NEWLINE         reduce using rule 21 (expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end M_1 .)
    puts            reduce using rule 21 (expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end M_1 .)
    print           reduce using rule 21 (expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end M_1 .)
    break           reduce using rule 21 (expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end M_1 .)
    def             reduce using rule 21 (expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end M_1 .)
    if              reduce using rule 21 (expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end M_1 .)
    while           reduce using rule 21 (expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end M_1 .)
    case            reduce using rule 21 (expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end M_1 .)
    for             reduce using rule 21 (expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end M_1 .)
    return          reduce using rule 21 (expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end M_1 .)
    IDENTIFIER      reduce using rule 21 (expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end M_1 .)
    nil             reduce using rule 21 (expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end M_1 .)
    self            reduce using rule 21 (expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end M_1 .)
    GLOBAL          reduce using rule 21 (expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end M_1 .)
    AT_THE_RATE     reduce using rule 21 (expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end M_1 .)
    MINUS           reduce using rule 21 (expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end M_1 .)
    PLUS            reduce using rule 21 (expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end M_1 .)
    OPEN_BRACKET    reduce using rule 21 (expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end M_1 .)
    Array           reduce using rule 21 (expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end M_1 .)
    NUMBER          reduce using rule 21 (expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end M_1 .)
    FLOAT           reduce using rule 21 (expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end M_1 .)
    STRING          reduce using rule 21 (expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end M_1 .)
    true            reduce using rule 21 (expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end M_1 .)
    false           reduce using rule 21 (expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end M_1 .)
    $end            reduce using rule 21 (expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end M_1 .)
    then            reduce using rule 21 (expr -> for M_1 mlhs in expr1 pdo M_1 multstmt end M_1 .)


state 275

    (91) multelsif -> elsif expr pthen M_1 multstmt . M_1 multelsif M_1
    (23) M_1 -> . empty
    (154) empty -> .

    elsif           reduce using rule 154 (empty -> .)
    else            reduce using rule 154 (empty -> .)
    end             reduce using rule 154 (empty -> .)

    M_1                            shift and go to state 278
    empty                          shift and go to state 74

state 276

    (16) expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .

    SEMI_COLON      reduce using rule 16 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    NEWLINE         reduce using rule 16 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    puts            reduce using rule 16 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    print           reduce using rule 16 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    break           reduce using rule 16 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    def             reduce using rule 16 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    if              reduce using rule 16 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    while           reduce using rule 16 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    case            reduce using rule 16 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    for             reduce using rule 16 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    return          reduce using rule 16 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    IDENTIFIER      reduce using rule 16 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    nil             reduce using rule 16 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    self            reduce using rule 16 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    GLOBAL          reduce using rule 16 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    AT_THE_RATE     reduce using rule 16 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    MINUS           reduce using rule 16 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    PLUS            reduce using rule 16 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    OPEN_BRACKET    reduce using rule 16 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    Array           reduce using rule 16 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    NUMBER          reduce using rule 16 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    FLOAT           reduce using rule 16 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    STRING          reduce using rule 16 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    true            reduce using rule 16 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    false           reduce using rule 16 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    $end            reduce using rule 16 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)
    then            reduce using rule 16 (expr -> if expr1 pthen M_1 multstmt else newline M_1 multstmt end M_1 .)


state 277

    (89) multcase -> when whenargs pthen M_1 multstmt M_1 multcase .

    end             reduce using rule 89 (multcase -> when whenargs pthen M_1 multstmt M_1 multcase .)


state 278

    (91) multelsif -> elsif expr pthen M_1 multstmt M_1 . multelsif M_1
    (91) multelsif -> . elsif expr pthen M_1 multstmt M_1 multelsif M_1
    (92) multelsif -> . else newline multstmt
    (93) multelsif -> . empty
    (154) empty -> .

    elsif           shift and go to state 249
    else            shift and go to state 250
    end             reduce using rule 154 (empty -> .)

    multelsif                      shift and go to state 279
    empty                          shift and go to state 251

state 279

    (91) multelsif -> elsif expr pthen M_1 multstmt M_1 multelsif . M_1
    (23) M_1 -> . empty
    (154) empty -> .

    end             reduce using rule 154 (empty -> .)

    M_1                            shift and go to state 280
    empty                          shift and go to state 74

state 280

    (91) multelsif -> elsif expr pthen M_1 multstmt M_1 multelsif M_1 .

    end             reduce using rule 91 (multelsif -> elsif expr pthen M_1 multstmt M_1 multelsif M_1 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OPEN_BRACKET in state 18 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 25 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 47 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 47 resolved as shift
WARNING: shift/reduce conflict for CLOSE_BRACKET in state 71 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKET in state 147 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 152 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 172 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 172 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 173 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 173 resolved as shift
WARNING: shift/reduce conflict for CLOSE_BRACKET in state 203 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 205 resolved as shift
WARNING: shift/reduce conflict for else in state 219 resolved as shift
WARNING: shift/reduce conflict for end in state 219 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 229 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 246 resolved as shift
WARNING: reduce/reduce conflict in state 149 resolved using rule (term1 -> term2)
WARNING: rejected rule (mrhs -> term2) in state 149
